# Japanese translations for Spack package.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# Automatically generated, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: maintainers@spack.io\n"
"POT-Creation-Date: 2019-05-27 13:44-0700\n"
"PO-Revision-Date: 2019-09-19 15:59+0900\n"
"Last-Translator: Takahiro OGURA <t-ogura@riken.jp>\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.5.7\n"

# fde44f45d9044cd2a55b1b0261785151
#: ../spack/lib/spack/docs/basic_usage.rst:10
msgid "Basic Usage"
msgstr "基本的な使い方"

# 42a94b535112488b9136b6c5c5c26951
#: ../spack/lib/spack/docs/basic_usage.rst:12
msgid ""
"The ``spack`` command has many *subcommands*.  You'll only need a small "
"subset of them for typical usage."
msgstr ""
"``spack`` コマンドには多くの *サブコマンド* があります。典型的な使い方の場"
"合、その一部を利用することになります。"

# eac30e66b29640d6b313f640e96e9dd4
#: ../spack/lib/spack/docs/basic_usage.rst:15
msgid ""
"Note that Spack colorizes output.  ``less -R`` should be used with Spack to "
"maintain this colorization.  E.g.:"
msgstr ""
"Spackは出力を色付けしています。この出力の色付けを保つため、 ``less -R`` をご"
"利用ください。例:"

# 567aa3f47d4a41ab9e75a681912a07c3
#: ../spack/lib/spack/docs/basic_usage.rst:22
msgid "It is recommended that the following be put in your ``.bashrc`` file:"
msgstr ""
"ご利用中の環境の ``.bashrc`` ファイルに以下を追加することをお勧めします。"

# 0c176f138dbe488f960deecee37778e4
#: ../spack/lib/spack/docs/basic_usage.rst:30
msgid "Listing available packages"
msgstr "利用可能なパッケージの一覧表示"

# 5c6f55440e5b445db06f5dbeb19c0e30
#: ../spack/lib/spack/docs/basic_usage.rst:32
msgid ""
"To install software with Spack, you need to know what software is "
"available.  You can see a list of available package names at the :ref:"
"`package-list` webpage, or using the ``spack list`` command."
msgstr ""
"Spackでインストール可能なソフトウェアの一覧は、 :ref:`package-list` のウェブ"
"ページもしくは、 ``spack list`` コマンドの出力で確認できます。"

# b890c35d475141a0be73dfb83ac64b48
#: ../spack/lib/spack/docs/basic_usage.rst:40
msgid "``spack list``"
msgstr "``spack list``"

# ffbf66c5344d431981257cf9e59eb4b1
#: ../spack/lib/spack/docs/basic_usage.rst:42
msgid ""
"The ``spack list`` command prints out a list of all of the packages Spack "
"can install:"
msgstr ""
"``spack list`` コマンドは、Spackがインストール可能なパッケージの一覧を出力し"
"ます:"

#: ../spack/lib/spack/docs/basic_usage.rst:48
msgid ""
"There are thosands of them, so we've truncated the output above, but you can "
"find a :ref:`full list here <package-list>`. Packages are listed by name in "
"alphabetical order. A pattern to match with no wildcards, ``*`` or ``?``, "
"will be treated as though it started and ended with ``*``, so ``util`` is "
"equivalent to ``*util*``.  All patterns will be treated as case-insensitive. "
"You can also add the ``-d`` to search the description of the package in "
"addition to the name.  Some examples:"
msgstr ""
"出力数が多いため、上記は後半を省略していますが、完全な一覧は  :ref:`full "
"list here <package-list>` で確認できます。パッケージ名のアルファベット順に並"
"べられています。ワイルドカードの ``*`` と ``?`` なしでの一致は、始めと終わり"
"に ``*`` を付けた場合と同じ扱いになります。つまり、 ``util`` は、 ``*util*`` "
"と同等です。"

# 5c07944fff914fa396d86cc18b189c19
#: ../spack/lib/spack/docs/basic_usage.rst:57
msgid "All packages whose names contain \"sql\":"
msgstr "パッケージ名に \"sql\" が含まれるもの:"

# bbb52c5e854a41e4a4f84511c001786d
#: ../spack/lib/spack/docs/basic_usage.rst:61
msgid "All packages whose names or descriptions contain documentation:"
msgstr "名前か説明に \"documentation\" を含むすぺてのパッケージ:"

# 2f252133a4a04774b6bc6c8661edaf9c
#: ../spack/lib/spack/docs/basic_usage.rst:69
msgid "``spack info``"
msgstr "``spack info``"

# 947e71c36d1e4cbd8996df7895f5220c
#: ../spack/lib/spack/docs/basic_usage.rst:71
msgid ""
"To get more information on a particular package from `spack list`, use "
"`spack info`.  Just supply the name of a package:"
msgstr ""
"`spack list` で表示される特定のパッケージについて更に詳細な情報を得たい場"
"合、 `spack info` をご利用ください。パッケージ名をコマンドの後につけてくださ"
"い:"

# d6a6960312fc42108ebe5c101424abed
#: ../spack/lib/spack/docs/basic_usage.rst:76
msgid ""
"Most of the information is self-explanatory.  The *safe versions* are "
"versions that Spack knows the checksum for, and it will use the checksum to "
"verify that these versions download without errors or viruses."
msgstr ""
"多くの情報は一目瞭然でしょう。 *安全なバージョン(safe versions)* はSpackが"
"checksumを認識しているバージョンであり、これらのバージョンがエラーやウィルス"
"なしでダンロード可能なことを確認できます。"

# f0c9c281fc174a329cde8a267e924caa
#: ../spack/lib/spack/docs/basic_usage.rst:81
msgid ""
":ref:`Dependencies <sec-specs>` and :ref:`virtual dependencies <sec-virtual-"
"dependencies>` are described in more detail later."
msgstr ""
":ref:`Dependencies <sec-specs>` と、 :ref:`virtual dependencies <sec-virtual-"
"dependencies>` については後述します。"

# 81b489d2d06f443c98c3032c1f713fc7
#: ../spack/lib/spack/docs/basic_usage.rst:88
msgid "``spack versions``"
msgstr "``spack versions``"

# 82f1a5f63c77468b881e2a459bae1e82
#: ../spack/lib/spack/docs/basic_usage.rst:90
msgid ""
"To see *more* available versions of a package, run ``spack versions``. For "
"example:"
msgstr ""

# 3f6f9b4c30624e9a82606638db55edbe
#: ../spack/lib/spack/docs/basic_usage.rst:95
msgid ""
"There are two sections in the output.  *Safe versions* are versions for "
"which Spack has a checksum on file.  It can verify that these versions are "
"downloaded correctly."
msgstr ""

# 677dcec0688f4f59ae165a66adddba8d
#: ../spack/lib/spack/docs/basic_usage.rst:99
msgid ""
"In many cases, Spack can also show you what versions are available out on "
"the web---these are *remote versions*.  Spack gets this information by "
"scraping it directly from package web pages.  Depending on the package and "
"how its releases are organized, Spack may or may not be able to find remote "
"versions."
msgstr ""

# 74d771d64b65435cb3a0413fcf2e4a9e
#: ../spack/lib/spack/docs/basic_usage.rst:107
msgid "Installing and uninstalling"
msgstr ""

# 98d8b03fd9f34cd0b15918635cc0e6e5
#: ../spack/lib/spack/docs/basic_usage.rst:113
msgid "``spack install``"
msgstr "``spack install``"

# 94e2478a2bd2494bb2b13e2469c57745
#: ../spack/lib/spack/docs/basic_usage.rst:115
msgid ""
"``spack install`` will install any package shown by ``spack list``. For "
"example, To install the latest version of the ``mpileaks`` package, you "
"might type this:"
msgstr ""

# a732ed5e6d3541ea8baeced26c14df3e
#: ../spack/lib/spack/docs/basic_usage.rst:123
msgid ""
"If ``mpileaks`` depends on other packages, Spack will install the "
"dependencies first.  It then fetches the ``mpileaks`` tarball, expands it, "
"verifies that it was downloaded without errors, builds it, and installs it "
"in its own directory under ``$SPACK_ROOT/opt``. You'll see a number of "
"messages from spack, a lot of build output, and a message that the packages "
"is installed:"
msgstr ""

# dbf66b9da07b4ee4a119b404f9ccea81
#: ../spack/lib/spack/docs/basic_usage.rst:150
msgid ""
"The last line, with the ``[+]``, indicates where the package is installed."
msgstr ""

# ccbd4b7631b845188e7d05aaa5a3af71
#: ../spack/lib/spack/docs/basic_usage.rst:155
msgid "Building a specific version"
msgstr ""

# ad8e8a56fab34127b1505fea143387e0
#: ../spack/lib/spack/docs/basic_usage.rst:157
msgid ""
"Spack can also build *specific versions* of a package.  To do this, just add "
"``@`` after the package name, followed by a version:"
msgstr ""

# 04cd2ecf70844a7ca040b2cef889cbed
#: ../spack/lib/spack/docs/basic_usage.rst:164
msgid ""
"Any number of versions of the same package can be installed at once without "
"interfering with each other.  This is good for multi-user sites, as "
"installing a version that one user needs will not disrupt existing "
"installations for other users."
msgstr ""

# d1d15d5a1ea0451ca00b9973e58bc61d
#: ../spack/lib/spack/docs/basic_usage.rst:169
msgid ""
"In addition to different versions, Spack can customize the compiler, compile-"
"time options (variants), compiler flags, and platform (for cross compiles) "
"of an installation.  Spack is unique in that it can also configure the "
"*dependencies* a package is built with.  For example, two configurations of "
"the same version of a package, one built with boost 1.39.0, and the other "
"version built with version 1.43.0, can coexist."
msgstr ""

# a2e4fd8a01ce4ce48bf33b54ce995587
#: ../spack/lib/spack/docs/basic_usage.rst:176
msgid ""
"This can all be done on the command line using the *spec* syntax. Spack "
"calls the descriptor used to refer to a particular package configuration a "
"**spec**.  In the commands above, ``mpileaks`` and ``mpileaks@3.0.4`` are "
"both valid *specs*.  We'll talk more about how you can use them to customize "
"an installation in :ref:`sec-specs`."
msgstr ""

# abe8cdcbf45840adbfad98aaeb8d7faa
#: ../spack/lib/spack/docs/basic_usage.rst:186
msgid "``spack uninstall``"
msgstr "``spack uninstall``"

# c77e11180bd248a1ad676627d50831fb
#: ../spack/lib/spack/docs/basic_usage.rst:188
msgid ""
"To uninstall a package, type ``spack uninstall <package>``.  This will ask "
"the user for confirmation before completely removing the directory in which "
"the package was installed."
msgstr ""

# 34c60b1db53b4c63b0543dddc6cbcc36
#: ../spack/lib/spack/docs/basic_usage.rst:196
msgid ""
"If there are still installed packages that depend on the package to be "
"uninstalled, spack will refuse to uninstall it."
msgstr ""

# 4dce6e03bfd045058f13704d5fb0d64a
#: ../spack/lib/spack/docs/basic_usage.rst:199
msgid ""
"To uninstall a package and every package that depends on it, you may give "
"the ``--dependents`` option."
msgstr ""

# 4cd099408c9b4651bece9ce694e9d3c8
#: ../spack/lib/spack/docs/basic_usage.rst:206
msgid ""
"will display a list of all the packages that depend on ``mpich`` and, upon "
"confirmation, will uninstall them in the right order."
msgstr ""

# d7fea51604f543dd8cf435073a387272
#: ../spack/lib/spack/docs/basic_usage.rst:209
msgid "A command like"
msgstr ""

# 0a98101d8e904859986cec09e704ffba
#: ../spack/lib/spack/docs/basic_usage.rst:215
msgid ""
"may be ambiguous if multiple ``mpich`` configurations are installed. For "
"example, if both ``mpich@3.0.2`` and ``mpich@3.1`` are installed, ``mpich`` "
"could refer to either one. Because it cannot determine which one to "
"uninstall, Spack will ask you either to provide a version number to remove "
"the ambiguity or use the ``--all`` option to uninstall all of the matching "
"packages."
msgstr ""

# b937bd8736a14fc4af6bed52f2b7194b
#: ../spack/lib/spack/docs/basic_usage.rst:222
msgid "You may force uninstall a package with the ``--force`` option"
msgstr ""

# 9583051f3cd04b91ae366666456590cd
#: ../spack/lib/spack/docs/basic_usage.rst:228
msgid ""
"but you risk breaking other installed packages. In general, it is safer to "
"remove dependent packages *before* removing their dependencies or use the "
"``--dependents`` option."
msgstr ""

# 8dfd4fea7b2046c09fc839a9ad70a772
#: ../spack/lib/spack/docs/basic_usage.rst:237
msgid "Non-Downloadable Tarballs"
msgstr ""

# 9bfec9f3f9d74af0b8b0c8682d33b4e5
#: ../spack/lib/spack/docs/basic_usage.rst:239
msgid ""
"The tarballs for some packages cannot be automatically downloaded by Spack.  "
"This could be for a number of reasons:"
msgstr ""

# 5973550e88a144849542e6ca551b3d1f
#: ../spack/lib/spack/docs/basic_usage.rst:242
msgid ""
"The author requires users to manually accept a license agreement before "
"downloading (``jdk`` and ``galahad``)."
msgstr ""

# b039d23aa51b475daa13817d8ec89c7f
#: ../spack/lib/spack/docs/basic_usage.rst:245
msgid ""
"The software is proprietary and cannot be downloaded on the open Internet."
msgstr ""

# 7d4b2d13efaa422a8f05fa4423ffce51
#: ../spack/lib/spack/docs/basic_usage.rst:248
msgid ""
"To install these packages, one must create a mirror and manually add the "
"tarballs in question to it (see :ref:`mirrors`):"
msgstr ""

# 2613e12f411845e09bf778916f5c31c5
#: ../spack/lib/spack/docs/basic_usage.rst:251
msgid ""
"Create a directory for the mirror.  You can create this directory anywhere "
"you like, it does not have to be inside ``~/.spack``:"
msgstr ""

# d04767d49cdc40439bc846f56ab64c4d
#: ../spack/lib/spack/docs/basic_usage.rst:258
msgid "Register the mirror with Spack by creating ``~/.spack/mirrors.yaml``:"
msgstr ""

# e9ca709b6ad84ca78fd244ee88f4da78
#: ../spack/lib/spack/docs/basic_usage.rst:265
msgid ""
"Put your tarballs in it.  Tarballs should be named ``<package>/<package>-"
"<version>.tar.gz``.  For example:"
msgstr ""

# 0d84d430021f4093954d0efd6c0eaa9d
#: ../spack/lib/spack/docs/basic_usage.rst:274
msgid "Install as usual:"
msgstr ""

# d8d0d5c690be4b86a7b115bcb413e9ed
#: ../spack/lib/spack/docs/basic_usage.rst:282
msgid "Seeing installed packages"
msgstr ""

# d89e599c1b634248a0cfef04f94a9326
#: ../spack/lib/spack/docs/basic_usage.rst:284
msgid ""
"We know that ``spack list`` shows you the names of available packages, but "
"how do you figure out which are already installed?"
msgstr ""

# 23ee76f3c8fd4e67b0691e0718205429
#: ../spack/lib/spack/docs/basic_usage.rst:291
msgid "``spack find``"
msgstr "``spack find``"

# baf3e57584fa4bbeafeb96c24e976104
#: ../spack/lib/spack/docs/basic_usage.rst:293
msgid ""
"``spack find`` shows the *specs* of installed packages.  A spec is like a "
"name, but it has a version, compiler, architecture, and build options "
"associated with it.  In spack, you can have many installations of the same "
"package with different specs."
msgstr ""

# 28ec0e5727ea48cc9048315dc71849e0
#: ../spack/lib/spack/docs/basic_usage.rst:298
msgid "Running ``spack find`` with no arguments lists installed packages:"
msgstr ""

# c0de82877c3a4de5840bf75d4806100b
#: ../spack/lib/spack/docs/basic_usage.rst:333
msgid ""
"Packages are divided into groups according to their architecture and "
"compiler.  Within each group, Spack tries to keep the view simple, and only "
"shows the version of installed packages."
msgstr ""

# 61c50d0e3d5b4e2c8e61db868533a5f8
#: ../spack/lib/spack/docs/basic_usage.rst:337
msgid ""
"``spack find`` can filter the package list based on the package name, spec, "
"or a number of properties of their installation status.  For example, "
"missing dependencies of a spec can be shown with ``--missing``, packages "
"which were explicitly installed with ``spack install <package>`` can be "
"singled out with ``--explicit`` and those which have been pulled in only as "
"dependencies with ``--implicit``."
msgstr ""

# aeca3122f1db44638e4b6336428a2491
#: ../spack/lib/spack/docs/basic_usage.rst:344
msgid ""
"In some cases, there may be different configurations of the *same* version "
"of a package installed.  For example, there are two installations of "
"``libdwarf@20130729`` above.  We can look at them in more detail using "
"``spack find --deps``, and by asking only to show ``libdwarf`` packages:"
msgstr ""

# 3963c008f46146dcab5237543dbb768c
#: ../spack/lib/spack/docs/basic_usage.rst:360
msgid ""
"Now we see that the two instances of ``libdwarf`` depend on *different* "
"versions of ``libelf``: 0.8.12 and 0.8.13.  This view can become complicated "
"for packages with many dependencies.  If you just want to know whether two "
"packages' dependencies differ, you can use ``spack find --long``:"
msgstr ""

# 84cdf98491bd43d8a78675d2c36db4e8
#: ../spack/lib/spack/docs/basic_usage.rst:373
msgid ""
"Now the ``libdwarf`` installs have hashes after their names.  These are "
"hashes over all of the dependencies of each package.  If the hashes are the "
"same, then the packages have the same dependency configuration."
msgstr ""

# dba4ebd97a5c470b9c872582235cdaf7
#: ../spack/lib/spack/docs/basic_usage.rst:377
msgid ""
"If you want to know the path where each package is installed, you can use "
"``spack find --paths``:"
msgstr ""

# 5ad8dd91e229474fa769ae07428003a8
#: ../spack/lib/spack/docs/basic_usage.rst:394
msgid ""
"And, finally, you can restrict your search to a particular package by "
"supplying its name:"
msgstr ""

# eb64f02c2570401da848572a3f64b64d
#: ../spack/lib/spack/docs/basic_usage.rst:405
msgid ""
"``spack find`` actually does a lot more than this.  You can use *specs* to "
"query for specific configurations and builds of each package. If you want to "
"find only libelf versions greater than version 0.8.12, you could say:"
msgstr ""

# c865a8325efd433c8e9a0a8177a49ece
#: ../spack/lib/spack/docs/basic_usage.rst:416
msgid ""
"Finding just the versions of libdwarf built with a particular version of "
"libelf would look like this:"
msgstr ""

# 3005aafe0f104034ac10997cdc3369a0
#: ../spack/lib/spack/docs/basic_usage.rst:426
msgid ""
"We can also search for packages that have a certain attribute. For example, "
"``spack find libdwarf +debug`` will show only installations of libdwarf with "
"the 'debug' compile-time option enabled."
msgstr ""

# 1d9a8434febd433786d6ef2683e97493
#: ../spack/lib/spack/docs/basic_usage.rst:430
msgid "The full spec syntax is discussed in detail in :ref:`sec-specs`."
msgstr ""

# 512eb7f2856e4be0891a3797c05f0a83
#: ../spack/lib/spack/docs/basic_usage.rst:436
msgid "Specs & dependencies"
msgstr ""

# b3d6d32b09614ac69df0c5f0a8ba99f2
#: ../spack/lib/spack/docs/basic_usage.rst:438
msgid ""
"We know that ``spack install``, ``spack uninstall``, and other commands take "
"a package name with an optional version specifier.  In Spack, that "
"descriptor is called a *spec*.  Spack uses specs to refer to a particular "
"build configuration (or configurations) of a package. Specs are more than a "
"package name and a version; you can use them to specify the compiler, "
"compiler version, architecture, compile options, and dependency options for "
"a build.  In this section, we'll go over the full syntax of specs."
msgstr ""

# 554a0be52cde40f788974e07c1dfb4ef
#: ../spack/lib/spack/docs/basic_usage.rst:447
msgid "Here is an example of a much longer spec than we've seen thus far:"
msgstr ""

# caa48202c6dc4b8a827a22c53ff05b50
#: ../spack/lib/spack/docs/basic_usage.rst:453
msgid ""
"If provided to ``spack install``, this will install the ``mpileaks`` library "
"at some version between ``1.2`` and ``1.4`` (inclusive), built using ``gcc`` "
"at version 4.7.5 for the Blue Gene/Q architecture, with debug options "
"enabled, and without Qt support.  Additionally, it says to link it with the "
"``callpath`` library (which it depends on), and to build callpath with "
"``gcc`` 4.7.2.  Most specs will not be as complicated as this one, but this "
"is a good example of what is possible with specs."
msgstr ""

# 2f1517a0d10f44589a5bdb53b445eef8
#: ../spack/lib/spack/docs/basic_usage.rst:462
msgid "More formally, a spec consists of the following pieces:"
msgstr ""

# 20bd1707a7df4fa0ae0c598832b4e451
#: ../spack/lib/spack/docs/basic_usage.rst:464
msgid "Package name identifier (``mpileaks`` above)"
msgstr ""

# 75c07bbcca134f23924e56121666a4a3
#: ../spack/lib/spack/docs/basic_usage.rst:465
msgid "``@`` Optional version specifier (``@1.2:1.4``)"
msgstr ""

# 1373dbfb32e6455c918bdb614d912400
#: ../spack/lib/spack/docs/basic_usage.rst:466
msgid ""
"``%`` Optional compiler specifier, with an optional compiler version "
"(``gcc`` or ``gcc@4.7.3``)"
msgstr ""

# 83b4a1d837b34f67bb30720f86a30d7c
#: ../spack/lib/spack/docs/basic_usage.rst:468
msgid ""
"``+`` or ``-`` or ``~`` Optional variant specifiers (``+debug``, ``-qt``, or "
"``~qt``) for boolean variants"
msgstr ""

# 2a02e6da099c41fbaa5a3f7fefe4f9eb
#: ../spack/lib/spack/docs/basic_usage.rst:470
msgid ""
"``name=<value>`` Optional variant specifiers that are not restricted to "
"boolean variants"
msgstr ""

# 33cbbb7167f64f5386ddd7d890bf67bc
#: ../spack/lib/spack/docs/basic_usage.rst:472
msgid ""
"``name=<value>`` Optional compiler flag specifiers. Valid flag names are "
"``cflags``, ``cxxflags``, ``fflags``, ``cppflags``, ``ldflags``, and "
"``ldlibs``."
msgstr ""

# 8ed8acd9838b4fd4a3f1bba36f500bb8
#: ../spack/lib/spack/docs/basic_usage.rst:474
msgid ""
"``target=<value> os=<value>`` Optional architecture specifier "
"(``target=haswell os=CNL10``)"
msgstr ""

# 43cefc4bddf8461e87a65a0d39f61f6f
#: ../spack/lib/spack/docs/basic_usage.rst:476
msgid "``^`` Dependency specs (``^callpath@1.1``)"
msgstr ""

# ccb659924b5b4036845c251ac8f765df
#: ../spack/lib/spack/docs/basic_usage.rst:478
msgid ""
"There are two things to notice here.  The first is that specs are "
"recursively defined.  That is, each dependency after ``^`` is a spec "
"itself.  The second is that everything is optional *except* for the initial "
"package name identifier.  Users can be as vague or as specific as they want "
"about the details of building packages, and this makes spack good for "
"beginners and experts alike."
msgstr ""

# 9465f23792cb41559b1691b6fa815d3e
#: ../spack/lib/spack/docs/basic_usage.rst:485
msgid ""
"To really understand what's going on above, we need to think about how "
"software is structured.  An executable or a library (these are generally the "
"artifacts produced by building software) depends on other libraries in order "
"to run.  We can represent the relationship between a package and its "
"dependencies as a graph.  Here is the full dependency graph for ``mpileaks``:"
msgstr ""

# 87fef2ccd7f440c2a69890bf5e0c2f41
#: ../spack/lib/spack/docs/basic_usage.rst:502
msgid ""
"Each box above is a package and each arrow represents a dependency on some "
"other package.  For example, we say that the package ``mpileaks`` *depends "
"on* ``callpath`` and ``mpich``.  ``mpileaks`` also depends *indirectly* on "
"``dyninst``, ``libdwarf``, and ``libelf``, in that these libraries are "
"dependencies of ``callpath``.  To install ``mpileaks``, Spack has to build "
"all of these packages.  Dependency graphs in Spack have to be acyclic, and "
"the *depends on* relationship is directional, so this is a *directed, "
"acyclic graph* or *DAG*."
msgstr ""

# 7e0f7a64f4ae461ab11e69404794afa1
#: ../spack/lib/spack/docs/basic_usage.rst:511
msgid ""
"The package name identifier in the spec is the root of some dependency DAG, "
"and the DAG itself is implicit.  Spack knows the precise dependencies among "
"packages, but users do not need to know the full DAG structure. Each ``^`` "
"in the full spec refers to some dependency of the root package. Spack will "
"raise an error if you supply a name after ``^`` that the root does not "
"actually depend on (e.g. ``mpileaks ^emacs@23.3``)."
msgstr ""

# 908827ae072b4113b89c566e6f4623ca
#: ../spack/lib/spack/docs/basic_usage.rst:519
msgid ""
"Spack further simplifies things by only allowing one configuration of each "
"package within any single build.  Above, both ``mpileaks`` and ``callpath`` "
"depend on ``mpich``, but ``mpich`` appears only once in the DAG.  You cannot "
"build an ``mpileaks`` version that depends on one version of ``mpich`` *and* "
"on a ``callpath`` version that depends on some *other* version of "
"``mpich``.  In general, such a configuration would likely behave "
"unexpectedly at runtime, and Spack enforces this to ensure a consistent "
"runtime environment."
msgstr ""

# 3cadcb9213cb40eb9492244fbd5ad880
#: ../spack/lib/spack/docs/basic_usage.rst:528
msgid ""
"The point of specs is to abstract this full DAG from Spack users.  If a user "
"does not care about the DAG at all, she can refer to mpileaks by simply "
"writing ``mpileaks``.  If she knows that ``mpileaks`` indirectly uses "
"``dyninst`` and she wants a particular version of ``dyninst``, then she can "
"refer to ``mpileaks ^dyninst@8.1``.  Spack will fill in the rest when it "
"parses the spec; the user only needs to know package names and minimal "
"details about their relationship."
msgstr ""

# 43dd0a6841fc4873aab792ee0e8e1717
#: ../spack/lib/spack/docs/basic_usage.rst:536
msgid ""
"When spack prints out specs, it sorts package names alphabetically to "
"normalize the way they are displayed, but users do not need to worry about "
"this when they write specs.  The only restriction on the order of "
"dependencies within a spec is that they appear *after* the root package.  "
"For example, these two specs represent exactly the same configuration:"
msgstr ""

# 088522ff1981484db169d1164110d636
#: ../spack/lib/spack/docs/basic_usage.rst:548
msgid ""
"You can put all the same modifiers on dependency specs that you would put on "
"the root spec.  That is, you can specify their versions, compilers, "
"variants, and architectures just like any other spec. Specifiers are "
"associated with the nearest package name to their left. For example, above, "
"``@1.1`` and ``%gcc@4.7.2`` associates with the ``callpath`` package, while "
"``@1.2:1.4``, ``%gcc@4.7.5``, ``+debug``, ``-qt``, and ``target=haswell "
"os=CNL10`` all associate with the ``mpileaks`` package."
msgstr ""

# 129af77379334e2585f4bd318c2b9c8e
#: ../spack/lib/spack/docs/basic_usage.rst:556
msgid ""
"In the diagram above, ``mpileaks`` depends on ``mpich`` with an unspecified "
"version, but packages can depend on other packages with *constraints* by "
"adding more specifiers.  For example, ``mpileaks`` could depend on "
"``mpich@1.2:`` if it can only build with version ``1.2`` or higher of "
"``mpich``."
msgstr ""

# e6d8b1dd242643c1adf95c82a8053732
#: ../spack/lib/spack/docs/basic_usage.rst:562
msgid "Below are more details about the specifiers that you can add to specs."
msgstr ""

# 4961bc0406454e4d98c39bc783c5fbd2
#: ../spack/lib/spack/docs/basic_usage.rst:566
msgid "Version specifier"
msgstr ""

# feb63806de264ee7ba2d46f9315dd703
#: ../spack/lib/spack/docs/basic_usage.rst:568
msgid ""
"A version specifier comes somewhere after a package name and starts with "
"``@``.  It can be a single version, e.g. ``@1.0``, ``@3``, or ``@1.2a7``.  "
"Or, it can be a range of versions, such as ``@1.0:1.5`` (all versions "
"between ``1.0`` and ``1.5``, inclusive).  Version ranges can be open, e.g. "
"``:3`` means any version up to and including ``3``. This would include "
"``3.4`` and ``3.4.2``.  ``4.2:`` means any version above and including "
"``4.2``.  Finally, a version specifier can be a set of arbitrary versions, "
"such as ``@1.0,1.5,1.7`` (``1.0``, ``1.5``, or ``1.7``).  When you supply "
"such a specifier to ``spack install``, it constrains the set of versions "
"that Spack will install."
msgstr ""

# 8f31e997221e4ab3a14893a708cfb70d
#: ../spack/lib/spack/docs/basic_usage.rst:579
msgid ""
"If the version spec is not provided, then Spack will choose one according to "
"policies set for the particular spack installation.  If the spec is "
"ambiguous, i.e. it could match multiple versions, Spack will choose a "
"version within the spec's constraints according to policies set for the "
"particular Spack installation."
msgstr ""

# 88a3563877714b1ab599e016b11c438e
#: ../spack/lib/spack/docs/basic_usage.rst:585
msgid ""
"Details about how versions are compared and how Spack determines if one "
"version is less than another are discussed in the developer guide."
msgstr ""

# d53514c951fb4d7ca591252390c3df13
#: ../spack/lib/spack/docs/basic_usage.rst:590
msgid "Compiler specifier"
msgstr ""

# fe48a255019c4630b992c55d0275390f
#: ../spack/lib/spack/docs/basic_usage.rst:592
msgid ""
"A compiler specifier comes somewhere after a package name and starts with ``"
"%``.  It tells Spack what compiler(s) a particular package should be built "
"with.  After the ``%`` should come the name of some registered Spack "
"compiler.  This might include ``gcc``, or ``intel``, but the specific "
"compilers available depend on the site.  You can run ``spack compilers`` to "
"get a list; more on this below."
msgstr ""

# 8f7201fb4ee1433f914e70659111b855
#: ../spack/lib/spack/docs/basic_usage.rst:599
msgid ""
"The compiler spec can be followed by an optional *compiler version*. A "
"compiler version specifier looks exactly like a package version specifier.  "
"Version specifiers will associate with the nearest package name or compiler "
"specifier to their left in the spec."
msgstr ""

# 757938cc1c394c0ebd0d0ca95a2e62d6
#: ../spack/lib/spack/docs/basic_usage.rst:604
msgid ""
"If the compiler spec is omitted, Spack will choose a default compiler based "
"on site policies."
msgstr ""

# #-#-#-#-#  basic_usage.pot (Spack 0.12)  #-#-#-#-#
# 00f63976872843a696e204049bdd7e5f
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# b90964941f004e1bb42363a8e62207a7
# #-#-#-#-#  tutorial_packaging.pot (Spack 0.12)  #-#-#-#-#
# bc233c57b71b46cb8cae7c428057ec30
#: ../spack/lib/spack/docs/basic_usage.rst:612
#: ../spack/lib/spack/docs/packaging_guide.rst:1084
#: ../spack/lib/spack/docs/tutorial_packaging.rst:470
msgid "Variants"
msgstr ""

# 7ce7b43d5020426c9b062a06ba711df0
#: ../spack/lib/spack/docs/basic_usage.rst:614
msgid ""
"Variants are named options associated with a particular package. They are "
"optional, as each package must provide default values for each variant it "
"makes available. Variants can be specified using a flexible parameter syntax "
"``name=<value>``. For example, ``spack install libelf debug=True`` will "
"install libelf build with debug flags. The names of particular variants "
"available for a package depend on what was provided by the package author. "
"``spack info <package>`` will provide information on what build variants are "
"available."
msgstr ""

# f2db3fa0e1974a7b89bb78a85fa5e1c9
#: ../spack/lib/spack/docs/basic_usage.rst:623
msgid ""
"For compatibility with earlier versions, variants which happen to be boolean "
"in nature can be specified by a syntax that represents turning options on "
"and off. For example, in the previous spec we could have supplied ``libelf "
"+debug`` with the same effect of enabling the debug compile time option for "
"the libelf package."
msgstr ""

# c8398d9dcad2455faa72a656c24787a2
#: ../spack/lib/spack/docs/basic_usage.rst:629
msgid ""
"Depending on the package a variant may have any default value.  For "
"``libelf`` here, ``debug`` is ``False`` by default, and we turned it on with "
"``debug=True`` or ``+debug``.  If a variant is ``True`` by default you can "
"turn it off by either adding ``-name`` or ``~name`` to the spec."
msgstr ""

# e345dd4e51594d9facfb79e1fde7f396
#: ../spack/lib/spack/docs/basic_usage.rst:634
msgid ""
"There are two syntaxes here because, depending on context, ``~`` and ``-`` "
"may mean different things.  In most shells, the following will result in the "
"shell performing home directory substitution:"
msgstr ""

# 7784bd1b3d2b46479117a584369faf96
#: ../spack/lib/spack/docs/basic_usage.rst:643
msgid ""
"If there is a user called ``debug``, the ``~`` will be incorrectly "
"expanded.  In this situation, you would want to write ``libelf -debug``.  "
"However, ``-`` can be ambiguous when included after a package name without "
"spaces:"
msgstr ""

# 29754612a803411bbb5f319541fb46b7
#: ../spack/lib/spack/docs/basic_usage.rst:653
msgid ""
"Spack allows the ``-`` character to be part of package names, so the above "
"will be interpreted as a request for the ``mpileaks-debug`` package, not a "
"request for ``mpileaks`` built without ``debug`` options.  In this scenario, "
"you should write ``mpileaks~debug`` to avoid ambiguity."
msgstr ""

# 575b5c84679f4a499e3d88d98bb67a31
#: ../spack/lib/spack/docs/basic_usage.rst:659
msgid ""
"When spack normalizes specs, it prints them out with no spaces boolean "
"variants using the backwards compatibility syntax and uses only ``~`` for "
"disabled boolean variants.  The ``-`` and spaces on the command line are "
"provided for convenience and legibility."
msgstr ""

# #-#-#-#-#  basic_usage.pot (Spack 0.12)  #-#-#-#-#
# e993a43f42214fc8b68fc3d3f669178f
# #-#-#-#-#  tutorial_configuration.pot (Spack 0.12)  #-#-#-#-#
# 742d28b236134ed4acd473c2eeeb7cf9
#: ../spack/lib/spack/docs/basic_usage.rst:666
#: ../spack/lib/spack/docs/tutorial_configuration.rst:275
msgid "Compiler Flags"
msgstr ""

# 079ec45bfc3b4eba9847fa0d3593101c
#: ../spack/lib/spack/docs/basic_usage.rst:668
msgid ""
"Compiler flags are specified using the same syntax as non-boolean variants, "
"but fulfill a different purpose. While the function of a variant is set by "
"the package, compiler flags are used by the compiler wrappers to inject "
"flags into the compile line of the build. Additionally, compiler flags are "
"inherited by dependencies. ``spack install libdwarf cppflags=\"-g\"`` will "
"install both libdwarf and libelf with the ``-g`` flag injected into their "
"compile line."
msgstr ""

# 0c454d11e8dc4cfaa9dd13d093fda5ac
#: ../spack/lib/spack/docs/basic_usage.rst:676
msgid ""
"Notice that the value of the compiler flags must be quoted if it contains "
"any spaces. Any of ``cppflags=-O3``, ``cppflags=\"-O3\"``, ``cppflags='-"
"O3'``, and ``cppflags=\"-O3 -fPIC\"`` are acceptable, but ``cppflags=-O3 -"
"fPIC`` is not. Additionally, if the value of the compiler flags is not the "
"last thing on the line, it must be followed by a space. The commmand ``spack "
"install libelf cppflags=\"-O3\"%intel`` will be interpreted as an attempt to "
"set ``cppflags=\"-O3%intel\"``."
msgstr ""

# 2388921f1df64b60b72e36e30e99971f
#: ../spack/lib/spack/docs/basic_usage.rst:684
msgid ""
"The six compiler flags are injected in the order of implicit make commands "
"in GNU Autotools. If all flags are set, the order is ``$cppflags $cflags|"
"$cxxflags $ldflags <command> $ldlibs`` for C and C++ and ``$fflags $cppflags "
"$ldflags <command> $ldlibs`` for Fortran."
msgstr ""

# 1425ddf87a5a4f8da27ed30f1548c6db
#: ../spack/lib/spack/docs/basic_usage.rst:691
msgid "Compiler environment variables and additional RPATHs"
msgstr ""

# a64f68fcf58f4e1783a7cb43289b47a5
#: ../spack/lib/spack/docs/basic_usage.rst:693
msgid ""
"In the exceptional case a compiler requires setting special environment "
"variables, like an explicit library load path. These can bet set in an extra "
"section in the compiler configuration (the supported environment "
"modification commands are: ``set``, ``unset``, ``append-path``, and "
"``prepend-path``). The user can also specify additional ``RPATHs`` that the "
"compiler will add to all executables generated by that compiler.  This is "
"useful for forcing certain compilers to RPATH their own runtime libraries, "
"so that executables will run without the need to set ``LD_LIBRARY_PATH``."
msgstr ""

# 80bc748f37514ebf89e2ee3037303248
#: ../spack/lib/spack/docs/basic_usage.rst:729
msgid ""
"The section `environment` is interpreted as an ordered dictionary, which "
"means two things. First, environment modification are applied in the order "
"they are specified in the configuration file. Second, you cannot express "
"environment modifications that require mixing different commands, i.e. you "
"cannot `set` one variable, than `prepend-path` to another one, and than "
"again `set` a third one."
msgstr ""

# d1a02282d9b74f55be664ed35c162ae7
#: ../spack/lib/spack/docs/basic_usage.rst:738
msgid "Architecture specifiers"
msgstr ""

# 0e4c683b8b1e4150a0d50187c352ef86
#: ../spack/lib/spack/docs/basic_usage.rst:740
msgid ""
"The architecture can be specified by using the reserved words ``target`` and/"
"or ``os`` (``target=x86-64 os=debian7``). You can also use the triplet form "
"of platform, operating system and processor."
msgstr ""

# 6b1c9ac8163d4f8a95dbf2b02caf6c36
#: ../spack/lib/spack/docs/basic_usage.rst:748
msgid ""
"Users on non-Cray systems won't have to worry about specifying the "
"architecture. Spack will autodetect what kind of operating system is on your "
"machine as well as the processor. For more information on how the "
"architecture can be used on Cray machines, see :ref:`cray-support`"
msgstr ""

# #-#-#-#-#  basic_usage.pot (Spack 0.12)  #-#-#-#-#
# c81588ddf6c14274b07f8b8b59a1d2a0
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# a03e753420024dad85c544f111b7cb9c
#: ../spack/lib/spack/docs/basic_usage.rst:757
#: ../spack/lib/spack/docs/packaging_guide.rst:2252
msgid "Virtual dependencies"
msgstr ""

# 2e9d6fbf53d049a6b19d0187c98f8c98
#: ../spack/lib/spack/docs/basic_usage.rst:759
msgid ""
"The dependence graph for ``mpileaks`` we saw above wasn't *quite* accurate.  "
"``mpileaks`` uses MPI, which is an interface that has many different "
"implementations.  Above, we showed ``mpileaks`` and ``callpath`` depending "
"on ``mpich``, which is one *particular* implementation of MPI.  However, we "
"could build either with another implementation, such as ``openmpi`` or "
"``mvapich``."
msgstr ""

# d073d3206db044478ff55f02010f015a
#: ../spack/lib/spack/docs/basic_usage.rst:766
msgid ""
"Spack represents interfaces like this using *virtual dependencies*. The real "
"dependency DAG for ``mpileaks`` looks like this:"
msgstr ""

# 9bbd6f4333e34c76b045679a72b27458
#: ../spack/lib/spack/docs/basic_usage.rst:780
msgid ""
"Notice that ``mpich`` has now been replaced with ``mpi``. There is no *real* "
"MPI package, but some packages *provide* the MPI interface, and these "
"packages can be substituted in for ``mpi`` when ``mpileaks`` is built."
msgstr ""

# 0cc8f40897fa4f4498bf0e0919bf1c25
#: ../spack/lib/spack/docs/basic_usage.rst:785
msgid ""
"You can see what virtual packages a particular package provides by getting "
"info on it:"
msgstr ""

# f03fd993a4f44cf3ad4589b270fc5774
#: ../spack/lib/spack/docs/basic_usage.rst:790
msgid ""
"Spack is unique in that its virtual packages can be versioned, just like "
"regular packages.  A particular version of a package may provide a "
"particular version of a virtual package, and we can see above that ``mpich`` "
"versions ``1`` and above provide all ``mpi`` interface versions up to ``1``, "
"and ``mpich`` versions ``3`` and above provide ``mpi`` versions up to "
"``3``.  A package can *depend on* a particular version of a virtual package, "
"e.g. if an application needs MPI-2 functions, it can depend on ``mpi@2:`` to "
"indicate that it needs some implementation that provides MPI-2 functions."
msgstr ""

# 65d754cafa084075aafcf84c7218cb5b
#: ../spack/lib/spack/docs/basic_usage.rst:802
msgid "Constraining virtual packages"
msgstr ""

# 47ca7e3b753d4a95b18e6ac89ce28e83
#: ../spack/lib/spack/docs/basic_usage.rst:804
msgid ""
"When installing a package that depends on a virtual package, you can opt to "
"specify the particular provider you want to use, or you can let Spack pick.  "
"For example, if you just type this:"
msgstr ""

# ccaf309ae4644dc89efcf37a1a85f0f7
#: ../spack/lib/spack/docs/basic_usage.rst:812
msgid ""
"Then spack will pick a provider for you according to site policies. If you "
"really want a particular version, say ``mpich``, then you could run this "
"instead:"
msgstr ""

# 6576a878767b493ebfd0275160218fdf
#: ../spack/lib/spack/docs/basic_usage.rst:820
msgid ""
"This forces spack to use some version of ``mpich`` for its implementation.  "
"As always, you can be even more specific and require a particular ``mpich`` "
"version:"
msgstr ""

# 29bdb4f5b3564afe91bb24712f868ddc
#: ../spack/lib/spack/docs/basic_usage.rst:828
msgid ""
"The ``mpileaks`` package in particular only needs MPI-1 commands, so any MPI "
"implementation will do.  If another package depends on ``mpi@2`` and you try "
"to give it an insufficient MPI implementation (e.g., one that provides only "
"``mpi@:1``), then Spack will raise an error.  Likewise, if you try to plug "
"in some package that doesn't provide MPI, Spack will raise an error."
msgstr ""

# 7d7f6a4a95444ded826e434da7e897c6
#: ../spack/lib/spack/docs/basic_usage.rst:837
msgid "Specifying Specs by Hash"
msgstr ""

# 06a637aea39a424fa317a7c1defd131c
#: ../spack/lib/spack/docs/basic_usage.rst:839
msgid ""
"Complicated specs can become cumbersome to enter on the command line, "
"especially when many of the qualifications are necessary to distinguish "
"between similar installs. To avoid this, when referencing an existing spec, "
"Spack allows you to reference specs by their hash. We previously discussed "
"the spec hash that Spack computes. In place of a spec in any command, "
"substitute ``/<hash>`` where ``<hash>`` is any amount from the beginning of "
"a spec hash."
msgstr ""

# 350df0a92698435da01a0e1ffc2ad509
#: ../spack/lib/spack/docs/basic_usage.rst:847
msgid ""
"For example, lets say that you accidentally installed two different "
"``mvapich2`` installations. If you want to uninstall one of them but don't "
"know what the difference is, you can run:"
msgstr ""

# b606743273464303a3cb0ce0422b47c5
#: ../spack/lib/spack/docs/basic_usage.rst:860
msgid "You can then uninstall the latter installation using:"
msgstr ""

# 5322f574ac71422fb501ccf03bf6e73a
#: ../spack/lib/spack/docs/basic_usage.rst:867
msgid ""
"Or, if you want to build with a specific installation as a dependency, you "
"can use:"
msgstr ""

# 9beb3e82b02847bbb44ca3a539933191
#: ../spack/lib/spack/docs/basic_usage.rst:875
msgid ""
"If the given spec hash is sufficiently long as to be unique, Spack will "
"replace the reference with the spec to which it refers. Otherwise, it will "
"prompt for a more qualified hash."
msgstr ""

# 4a6d28ff96104e7293bbcc07aaf2f920
#: ../spack/lib/spack/docs/basic_usage.rst:879
msgid ""
"Note that this will not work to reinstall a dependency uninstalled by "
"``spack uninstall --force``."
msgstr ""

# ff6684c5d50d4c7495ff130f7d311c0c
#: ../spack/lib/spack/docs/basic_usage.rst:886
msgid "``spack providers``"
msgstr ""

# 1d7a8d9e0fe847b39dbde71c01a1cded
#: ../spack/lib/spack/docs/basic_usage.rst:888
msgid ""
"You can see what packages provide a particular virtual package using ``spack "
"providers``.  If you wanted to see what packages provide ``mpi``, you would "
"just run:"
msgstr ""

# a8858afa8c9f40da93d4960d493a8f01
#: ../spack/lib/spack/docs/basic_usage.rst:894
msgid ""
"And if you *only* wanted to see packages that provide MPI-2, you would add a "
"version specifier to the spec:"
msgstr ""

# ec352256b00e40389ca193a0614f0335
#: ../spack/lib/spack/docs/basic_usage.rst:899
msgid ""
"Notice that the package versions that provide insufficient MPI versions are "
"now filtered out."
msgstr ""

# c7d9a2f567a641f0ac8b9f30054bd366
#: ../spack/lib/spack/docs/basic_usage.rst:904
msgid "Extensions & Python support"
msgstr ""

# 6b95351110ad42bfa9b898b4d2351c54
#: ../spack/lib/spack/docs/basic_usage.rst:906
msgid ""
"Spack's installation model assumes that each package will live in its own "
"install prefix.  However, certain packages are typically installed *within* "
"the directory hierarchy of other packages.  For example, modules in "
"interpreted languages like `Python <https://www.python.org>`_ are typically "
"installed in the ``$prefix/lib/python-2.7/site-packages`` directory."
msgstr ""

# 7961b3d0ba1e4b56b181a6d479b4b6b4
#: ../spack/lib/spack/docs/basic_usage.rst:913
msgid ""
"Spack has support for this type of installation as well.  In Spack, a "
"package that can live inside the prefix of another package is called an "
"*extension*.  Suppose you have Python installed like so:"
msgstr ""

# 5877d085e0194f85a3ec11b6ef99638e
#: ../spack/lib/spack/docs/basic_usage.rst:928
msgid "``spack extensions``"
msgstr ""

# b32b6a6ebe49491fa4ee71d179c333c4
#: ../spack/lib/spack/docs/basic_usage.rst:930
msgid "You can find extensions for your Python installation like this:"
msgstr ""

# e32afaae398149b793bf1084a5d298e1
#: ../spack/lib/spack/docs/basic_usage.rst:955
msgid ""
"The extensions are a subset of what's returned by ``spack list``, and they "
"are packages like any other.  They are installed into their own prefixes, "
"and you can see this with ``spack find --paths``:"
msgstr ""

# a1eaef542f444648b20e35dc2844bb0c
#: ../spack/lib/spack/docs/basic_usage.rst:966
msgid ""
"However, even though this package is installed, you cannot use it directly "
"when you run ``python``:"
msgstr ""

# da3708cc9867416884e6a74610f9d1e8
#: ../spack/lib/spack/docs/basic_usage.rst:984
msgid "Using Extensions"
msgstr ""

# e48991dcb9f54877baa2c5b942c36865
#: ../spack/lib/spack/docs/basic_usage.rst:986
msgid ""
"There are three ways to get ``numpy`` working in Python.  The first is to "
"use :ref:`shell-support`.  You can simply ``use`` or ``load`` the module for "
"the extension, and it will be added to the ``PYTHONPATH`` in your current "
"shell."
msgstr ""

# 000709f90036411f99d41f20ebf2e312
#: ../spack/lib/spack/docs/basic_usage.rst:991
msgid "For tcl modules:"
msgstr ""

# 062e386b1eb344d8841355f228fe05da
#: ../spack/lib/spack/docs/basic_usage.rst:998
msgid "or, for dotkit:"
msgstr ""

# e056a0da2736421ba5ce31d0bbfb1e79
#: ../spack/lib/spack/docs/basic_usage.rst:1005
msgid ""
"Now ``import numpy`` will succeed for as long as you keep your current "
"session open."
msgstr ""

# 8cef8320382f4b83b525ae0f3245f3fa
#: ../spack/lib/spack/docs/basic_usage.rst:1010
msgid "Activating Extensions in a View"
msgstr ""

# fcc164363edf4ce3a86279c8b50a45fa
#: ../spack/lib/spack/docs/basic_usage.rst:1012
msgid ""
"The second way to use extensions is to create a view, which merges the "
"python installation along with the extensions into a single prefix. See :ref:"
"`filesystem-views` for a more in-depth description of views and :ref:`cmd-"
"spack-view` for usage of the ``spack view`` command."
msgstr ""

# c531871241f24ce093ebe5734f753b6a
#: ../spack/lib/spack/docs/basic_usage.rst:1019
msgid "Activating Extensions Globally"
msgstr ""

# 946f51192fb0478d85dd4f22c60a5a57
#: ../spack/lib/spack/docs/basic_usage.rst:1021
msgid ""
"As an alternative to creating a merged prefix with Python and its "
"extensions, and prior to support for views, Spack has provided a means to "
"install the extension into the Spack installation prefix for the extendee. "
"This has typically been useful since extendable packages typically search "
"their own installation path for addons by default."
msgstr ""

# 7b70df9fa2f84f7f9aaa8be28b451e97
#: ../spack/lib/spack/docs/basic_usage.rst:1027
msgid "Global activations are performed with the ``spack activate`` command:"
msgstr ""

# a825c4b254b14c4f9d4ac19e25e824ba
#: ../spack/lib/spack/docs/basic_usage.rst:1033
msgid "``spack activate``"
msgstr ""

# 3ff55de2e1e24065baa1b2bdf83b3fd3
#: ../spack/lib/spack/docs/basic_usage.rst:1042
msgid ""
"Several things have happened here.  The user requested that ``py-numpy`` be "
"activated in the ``python`` installation it was built with.  Spack knows "
"that ``py-numpy`` depends on ``py-nose`` and ``py-setuptools``, so it "
"activated those packages first.  Finally, once all dependencies were "
"activated in the ``python`` installation, ``py-numpy`` was activated as well."
msgstr ""

# 4d531a13cf7347a5929b6b4b71fb7965
#: ../spack/lib/spack/docs/basic_usage.rst:1049
msgid ""
"If we run ``spack extensions`` again, we now see the three new packages "
"listed as activated:"
msgstr ""

# 95b215710f104a99b7e8be96569f1b0f
#: ../spack/lib/spack/docs/basic_usage.rst:1077
msgid ""
"Now, when a user runs python, ``numpy`` will be available for import "
"*without* the user having to explicitly loaded.  ``python@2.7.8`` now acts "
"like a system Python installation with ``numpy`` installed inside of it."
msgstr ""

# 53857cefd5604cd1a10b580c7a7ef4f0
#: ../spack/lib/spack/docs/basic_usage.rst:1082
msgid ""
"Spack accomplishes this by symbolically linking the *entire* prefix of the "
"``py-numpy`` into the prefix of the ``python`` package.  To the python "
"interpreter, it looks like ``numpy`` is installed in the ``site-packages`` "
"directory."
msgstr ""

# 311bb35602cb4084ba1897c763bfd864
#: ../spack/lib/spack/docs/basic_usage.rst:1087
msgid ""
"The only limitation of global activation is that you can only have a "
"*single* version of an extension activated at a time.  This is because "
"multiple versions of the same extension would conflict if symbolically "
"linked into the same prefix.  Users who want a different version of a "
"package can still get it by using environment modules or views, but they "
"will have to explicitly load their preferred version."
msgstr ""

# 80e859382320481f840ace5ebebc07a7
#: ../spack/lib/spack/docs/basic_usage.rst:1096
msgid "``spack activate --force``"
msgstr ""

# 395cd4b812e048c1b53877977bbfc538
#: ../spack/lib/spack/docs/basic_usage.rst:1098
msgid ""
"If, for some reason, you want to activate a package *without* its "
"dependencies, you can use ``spack activate --force``:"
msgstr ""

# 8586e8896b094099abe74fba0b0b030f
#: ../spack/lib/spack/docs/basic_usage.rst:1110
msgid "``spack deactivate``"
msgstr ""

# 493df0b25bf340c6949af51e8368193f
#: ../spack/lib/spack/docs/basic_usage.rst:1112
msgid ""
"We've seen how activating an extension can be used to set up a default "
"version of a Python module.  Obviously, you may want to change that at some "
"point.  ``spack deactivate`` is the command for this.  There are several "
"variants:"
msgstr ""

# 84d9a5b9281148b691d2294e0fb03968
#: ../spack/lib/spack/docs/basic_usage.rst:1117
msgid ""
"``spack deactivate <extension>`` will deactivate a single extension.  If "
"another activated extension depends on this one, Spack will warn you and "
"exit with an error."
msgstr ""

# f53bcc17a0f7460986f19b810f9899ff
#: ../spack/lib/spack/docs/basic_usage.rst:1120
msgid ""
"``spack deactivate --force <extension>`` deactivates an extension regardless "
"of packages that depend on it."
msgstr ""

# f2c1c3b7e1744f42bfb735121a3082c3
#: ../spack/lib/spack/docs/basic_usage.rst:1122
msgid ""
"``spack deactivate --all <extension>`` deactivates an extension and all of "
"its dependencies.  Use ``--force`` to disregard dependents."
msgstr ""

# 67e58561b2144079938095f12d3fac70
#: ../spack/lib/spack/docs/basic_usage.rst:1124
msgid ""
"``spack deactivate --all <extendee>`` deactivates *all* activated extensions "
"of a package.  For example, to deactivate *all* python extensions, use:"
msgstr ""

# f87ecc8e96ee4e278022376a4c70f0ff
#: ../spack/lib/spack/docs/basic_usage.rst:1134
msgid "Filesystem requirements"
msgstr ""

# 4f9f00367cd946689e5709711f8168b9
#: ../spack/lib/spack/docs/basic_usage.rst:1136
msgid ""
"By default, Spack needs to be run from a filesystem that supports ``flock`` "
"locking semantics.  Nearly all local filesystems and recent versions of NFS "
"support this, but parallel filesystems or NFS volumes may be configured "
"without ``flock`` support enabled.  You can determine how your filesystems "
"are mounted with ``mount``.  The output for a Lustre filesystem might look "
"like this:"
msgstr ""

# 80c9379e73b145e88ce57f21c4f34eba
#: ../spack/lib/spack/docs/basic_usage.rst:1149
msgid "Note the ``flock`` option on both Lustre mounts."
msgstr ""

# ecb2995540644853b8734c45a45330e3
#: ../spack/lib/spack/docs/basic_usage.rst:1151
msgid ""
"If you do not see this or a similar option for your filesystem, you have a "
"few options. First, you can move your Spack installation to a filesystem "
"that supports locking. Second, you could ask your system administrator to "
"enable ``flock`` for your filesystem."
msgstr ""

# 1f288580c2a84bcba29f528f469bba80
#: ../spack/lib/spack/docs/basic_usage.rst:1156
msgid "If none of those work, you can disable locking in one of two ways:"
msgstr ""

# ea310367b9204f25b0429d19b67de241
#: ../spack/lib/spack/docs/basic_usage.rst:1158
msgid ""
"Run Spack with the ``-L`` or ``--disable-locks`` option to disable locks on "
"a call-by-call basis."
msgstr ""

# 9576d7213013450d88f70182e15564e5
#: ../spack/lib/spack/docs/basic_usage.rst:1160
msgid ""
"Edit :ref:`config.yaml <config-yaml>` and set the ``locks`` option to "
"``false`` to always disable locking."
msgstr ""

# 9c551dd19efa46c08b202c6cdad0a05a
#: ../spack/lib/spack/docs/basic_usage.rst:1165
msgid ""
"If you disable locking, concurrent instances of Spack will have no way to "
"avoid stepping on each other.  You must ensure that there is only **one** "
"instance of Spack running at a time.  Otherwise, Spack may end up with a "
"corrupted database file, or you may not be able to see all installed "
"packages in commands like ``spack find``."
msgstr ""

# ed792bf82d714f25ace56c9296f8aa16
#: ../spack/lib/spack/docs/basic_usage.rst:1171
msgid ""
"If you are unfortunate enough to run into this situation, you may be able to "
"fix it by running ``spack reindex``."
msgstr ""

# 6a8487021cc94524b92ce22f772ab7fb
#: ../spack/lib/spack/docs/basic_usage.rst:1174
msgid "This issue typically manifests with the error below:"
msgstr ""

# 0a9b732ec22b44d090be5f68342e00ae
#: ../spack/lib/spack/docs/basic_usage.rst:1198
msgid "A nicer error message is TBD in future versions of Spack."
msgstr ""

# d801df96fe2249e4a7e6e1e21602bd38
#: ../spack/lib/spack/docs/basic_usage.rst:1203
msgid "Getting Help"
msgstr ""

# b6e98688f31f4468bbf641d9966dd01a
#: ../spack/lib/spack/docs/basic_usage.rst:1209
msgid "``spack help``"
msgstr ""

# 036444f2a8964aee99207c6e2b561ec1
#: ../spack/lib/spack/docs/basic_usage.rst:1211
msgid ""
"If you don't find what you need here, the ``help`` subcommand will print out "
"out a list of *all* of spack's options and subcommands:"
msgstr ""

# 9a906bccb9f0474aa7a4c2501b36c0f4
#: ../spack/lib/spack/docs/basic_usage.rst:1216
msgid ""
"Adding an argument, e.g. ``spack help <subcommand>``, will print out usage "
"information for a particular subcommand:"
msgstr ""

# 5e5305e36594437daa39c43f6189146c
#: ../spack/lib/spack/docs/basic_usage.rst:1221
msgid ""
"Alternately, you can use ``spack --help`` in place of ``spack help``, or "
"``spack <subcommand> --help`` to get help on a particular subcommand."
msgstr ""

# 37232671161840f1ae54c6b4bde00d4e
#: ../spack/lib/spack/docs/binary_caches.rst:10
msgid "Build Caches"
msgstr "ビルドキャシュ"

# 91efbfc498464e33b3ab592f0c1138f7
#: ../spack/lib/spack/docs/binary_caches.rst:12
msgid ""
"Some sites may encourage users to set up their own test environments before "
"carrying out central installations, or some users may prefer to set up these "
"environments on their own motivation. To reduce the load of recompiling "
"otherwise identical package specs in different installations, installed "
"packages can be put into build cache tarballs, uploaded to your Spack mirror "
"and then downloaded and installed by others."
msgstr ""

# 8941813a015d4a3a93b340aaaf35289d
#: ../spack/lib/spack/docs/binary_caches.rst:22
msgid "Creating build cache files"
msgstr ""

# 06dd052e95e64d9180c3210bacac746e
#: ../spack/lib/spack/docs/binary_caches.rst:24
msgid ""
"A compressed tarball of an installed package is created. Tarballs are "
"created for all of its link and run dependency packages as well. Compressed "
"tarballs are signed with gpg and signature and tarball and put in a ``."
"spack`` file. Optionally, the rpaths (and ids and deps on macOS) can be "
"changed to paths relative to the Spack install tree before the tarball is "
"created."
msgstr ""

# fd37645d233742709b0c3f395c799200
#: ../spack/lib/spack/docs/binary_caches.rst:30
msgid "Build caches are created via:"
msgstr ""

# c6199e61ec844fb88d60255a0e190ae2
#: ../spack/lib/spack/docs/binary_caches.rst:39
msgid "Finding or installing build cache files"
msgstr ""

# 7aa6cdc9fa6e4daa87a416e84dbfebbe
#: ../spack/lib/spack/docs/binary_caches.rst:41
msgid ""
"To find build caches or install build caches, a Spack mirror must be "
"configured with:"
msgstr ""

# 998624a06d72426e94be7ae4c85885f1
#: ../spack/lib/spack/docs/binary_caches.rst:48
msgid "Build caches are found via:"
msgstr ""

# 348465a4ed52470fb1e5d3e714ad4071
#: ../spack/lib/spack/docs/binary_caches.rst:54
msgid "Build caches are installed via:"
msgstr ""

# b802635384d54817accd829ad1306a4f
#: ../spack/lib/spack/docs/binary_caches.rst:63
msgid "Relocation"
msgstr ""

# da12f130c79146f0831ed230cf458496
#: ../spack/lib/spack/docs/binary_caches.rst:65
msgid ""
"Initial build and later installation do not necessarily happen at the same "
"location. Spack provides a relocation capability and corrects for RPATHs and "
"non-relocatable scripts. However, many packages compile paths into binary "
"artifacts directly. In such cases, the build instructions of this package "
"would need to be adjusted for better re-locatability."
msgstr ""

# 763b2a16c469403b975875715732dab6
#: ../spack/lib/spack/docs/binary_caches.rst:75
msgid "``spack buildcache``"
msgstr ""

# a396ec6a20974e798e253909ed987271
#: ../spack/lib/spack/docs/binary_caches.rst:79
msgid "``spack buildcache create``"
msgstr ""

# 8698f076fe0f4a359d411a5e3d3a845a
#: ../spack/lib/spack/docs/binary_caches.rst:81
msgid ""
"Create tarball of installed Spack package and all dependencies. Tarballs are "
"checksummed and signed if gpg2 is available. Places them in a directory "
"``build_cache`` that can be copied to a mirror. Commands like ``spack "
"buildcache install`` will search Spack mirrors for build_cache to get the "
"list of build caches."
msgstr ""

# 62f8ae56f97944088e1278e7037deee7
# 30f9a0964a694158ae1876b7e468d1b3
# e3337ede8631498d98d576d413f6dd0a
# 71b8aa7cc9f5402d9c2cde2711960b1f
#: ../spack/lib/spack/docs/binary_caches.rst:87
#: ../spack/lib/spack/docs/binary_caches.rst:104
#: ../spack/lib/spack/docs/binary_caches.rst:119
#: ../spack/lib/spack/docs/binary_caches.rst:133
msgid "Arguments"
msgstr ""

# #-#-#-#-#  binary_caches.pot (Spack 0.12)  #-#-#-#-#
# e310571aaed6492d883628bef29210e3
# 861664c1c2ff4462b71ccfdbdb557931
# 230c5d94822d4839bd9cd257c3ae6ad8
# f2c00edb14d84df4a8103b08fc0d1245
# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# ac720c84862c4d4b830a33a6e5fc3f0a
# c8205e73ed7340958868ade981e65154
# bb642296695645389123b0f299dcaa5e
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# 6c20c77b579743579bb13e63ece4ce71
#: ../spack/lib/spack/docs/binary_caches.rst:87
#: ../spack/lib/spack/docs/binary_caches.rst:104
#: ../spack/lib/spack/docs/binary_caches.rst:119
#: ../spack/lib/spack/docs/binary_caches.rst:133
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:90
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:113
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:73
#: ../spack/lib/spack/docs/packaging_guide.rst:3840
msgid "Description"
msgstr ""

# 16fe0bfa3df74259a4d6fca4890a4d90
# 8470b3ccdfeb4f7098244d1279d42a03
# 6cfbbaf215b940f0937bde66cb881ed8
#: ../spack/lib/spack/docs/binary_caches.rst:89
#: ../spack/lib/spack/docs/binary_caches.rst:106
#: ../spack/lib/spack/docs/binary_caches.rst:121
msgid "``<specs>``"
msgstr ""

# 5f8c78a822874bf4b4c742b14c27212b
#: ../spack/lib/spack/docs/binary_caches.rst:89
msgid ""
"list of partial specs or hashes with a leading ``/`` to match from installed "
"packages and used for creating build caches"
msgstr ""

# 365c9ecf1689422384b5b004ec16f07f
#: ../spack/lib/spack/docs/binary_caches.rst:90
msgid "``-d <path>``"
msgstr ""

# d3dea526cd794fe2b9bbf806f2535af4
#: ../spack/lib/spack/docs/binary_caches.rst:90
msgid ""
"directory in which ``build_cache`` directory is created, defaults to ``.``"
msgstr ""

# 25923846413e49d48952dfd5f2f4041d
# b6cee2ce162344018b9e070d47270629
#: ../spack/lib/spack/docs/binary_caches.rst:91
#: ../spack/lib/spack/docs/binary_caches.rst:122
msgid "``-f``"
msgstr ""

# 646d26f8f3cf482988326895a23fb0e0
#: ../spack/lib/spack/docs/binary_caches.rst:91
msgid "overwrite ``.spack`` file in ``build_cache`` directory if it exists"
msgstr ""

# 7e7304375b3a400fb76657b9dbae370a
#: ../spack/lib/spack/docs/binary_caches.rst:92
msgid "``-k <key>``"
msgstr ""

# 5738783a4e8d4c6fbe091ac40a4a2000
#: ../spack/lib/spack/docs/binary_caches.rst:92
msgid ""
"the key to sign package with. In the case where multiple keys exist, the "
"package will be unsigned unless ``-k`` is used."
msgstr ""

# 274cb85020b34b62b9bc5330b69ce348
#: ../spack/lib/spack/docs/binary_caches.rst:93
msgid "``-r``"
msgstr ""

# e4aa9586d021465d8f071c19571945d0
#: ../spack/lib/spack/docs/binary_caches.rst:93
msgid "make paths in binaries relative before creating tarball"
msgstr ""

# ef1c22a37a184cd098b7f5f98e7368bb
# 15a69db7c0104418a0fab081b24aaaa1
# f147349a149944888223afff4e147e08
#: ../spack/lib/spack/docs/binary_caches.rst:94
#: ../spack/lib/spack/docs/binary_caches.rst:123
#: ../spack/lib/spack/docs/binary_caches.rst:136
msgid "``-y``"
msgstr ""

# 314b87908b444531b7d3442648022ee5
#: ../spack/lib/spack/docs/binary_caches.rst:94
msgid "answer yes to all create unsigned ``build_cache`` questions"
msgstr ""

# d5291f9cbe3544b2928ac0a43010dfee
#: ../spack/lib/spack/docs/binary_caches.rst:99
msgid "``spack buildcache list``"
msgstr ""

# d66a63f603e94336b989e0e6b48c593d
#: ../spack/lib/spack/docs/binary_caches.rst:101
msgid "Retrieves all specs for build caches available on a Spack mirror."
msgstr ""

# 113dcd7099f14ee79a2c27943b686001
#: ../spack/lib/spack/docs/binary_caches.rst:106
msgid ""
"list of partial package specs to be matched against specs downloaded for "
"build caches"
msgstr ""

# 1d77aed7968542c391cfe53f5f25fe2e
#: ../spack/lib/spack/docs/binary_caches.rst:109
msgid ""
"E.g. ``spack buildcache list gcc`` with print only commands to install "
"``gcc`` package(s)"
msgstr ""

# 93af4f28738d45e0a9cb9d476882d3dd
#: ../spack/lib/spack/docs/binary_caches.rst:113
msgid "``spack buildcache install``"
msgstr ""

# 2a4b284850b143ebbdacfc6c798c01e3
#: ../spack/lib/spack/docs/binary_caches.rst:115
msgid ""
"Retrieves all specs for build caches available on a Spack mirror and "
"installs build caches with specs matching the specs input."
msgstr ""

# 801e264eae904041b8f80486a79544b8
#: ../spack/lib/spack/docs/binary_caches.rst:121
msgid ""
"list of partial package specs or hashes with a leading ``/`` to be installed "
"from build caches"
msgstr ""

# b6748cec543e43148d13da506223dd20
#: ../spack/lib/spack/docs/binary_caches.rst:122
msgid "remove install directory if it exists before unpacking tarball"
msgstr ""

# 96de64f7a3874e00b8515e55ea046200
#: ../spack/lib/spack/docs/binary_caches.rst:123
msgid "answer yes to all to don't verify package with gpg questions"
msgstr ""

# e7033666bafb45528ccc989eb689ee25
#: ../spack/lib/spack/docs/binary_caches.rst:128
msgid "``spack buildcache keys``"
msgstr ""

# 52216079725c4175a22506e7b88a4b2f
#: ../spack/lib/spack/docs/binary_caches.rst:130
msgid "List public keys available on Spack mirror."
msgstr ""

# 98155820f0004cd3a57765b8dfd2dbef
#: ../spack/lib/spack/docs/binary_caches.rst:135
msgid "``-i``"
msgstr ""

# 410bb034041c4de7a92f87cda060fc8f
#: ../spack/lib/spack/docs/binary_caches.rst:135
msgid "trust the keys downloaded with prompt for each"
msgstr ""

# d6667b9ce2514834992c7b04397f5eec
#: ../spack/lib/spack/docs/binary_caches.rst:136
msgid "answer yes to all trust all keys downloaded"
msgstr ""

# 29589deec18d456eb69238f9835e4191
#: ../spack/lib/spack/docs/build_settings.rst:10
msgid "Build Customization"
msgstr "ビルドカスタマイゼーション"

# 2ba266254556463aa517822d46f2d8eb
#: ../spack/lib/spack/docs/build_settings.rst:12
msgid ""
"Spack allows you to customize how your software is built through the "
"``packages.yaml`` file.  Using it, you can make Spack prefer particular "
"implementations of virtual dependencies (e.g., MPI or BLAS/LAPACK), or you "
"can make it prefer to build with particular compilers.  You can also tell "
"Spack to use *external* software installations already present on your "
"system."
msgstr ""

# dd6d5f958b864c6da27260d8d9dc9840
#: ../spack/lib/spack/docs/build_settings.rst:19
msgid "At a high level, the ``packages.yaml`` file is structured like this:"
msgstr ""

# 7f3c068ac9ab46edbd34782a1c5c13ba
#: ../spack/lib/spack/docs/build_settings.rst:32
msgid ""
"So you can either set build preferences specifically for *one* package, or "
"you can specify that certain settings should apply to *all* packages. The "
"types of settings you can customize are described in detail below."
msgstr ""

# 2781b3671e284d4f94cbee78f66c33da
#: ../spack/lib/spack/docs/build_settings.rst:36
msgid ""
"Spack's build defaults are in the default ``etc/spack/defaults/packages."
"yaml`` file.  You can override them in ``~/.spack/packages.yaml`` or ``etc/"
"spack/packages.yaml``. For more details on how this works, see :ref:"
"`configuration-scopes`."
msgstr ""

# #-#-#-#-#  build_settings.pot (Spack 0.12)  #-#-#-#-#
# 52af0fbb533145dbb9321354827cb7a2
# #-#-#-#-#  tutorial_configuration.pot (Spack 0.12)  #-#-#-#-#
# cd926310ac5c45f2be0e9a98d7d76fb0
#: ../spack/lib/spack/docs/build_settings.rst:45
#: ../spack/lib/spack/docs/tutorial_configuration.rst:566
msgid "External Packages"
msgstr ""

# 7082ed0c6f6543f4a79f0514316080c3
#: ../spack/lib/spack/docs/build_settings.rst:47
msgid ""
"Spack can be configured to use externally-installed packages rather than "
"building its own packages. This may be desirable if machines ship with "
"system packages, such as a customized MPI that should be used instead of "
"Spack building its own MPI."
msgstr ""

# c2444f51459f4a39b520c195129f150e
#: ../spack/lib/spack/docs/build_settings.rst:52
msgid ""
"External packages are configured through the ``packages.yaml`` file found in "
"a Spack installation's ``etc/spack/`` or a user's ``~/.spack/`` directory. "
"Here's an example of an external configuration:"
msgstr ""

# 092e0d694b2240979feef80fcb76aefa
#: ../spack/lib/spack/docs/build_settings.rst:65
msgid ""
"This example lists three installations of OpenMPI, one built with GCC, one "
"built with GCC and debug information, and another built with Intel. If Spack "
"is asked to build a package that uses one of these MPIs as a dependency, it "
"will use the pre-installed OpenMPI in the given directory. ``packages.yaml`` "
"can also be used to specify modules to load instead of the installation "
"prefixes."
msgstr ""

# 2de4b9144b304e9a8de491c0ef4d234a
#: ../spack/lib/spack/docs/build_settings.rst:72
msgid ""
"Each ``packages.yaml`` begins with a ``packages:`` token, followed by a list "
"of package names.  To specify externals, add a ``paths`` or ``modules`` "
"token under the package name, which lists externals in a ``spec: /path`` or "
"``spec: module-name`` format.  Each spec should be as well-defined as "
"reasonably possible.  If a package lacks a spec component, such as missing a "
"compiler or package version, then Spack will guess the missing component "
"based on its most-favored packages, and it may guess incorrectly."
msgstr ""

# f15b99b157da40fcb6fb24486b92e4c2
#: ../spack/lib/spack/docs/build_settings.rst:81
msgid ""
"Each package version and compiler listed in an external should have entries "
"in Spack's packages and compiler configuration, even though the package and "
"compiler may not ever be built."
msgstr ""

# ffdcce5c860d44a1ad409b9c92f034cc
#: ../spack/lib/spack/docs/build_settings.rst:85
msgid ""
"The packages configuration can tell Spack to use an external location for "
"certain package versions, but it does not restrict Spack to using external "
"packages.  In the above example, since newer versions of OpenMPI are "
"available, Spack will choose to start building and linking with the latest "
"version rather than continue using the pre-installed OpenMPI versions."
msgstr ""

# 7e7b3042ff2b4b0fa103ceb93565175f
#: ../spack/lib/spack/docs/build_settings.rst:91
msgid ""
"To prevent this, the ``packages.yaml`` configuration also allows packages to "
"be flagged as non-buildable.  The previous example could be modified to be:"
msgstr ""

# 994f192a37dc49a79362de09934d0f5f
#: ../spack/lib/spack/docs/build_settings.rst:105
msgid ""
"The addition of the ``buildable`` flag tells Spack that it should never "
"build its own version of OpenMPI, and it will instead always rely on a pre-"
"built OpenMPI.  Similar to ``paths``, ``buildable`` is specified as a "
"property under a package name."
msgstr ""

# f0488b157de541bf83fd3ed707417c72
#: ../spack/lib/spack/docs/build_settings.rst:110
msgid ""
"If an external module is specified as not buildable, then Spack will load "
"the external module into the build environment which can be used for linking."
msgstr ""

# e27ea47b45b641cdb07cda04af022329
#: ../spack/lib/spack/docs/build_settings.rst:113
msgid ""
"The ``buildable`` does not need to be paired with external packages. It "
"could also be used alone to forbid packages that may be buggy or otherwise "
"undesirable."
msgstr ""

# efad74c50c554c948002c416c695e5f8
#: ../spack/lib/spack/docs/build_settings.rst:122
msgid "Concretization Preferences"
msgstr ""

# 955eedd04e7b4ad8bd60c3b06b756e03
#: ../spack/lib/spack/docs/build_settings.rst:124
msgid ""
"Spack can be configured to prefer certain compilers, package versions, "
"dependencies, and variants during concretization. The preferred "
"configuration can be controlled via the ``~/.spack/packages.yaml`` file for "
"user configurations, or the ``etc/spack/packages.yaml`` site configuration."
msgstr ""

# c2305ab1407c41e699e1da197cd68079
#: ../spack/lib/spack/docs/build_settings.rst:130
msgid "Here's an example ``packages.yaml`` file that sets preferred packages:"
msgstr ""

# 3845dc0107ef434eb1c1be2a2b78556d
#: ../spack/lib/spack/docs/build_settings.rst:145
msgid ""
"At a high level, this example is specifying how packages should be "
"concretized.  The opencv package should prefer using GCC 4.9 and be built "
"with debug options.  The gperftools package should prefer version 2.2 over "
"2.4.  Every package on the system should prefer mvapich2 for its MPI and GCC "
"4.4.7 (except for opencv, which overrides this by preferring GCC 4.9). These "
"options are used to fill in implicit defaults.  Any of them can be "
"overwritten on the command line if explicitly requested."
msgstr ""

# 12c788a8ee294363ad5cce96d8228827
#: ../spack/lib/spack/docs/build_settings.rst:153
msgid ""
"Each ``packages.yaml`` file begins with the string ``packages:`` and package "
"names are specified on the next level. The special string ``all`` applies "
"settings to each package. Underneath each package name is one or more "
"components: ``compiler``, ``variants``, ``version``, or ``providers``.  Each "
"component has an ordered list of spec ``constraints``, with earlier entries "
"in the list being preferred over later entries."
msgstr ""

# 1b077026038a45cda3cf74c6aaf42149
#: ../spack/lib/spack/docs/build_settings.rst:161
msgid ""
"Sometimes a package installation may have constraints that forbid the first "
"concretization rule, in which case Spack will use the first legal "
"concretization rule.  Going back to the example, if a user requests "
"gperftools 2.3 or later, then Spack will install version 2.4 as the 2.4 "
"version of gperftools is preferred over 2.3."
msgstr ""

# a8deef0260c24a19ad4cd32518da9a7a
#: ../spack/lib/spack/docs/build_settings.rst:167
msgid ""
"An explicit concretization rule in the preferred section will always take "
"preference over unlisted concretizations.  In the above example, xlc isn't "
"listed in the compiler list.  Every listed compiler from gcc to pgi will "
"thus be preferred over the xlc compiler."
msgstr ""

# bef80944cec2432385d336d97e6fc8dd
#: ../spack/lib/spack/docs/build_settings.rst:172
msgid ""
"The syntax for the ``provider`` section differs slightly from other "
"concretization rules.  A provider lists a value that packages may "
"``depend_on`` (e.g, MPI) and a list of rules for fulfilling that dependency."
msgstr ""

# 806f6f7b8cea49a8abc093d470b77219
#: ../spack/lib/spack/docs/build_settings.rst:181
msgid "Package Permissions"
msgstr ""

# 2e8474916c48405fadbc91767835da21
#: ../spack/lib/spack/docs/build_settings.rst:183
msgid ""
"Spack can be configured to assign permissions to the files installed by a "
"package."
msgstr ""

# eb856c817ead494e908b5a0b41cff631
#: ../spack/lib/spack/docs/build_settings.rst:186
msgid ""
"In the ``packages.yaml`` file under ``permissions``, the attributes "
"``read``, ``write``, and ``group`` control the package permissions. These "
"attributes can be set per-package, or for all packages under ``all``. If "
"permissions are set under ``all`` and for a specific package, the package-"
"specific settings take precedence."
msgstr ""

# 1d0f8037edc84f2397802180c8979699
#: ../spack/lib/spack/docs/build_settings.rst:192
msgid ""
"The ``read`` and ``write`` attributes take one of ``user``, ``group``, and "
"``world``."
msgstr ""

# afa9165a475b4435b3851d1a3607a75b
#: ../spack/lib/spack/docs/build_settings.rst:207
msgid ""
"The permissions settings describe the broadest level of access to "
"installations of the specified packages. The execute permissions of the file "
"are set to the same level as read permissions for those files that are "
"executable. The default setting for ``read`` is ``world``, and for ``write`` "
"is ``user``. In the example above, installations of ``my_app`` will be "
"installed with user and group permissions but no world permissions, and "
"owned by the group ``my_team``. All other packages will be installed with "
"user and group write privileges, and world read privileges. Those packages "
"will be owned by the group ``spack``."
msgstr ""

# 28846a0fbe0d4f86a8e941f4957176ac
#: ../spack/lib/spack/docs/build_settings.rst:218
msgid ""
"The ``group`` attribute assigns a Unix-style group to a package. All files "
"installed by the package will be owned by the assigned group, and the sticky "
"group bit will be set on the install prefix and all directories inside the "
"install prefix. This will ensure that even manually placed files within the "
"install prefix are owned by the assigned group. If no group is assigned, "
"Spack will allow the OS default behavior to go as expected."
msgstr ""

# 65af1c7bfb334100be52e5a75bb1c1e1
#: ../spack/lib/spack/docs/build_systems.rst:22
msgid "Make-based"
msgstr ""

# 822bc22319c74c1d88824e074b407823
#: ../spack/lib/spack/docs/build_systems.rst:28
msgid "Make-incompatible"
msgstr ""

# a16f72e259a149e0b95d5352f58840d8
#: ../spack/lib/spack/docs/build_systems.rst:35
msgid "Build-script generation"
msgstr ""

# ea05906380ca49bcabec88781bc1cef0
#: ../spack/lib/spack/docs/build_systems.rst:44
msgid "Language-specific"
msgstr ""

# 6ab6d0d1706e4d36b345e1e8447be7cb
#: ../spack/lib/spack/docs/build_systems.rst:54
msgid "Other"
msgstr ""

# 2d7bbe5fede742259395f155a0c81d9c
#: ../spack/lib/spack/docs/build_systems.rst:11
msgid "Build Systems"
msgstr ""

# 1339b47877a946bca21a35b3c862ed54
#: ../spack/lib/spack/docs/build_systems.rst:13
msgid ""
"Spack defines a number of classes which understand how to use common `build "
"systems  <https://en.wikipedia.org/wiki/List_of_build_automation_software>`_ "
"(Makefiles, CMake, etc.). Spack package definitions can inherit these "
"classes in order to streamline their builds."
msgstr ""

# 3978aac69df0414c8c089892027849a2
#: ../spack/lib/spack/docs/build_systems.rst:18
msgid ""
"This guide provides information specific to each particular build system. It "
"assumes that you've read the :ref:`packaging-guide` and expands on these "
"ideas for each distinct build system that Spack supports:"
msgstr ""

# f20363e471b341b8ba9ea70ea51a86ab
#: ../spack/lib/spack/docs/build_systems.rst:62
msgid ""
"For reference, the :py:mod:`Build System API docs <spack.build_systems>` "
"provide a list of build systems and methods/attributes that can be "
"overridden. If you are curious about the implementation of a particular "
"build system, you can view the source code by running:"
msgstr ""

# 36cb40e6073f4dbaa3d5082cfcea265d
#: ../spack/lib/spack/docs/build_systems.rst:72
msgid ""
"This will open up the ``AutotoolsPackage`` definition in your favorite "
"editor. In addition, if you are working with a less common build system like "
"QMake, SCons, or Waf, it may be useful to see examples of other packages. "
"You can quickly find examples by running:"
msgstr ""

# a3b1efa2be8149c3aa17907339e718dc
#: ../spack/lib/spack/docs/build_systems.rst:83
msgid "You can then view these packages with ``spack edit``."
msgstr ""

# a3502e66658c4253874f266ad698af1b
#: ../spack/lib/spack/docs/build_systems.rst:85
msgid ""
"This guide is intended to supplement the :py:mod:`Build System API docs "
"<spack.build_systems>` with examples of how to override commonly used "
"methods. It also provides rules of thumb and suggestions for package "
"developers who are unfamiliar with a particular build system."
msgstr ""

# 5c2083cd30da4d5eb91daea3d74382bc
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:10
msgid "AutotoolsPackage"
msgstr ""

# 03d165e595934a2dacabcaa516a5b6ea
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:12
msgid ""
"Autotools is a GNU build system that provides a build-script generator. By "
"running the platform-independent ``./configure`` script that comes with the "
"package, you can generate a platform-dependent Makefile."
msgstr ""

# 1b8667fbf10441ca93cea00756188765
# 83105a71ba10449fbef0aa1ee8b3658b
# 6812eedb48554d14a1d466336baa1bd7
# f5e1270a6cb14ad1b67b5705be781de1
# e456deda4ddd477fa39a991c934e7119
# 5bbd1ce84c1f4d5ba6380be26e53cd9c
# a37f9bbd8f0d40258e03931de45457be
# 9ab16d7b7fdf42d6b29321d04101be83
# a62e84df1688408d90342fab3189d1e5
# be3f24856eae4b478efd6c0d91d3670e
# 4d3add62ebca4eab8f94ef8738f70e2c
# ead966c33d364176a626e613c4f85ba3
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:18
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:22
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:48
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:19
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:18
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:16
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:17
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:16
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:30
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:20
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:34
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:17
msgid "Phases"
msgstr ""

# 89d545a42c9647189d7a3c694eac6146
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:20
msgid "The ``AutotoolsPackage`` base class comes with the following phases:"
msgstr ""

# 8653553bcca1440081e8617592d89e81
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:22
msgid "``autoreconf`` - generate the configure script"
msgstr ""

# 5f2b01b22523489c8c2b70e0730e6ab5
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:23
msgid "``configure`` - generate the Makefiles"
msgstr ""

# 6c39b068a7ef45cdb38943a897e4304f
# ebc507900dd14735be51a01820bae2a0
# facdc286964445b8ab06db4a0f43eb06
# 3bcafb503b294511a5cedee04bb28815
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:24
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:27
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:22
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:48
msgid "``build`` - build the package"
msgstr ""

# 0c69c0ec535a4dba9a7e4c542b504ee5
# dbcccfcf43d24b9ba27e374274bf09e1
# 4d4eadc1b9ac40129b2002320034f1f0
# 3561c84686554060ac2e6c1da9367c09
# e0a4e7ce0f7f419abdaf714bb29b4d3a
# 127883189d4a4c68828e8b427c50b264
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:25
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:28
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:20
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:23
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:24
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:49
msgid "``install`` - install the package"
msgstr ""

# b7756d6fe7ba48dfb04dfd8a9fb1bb68
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:27
msgid ""
"Most of the time, the ``autoreconf`` phase will do nothing, but if the "
"package is missing a ``configure`` script, ``autoreconf`` will generate one "
"for you."
msgstr ""

# ff248ad4e7314b8694e348609a4822dd
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:31
msgid "The other phases run:"
msgstr ""

# 006a5bfaa2d44c07940f223b2af55965
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:42
msgid ""
"Of course, you may need to add a few arguments to the ``./configure`` line."
msgstr ""

# 91271c57394040439fd6b3af96d8b8be
# e4fd272474db44819adb517f4a9de89b
# 8b7e9e6e0e184bd6bf83224e52f8fde8
# 3e06d814491c4a138f875c02613d8eaa
# a21372c9c9984a5d99233bd49ddfbe23
# a8aae2858c9d4a2e91825c3b325f4179
# 3b2f9af6bccb44109845f48adadd73f7
# 335e23b4afe64d0182a65bd51057263b
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:47
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:48
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:39
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:51
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:86
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:60
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:65
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:74
msgid "Important files"
msgstr ""

# ef45d72cc717439992d7ebb2e420ce8c
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:49
msgid ""
"The most important file for an Autotools-based package is the ``configure`` "
"script. This script is automatically generated by Autotools and generates "
"the appropriate Makefile when run."
msgstr ""

# ae4d8cbaa7c34e4ca6988a14f57d47a5
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:55
msgid "Watch out for fake Autotools packages!"
msgstr ""

# f52e3fdbd37b4e039e482b2e40676b91
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:57
msgid ""
"Autotools is a very popular build system, and many people are used to the "
"classic steps to install a package:"
msgstr ""

# ae9a69b76cdc4c49850354ca18518b2c
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:67
msgid ""
"For this reason, some developers will write their own ``configure`` scripts "
"that have nothing to do with Autotools. These packages may not accept the "
"same flags as other Autotools packages, so it is better to use the "
"``Package`` base class and create a :ref:`custom build system "
"<custompackage>`. You can tell if a package uses Autotools by running ``./"
"configure --help`` and comparing the output to other known Autotools "
"packages. You should also look for files like:"
msgstr ""

# 8dbed50a5ccd4816b05fd3a398429faf
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:75
msgid "``configure.ac``"
msgstr ""

# 8fd7cc7306cb46818ee5ca3ff4682462
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:76
msgid "``configure.in``"
msgstr ""

# b1ae8c3210a64b519e35f6ca4ca11db6
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:77
msgid "``Makefile.am``"
msgstr ""

# e2509835c77c40678abb96129f31e692
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:79
msgid "Packages that don't use Autotools aren't likely to have these files."
msgstr ""

# 2aea038c221a4eb98245f37c38817227
# 3af5cdc8c0d94dcf8f7ef81cb6c8affd
# 41685e560b2545d081df90b813c712a4
# e3a01900a2ae45f0b7509fbf55140d2d
# 7e6c93a314de41a48b86ca442ce11288
# d10b15c363f64f8abe0c91785f082ad8
# 1d77657447934b3f90fd3a4f1176214b
# 1d0b60c2cba2431eb80ed207a7d1f4a2
# b788ee35fab34a7291a82dfc949b0f91
# 4a17afb6bc694f22ab64ce0c77ae6d65
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:83
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:77
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:53
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:81
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:114
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:248
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:78
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:125
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:83
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:88
msgid "Build system dependencies"
msgstr ""

# 5d90ad49fb124578a463c36fbfe44425
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:85
msgid ""
"Whether or not your package requires Autotools to install depends on how the "
"source code is distributed. Most of the time, when developers distribute "
"tarballs, they will already contain the ``configure`` script necessary for "
"installation. If this is the case, your package does not require any "
"Autotools dependencies."
msgstr ""

# b2245aa151c74e698f68e4efbf7002c6
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:91
msgid ""
"However, a basic rule of version control systems is to never commit code "
"that can be generated. The source code repository itself likely does not "
"have a ``configure`` script. Developers typically write (or auto-generate) a "
"``configure.ac`` script that contains configuration preferences and a "
"``Makefile.am`` script that contains build instructions. Then, ``autoconf`` "
"is used to convert ``configure.ac`` into ``configure``, while ``automake`` "
"is used to convert ``Makefile.am`` into ``Makefile.in``. ``Makefile.in`` is "
"used by ``configure`` to generate a platform-dependent ``Makefile`` for you. "
"The following diagram provides a high-level overview of the process:"
msgstr ""

# 68691198e01e417b9c0d86d0584ce392
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:105
msgid ""
"`GNU autoconf and automake process for generating makefiles <https://commons."
"wikimedia.org/wiki/File:Autoconf-automake-process.svg>`_ by `Jdthood` under "
"`CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0/deed.en>`_"
msgstr ""

# 4f2a4930a6ee4b3fab77098db3bcced8
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:108
msgid ""
"If a ``configure`` script is not present in your tarball, you will need to "
"generate one yourself. Luckily, Spack already has an ``autoreconf`` phase to "
"do most of the work for you. By default, the ``autoreconf`` phase runs:"
msgstr ""

# 606da86d174f40659b99187506bc1602
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:119
msgid ""
"All you need to do is add a few Autotools dependencies to the package. Most "
"stable releases will come with a ``configure`` script, but if you check out "
"a commit from the ``develop`` branch, you would want to add:"
msgstr ""

# 7a0d9b897b9842619d8c0fa362e4f71f
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:130
msgid ""
"In some cases, developers might need to distribute a patch that modifies one "
"of the files used to generate ``configure`` or ``Makefile.in``. In this "
"case, these scripts will need to be regenerated. It is preferable to "
"regenerate these manually using the patch, and then create a new patch that "
"directly modifies ``configure``. That way, Spack can use the secondary patch "
"and additional build system dependencies aren't necessary."
msgstr ""

# 475fd98148e54d23a16810ecdb56bfe7
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:140
msgid "force_autoreconf"
msgstr ""

# d59d573a04ef43548f6b091b29f2e588
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:142
msgid ""
"If for whatever reason you really want to add the original patch and tell "
"Spack to regenerate ``configure``, you can do so using the following setting:"
msgstr ""

# 0559b8cb935d45fea6f8c7bbabc4ffa5
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:150
msgid ""
"This line tells Spack to wipe away the existing ``configure`` script and "
"generate a new one. If you only need to do this for a single version, this "
"can be done like so:"
msgstr ""

# 929975e914f24e09be866f196246ff3b
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:162
msgid "Finding configure flags"
msgstr ""

# 6e2f8a119081468a873a0d444e2e75eb
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:164
msgid ""
"Once you have a ``configure`` script present, the next step is to determine "
"what option flags are available. These flags can be found by running:"
msgstr ""

# 360c244a5c8d427387a08c5bbb4b9766
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:172
msgid ""
"``configure`` will display a list of valid flags separated into some or all "
"of the following sections:"
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# bfd3f1bd7b814803886732b8007fea74
# #-#-#-#-#  tutorial_environments.pot (Spack 0.12)  #-#-#-#-#
# 49e1546492344db2b5d74259ac01ce76
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:175
#: ../spack/lib/spack/docs/command_index.rst:41
#: ../spack/lib/spack/docs/tutorial_environments.rst:355
msgid "Configuration"
msgstr ""

# 5adcd3bbab464096a44f688e8802411b
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:176
msgid "Installation directories"
msgstr ""

# c34c55b718874f94a71aaa9e9236a78e
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:177
msgid "Fine tuning of the installation directories"
msgstr ""

# 1b9eb7e236984a0b8cbf5bdd5b49b175
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:178
msgid "Program names"
msgstr ""

# 5c766d817a7d4995806cf68e018d93f0
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:179
msgid "X features"
msgstr ""

# 4eac70c7c0d84714b5ccee9487bbdcaa
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:180
msgid "System types"
msgstr ""

# b4570d8f76f6489ea522b9308b200ac5
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:181
msgid "**Optional Features**"
msgstr ""

# 90e0fa70ea9641158e411c6ffe3f7d1b
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:182
msgid "**Optional Packages**"
msgstr ""

# 3c0bec4ba17548439e77eaf989cacd24
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:183
msgid "**Some influential environment variables**"
msgstr ""

# 9077e0acf5d94480a0a86b4c06f39c4a
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:185
msgid ""
"For the most part, you can ignore all but the last 3 sections. The "
"\"Optional Features\" sections lists flags that enable/disable features you "
"may be interested in. The \"Optional Packages\" section often lists "
"dependencies and the flags needed to locate them. The \"environment variables"
"\" section lists environment variables that the build system uses to pass "
"flags to the compiler and linker."
msgstr ""

# 79a21f55024d4f009c92f20204f5e3e9
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:194
msgid "Addings flags to configure"
msgstr ""

# f68e28ad14914433a6566b3239b55589
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:196
msgid ""
"For most of the flags you encounter, you will want a variant to optionally "
"enable/disable them. You can then optionally pass these flags to the "
"``configure`` call by overriding the ``configure_args`` function like so:"
msgstr ""

# a65b8e94b76f45f08f0e705034cc9b0c
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:213
msgid ""
"Note that we are explicitly disabling MPI support if it is not requested. "
"This is important, as many Autotools packages will enable options by default "
"if the dependencies are found, and disable them otherwise. We want Spack "
"installations to be as deterministic as possible. If two users install a "
"package with the same variants, the goal is that both installations work the "
"same way. See `here <https://www.linux.com/news/best-practices-autotools>`__ "
"and `here <https://wiki.gentoo.org/wiki/Project:Quality_Assurance/"
"Automagic_dependencies>`__ for a rationale as to why these so-called "
"\"automagic\" dependencies are a problem."
msgstr ""

# de4b1d53742f42a0955e56a2adb589a4
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:223
msgid ""
"By default, Autotools installs packages to ``/usr``. We don't want this, so "
"Spack automatically adds ``--prefix=/path/to/installation/prefix`` to your "
"list of ``configure_args``. You don't need to add this yourself."
msgstr ""

# 34e2bf982d60457b8e9f881de9bf8649
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:229
msgid "Helper functions"
msgstr ""

# 04fe7f9b05bc4f18889a2a393df86ca2
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:231
msgid ""
"You may have noticed that most of the Autotools flags are of the form ``--"
"enable-foo``, ``--disable-bar``, ``--with-baz=<prefix>``, or ``--without-"
"baz``. Since these flags are so common, Spack provides a couple of helper "
"functions to make your life easier."
msgstr ""

# 9c3532d8775f44729da0507063326338
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:236
msgid "TODO: document ``with_or_without`` and ``enable_or_disable``."
msgstr ""

# 00ab2456596347abbfe39f9951d27e22
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:240
msgid "Configure script in a sub-directory"
msgstr ""

# bf7495b137c74defa79495d29819719c
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:242
msgid ""
"Occasionally, developers will hide their source code and ``configure`` "
"script in a subdirectory like ``src``. If this happens, Spack won't be able "
"to automatically detect the build system properly when running ``spack "
"create``. You will have to manually change the package base class and tell "
"Spack where the ``configure`` script resides. You can do this like so:"
msgstr ""

# ea60bd83df2f4b0d9896f8bc0a6a2cae
# 8833a6d4acca476381f5c7ce575eb846
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:255
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:233
msgid "Building out of source"
msgstr ""

# 025bc7eff62b4cb4b599111f8104b780
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:257
msgid ""
"Some packages like ``gcc`` recommend building their software in a different "
"directory than the source code to prevent build pollution. This can be done "
"using the ``build_directory`` variable:"
msgstr ""

# 3485122157714b66976ddb591a4e4d8d
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:265
msgid ""
"By default, Spack will build the package in the same directory that contains "
"the ``configure`` script"
msgstr ""

# b9d46d7c332c4d3bb531bea0a661c484
# dcc2de0f6c2d40dfa76d1a4b5147464b
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:270
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:245
msgid "Build and install targets"
msgstr ""

# 7feda6c375b246778c27d53a484bc51c
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:272
msgid "For most Autotools packages, the usual:"
msgstr ""

# 638d2ca08bde466dbc285409a5b38853
# e75173c434c8467baa643fd536de1acc
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:280
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:255
msgid ""
"is sufficient to install the package. However, if you need to run make with "
"any other targets, for example, to build an optional library or build the "
"documentation, you can add these like so:"
msgstr ""

# cdb0352d39ce4038b099ec5642491734
# f82f49ba3ef1408c859d31fdea38c5ce
# dceef7125c044a0d83cda1205a5711b3
# 03882b2c1a1e46f9b27ec8ddca3f20d8
# ea6ec8510db1407ab11d49c2bd4b2def
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:291
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:266
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:169
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:518
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:55
msgid "Testing"
msgstr ""

# e2bbf3b64c9d4f588a68989c04448147
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:293
msgid ""
"Autotools-based packages typically provide unit testing via the ``check`` "
"and ``installcheck`` targets. If you build your software with ``spack "
"install --test=root``, Spack will check for the presence of a ``check`` or "
"``test`` target in the Makefile and run ``make check`` for you. After "
"installation, it will check for an ``installcheck`` target and run ``make "
"installcheck`` if it finds one."
msgstr ""

# 567921159c044108b3f65f91af1f4845
# 7ca802d0a3764b4bb90bb64065aeb83a
# a2b9615ebbcc4457b5c4d193b5e1ec16
# ef3a53014cd04807be4054404867042f
# 764bbe6371fb44888991449c229143f3
# 3ad20177014c40c5a3992d6ebbdd6e8e
# e2cc3b98457b47bf99e12d398e88ac90
# 874aa0cefd3b48b580bd0396354c5954
# 0867726a1d654385b6fb8fe907412f31
# cf1a2da1e516430dad2d6b692ce61fa5
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:302
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:276
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:306
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:131
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:206
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:744
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:113
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:343
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:303
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:126
msgid "External documentation"
msgstr ""

# 5386b605f8354d94a9434ed799148733
#: ../spack/lib/spack/docs/build_systems/autotoolspackage.rst:304
msgid ""
"For more information on the Autotools build system, see: https://www.gnu.org/"
"software/automake/manual/html_node/Autotools-Introduction.html"
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# 1ce889a9ec8e4ee795e6f557f5c8a2c8
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# e8c358f39b34469e8bb217fa73840150
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:10
#: ../spack/lib/spack/docs/packaging_guide.rst:4215
msgid "CMakePackage"
msgstr ""

# a97f273b9d9348f085806f773efa9929
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:12
msgid ""
"Like Autotools, CMake is a widely-used build-script generator. Designed by "
"Kitware, CMake is the most popular build system for new C, C++, and Fortran "
"projects, and many older projects are switching to it as well."
msgstr ""

# eabb22be11364660adf325dba15da947
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:16
msgid ""
"Unlike Autotools, CMake can generate build scripts for builders other than "
"Make: Ninja, Visual Studio, etc. It is therefore cross-platform, whereas "
"Autotools is Unix-only."
msgstr ""

# 0b6bd0058d5a41f1ad755c816891b0db
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:24
msgid "The ``CMakePackage`` base class comes with the following phases:"
msgstr ""

# 9261749a63284d9192fb711ed69fc441
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:26
msgid "``cmake`` - generate the Makefile"
msgstr ""

# 1ca6bb2a2a6048539edf0b621f494b61
# a1feddc577fb4928a6ba0ac79963ed25
# c39450ed8cea4f3bbc3d94786e71cb89
# 577ae1da80fe4484b339ede706cef4f9
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:30
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:26
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:38
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:25
msgid "By default, these phases run:"
msgstr ""

# 72a862ae9369429a91fe011b95d4c8e9
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:42
msgid ""
"A few more flags are passed to ``cmake`` by default, including flags for "
"setting the build type and flags for locating dependencies. Of course, you "
"may need to add a few arguments yourself."
msgstr ""

# 1ffdaf01a48c4ea7a71e750c5cb861fb
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:50
msgid ""
"A CMake-based package can be identified by the presence of a ``CMakeLists."
"txt`` file. This file defines the build flags that can be passed to the "
"cmake invocation, as well as linking instructions. If you are familiar with "
"CMake, it can prove very useful for determining dependencies and dependency "
"version requirements."
msgstr ""

# a8879b30c20a4d38ad000e31691b734e
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:56
msgid "One thing to look for is the ``cmake_minimum_required`` function:"
msgstr ""

# 5e5e418d8b074eb59734194b6cb89f83
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:63
msgid ""
"This means that CMake 2.8.12 is the earliest release that will work. You "
"should specify this in a ``depends_on`` statement."
msgstr ""

# db483ecbc3894f388ae6ec1fc0df6fb9
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:66
msgid ""
"CMake-based packages may also contain ``CMakeLists.txt`` in subdirectories. "
"This modularization helps to manage complex builds in a hierarchical "
"fashion. Sometimes these nested ``CMakeLists.txt`` require additional "
"dependencies not mentioned in the top-level file."
msgstr ""

# 2f079674e3314f4a8612d0b2eba6f453
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:71
msgid ""
"There's also usually a ``cmake`` or ``CMake`` directory containing "
"additional macros, find scripts, etc. These may prove useful in determining "
"dependency version requirements."
msgstr ""

# 0b2906b17f8b445c85a57e738f7f0482
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:79
msgid ""
"Every package that uses the CMake build system requires a ``cmake`` "
"dependency. Since this is always the case, the ``CMakePackage`` base class "
"already contains:"
msgstr ""

# 0be6ba37bc0b44b484e3fc234ba92801
# b475574bce264a12ba27d4dd4d395b1b
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:88
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:93
msgid ""
"If you need to specify a particular version requirement, you can override "
"this in your package:"
msgstr ""

# 9f22408c043d449eba24fa9fd8380f00
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:98
msgid "Finding cmake flags"
msgstr ""

# 5f80525a5d894dfcb5a502f11aa4c027
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:100
msgid ""
"To get a list of valid flags that can be passed to ``cmake``, run the "
"following command in the directory that contains ``CMakeLists.txt``:"
msgstr ""

# ae14e1ab2cc94f709f32d569519d6511
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:108
msgid ""
"CMake will start by checking for compilers and dependencies. Eventually it "
"will begin to list build options. You'll notice that most of the build "
"options at the top are prefixed with ``CMAKE_``. You can safely ignore most "
"of these options as Spack already sets them for you. This includes flags "
"needed to locate dependencies, RPATH libraries, set the installation "
"directory, and set the build type."
msgstr ""

# e3c229e824854512861f124e4bd779fa
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:115
msgid ""
"The rest of the flags are the ones you should consider adding to your "
"package. They often include flags to enable/disable support for certain "
"features and locate specific dependencies. One thing you'll notice that "
"makes CMake different from Autotools is that CMake has an understanding of "
"build flag hierarchy. That is, certain flags will not display unless their "
"parent flag has been selected. For example, flags to specify the ``lib`` and "
"``include`` directories for a package might not appear unless CMake found "
"the dependency it was looking for. You may need to manually specify certain "
"flags to explore the full depth of supported build flags, or check the "
"``CMakeLists.txt`` yourself."
msgstr ""

# 16c5ded0419d482db6006c5f3e37c24a
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:128
msgid "Adding flags to cmake"
msgstr ""

# e8cd8f8c9fa64d6aaf17dc999b4ca607
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:130
msgid ""
"To add additional flags to the ``cmake`` call, simply override the "
"``cmake_args`` function:"
msgstr ""

# 2aa8426979fe4b149d499d232fe8660c
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:148
msgid "Generators"
msgstr ""

# 1b9917e19a8f46dbb39621a00ba7bd96
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:150
msgid ""
"CMake and Autotools are build-script generation tools; they \"generate\" the "
"Makefiles that are used to build a software package. CMake actually supports "
"multiple generators, not just Makefiles. Another common generator is Ninja. "
"To switch to the Ninja generator, simply add:"
msgstr ""

# 1d95d9beddb7422381918711a6ba719d
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:160
msgid ""
"``CMakePackage`` defaults to \"Unix Makefiles\". If you switch to the Ninja "
"generator, make sure to add:"
msgstr ""

# 4beb152037bc4ae38b298f47950c3382
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:167
msgid ""
"to the package as well. Aside from that, you shouldn't need to do anything "
"else. Spack will automatically detect that you are using Ninja and run:"
msgstr ""

# 3468c18685524eee9d84db4d35663b5a
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:177
msgid ""
"Spack currently only supports \"Unix Makefiles\" and \"Ninja\" as valid "
"generators, but it should be simple to add support for alternative "
"generators. For more information on CMake generators, see: https://cmake.org/"
"cmake/help/latest/manual/cmake-generators.7.html"
msgstr ""

# 7529394c827e4836896dac5a12206ad4
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:184
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.cmake_args:5
msgid "CMAKE_BUILD_TYPE"
msgstr ""

# 947935b011444f4d817ba9f1527e720f
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:186
msgid ""
"Every CMake-based package accepts a ``-DCMAKE_BUILD_TYPE`` flag to dictate "
"which level of optimization to use. In order to ensure uniformity across "
"packages, the ``CMakePackage`` base class adds a variant to control this:"
msgstr ""

# ccad6a95d08348168e957baa6a9990d9
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:197
msgid ""
"However, not every CMake package accepts all four of these options. Grep the "
"``CMakeLists.txt`` file to see if the default values are missing or "
"replaced. For example, the `dealii <https://github.com/spack/spack/blob/"
"develop/var/spack/repos/builtin/packages/dealii/package.py>`_ package "
"overrides the default variant with:"
msgstr ""

# 9f1c9fe696cf440ca5c4dc752a1674b1
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:209
msgid ""
"For more information on ``CMAKE_BUILD_TYPE``, see: https://cmake.org/cmake/"
"help/latest/variable/CMAKE_BUILD_TYPE.html"
msgstr ""

# e30f7909decb4901bb9a44a79581c396
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:214
msgid "CMakeLists.txt in a sub-directory"
msgstr ""

# f3d87b16a51e43499e7ac1289fd03bea
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:216
msgid ""
"Occasionally, developers will hide their source code and ``CMakeLists.txt`` "
"in a subdirectory like ``src``. If this happens, Spack won't be able to "
"automatically detect the build system properly when running ``spack "
"create``. You will have to manually change the package base class and tell "
"Spack where ``CMakeLists.txt`` resides. You can do this like so:"
msgstr ""

# 00c157a9f2274cdc9b0c1ad5cea4c300
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:228
msgid ""
"Note that this path is relative to the root of the extracted tarball, not to "
"the ``build_directory``. It defaults to the current directory."
msgstr ""

# 1a135d9fe8a844ef80dc9e3dfef615c8
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:235
msgid ""
"By default, Spack builds every ``CMakePackage`` in a ``spack-build`` sub-"
"directory. If, for whatever reason, you would like to build in a different "
"sub-directory, simply override ``build_directory`` like so:"
msgstr ""

# 3996efe2ac094045a86456ce9e14d995
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:247
msgid "For most CMake packages, the usual:"
msgstr ""

# 309526dc092146309b0337375a565dd7
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:268
msgid ""
"CMake-based packages typically provide unit testing via the ``test`` target. "
"If you build your software with ``--test=root``, Spack will check for the "
"presence of a ``test`` target in the Makefile and run ``make test`` for you. "
"If you want to run a different test instead, simply override the ``check`` "
"method."
msgstr ""

# 19b76cf95b24463494fed61047345dbb
#: ../spack/lib/spack/docs/build_systems/cmakepackage.rst:278
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage:3
msgid ""
"For more information on the CMake build system, see: https://cmake.org/cmake/"
"help/latest/"
msgstr ""

# 91e3c3a5ddbd4b808e76a8f47a268dcd
#: ../spack/lib/spack/docs/build_systems/cudapackage.rst:10
msgid "CudaPackage"
msgstr ""

# d436bded98c64624a933bf635e6715fe
#: ../spack/lib/spack/docs/build_systems/cudapackage.rst:12
msgid ""
"Different from other packages, ``CudaPackage`` does not represent a build "
"system. Instead its goal is to simplify and unify usage of ``CUDA`` in other "
"packages."
msgstr ""

# ec838ef2b24846d1b4a42f364c100bd5
#: ../spack/lib/spack/docs/build_systems/cudapackage.rst:18
msgid "Provided variants and dependencies"
msgstr ""

# 7842d4bd59d742fa8acebb742c61ef15
#: ../spack/lib/spack/docs/build_systems/cudapackage.rst:20
msgid ""
"``CudaPackage`` provides ``cuda`` variant (default to ``off``) to enable/"
"disable ``CUDA``, and ``cuda_arch`` variant to optionally specify the "
"architecture. It also declares dependencies on the ``CUDA`` package "
"``depends_on('cuda@...')`` based on the architecture as well as specifies "
"conflicts for certain compiler versions."
msgstr ""

# 0b969ac649324e6686623ea3a1225359
#: ../spack/lib/spack/docs/build_systems/cudapackage.rst:27
msgid "Usage"
msgstr ""

# 529ebb613207482e92729ef298d090ea
#: ../spack/lib/spack/docs/build_systems/cudapackage.rst:29
msgid ""
"In order to use it, just add another base class to your package, for example:"
msgstr ""

# 791c19f6e1524b9b86159b1876565633
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:10
msgid "Custom Build Systems"
msgstr "カスタムビルドシステム"

# ec18206804f941359c6ba9907713af25
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:12
msgid ""
"While the build systems listed above should meet your needs for the vast "
"majority of packages, some packages provide custom build scripts. This guide "
"is intended for the following use cases:"
msgstr ""

# 1f070f56910a4248a6b064308e015a18
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:16
msgid "Packaging software with its own custom build system"
msgstr ""

# efb6c42982594a31ade7f90f12995ba1
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:17
msgid "Adding support for new build systems"
msgstr ""

# 32e5da4cee22479daccc6612fa85ba85
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:19
msgid ""
"If you want to add support for a new build system, a good place to start is "
"to look at the definitions of other build systems. This guide focuses mostly "
"on how Spack's build systems work."
msgstr ""

# 6959fc3442bc40d2a0a5a682f328e9e4
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:23
msgid ""
"In this guide, we will be using the `perl <https://github.com/spack/spack/"
"blob/develop/var/spack/repos/builtin/packages/perl/package.py>`_ and `cmake "
"<https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/"
"packages/cmake/package.py>`_ packages as examples. ``perl``'s build system "
"is a hand-written ``Configure`` shell script, while ``cmake`` bootstraps "
"itself during installation. Both of these packages require custom build "
"systems."
msgstr ""

# 5ed913382ea345c48bb084f06723e983
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:32
msgid "Base class"
msgstr ""

# 7daf11c070f648ed92df3d4fb58569be
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:34
msgid ""
"If your package does not belong to any of the aforementioned build systems "
"that Spack already supports, you should inherit from the ``Package`` base "
"class. ``Package`` is a simple base class with a single phase: ``install``. "
"If your package is simple, you may be able to simply write an ``install`` "
"method that gets the job done. However, if your package is more complex and "
"installation involves multiple steps, you should add separate phases as "
"mentioned in the next section."
msgstr ""

# 7f3f87567b5c404ebee8366ad77a5f34
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:42
msgid ""
"If you are creating a new build system base class, you should inherit from "
"``PackageBase``. This is the superclass for all build systems in Spack."
msgstr ""

# e9f76e71ab564f0a8e865e95dadf9b0b
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:50
msgid ""
"The most important concept in Spack's build system support is the idea of "
"phases. Each build system defines a set of phases that are necessary to "
"install the package. They usually follow some sort of \"configure\", \"build"
"\", \"install\" guideline, but any of those phases may be missing or "
"combined with another phase."
msgstr ""

# 40cec3034b3c404caea6a60d17b24487
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:56
msgid "If you look at the ``perl`` package, you'll see:"
msgstr ""

# b5cd94ed39ce48c2a7b051bb7c658835
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:62
msgid "Similarly, ``cmake`` defines:"
msgstr ""

# a859d0d583fc4420972946189511115c
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:68
msgid ""
"If we look at the ``cmake`` example, this tells Spack's ``PackageBase`` "
"class to run the ``bootstrap``, ``build``, and ``install`` functions in that "
"order. It is now up to you to define these methods."
msgstr ""

# 07f8101001aa4dd48bceda7e29626996
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:74
msgid "Phase and phase_args functions"
msgstr ""

# 0f2d593cb09a477d9cccc03a195b3268
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:76
msgid "If we look at ``perl``, we see that it defines a ``configure`` method:"
msgstr ""

# 480bb44b6ce54a2b953c86db19ce23df
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:84
msgid ""
"There is also a corresponding ``configure_args`` function that handles all "
"of the arguments to pass to ``Configure``, just like in "
"``AutotoolsPackage``. Comparatively, the ``build`` and ``install`` phases "
"are pretty simple:"
msgstr ""

# d8b4619db5b94b7ebb4b83a28f35a924
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:97
msgid ""
"The ``cmake`` package looks very similar, but with a ``bootstrap`` function "
"instead of ``configure``:"
msgstr ""

# fe3ed89fea79434f8217a0a92053f637
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:112
msgid ""
"Again, there is a ``boostrap_args`` function that determines the correct "
"bootstrap flags to use."
msgstr ""

# bbcef4e36f244b39968fd3d3010bc2ad
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:117
msgid "run_before/run_after"
msgstr ""

# 57686b3c962a4973b62d88d328b297e6
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:119
msgid ""
"Occasionally, you may want to run extra steps either before or after a given "
"phase. This applies not just to custom build systems, but to existing build "
"systems as well. You may need to patch a file that is generated by "
"configure, or install extra files in addition to what ``make install`` "
"copies to the installation prefix. This is where ``@run_before`` and "
"``@run_after`` come in."
msgstr ""

# 0d01da79a36f44ac9e0ebfb148585b85
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:126
msgid ""
"These Python decorators allow you to write functions that are called before "
"or after a particular phase. For example, in ``perl``, we see:"
msgstr ""

# 544d57b72fd04ba8b2429e89fd0af39d
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:142
msgid ""
"This extra step automatically installs ``cpanm`` in addition to the base "
"Perl installation."
msgstr ""

# 499d4d16e8ed49d6b68d4e040c9d7350
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:147
msgid "on_package_attributes"
msgstr ""

# a155fd89b13e4cdd8e3fe9002d94aed2
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:149
msgid ""
"The ``run_before``/``run_after`` logic discussed above becomes particularly "
"powerful when combined with the ``@on_package_attributes`` decorator. This "
"decorator allows you to conditionally run certain functions depending on the "
"attributes of that package. The most common example is conditional testing. "
"Many unit tests are prone to failure, even when there is nothing wrong with "
"the installation. Unfortunately, non-portable unit tests and tests that are "
"\"supposed to fail\" are more common than we would like. Instead of always "
"running unit tests on installation, Spack lets users conditionally run tests "
"with the ``--test=root`` flag."
msgstr ""

# 986565d9ea804a7c970269973e2b8e17
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:160
msgid ""
"If we wanted to define a function that would conditionally run if and only "
"if this flag is set, we would use the following line:"
msgstr ""

# 6bde3968d76e412894b48a90bbe7107d
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:171
msgid ""
"Let's put everything together and add unit tests to our package. In the "
"``perl`` package, we can see:"
msgstr ""

# 0ef3c204788d4da8b05cf714b8f08f17
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:181
msgid ""
"As you can guess, this runs ``make test`` *after* building the package, if "
"and only if testing is requested. Again, this is not specific to custom "
"build systems, it can be added to existing build systems as well."
msgstr ""

# b13e0c858fcd442f8a4a52645e96bb4d
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:185
msgid ""
"Ideally, every package in Spack will have some sort of test to ensure that "
"it was built correctly. It is up to the package authors to make sure this "
"happens. If you are adding a package for some software and the developers "
"list commands to test the installation, please add these tests to your "
"``package.py``."
msgstr ""

# 25427cb444334abfa95db3830902697f
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:193
msgid "The order of decorators matters. The following ordering:"
msgstr ""

# 6918548359254fff96a5008a840633e5
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:200
msgid "works as expected. However, if you reverse the ordering:"
msgstr ""

# 28a68eea4b4541fdb40e7febb80c5d14
#: ../spack/lib/spack/docs/build_systems/custompackage.rst:207
msgid ""
"the tests will always be run regardless of whether or not ``--test=root`` is "
"requested. See https://github.com/spack/spack/issues/3833 for more "
"information"
msgstr ""

# 6be21d6f47a041e29cdbcb4cbba4f57d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:10
msgid "IntelPackage"
msgstr ""

# 86da2acdbc4247ad802ca5ee4806843e
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:12
msgid "Contents"
msgstr ""

# 01c941ba0a694adc8209adf13905e9ae
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:16
msgid "Intel packages in Spack"
msgstr ""

# b372e8f8a67e4913872e5d4927457976
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:18
msgid ""
"Spack can install and use several software development products offered by "
"Intel. Some of these are available under no-cost terms, others require a "
"paid license. All share the same basic steps for configuration, "
"installation, and, where applicable, license management. The Spack Python "
"class ``IntelPackage`` implements these steps."
msgstr ""

# 759c4b32a829441487b755a6a63a8d4d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:24
msgid ""
"Spack interacts with Intel tools in several routes, like it does for any "
"other package:"
msgstr ""

# 99fbacbaeef7476baebae8ee8f9d94b7
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:29
msgid ""
"Accept system-provided tools after you declare them to Spack as *external "
"packages*."
msgstr ""

# b156b255fee940ddabf86349937fa545
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:33
msgid "Install the products for you as *internal packages* in Spack."
msgstr ""

# 8a030c8742cc49fbb076f40925731129
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:37
msgid ""
"*Use* the packages, regardless of installation route, to install what we'll "
"call *client packages* for you, this being Spack's primary purpose."
msgstr ""

# 19d18fb6d51544a6a1be57230f49a9d0
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:40
msgid ""
"An auxiliary route follows from route 2, as it would for most Spack "
"packages, namely:"
msgstr ""

# 6666fcbd45d4420588536a773fb8429a
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:45
msgid ""
"Make Spack-installed Intel tools available outside of Spack for ad-hoc use, "
"typically through Spack-managed modulefiles."
msgstr ""

# b5b77799560a4221933563d99a058f21
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:48
msgid "This document covers routes 1 through 3."
msgstr ""

# 5d2b4fda5a7d427da3023f22b1285d06
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:53
msgid "Packages under no-cost license"
msgstr ""

# 728dfadca6e94cf0a5a954dbf718379d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:55
msgid ""
"Intel's standalone performance library products, notably MKL and MPI, are "
"available for use under a `simplified license <https://software.intel.com/en-"
"us/license/intel-simplified-software-license>`_ since 2017 [fn1]_. They are "
"packaged in Spack as:"
msgstr ""

# 32adfc45500540f3a898eee4ebfa5268
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:60
msgid "``intel-mkl`` -- Math Kernel Library (linear algebra and FFT),"
msgstr ""

# 9aef2c66bf014729abddf4dbb9e36fb8
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:61
msgid "``intel-mpi`` -- The Intel-MPI implementation (derived from MPICH),"
msgstr ""

# 04e5ac651750455386276deddda596ec
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:62
msgid "``intel-ipp`` -- Primitives for image-, signal-, and data-processing,"
msgstr ""

# fd3a8ad04dfb408da11ad6120025db14
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:63
msgid "``intel-daal`` -- Machine learning and data analytics."
msgstr ""

# 791e12885536401bb158d4144ddf960f
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:65
msgid ""
"Some earlier versions of these libraries were released under a paid license. "
"For these older versions, the license must be available at installation time "
"of the products and during compilation of client packages."
msgstr ""

# d0d532a117ee4a10afda757c1d6f8a57
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:69
msgid ""
"The library packages work well with the Intel compilers but do not require "
"them -- those packages can just as well be used with other compilers.  The "
"Intel compiler invocation commands offer custom options to simplify linking "
"Intel libraries (sometimes considerably), but Spack always uses fairly "
"explicit linkage anyway."
msgstr ""

# 68680e7503744fa99a80c49b11f26e56
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:78
msgid "Licensed packages"
msgstr ""

# 8f9eefbcf92e4f5e8fa010048989fb0d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:80
msgid ""
"Intel's core software development products that provide compilers, "
"analyzers, and optimizers do require a paid license.  In Spack, they are "
"packaged as:"
msgstr ""

# 69a49e986f1e4c82ad7fcbd968607992
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:83
msgid ""
"``intel-parallel-studio`` -- the entire suite of compilers and libraries,"
msgstr ""

# 241207755ae04bd096769f953063d5a1
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:84
msgid ""
"``intel`` -- a subset containing just the compilers and the Intel-MPI "
"runtime [fn2]_."
msgstr ""

# c1c25a59a7bc4d289f3bbb50f1d4a7fa
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:97
msgid ""
"The license is needed at installation time and to compile client packages, "
"but never to merely run any resulting binaries. The license status for a "
"given Spack package is normally specified in the *package code* through "
"directives like `license_required` (see :ref:`Licensed software <license>`). "
"For the Intel packages, however, the *class code* provides these directives "
"(in exchange of forfeiting a measure of OOP purity) and takes care of "
"idiosyncasies like historic version dependence."
msgstr ""

# f0e86d18eec340958fd1910a574480e7
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:105
msgid ""
"The libraries that are provided in the standalone packages are also included "
"in the all-encompassing ``intel-parallel-studio``. To complicate matters a "
"bit, that package is sold in 3 \"editions\", of which only the upper-tier "
"``cluster`` edition supports *compiling* MPI applications, and hence only "
"that edition can provide the ``mpi`` virtual package.  (As mentioned [fn2]_, "
"all editions provide support for *running* MPI applications.)"
msgstr ""

# 4284182ffe7c418399395b541b3d80c0
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:112
msgid ""
"The edition forms the leading part of the version number for Spack's "
"``intel*`` packages discussed here. This differs from the primarily numeric "
"version numbers seen with most other Spack packages. For example, we have:"
msgstr ""

# e3e482ba61a342d4b7db081088f53736
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:133
msgid ""
"The full studio suite, capable of compiling MPI applications, currently "
"requires about 12 GB of disk space when installed (see section `Install "
"steps for packages with compilers and libraries`_ for detailed "
"instructions). If you need to save disk space or installation time, you "
"could install the ``intel`` compilers-only subset (0.6 GB) and just the "
"library packages you need, for example ``intel-mpi`` (0.5 GB) and ``intel-"
"mkl`` (2.5 GB)."
msgstr ""

# a033f4b3931e4d7ba26356d54ea0940d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:143
msgid "Unrelated packages"
msgstr ""

# b9ee54a542e0455eb2e6d7bb8503e4c7
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:145
msgid ""
"The following packages do not use the Intel installer and are not in class "
"``IntelPackage`` that is discussed here:"
msgstr ""

# 788f2f55f5f84a388e9b094247643674
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:148
msgid ""
"``intel-gpu-tools`` -- Test suite and low-level tools for the Linux `Direct "
"Rendering Manager <https://en.wikipedia.org/wiki/Direct_Rendering_Manager>`_"
msgstr ""

# d9cb99be39b24bc69fb3501afd0d31c7
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:150
msgid ""
"``intel-mkl-dnn`` -- Math Kernel Library for Deep Neural Networks "
"(``CMakePackage``)"
msgstr ""

# 4025080f08584baaafd7d634dab96bf5
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:151
msgid "``intel-xed`` -- X86 machine instructions encoder/decoder"
msgstr ""

# cb3e367427e4480c98309537a46f7517
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:152
msgid ""
"``intel-tbb`` -- Standalone version of Intel Threading Building Blocks. Note "
"that a TBB runtime version is included with ``intel-mkl``, and development "
"versions are provided by the packages ``intel-parallel-studio`` (all "
"editions) and its ``intel`` subset."
msgstr ""

# 5a4996ebe6c74f46adc16cf638e179ef
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:159
msgid "Configuring Spack to use Intel licenses"
msgstr ""

# 2ded76f7ea70466bbe8834f480d2b67b
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:161
msgid ""
"If you wish to integrate licensed Intel products into Spack as external "
"packages (`route 1`_ above) we assume that their license configuration is in "
"place and is working [fn3]_. In this case, skip to section `Integration of "
"Intel tools installed external to Spack`_."
msgstr ""

# 51c94def1f40474ea87d92109bb35473
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:166
msgid ""
"If you plan to have Spack install licensed products for you (`route 2`_ "
"above), the Intel product installer that Spack will run underneath must have "
"access to a license that is either provided by a *license server* or as a "
"*license file*. The installer may be able to locate a license that is "
"already configured on your system.  If it cannot, you must configure Spack "
"to provide either the server location or the license file."
msgstr ""

# 0cd6e9ae754d4f1f9c16268cd8eae358
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:173
msgid "For authoritative information on Intel licensing, see:"
msgstr ""

# 99ca8cf6400448e89b6d378ce476304e
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:175
msgid "https://software.intel.com/en-us/faq/licensing"
msgstr ""

# 18c7cc370dd94885ae31d1f60cc19e18
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:176
msgid "https://software.intel.com/en-us/articles/how-do-i-manage-my-licenses"
msgstr ""

# 0ff07d307e1547818d4c572b0a5fb783
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:180
msgid "Pointing to an existing license server"
msgstr ""

# 655e874965bc442d885b63e74f57d420
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:182
msgid ""
"Installing and configuring a license server is outside the scope of Spack. "
"We assume that:"
msgstr ""

# b8ce9342643f46f8a702052fff68187c
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:185
msgid "Your system administrator has a license server running."
msgstr ""

# c0406fe90d91498f99a60108cba66ad0
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:186
msgid ""
"The license server offers valid licenses for the Intel packages of interest."
msgstr ""

# 48ebf07aa92740069a7e1556c38c948e
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:187
msgid "You can access these licenses under the user id running Spack."
msgstr ""

# 9588efd280904bab9cb7e71368445a01
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:189
msgid ""
"Be aware of the difference between (a) installing and configuring a license "
"server, and (b) configuring client software to *use* a server's so-called "
"floating licenses.  We are concerned here with (b) only. The process of "
"obtaining a license from a server for temporary use is called \"checking out "
"a license\".  For that, a client application such as the Intel package "
"installer or a compiler needs to know the host name and port number of one "
"or more license servers that it may query [fn4]_."
msgstr ""

# 7e891725902e4d688ba5fa7a8fadc9f5
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:197
msgid ""
"Follow one of three methods to `point client software to a floating license "
"server <https://software.intel.com/en-us/articles/licensing-setting-up-the-"
"client-floating-license>`_. Ideally, your license administrator will already "
"have implemented one that can be used unchanged in Spack: Look for the "
"environment variable ``INTEL_LICENSE_FILE`` or for files ``/opt/intel/"
"licenses/*.lic`` that contain::"
msgstr ""

# 1515c5cd88714f91a366e8b187ac3be7
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:207
msgid ""
"The relevant tokens, among possibly others, are the ``USE_SERVER`` line, "
"intended specifically for clients, and one or more ``SERVER`` lines above it "
"which give the network address."
msgstr ""

# 96eb74b171784623a4a85e943541bb35
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:211
msgid ""
"If you cannot find pre-existing ``/opt/intel/licenses/*.lic`` files and the "
"``INTEL_LICENSE_FILE`` environment variable is not set (even after you "
"loaded any relevant modulefiles), ask your license administrator for the "
"server address(es) and place them in a \"global\" license file within your "
"Spack directory tree `as shown below <Spack-managed file_>`_)."
msgstr ""

# a4665a5eb1bb4aafa865f6e6697d7185
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:220
msgid "Installing a standalone license file"
msgstr ""

# ac54af92dc3a418a9892cc5330092e8a
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:222
msgid ""
"If you purchased a user-specific license, follow `Intel's instructions "
"<https://software.intel.com/en-us/faq/licensing#license-management>`_ to "
"\"activate\" it for your serial number, then download the resulting license "
"file. If needed, `request to have the file re-sent <https://software.intel."
"com/en-us/articles/resend-license-file>`_ to you."
msgstr ""

# cd8e41551aa5412bb4e7acd43281a312
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:228
msgid ""
"Intel's license files are text files that contain tokens in the proprietary "
"\"FLEXlm\" format and whose name ends in ``.lic``. Intel installers and "
"compilers look for license files in several locations when they run. Place "
"your license by one of the following means, in order of decreasing "
"preference:"
msgstr ""

# def359f08ad84381812ce81e4a9b8376
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:233
msgid "Default directory"
msgstr ""

# a4d94debb5f94d86bc2fafc43e04afec
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:235
msgid ""
"Install your license file in the directory ``/opt/intel/licenses/`` if you "
"have write permission to it. This directory is inspected by all Intel tools "
"and is therefore preferred, as no further configuration will be needed. "
"Create the directory if it does not yet exist.  For the file name, either "
"keep the downloaded name or use another suitably plain yet descriptive name "
"that ends in ``.lic``. Adjust file permissions for access by licensed users."
msgstr ""

# 2b7177fa279f48eb898c77394fcc2aae
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:244
msgid "Directory given in environment variable"
msgstr ""

# 9dbf0ccff24e45b4a53bc81b047302d8
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:246
msgid ""
"If you cannot use the default directory, but your system already has set the "
"environment variable ``INTEL_LICENSE_FILE`` independent from Spack [fn5]_, "
"then, if you have the necessary write permissions, place your license file "
"in one of the directories mentioned in this environment variable.  Adjust "
"file permissions to match licensed users."
msgstr ""

# d7b674edb8284613a38f42e551da2c69
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:254
msgid ""
"If your system has not yet set and used the environment variable "
"``INTEL_LICENSE_FILE``, you could start using it with the ``spack install`` "
"stage of licensed tools and subsequent client packages. You would, however, "
"be in a bind to always set that variable in the same manner, across updates "
"and re-installations, and perhaps accommodate additions to it. As this may "
"be difficult in the long run, we recommend that you do *not* attempt to "
"start using the variable solely for Spack."
msgstr ""

# 8cf390a797cb48dfb5b0021775171642
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:264
msgid "Spack-managed file"
msgstr ""

# ccc10bc5ca514a039c6f19d763a12710
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:266
msgid ""
"The first time Spack encounters an Intel package that requires a license, it "
"will initialize a Spack-global Intel-specific license file for you, as a "
"template with instructional comments, and bring up an editor [fn6]_.  Spack "
"will do this *even if you have a working license elsewhere* on the system."
msgstr ""

# d3f8677e4b89474ca5e2ae8494251379
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:271
msgid ""
"To proceed with an externally configured license, leave the newly templated "
"file as is (containing comments only) and close the editor. You do not need "
"to touch the file again."
msgstr ""

# c298f29293b649b88240abb5ca7c5710
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:275
msgid ""
"To configure your own standalone license, copy the contents of your "
"downloaded license file into the opened file, save it, and close the editor."
msgstr ""

# 9d10a380f1c34465b065f425a529c927
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:278
msgid ""
"To use a license server (i.e., a floating network license) that is not "
"already configured elsewhere on the system, supply your license server "
"address(es) in the form of ``SERVER`` and ``USE_SERVER`` lines at the "
"*beginning of the file* [fn7]_, in the format shown in section `Pointing to "
"an existing license server`_. Save the file and close the editor."
msgstr ""

# 07afe7ffefaf4649b135e51c522ad635
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:284
msgid ""
"To revisit and manually edit this file, such as prior to a subsequent "
"installation attempt, find it at ``$SPACK_ROOT/etc/spack/licenses/intel/"
"intel.lic`` ."
msgstr ""

# f430dd2448e04019b4e3ef702767f181
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:288
msgid ""
"Spack will place symbolic links to this file in each directory where "
"licensed Intel binaries were installed.  If you kept the template unchanged, "
"Intel tools will simply ignore it."
msgstr ""

# 116b5057e16446978b2c87511071c749
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:297
msgid "Integration of Intel tools installed *external* to Spack"
msgstr ""

# a6538882eda7466fa63e3a36e5fb9e39
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:299
msgid "This section discusses `route 1`_ from the introduction."
msgstr ""

# 0e16021969d743599ead2c426b989331
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:301
msgid ""
"A site that already uses Intel tools, especially licensed ones, will likely "
"have some versions already installed on the system, especially at a time "
"when Spack is just being introduced. It will be useful to make such "
"previously installed tools available for use by Spack as they are. How to do "
"this varies depending on the type of the tools:"
msgstr ""

# 6e6ab6cef64b41f4b6d7f0156c56678d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:309
msgid "Integrating external compilers"
msgstr ""

# 6802f00a8be04cd789aac10552f3f6bd
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:311
msgid ""
"For Spack to use external Intel compilers, you must tell it both *where* to "
"find them and *when* to use them.  The present section documents the \"where"
"\" aspect, involving ``compilers.yaml`` and, in most cases, long absolute "
"paths. The \"when\" aspect actually relates to `route 3`_ and requires "
"explicitly stating the compiler as a spec component (in the form ``foo "
"%intel`` or ``foo %intel@compilerversion``) when installing client packages "
"or altering Spack's compiler default in ``packages.yaml``. See section "
"`Selecting Intel compilers <Selecting Intel compilers_>`_ for details."
msgstr ""

# 5ca543592e4f40ad80fe92b8d9cb94ad
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:320
msgid ""
"To integrate a new set of externally installed Intel compilers into Spack "
"follow section :ref:`Compiler configuration <compiler-config>`. Briefly, "
"prepare your shell environment like you would if you were to use these "
"compilers normally, i.e., typically by a ``module load ...`` or a shell "
"``source ...`` command, then use ``spack compiler find`` to make Spack aware "
"of these compilers.  This will create a new entry in a suitably scoped and "
"possibly new ``compilers.yaml`` file. You could certainly create such a "
"compiler entry manually, but this is error-prone due to the indentation and "
"different data types involved."
msgstr ""

# d05578c29d594e549f33f17380f7d4da
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:331
msgid ""
"The Intel compilers need and use the system's native GCC compiler (``gcc`` "
"on most systems, ``clang`` on macOS) to provide certain functionality, "
"notably to support C++. To provide a different GCC compiler for the Intel "
"tools, or more generally set persistent flags for all invocations of the "
"Intel compilers, locate the ``compilers.yaml`` entry that defines your Intel "
"compiler, and, using a text editor, change one or both of the following:"
msgstr ""

# ae2fd4283a89415c9ea88924bfce3b07
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:338
msgid "At the ``modules:`` tag, add a ``gcc`` module to the list."
msgstr ""

# 159733ec400244bd960cc45ad0ce4026
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:339
msgid ""
"At the ``flags:`` tag, add ``cflags:``, ``cxxflags:``, and ``fflags:`` key-"
"value entries."
msgstr ""

# 14bf2eb16a684a028bf180b9812e2cb5
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:341
msgid ""
"Consult the examples under :ref:`Compiler configuration <compiler-config>` "
"and :ref:`Vendor-Specific Compiler Configuration <vendor-specific-compiler-"
"configuration>` in the Spack documentation. When done, validate your "
"compiler definition by running ``spack compiler info intel@compilerversion`` "
"(replacing ``compilerversion`` by the version that you defined)."
msgstr ""

# b6ef5226e4054cc58d71cb56152bc686
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:350
msgid ""
"Be aware that both the GCC integration and persistent compiler flags can "
"also be affected by an advanced third method:"
msgstr ""

# dbc966fbaa06434389e12355d34ee9ca
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:353
msgid ""
"A modulefile that provides the Intel compilers for you could, for the "
"benefit of users outside of Spack, implicitly integrate a specific ``gcc`` "
"version via compiler flag environment variables or (hopefully not) via a "
"sneaky extra ``PATH`` addition."
msgstr ""

# 8076aacffcb9466084d0afd942a146db
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:358
msgid ""
"Next, visit section `Selecting Intel Compilers`_ to learn how to tell Spack "
"to use the newly configured compilers."
msgstr ""

# 83ad5c8a8fc3440abdc9267b15d3afa6
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:363
msgid "Integrating external libraries"
msgstr ""

# b942c85d649e407fa1510ba0a6d860ab
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:365
msgid ""
"Configure external library-type packages (as opposed to compilers) in the "
"files ``$SPACK_ROOT/etc/spack/packages.yaml`` or ``~/.spack/packages.yaml``, "
"following the Spack documentation under :ref:`External Packages <sec-"
"external-packages>`."
msgstr ""

# b0a143354a8846f8b77454f9b3d5cd6b
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:370
msgid ""
"Similar to ``compilers.yaml``, the ``packages.yaml`` files define a package "
"external to Spack in terms of a Spack spec and resolve each such spec via "
"either the ``paths`` or ``modules`` tokens to a specific pre-installed "
"package version on the system.  Since Intel tools generally need environment "
"variables to interoperate, which cannot be conveyed in a mere ``paths`` "
"specification, the ``modules`` token will be more sensible to use. It "
"resolves the Spack-side spec to a modulefile generated and managed outside "
"of Spack's purview, which Spack will load internally and transiently when "
"the corresponding spec is called upon to compile client packages."
msgstr ""

# 98f23fb2e77e429293d389c57675d0c7
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:380
msgid ""
"Unlike for compilers, where ``spack find compilers [spec]`` generates an "
"entry in an existing or new ``compilers.yaml`` file, Spack does not offer a "
"command to generate an entirely new ``packages.yaml`` entry.  You must "
"create new entries yourself in a text editor, though the command ``spack "
"config [--scope=...] edit packages`` can help with selecting the proper "
"file. See section :ref:`Configuration Scopes <configuration-scopes>` for an "
"explanation about the different files and section :ref:`Build customization "
"<build-settings>` for specifics and examples for ``packages.yaml`` files."
msgstr ""

# b825fde0a98f4b48ba1f70e69d1bd01d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:400
msgid ""
"The following example integrates packages embodied by hypothetical external "
"modulefiles ``intel-mkl/18/...`` into Spack as packages ``intel-mkl@...``:"
msgstr ""

# 633baef8a31e46ceb4c7cf8db4a56980
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:408
msgid "Make sure the file begins with:"
msgstr ""

# 51e240818306465d8e8d00d552a417a1
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:414
msgid "Adapt the following example. Be sure to maintain the indentation:"
msgstr ""

# 7895748dee1442ba845114c328a1d8b2
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:425
msgid ""
"The version numbers for the ``intel-mkl`` specs defined here correspond to "
"file and directory names that Intel uses for its products because they were "
"adopted and declared as such within Spack's package repository. You can "
"inspect the versions known to your current Spack installation by:"
msgstr ""

# b37051d691fd4357863ff6e5d2efaf9b
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:434
msgid ""
"Using the same version numbers for external packages as for packages known "
"internally is useful for clarity, but not strictly necessary.  Moreover, "
"with a ``packages.yaml`` entry, you can go beyond internally known versions."
msgstr ""

# 96b7c1fae0c440728eb2315602f7cc26
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:440
msgid ""
"Note that the Spack spec in the example does not contain a compiler "
"specification. This is intentional, as the Intel library packages can be "
"used unmodified with different compilers."
msgstr ""

# 7c2f38eee20b47ca96c5f439745fe4bd
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:444
msgid ""
"A slightly more advanced example illustrates how to provide :ref:`variants "
"<basic-variants>` and how to use the ``buildable: False`` directive to "
"prevent Spack from installing other versions or variants of the named "
"package through its normal internal mechanism."
msgstr ""

# 9a474a80373f49d59292792aaf0d6b3d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:459
msgid ""
"One additional example illustrates the use of ``paths:`` instead of "
"``modules:``, useful when external modulefiles are not available or not "
"suitable:"
msgstr ""

# b15c97d3616c42fc995b4907bc26b3bb
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:472
msgid ""
"Note that for the Intel packages discussed here, the directory values in the "
"``paths:`` entries must be the high-level and typically version-less "
"\"installation directory\" that has been used by Intel's product installer. "
"Such a directory will typically accumulate various product versions.  "
"Amongst them, Spack will select the correct version-specific product "
"directory based on the ``@version`` spec component that each path is being "
"defined for."
msgstr ""

# f9239e94d89a4fe7abd1dd9cc7bff5c1
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:479
msgid ""
"For further background and details, see :ref:`External Packages <sec-"
"external-packages>`."
msgstr ""

# 7d760c5057d8439896589d95acb2dd54
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:485
msgid "Installing Intel tools *within* Spack"
msgstr ""

# 94d7209d81994f539e864d51bf7d3b39
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:487
msgid "This section discusses `route 2`_ from the introduction."
msgstr ""

# 05d2e880e04d4b9daa40b2e14e8b84be
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:489
msgid ""
"When a system does not yet have Intel tools installed already, or the "
"installed versions are undesirable, Spack can install these tools like any "
"regular Spack package for you and, with appropriate pre- and post-install "
"configuration, use its compilers and/or libraries to install client packages."
msgstr ""

# 60dbc24ce68f4319aaeba733c2c69ef2
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:498
msgid "Install steps for packages with compilers and libraries"
msgstr ""

# 8365576130f74989a1792e4044402d5a
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:500
msgid ""
"The packages ``intel-parallel-studio`` and ``intel`` (which is a subset of "
"the former) are many-in-one products that contain both compilers and a set "
"of library packages whose scope depends on the edition. Because they are "
"general products geared towards shell environments, it can be somewhat "
"involved to integrate these packages at their full extent into Spack."
msgstr ""

# 0a639efc1ff84ca4b6cded9a8cd796f5
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:507
msgid ""
"Note: To install library-only packages like ``intel-mkl``, ``intel-mpi``, "
"and ``intel-daal`` follow `the next section <intel-install-libs_>`_ instead."
msgstr ""

# dc92b9812c6d4ea99404ead4d6286e08
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:510
msgid "Review the section `Configuring spack to use intel licenses`_."
msgstr ""

# 61f3b35f3c9c4d19a74bd497e3a4207f
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:514
msgid ""
"To install a version of ``intel-parallel-studio`` that provides Intel "
"compilers at a version that you have *not yet declared in Spack*, the "
"following preparatory steps are recommended:"
msgstr ""

# ef008604fc434543a7ce408833245ea0
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:518
msgid ""
"Determine the compiler spec that the new ``intel-parallel-studio`` package "
"will provide, as follows: From the package version, combine the last two "
"digits of the version year, a literal \"0\" (zero), and the version "
"component that immediately follows the year."
msgstr ""

# 3c5e1a58294e4d418cf28af3f1dbe02f
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:524
msgid "Package version"
msgstr ""

# 1efcdf62232f48cb89b3cf93bd80fbff
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:524
msgid "Compiler spec provided"
msgstr ""

# f6f502b96968432ab18030760cf9f759
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:526
msgid "``intel-parallel-studio@edition.YYyy.u``"
msgstr ""

# 7c46b787f663410eac6b94eb6c3ce675
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:526
msgid "``intel@yy.0.u``"
msgstr ""

# 397f574761f14274aa3bf4a8c422f0ad
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:529
msgid ""
"Example: The package ``intel-parallel-studio@cluster.2018.3`` will provide "
"the compiler with spec ``intel@18.0.3``."
msgstr ""

# 23969bbc46894d0499f168157549c96f
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:534
msgid ""
"Add a new compiler section with the newly anticipated version at the end of "
"a ``compilers.yaml`` file in a suitable scope.  For example, run:"
msgstr ""

# 6d8d78d7829347e8b55fdb9012d33221
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:541
msgid "and append a stub entry:"
msgstr ""

# 3d021ba4cc05413e87251ff9189e5905
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:556
msgid ""
"Replace ``18.0.3`` with the version that you determined in the preceeding "
"step. The contents under ``paths:`` do not matter yet."
msgstr ""

# 22ec1dfdf86d43f18df540ed05d669a6
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:559
msgid ""
"You are right to ask: \"Why on earth is that necessary?\" [fn8]_. The answer "
"lies in Spack striving for strict compiler consistency. Consider what "
"happens without such a pre-declared compiler stub: Say, you ask Spack to "
"install a particular version ``intel-parallel-studio@edition.V``.  Spack "
"will apply an unrelated compiler spec to concretize and install your "
"request, resulting in ``intel-parallel-studio@edition.V %X``. That compiler "
"``%X`` is not going to be the version that this new package itself provides. "
"Rather, it would typically be ``%gcc@...`` in a default Spack installation "
"or possibly indeed ``%intel@...``, but at a version that precedes ``V``."
msgstr ""

# d248c293bdc84a50a3e657e9a2b98b64
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:570
msgid ""
"The problem comes to the fore as soon as you try to use any virtual ``mkl`` "
"or ``mpi`` packages that you would expect to now be provided by ``intel-"
"parallel-studio@edition.V``.  Spack will indeed see those virtual packages, "
"but only as being tied to the compiler that the package ``intel-parallel-"
"studio@edition.V`` was concretized with *at installation*. If you were to "
"install a client package with the new compilers now available to you, you "
"would naturally run ``spack install foo +mkl %intel@V``, yet Spack will "
"either complain about ``mkl%intel@V`` being missing (because it only knows "
"about ``mkl%X``) or it will go and attempt to install *another instance* of "
"``intel-parallel-studio@edition.V %intel@V`` so as to match the compiler "
"spec ``%intel@V`` that you gave for your client package ``foo``. This will "
"be unexpected and will quickly get annoying because each reinstallation "
"takes up time and extra disk space."
msgstr ""

# 246c8ad529d54b92a4dbf0cda4a4db9d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:584
msgid ""
"To escape this trap, put the compiler stub declaration shown here in place, "
"then use that pre-declared compiler spec to install the actual package, as "
"shown next.  This approach works because during installation only the "
"package's own self-sufficient installer will be used, not any compiler."
msgstr ""

# df2192bd51bf49508be8f3510f5c5f6b
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:591
msgid ""
"Verify that the compiler version provided by the new ``studio`` version "
"would be used as expected if you were to compile a client package:"
msgstr ""

# be94d3fa87f04be2b4ddc870774f1d26
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:598
msgid ""
"If the version does not match, explicitly state the anticipated compiler "
"version, e.g.:"
msgstr ""

# 1ea36fc37e9947e09b577e29417a7b8c
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:604
msgid ""
"if there are problems, review and correct the compiler's ``compilers.yaml`` "
"entry, be it still in stub form or already complete (as it would be for a re-"
"installation)."
msgstr ""

# 84efda5f42634856a0a0c5704fc0c45b
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:608
msgid ""
"Install the new ``studio`` package using Spack's regular ``install`` "
"command. It may be wise to provide the anticipated compiler (`see above "
"<verify-compiler-anticipated_>`_) as an explicit concretization element:"
msgstr ""

# 117b822d8e864bae99a61d8e8c6be5f4
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:618
msgid ""
"Follow the same steps as under `Integrating external compilers`_ to tell "
"Spack the minutiae for actually using those compilers with client packages. "
"If you placed a stub entry in a ``compilers.yaml`` file, now is the time to "
"edit it and fill in the particulars."
msgstr ""

# 504eeca8fcb747e293e2c35ee9871aa0
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:623
msgid ""
"Under ``paths:``, give the full paths to the actual compiler binaries "
"(``icc``, ``ifort``, etc.) located within the Spack installation tree, in "
"all their unsightly length [fn9]_."
msgstr ""

# 0542a03ec0df45138f91d8cd09f321c0
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:627
msgid "To determine the full path to the C compiler, adapt and run:"
msgstr ""

# 348298674cf249c7b7489b797f0046cb
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:634
msgid ""
"If you get hits for both ``intel64`` and ``ia32``, you almost certainly will "
"want to use the ``intel64`` variant.  The ``icpc`` and ``ifort`` compilers "
"will be located in the same directory as ``icc``."
msgstr ""

# 5008f8d0cd4845ba8cb13865cba55481
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:638
msgid ""
"Use the ``modules:`` and/or ``cflags:`` tokens to specify a suitable "
"accompanying ``gcc`` version to help pacify picky client packages that ask "
"for C++ standards more recent than supported by your system-provided ``gcc`` "
"and its ``libstdc++.so``."
msgstr ""

# 50b92f0f582b4f19bc191b770ee8b755
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:643
msgid ""
"To set the Intel compilers for default use in Spack, instead of the usual ``"
"%gcc``, follow section `Selecting Intel compilers`_."
msgstr ""

# de724ea8b1834f5cb0d2003728645ce7
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:648
msgid ""
"Compiler packages like ``intel-parallel-studio`` can easily be above 10 GB "
"in size, which can tax the disk space available for temporary files on "
"small, busy, or restricted systems (like virtual machines). The Intel "
"installer will stop and report insufficient space as::"
msgstr ""

# ba44d2d186c446c3b543da2dfc7b2e8a
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:658
msgid "As first remedy, clean Spack's existing staging area:"
msgstr ""

# 9c52c0a95cd041c790ec3b73fbc8373b
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:664
msgid ""
"then retry installing the large package. Spack normally cleans staging "
"directories but certain failures may prevent it from doing so."
msgstr ""

# a004e8b9f5df44f19f62c8da8e55c618
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:667
msgid ""
"If the error persists, tell Spack to use an alternative location for "
"temporary files:"
msgstr ""

# 9099711eaddb4ff4a18be570659553f5
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:670
msgid "Run ``df -h`` to identify an alternative location on your system."
msgstr ""

# 022392801b65483582ef82132269b61a
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:672
msgid ""
"Tell Spack to use that location for staging. Do **one** of the following:"
msgstr ""

# a91f27adff6d4abf9471da43e454830f
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:674
msgid ""
"Run Spack with the environment variable ``TMPDIR`` altered for just a single "
"command. For example, to use your ``$HOME`` directory:"
msgstr ""

# ad4a796d663045a08b8009051607f891
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:681
msgid ""
"This example uses Bourne shell syntax. Adapt for other shells as needed."
msgstr ""

# 6e1073a7661648a3a2c44a75600ed093
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:683
msgid ""
"Alternatively, customize Spack's ``build_stage`` :ref:`configuration setting "
"<config-overrides>`."
msgstr ""

# a2df41228f6e4c5c8218d7325781af8c
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:690
msgid "Append:"
msgstr ""

# 8738ed2ae87a4010b4bb126a2b73ad2d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:698
msgid ""
"Do not duplicate the ``config:`` line if it already is present. Adapt the "
"location, which here is the same as in the preceeding example."
msgstr ""

# 73b31c45c60f4990b86918b05bc01983
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:701
msgid "Retry installing the large package."
msgstr ""

# 785d99485f0546ec866ab88f7cdd293d
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:708
msgid "Install steps for library-only packages"
msgstr ""

# b20db298e9ca4bcc92e907e2141971a4
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:710
msgid ""
"To install library-only packages like ``intel-mkl``, ``intel-mpi``, and "
"``intel-daal`` follow the steps given here. For packages that contain a "
"compiler, follow `the previous section <intel-install-studio_>`_ instead."
msgstr ""

# a03b17fe1f7d498ebb1eb89af2a7bdfd
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:715
msgid ""
"For pre-2017 product releases, review the section `Configuring Spack to use "
"Intel licenses`_."
msgstr ""

# 4e25917d36ea4c6b9ea24f08ea9fcff9
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:717
msgid ""
"Inspect the package spec. Specify an explicit compiler if necessary, e.g.:"
msgstr ""

# d92634f7f6364c2ea76d20655163b502
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:724
msgid ""
"Check that the package will use the compiler flavor and version that you "
"expect."
msgstr ""

# e1b08f8fbba6426eb4d2142594543857
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:726
msgid ""
"Install the package normally within Spack. Use the same spec as in the "
"previous command, i.e., as general or as specific as needed:"
msgstr ""

# 9869a878178a4da19f8a0faf2253d6a9
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:734
msgid ""
"To prepare the new packages for use with client packages, follow `Selecting "
"libraries to satisfy virtual packages`_."
msgstr ""

# 5ff961ed2a7f41f7ae3c254d91399d87
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:740
msgid "Debug notes"
msgstr ""

# 065bcddbba0b4ba390e2441f9f4de5be
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:742
msgid ""
"You can trigger a wall of additional diagnostics using Spack options, e.g.:"
msgstr ""

# 979e231d7c3d42cb9308f130f5894966
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:748
msgid ""
"The ``--debug`` option can also be useful while installing client packages "
"`(see below) <Using Intel tools in Spack to install client packages_>`_ to "
"confirm the integration of the Intel tools in Spack, notably MKL and MPI."
msgstr ""

# a0a961539c0d4fbe946bf116099e73dd
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:753
msgid ""
"The ``.spack/`` subdirectory of an installed ``IntelPackage`` will contain, "
"besides Spack's usual archival items, a copy of the ``silent.cfg`` file that "
"was passed to the Intel installer:"
msgstr ""

# 58faeac1365f4851bcaa5e30ad65c68e
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:762
msgid ""
"If an installation error occurs, Spack will normally clean up and remove a "
"partially installed target directory. You can direct Spack to keep it using "
"``--keep-prefix``, e.g.:"
msgstr ""

# 1e6b83e0922e4fdf855381e2e250fb7a
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:770
msgid ""
"You must, however, *remove such partial installations* prior to subsequent "
"installation attempts. Otherwise, the Intel installer will behave "
"incorrectly."
msgstr ""

# ef90338ce5574758908ce0bfa57351c0
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:777
msgid "Using Intel tools in Spack to install client packages"
msgstr ""

# b99585e34c9e4ec888324d0a80cb4b41
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:779
msgid "Finally, this section pertains to `route 3`_ from the introduction."
msgstr ""

# cb9d8968d50446a89c5251e4edcb9d68
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:781
msgid ""
"Once Intel tools are installed within Spack as external or internal packages "
"they can be used as intended for installing client packages."
msgstr ""

# 663654fa6d664c898f1d5e0aeb435597
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:789
msgid "Selecting Intel compilers"
msgstr ""

# c9bad9f975a043f482c8aab6a21da8e5
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:791
msgid ""
"Select Intel compilers to compile client packages, like any compiler in "
"Spack, by one of the following means:"
msgstr ""

# d7b27a4d73b04f87a47a8e32d3943643
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:794
msgid "Request the Intel compilers explicitly in the client spec, e.g.:"
msgstr ""

# b23e87765770430aa4af398c4e72b217
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:801
msgid ""
"Alternatively, request Intel compilers implicitly by concretization "
"preferences. Configure the order of compilers in the appropriate ``packages."
"yaml`` file, under either an ``all:`` or client-package-specific entry, in a "
"``compiler:`` list. Consult the Spack documentation for :ref:`Configuring "
"Package Preferences <configs-tutorial-package-prefs>` and :ref:"
"`Concretization Preferences <concretization-preferences>`."
msgstr ""

# 9ef930f2484e49798d338951122aec34
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:809
msgid "Example: ``etc/spack/packages.yaml`` might simply contain:"
msgstr ""

# ea227710d5fb43a386b781eeb8d6464c
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:817
msgid ""
"To be more specific, you can state partial or full compiler version numbers, "
"for example:"
msgstr ""

# 4c7a13dd48c2495c9971ce89c0f89a87
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:830
msgid "Selecting libraries to satisfy virtual packages"
msgstr ""

# 01d0a6674c774d278a1fc6e1a58694cb
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:832
msgid ""
"Intel packages, whether integrated into Spack as external packages or "
"installed within Spack, can be called upon to satisfy the requirement of a "
"client package for a library that is available from different providers. The "
"relevant virtual packages for Intel are ``blas``, ``lapack``, ``scalapack``, "
"and ``mpi``."
msgstr ""

# a6bc3866eb5148ae98faf5b95e79e1d4
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:838
msgid ""
"In both integration routes, Intel packages can have optional :ref:`variants "
"<basic-variants>` which alter the list of virtual packages they can "
"satisfy.  For Spack-external packages, the active variants are a combination "
"of the defaults declared in Spack's package repository and the spec it is "
"declared as in ``packages.yaml``. Needless to say, those should match the "
"components that are actually present in the external product installation. "
"Likewise, for Spack-internal packages, the active variants are determined, "
"persistently at installation time, from the defaults in the repository and "
"the spec selected to be installed."
msgstr ""

# e126fa014bd14fcc89b4c67e71e61538
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:848
msgid ""
"To have Intel packages satisfy virtual package requests for all or selected "
"client packages, edit the ``packages.yaml`` file.  Customize, either in the "
"``all:`` or a more specific entry, a ``providers:`` dictionary whose keys "
"are the virtual packages and whose values are the Spack specs that satisfy "
"the virtual package, in order of decreasing preference.  To learn more about "
"the ``providers:`` settings, see the Spack tutorial for :ref:`Configuring "
"Package Preferences <configs-tutorial-package-prefs>` and the section :ref:"
"`Concretization Preferences <concretization-preferences>`."
msgstr ""

# 32f824b40e184fff8b54f3b9e1d84334
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:858
msgid ""
"Example: The following fairly minimal example for ``packages.yaml`` shows "
"how to exclusively use the standalone ``intel-mkl`` package for all the "
"linear algebra virtual packages in Spack, and ``intel-mpi`` as the preferred "
"MPI implementation. Other providers can still be chosen on a per-package "
"basis."
msgstr ""

# 6bfc8447124f4c3dbe6820f381422a7a
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:873
msgid ""
"If you have access to the ``intel-parallel-studio@cluster`` edition, you can "
"use instead:"
msgstr ""

# cbaa9a47312c400592b674264d8c417f
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:886
msgid ""
"If you installed ``intel-parallel-studio`` within Spack (\"`route 2`_\"), "
"make sure you followed the `special installation step <intel-compiler-"
"anticipation_>`_ to ensure that its virtual packages match the compilers it "
"provides."
msgstr ""

# 85655ba7c53248a59f28e9ef5275d3dd
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:894
msgid "Using Intel tools as explicit dependency"
msgstr ""

# 6c6a09e1558543aab701d3207b64fa56
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:896
msgid ""
"With the proper installation as detailed above, no special steps should be "
"required when a client package specifically (and thus deliberately) requests "
"an Intel package as dependency, this being one of the target use cases for "
"Spack."
msgstr ""

# ea503e936b9642528ccc33c273de33d9
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:903
msgid "Tips for configuring client packages to use MKL"
msgstr ""

# 545b896580c84e549c4132d5f2462fb4
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:905
msgid ""
"The Math Kernel Library (MKL) is provided by several Intel packages, "
"currently ``intel-parallel-studio`` when variant ``+mkl`` is active (it is "
"by default) and the standalone ``intel-mkl``. Because of these different "
"provider packages, a *virtual* ``mkl`` package is declared in Spack."
msgstr ""

# 295b10578129437394ac0071d4e5f89b
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:910
msgid "To use MKL-specific APIs in a client package:"
msgstr ""

# 88015575ff414465bb96ff73c58e24ce
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:912
msgid ""
"Declare a dependency on ``mkl``, rather than a specific provider like "
"``intel-mkl``.  Declare the dependency either absolutely or conditionally "
"based on variants that your package might have declared:"
msgstr ""

# 9a7ce00c274c47c582b1c88b9421ea07
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:923
msgid ""
"The ``MKLROOT`` environment variable (part of the documented API) will be "
"set during all stages of client package installation, and is available to "
"both the Spack packaging code and the client code."
msgstr ""

# 7724283fb719467680e7dc02590caed9
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:927
msgid "To use MKL as provider for BLAS, LAPACK, or ScaLAPACK:"
msgstr ""

# c69f5c0065b64f8aacb906859a9673e4
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:929
msgid ""
"The packages that provide ``mkl`` also provide the narrower virtual "
"``blas``, ``lapack``, and ``scalapack`` packages. See the relevant :ref:"
"`Packaging Guide section <blas_lapack_scalapack>` for an introduction. To "
"portably use these virtual packages, construct preprocessor and linker "
"option strings in your package configuration code using the package "
"functions ``.headers`` and ``.libs`` in conjunction with utility functions "
"from the following classes:"
msgstr ""

# f71e67984d6e496fb459f68cc5728561
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:938
msgid ":py:class:`llnl.util.filesystem.FileList`,"
msgstr ""

# 0f9c57b02ae94811bb7b3d42635729fc
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:939
msgid ":py:class:`llnl.util.filesystem.HeaderList`,"
msgstr ""

# 54936e455401410aa0e687caf5303c6e
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:940
msgid ":py:class:`llnl.util.filesystem.LibraryList`."
msgstr ""

# eaba2fe284044c598d55483faa0f9bdb
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:943
msgid ""
"*Do not* use constructs like ``.prefix.include`` or ``.prefix.lib``, with "
"Intel or any other implementation of ``blas``, ``lapack``, and ``scalapack``."
msgstr ""

# 2ed6275ff78c4f218f4a07eb9997fae3
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:947
msgid ""
"For example, for an :ref:`AutotoolsPackage <autotoolspackage>` use ``.libs."
"ld_flags`` to transform the library file list into linker options passed to "
"``./configure``:"
msgstr ""

# 003129e347114bf4a9c7215412ac8339
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:962
msgid ""
"Even though ``.ld_flags`` will return a string of multiple words, *do not* "
"use quotes for options like ``--with-blas=...`` because Spack passes them to "
"``./configure`` without invoking a shell."
msgstr ""

# f0224390564a44e68d0124997602e608
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:966
msgid ""
"Likewise, in a :ref:`MakefilePackage <makefilepackage>` or similiar package "
"that does not use AutoTools you may need to provide include and link options "
"for use on command lines or in environment variables. For example, to "
"generate an option string of the form ``-I<dir>``, use:"
msgstr ""

# b34b99d79b2c488cad1f34f65988dcc5
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:976
msgid ""
"and to generate linker options (``-L<dir> -llibname ...``), use the same as "
"above,"
msgstr ""

# bf4836b2d2b14a50be36f58bf9554370
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:982
msgid ""
"See :ref:`MakefilePackage <makefilepackage>` and more generally the :ref:"
"`Packaging Guide <blas_lapack_scalapack>` for background and further "
"examples."
msgstr ""

# fa9c57228a56459ba89b1392c875bcef
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:991
msgid "Footnotes"
msgstr ""

# 32d4191318a14a45b0ebbc93bc2d7e3e
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:993
msgid "Strictly speaking, versions from ``2017.2`` onward."
msgstr ""

# 694d10d5e87e42eebba2e5e91bafe221
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:995
msgid ""
"The package ``intel`` intentionally does not have a ``+mpi`` variant since "
"it is meant to be small. The native installer will always add MPI *runtime* "
"components because it follows defaults defined in the download package, even "
"when ``intel-parallel-studio ~mpi`` has been requested."
msgstr ""

# 4ac50b9ad24647239b4cf39f8fddf744
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1000
msgid ""
"For ``intel-parallel-studio +mpi``, the class function :py:func:``."
"IntelPackage.pset_components`` will include ``\"intel-mpi intel-imb\"`` in a "
"list of component patterns passed to the Intel installer. The installer will "
"extend each pattern word with an implied glob-like ``*`` to resolve it to "
"package names that are *actually present in the product BOM*. As a side "
"effect, this pattern approach accommodates occasional package name changes, "
"e.g., capturing both ``intel-mpirt`` and ``intel-mpi-rt`` ."
msgstr ""

# 92dfdacb520441a7a3ba77865e75b5dc
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1009
msgid "How could the external installation have succeeded otherwise?"
msgstr ""

# 3efe10a4f456409b80bb378393691dec
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1011
msgid ""
"According to Intel's documentation, there is supposedly a way to install a "
"product using a network license even `when a FLEXlm server is not running "
"<https://software.intel.com/en-us/articles/licensing-setting-up-the-client-"
"floating-license>`_: Specify the license in the form ``port@serverhost`` in "
"the ``INTEL_LICENSE_FILE`` environment variable. All other means of "
"specifying a network license require that the license server be up."
msgstr ""

# 04868a66f77b455cbadb21b3a4534662
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1018
msgid ""
"Despite the name, ``INTEL_LICENSE_FILE`` can hold several and diverse "
"entries. They  can be either directories (presumed to contain ``*.lic`` "
"files), file names, or network locations in the form ``port@host`` (on Linux "
"and Mac), with all items separated by \":\" (on Linux and Mac)."
msgstr ""

# 8838b89f139b413fad718e17f14384f1
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1023
msgid ""
"Should said editor turn out to be ``vi``, you better be in a position to "
"know how to use it."
msgstr ""

# 38980b8c3299442e92f7cb4923874a0a
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1026
msgid ""
"Comment lines in FLEXlm files, indicated by ``#`` as the first non-"
"whitespace character on the line, are generally allowed anywhere in the "
"file. There `have been reports <https://github.com/spack/spack/"
"issues/6534>`_, however, that as of 2018, ``SERVER`` and ``USE_SERVER`` "
"lines must precede any comment lines."
msgstr ""

# f0ee298d6bf8457abd1853a0aaa37b03
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1037
msgid ""
"Spack's close coupling of installed packages to compilers, which both "
"necessitates the detour for installing ``intel-parallel-studio``, and "
"largely limits any of its provided virtual packages to a single compiler, "
"heavily favors `recommending to install Intel Parallel Studio outside of "
"Spack <integrate-external-intel_>`_ and declare it for Spack in ``packages."
"yaml`` by a `compiler-less spec <compiler-neutral-package_>`_."
msgstr ""

# 12c1d246756047259d9d9c519a7ba1dd
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1044
msgid "With some effort, you can convince Spack to use shorter paths."
msgstr ""

# f59c66733d88446d87d57641aa739e9c
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1046
msgid ""
"Altering the naming scheme means that Spack will lose track of all packages "
"it has installed for you so far. That said, the time is right for this kind "
"of customization when you are defining a new set of compilers."
msgstr ""

# 0d69abda3ac04ff390419658326255c5
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1051
msgid "The relevant tunables are:"
msgstr ""

# a9c846d54f864f7fab520ad884152a9e
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1053
msgid ""
"Set the ``install_tree`` location in ``config.yaml`` (:ref:`see doc <config-"
"yaml>`)."
msgstr ""

# 9356f3e434654c039a6acc2cad2d052c
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1055
msgid ""
"Set the hash length in ``install-path-scheme``, also in ``config.yaml`` (:"
"ref:`q.v. <config-yaml>`)."
msgstr ""

# 637382aac15446a5865057f88a07469e
#: ../spack/lib/spack/docs/build_systems/intelpackage.rst:1057
msgid ""
"You will want to set the *same* hash length for :ref:`tcl module files "
"<modules-naming-scheme>` if you have Spack produce them for you, under "
"``naming_scheme`` in ``modules.yaml``.  Other module dialects cannot be "
"altered in this manner."
msgstr ""

# 18c04d0bf09640a1ae25e1187facc28e
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:10
msgid "MakefilePackage"
msgstr ""

# 719933ca2a4744fcb0acc5eeede95cc9
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:12
msgid ""
"The most primitive build system a package can use is a plain Makefile. "
"Makefiles are simple to write for small projects, but they usually require "
"you to edit the Makefile to set platform and compiler-specific variables."
msgstr ""

# 99a3201275e74f36b3d8e3fdd2743282
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:21
msgid "The ``MakefilePackage`` base class comes with 3 phases:"
msgstr ""

# 995e33f488fa470da1cfb6a1c6719ba9
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:23
msgid "``edit`` - edit the Makefile"
msgstr ""

# b326f0c2eb664baea6f720af0bcf943b
# 847cb73a73e3411cb8d1d552c978c7b4
# d60c1332fc7248d9ae2bd63e5c9aa811
# 5aa4578a6eb04cbcb0ee66c483b69aef
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:24
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:23
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:35
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:22
msgid "``build`` - build the project"
msgstr ""

# c357712a22bd48858bd3b196c7976535
# ba4e13a8abfe4ecc893feab34bfca8b9
# d8283582235047f1afe01f205704a355
# c531ce327ebd4ee495dd7fcf491915dd
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:25
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:24
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:36
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:23
msgid "``install`` - install the project"
msgstr ""

# 1ef1d6649c0b4bf2b7fdc74d39fd8a9f
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:27
msgid ""
"By default, ``edit`` does nothing, but you can override it to replace hard-"
"coded Makefile variables. The ``build`` and ``install`` phases run:"
msgstr ""

# 51d1cb412c2d4622be9f48a30a50fa2c
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:41
msgid ""
"The main file that matters for a ``MakefilePackage`` is the Makefile. This "
"file will be named one of the following ways:"
msgstr ""

# 33dc3e0168ff436185748fab81dd5170
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:44
msgid "GNUmakefile (only works with GNU Make)"
msgstr ""

# 74e44b5b157c4f829ba4008c95c8bc98
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:45
msgid "Makefile (most common)"
msgstr ""

# a0f704b15a544041aa702c1ecf4c6ad1
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:46
msgid "makefile"
msgstr ""

# f6e0e509d96a46c8afb1f98cbfbf6bc5
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:48
msgid ""
"Some Makefiles also *include* other configuration files. Check for an "
"``include`` directive in the Makefile."
msgstr ""

# 5c6c3c4ad44f43a29c37e27abcadadd9
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:55
msgid ""
"Spack assumes that the operating system will have a valid ``make`` utility "
"installed already, so you don't need to add a dependency on ``make``. "
"However, if the package uses a ``GNUmakefile`` or the developers recommend "
"using GNU Make, you should add a dependency on ``gmake``:"
msgstr ""

# eef2f9f0f3c2497ca1304b8b0bb437bc
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:67
msgid "Types of Makefile packages"
msgstr ""

# 1a69491248b546c28ea861ac5f6c7794
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:69
msgid ""
"Most of the work involved in packaging software that uses Makefiles involves "
"overriding or replacing hard-coded variables. Many packages make the mistake "
"of hard-coding compilers, usually for GCC or Intel. This is fine if you "
"happen to be using that particular compiler, but Spack is designed to work "
"with *any* compiler, and you need to ensure that this is the case."
msgstr ""

# 489dd02ba02d48cb9a6141e43c6c2b55
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:76
msgid ""
"Depending on how the Makefile is designed, there are 4 common strategies "
"that can be used to set or override the appropriate variables:"
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# 312e86d7e7524c2e8420a6b19c65feea
# #-#-#-#-#  configuration.pot (Spack 0.12)  #-#-#-#-#
# 91450fb1fa904c82ad8ed8a80ffbf3ca
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# 2202aec695314e95b92df399bed40d7c
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:81
#: ../spack/lib/spack/docs/configuration.rst:413
#: ../spack/lib/spack/docs/packaging_guide.rst:2758
msgid "Environment variables"
msgstr ""

# 12d7aa60c2b542a681d3c9d598e96aed
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:83
msgid ""
"Make has multiple types of `assignment operators <https://www.gnu.org/"
"software/make/manual/make.html#Setting>`_. Some Makefiles use ``=`` to "
"assign variables. The only way to override these variables is to edit the "
"Makefile or override them on the command-line. However, Makefiles that use "
"``?=`` for assignment honor environment variables. Since Spack already sets "
"``CC``, ``CXX``, ``F77``, and ``FC``, you won't need to worry about setting "
"these variables. If there are any other variables you need to set, you can "
"do this in the ``edit`` method:"
msgstr ""

# e22d1643031a4ebf948c7f9ad99b899e
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:100
msgid ""
"`cbench <https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/"
"packages/cbench/package.py>`_ is a good example of a simple package that "
"does this, while `esmf <https://github.com/spack/spack/blob/develop/var/"
"spack/repos/builtin/packages/esmf/package.py>`_ is a good example of a more "
"complex package."
msgstr ""

# a55d631eba1848e8b1fcfabaed763425
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:107
msgid "Command-line arguments"
msgstr ""

# 652aade30aea4e5da2f47aaa4e59f53d
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:109
msgid ""
"If the Makefile ignores environment variables, the next thing to try is "
"command-line arguments. You can do this by overriding the ``build_targets`` "
"attribute. If you don't need access to the spec, you can do this like so:"
msgstr ""

# b2f794ef8de04028a702f93485614ad9
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:119
msgid "If you do need access to the spec, you can create a property like so:"
msgstr ""

# 75dc0c42297b486aa0e81ef78fad0feb
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:133
msgid ""
"`cloverleaf <https://github.com/spack/spack/blob/develop/var/spack/repos/"
"builtin/packages/cloverleaf/package.py>`_ is a good example of a package "
"that uses this strategy."
msgstr ""

# 9934932d9ca1487ca9d4c9ee10221edb
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:138
msgid "Edit Makefile"
msgstr ""

# 6de4dcde114d4aa7bf1c12aad56a1216
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:140
msgid ""
"Some Makefiles are just plain stubborn and will ignore command-line "
"variables. The only way to ensure that these packages build correctly is to "
"directly edit the Makefile. Spack provides a ``FileFilter`` class and a "
"``filter_file`` method to help with this. For example:"
msgstr ""

# 0b5eeaebacf340baaae0efabe70663ce
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:154
msgid ""
"`stream <https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/"
"packages/stream/package.py>`_ is a good example of a package that involves "
"editing a Makefile to set the appropriate variables."
msgstr ""

# ae363ee692b042cda69a326a9306b360
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:160
msgid "Config file"
msgstr ""

# da1e7e9a6c764312b590a96abb85e6f4
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:162
msgid ""
"More complex packages often involve Makefiles that *include* a configuration "
"file. These configuration files are primarily composed of variables relating "
"to the compiler, platform, and the location of dependencies or names of "
"libraries. Since these config files are dependent on the compiler and "
"platform, you will often see entire directories of examples for common "
"compilers and architectures. Use these examples to help determine what "
"possible values to use."
msgstr ""

# 87da30fc3935421e88e23570cc22fed8
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:170
msgid ""
"If the config file is long and only contains one or two variables that need "
"to be modified, you can use the technique above to edit the config file. "
"However, if you end up needing to modify most of the variables, it may be "
"easier to write a new file from scratch."
msgstr ""

# 304c0ed89f624860a8984bd456fe9c24
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:175
msgid ""
"If each variable is independent of each other, a dictionary works well for "
"storing variables:"
msgstr ""

# 32e404601338430b90c6602f5db5f004
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:194
msgid ""
"`elk <https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/"
"packages/elk/package.py>`_ is a good example of a package that uses a "
"dictionary to store configuration variables."
msgstr ""

# 8992783a1592409ab5e25162071c0ff1
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:198
msgid ""
"If the order of variables is important, it may be easier to store them in a "
"list:"
msgstr ""

# 7e213e74b0624eb98445661191fa9594
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:215
msgid ""
"`hpl <https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/"
"packages/hpl/package.py>`_ is a good example of a package that uses a list "
"to store configuration variables."
msgstr ""

# e896b90dd9c942ee8a534dfb0b46702a
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:221
msgid "Variables to watch out for"
msgstr ""

# 9c52c39d8a884e5bbfad1effa7459fd2
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:223
msgid ""
"The following is a list of common variables to watch out for. The first two "
"sections are `implicit variables <https://www.gnu.org/software/make/manual/"
"html_node/Implicit-Variables.html>`_ defined by Make and will always use the "
"same name, while the rest are user-defined variables and may vary from "
"package to package."
msgstr ""

# e1de3a6687674d0480bc8341f0529e83
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:229
msgid "**Compilers**"
msgstr ""

# f8a44a5fde1f467490e9eb83f6f7c83f
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:231
msgid ""
"This includes variables such as ``CC``, ``CXX``, ``F77``, ``F90``, and "
"``FC``, as well as variables related to MPI compiler wrappers, like "
"``MPICC`` and friends."
msgstr ""

# ef04a9175903437cac0c9e6de34451a3
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:235
msgid "**Compiler flags**"
msgstr ""

# a855b8f79de3467b91f19b253ff63740
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:237
msgid ""
"This includes variables for specific compilers, like ``CFLAGS``, "
"``CXXFLAGS``, ``F77FLAGS``, ``F90FLAGS``, ``FCFLAGS``, and ``CPPFLAGS``. "
"These variables are often hard-coded to contain flags specific to a certain "
"compiler. If these flags don't work for every compiler, you may want to "
"consider filtering them."
msgstr ""

# 808497e26b48419698daa2f9933c81d9
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:243
msgid "**Variables that enable or disable features**"
msgstr ""

# 36b027878870425cae01ee03a2df5cc5
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:245
msgid ""
"This includes variables like ``MPI``, ``OPENMP``, ``PIC``, and ``DEBUG``. "
"These flags often require you to create a variant so that you can either "
"build with or without MPI support, for example. These flags are often "
"compiler-dependent. You should replace them with the appropriate compiler "
"flags, such as ``self.compiler.openmp_flag`` or ``self.compiler.pic_flag``."
msgstr ""

# 820e0690602248f8b292e22bf62bca98
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:252
msgid "**Platform flags**"
msgstr ""

# 5f03549d4fa04428af9ed7db8befd233
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:254
msgid ""
"These flags control the type of architecture that the executable is compiler "
"for. Watch out for variables like ``PLAT`` or ``ARCH``."
msgstr ""

# 2ae829f469d84063bcb7633109ff4a67
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:257
msgid "**Dependencies**"
msgstr ""

# a88e672f69114f90b7e681b7c438e2e6
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:259
msgid ""
"Look out for variables that sound like they could be used to locate "
"dependencies, such as ``JAVA_HOME``, ``JPEG_ROOT``, or ``ZLIBDIR``. Also "
"watch out for variables that control linking, such as ``LIBS``, ``LDFLAGS``, "
"and ``INCLUDES``. These variables need to be set to the installation prefix "
"of a dependency, or to the correct linker flags to link to that dependency."
msgstr ""

# 40c4f6dddc654972bdef80dbfef8d1dd
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:266
msgid "**Installation prefix**"
msgstr ""

# 5fb8a6c650ae40b1bd5dea598f2b2c97
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:268
msgid ""
"If your Makefile has an ``install`` target, it needs some way of knowing "
"where to install. By default, many packages install to ``/usr`` or ``/usr/"
"local``. Since many Spack users won't have sudo privileges, it is imperative "
"that each package is installed to the proper prefix. Look for variables like "
"``PREFIX`` or ``INSTALL``."
msgstr ""

# 816fe5277d4b47e0b12d4fde55781f73
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:277
msgid "Makefiles in a sub-directory"
msgstr ""

# 688b48af01744e39af8c9a1e3c566e93
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:279
msgid ""
"Not every package places their Makefile in the root of the package tarball. "
"If the Makefile is in a sub-directory like ``src``, you can tell Spack where "
"to locate it like so:"
msgstr ""

# 8a5d98794ce74f16a1cfefdbbaaf50db
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:290
msgid "Manual installation"
msgstr ""

# 6a983c0a5b4d4537a27642b319f022f8
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:292
msgid ""
"Not every Makefile includes an ``install`` target. If this is the case, you "
"can override the default ``install`` method to manually install the package:"
msgstr ""

# cf117813498b4ac29e36f663bd3c6fb8
#: ../spack/lib/spack/docs/build_systems/makefilepackage.rst:308
msgid ""
"For more information on reading and writing Makefiles, see: https://www.gnu."
"org/software/make/manual/make.html"
msgstr ""

# 26595cb647344d53a9b7baaf3aa979c1
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:10
msgid "MesonPackage"
msgstr ""

# ad151e4ff5b641d297f81194aab73bbb
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:12
msgid ""
"Much like Autotools and CMake, Meson is a build system.  But it is meant to "
"be both fast and as user friendly as possible.  GNOME's goal is to port "
"modules to use the Meson build system."
msgstr ""

# a4bd07b384e7476ca28996cd2de9ef23
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:20
msgid "The ``MesonPackage`` base class comes with the following phases:"
msgstr ""

# 303f631d457d4a4689974831f40a001b
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:22
msgid "``meson`` - generate ninja files"
msgstr ""

# d81398f02aae401ca0310030f8ad5fe0
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:38
msgid ""
"Any of these phases can be overridden in your package as necessary. There is "
"also a ``check`` method that looks for a ``test`` target in the build file. "
"If a ``test`` target exists and the user runs:"
msgstr ""

# 563dd1fcfe6c4def88380a7b95602e24
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:47
msgid "Spack will run ``ninja test`` after the build phase."
msgstr ""

# c9f9d891b2404ed49a93c8c99ceef5ef
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:53
msgid ""
"Packages that use the Meson build system can be identified by the presence "
"of a ``meson.build`` file. This file declares things like build instructions "
"and dependencies."
msgstr ""

# cbe29aa1675947818c07ea2deb57bb63
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:57
msgid ""
"One thing to look for is the ``meson_version`` key that gets passed to the "
"``project`` function:"
msgstr ""

# 5f86080e9d7749978d34ebb94723c842
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:76
msgid ""
"This means that Meson 0.43.0 is the earliest release that will work. You "
"should specify this in a ``depends_on`` statement."
msgstr ""

# 8965fdf647b344da9e311b01c5a86a2c
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:83
msgid ""
"At the bare minimum, packages that use the Meson build system need ``meson`` "
"and ```ninja``` dependencies. Since this is always the case, the "
"``MesonPackage`` base class already contains:"
msgstr ""

# 67c45959b9f74c539c77b6e21d51514a
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:104
msgid "Finding meson flags"
msgstr ""

# bb941f4d2a8d4fc4ac69008176abfcac
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:106
msgid ""
"To get a list of valid flags that can be passed to ``meson``, run the "
"following command in the directory that contains ``meson.build``:"
msgstr ""

# 88b18460aff84e57b0b8f531945bc9dc
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:116
msgid "Passing arguments to meson"
msgstr ""

# 9d690ca4e178416fbf513307d7a0aa03
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:118
msgid ""
"If you need to pass any arguments to the ``meson`` call, you can override "
"the ``meson_args`` method like so:"
msgstr ""

# 0a1cbd0ed73a4fd99c46a6a6fa9070e5
# 5817193b030a4677b6ed44d5c84681c4
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:127
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:109
msgid "This method can be used to pass flags as well as variables."
msgstr ""

# 7b05a4f4d300492b8f5381c17e8a15e6
#: ../spack/lib/spack/docs/build_systems/mesonpackage.rst:133
msgid ""
"For more information on the Meson build system, see: https://mesonbuild.com/"
"index.html"
msgstr ""

# c4382094a9df4472ac84026469d5ec8b
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:10
msgid "OctavePackage"
msgstr ""

# 9a182e0160974941babfb3cab4e030df
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:12
msgid "Octave has its own build system for installing packages."
msgstr ""

# b5edd828cc704bd4a6ef73ae6d7cc95b
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:18
msgid "The ``OctavePackage`` base class has a single phase:"
msgstr ""

# 6e460a11de4e46cfaef5a4efbdbc1f3d
# 0b6428b3f62e4ec5b018179ab7972f2e
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:22
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:26
msgid "By default, this phase runs the following command:"
msgstr ""

# 9a1ff0daeb0e489484925b10ddb3bcac
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:29
msgid ""
"Beware that uninstallation is not implemented at the moment. After "
"uninstalling a package via Spack, you also need to manually uninstall it "
"from Octave via ``pkg uninstall <package_name>``."
msgstr ""

# 6bd3afcb0c1545869c45dc952813c551
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:35
msgid "Finding Octave packages"
msgstr ""

# 791047c60e2449e9b9b567fbc8853152
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:37
msgid ""
"Most Octave packages are listed at https://octave.sourceforge.io/packages."
"php."
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# 7106824b840d4c258a55ce19ae0669d8
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# eafe573ef9be4e06948546102a7c6ed7
# #-#-#-#-#  tutorial_packaging.pot (Spack 0.12)  #-#-#-#-#
# 6c445a60bbdf409e867e4f8efce51dce
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:41
#: ../spack/lib/spack/docs/packaging_guide.rst:1770
#: ../spack/lib/spack/docs/tutorial_packaging.rst:202
msgid "Dependencies"
msgstr ""

# e5f8e6e67069466dabb75d7cd8222ddb
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:43
msgid ""
"Usually, the homepage of a package will list dependencies, i.e. "
"``Dependencies: Octave >= 3.6.0 struct >= 1.0.12``. The same information "
"should be available in the ``DESCRIPTION`` file in the root of each archive."
msgstr ""

# 4a51ba7b2d824b788e9fcdcd11d0efc3
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:49
msgid "External Documentation"
msgstr ""

# 895d427766004e449f4faa7be29f8bef
#: ../spack/lib/spack/docs/build_systems/octavepackage.rst:51
msgid ""
"For more information on the Octave build system, see: https://octave.org/doc/"
"v4.4.0/Installing-and-Removing-Packages.html"
msgstr ""

# 262a62a6519d43139dd61a18f68b9cbc
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:10
msgid "PerlPackage"
msgstr ""

# fdb50a8ca5424a8489bc07076bab4de0
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:12
msgid "Much like Octave, Perl has its own language-specific build system."
msgstr ""

# c8313672ae4d449495106cd5e76faacd
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:19
msgid ""
"The ``PerlPackage`` base class comes with 3 phases that can be overridden:"
msgstr ""

# 1daf9bd7027a45568ab76caa3e36000d
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:21
msgid "``configure`` - configure the package"
msgstr ""

# 4f61c7be0bc54209bbd8fc629672b8aa
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:25
msgid "Perl packages have 2 common modules used for module installation:"
msgstr ""

# 5549d98630724339a6141d438baa939b
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:29
msgid "``ExtUtils::MakeMaker``"
msgstr ""

# b5de78b56b2e4a40accf6834aca6814c
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:31
msgid ""
"The ``ExtUtils::MakeMaker`` module is just what it sounds like, a module "
"designed to generate Makefiles. It can be identified by the presence of a "
"``Makefile.PL`` file, and has the following installation steps:"
msgstr ""

# b2d095275af64dcc8f0289c6fd5173c9
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:45
msgid "``Module::Build``"
msgstr ""

# 7fc0ddfc872c4c41b088b5f545560b77
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:47
msgid ""
"The ``Module::Build`` module is a pure-Perl build system, and can be "
"identified by the presence of a ``Build.PL`` file. It has the following "
"installation steps:"
msgstr ""

# 9c4ae14abffe426ab55c2da29cdc7f8a
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:59
msgid ""
"If both ``Makefile.PL`` and ``Build.PL`` files exist in the package, Spack "
"will use ``Makefile.PL`` by default. If your package uses a different "
"module, ``PerlPackage`` will need to be extended to support it."
msgstr ""

# 0d65d384b307491180fdf1c10e5c47a7
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:64
msgid ""
"``PerlPackage`` automatically detects which build steps to use, so there "
"shouldn't be much work on the package developer's side to get things working."
msgstr ""

# e670534e3f5944809b35c78b51e32f53
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:70
msgid "Finding Perl packages"
msgstr ""

# 50e3a095129443929da5d09391b40a9f
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:72
msgid ""
"Most Perl modules are hosted on CPAN - The Comprehensive Perl Archive "
"Network. If you need to find a package for ``XML::Parser``, for example, you "
"should search for \"CPAN XML::Parser\"."
msgstr ""

# b692c8a283524fc398c78ed2f8e598f9
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:76
msgid ""
"Some CPAN pages are versioned. Check for a link to the \"Latest Release\" to "
"make sure you have the latest version."
msgstr ""

# b6ddfa5d3a154ec7991e32e54a84f143
# a2a9679df86e4cfca7e7380143fc0dda
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:81
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:52
msgid "Package name"
msgstr ""

# b224404ab6664c44832895247f17161e
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:83
msgid ""
"When you use ``spack create`` to create a new Perl package, Spack will "
"automatically prepend ``perl-`` to the front of the package name. This helps "
"to keep Perl modules separate from other packages. The same naming scheme is "
"used for other language extensions, like Python and R."
msgstr ""

# fc580cc4cfe54789a71eeec2a5d25774
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:92
msgid ""
"Most CPAN pages have a short description under \"NAME\" and a longer "
"description under \"DESCRIPTION\". Use whichever you think is more useful "
"while still being succinct."
msgstr ""

# f6677f5a934a468c887d287e253d2509
# 825b49d6814d4e9baf192c88fe2e02c9
# 9931dd15da5b4194bf9657c49a34898d
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:98
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:129
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:87
msgid "Homepage"
msgstr ""

# ded95d330dd04e1c8a832438c4d6f603
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:100
msgid ""
"In the top-right corner of the CPAN page, you'll find a \"permalink\" for "
"the package. This should be used instead of the current URL, as it doesn't "
"contain the version number and will always link to the latest release."
msgstr ""

# 03312a33a7444e4b865251f5e818b8ea
# 4b8586f4ab554495867e39fb0bbc76c4
# 49c51a9916ff4692803f51ac90c1db53
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:107
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:145
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:102
msgid "URL"
msgstr ""

# 1d6f2b00814b4c2185f064e71bbb3084
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:109
msgid ""
"If you haven't found it already, the download URL is on the right side of "
"the page below the permalink. Search for \"Download\"."
msgstr ""

# 06342e98d670475f9467838948adbee7
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:116
msgid ""
"Every ``PerlPackage`` obviously depends on Perl at build and run-time, so "
"``PerlPackage`` contains:"
msgstr ""

# 3836f97dcba44413b722fc493acc8564
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:126
msgid ""
"If your package requires a specific version of Perl, you should specify this."
msgstr ""

# 0766973bf0fb4e94b28e37c3649ce833
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:129
msgid ""
"Although newer versions of Perl include ``ExtUtils::MakeMaker`` and "
"``Module::Build`` as \"core\" modules, you may want to add dependencies on "
"``perl-extutils-makemaker`` and ``perl-module-build`` anyway. Many people "
"add Perl as an external package, and we want the build to work properly. If "
"your package uses ``Makefile.PL`` to build, add:"
msgstr ""

# b2e8c937c98241fab2120f389dddf6b0
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:140
msgid "If your package uses ``Build.PL`` to build, add:"
msgstr ""

# 61572042f41e4d44bc352c4a5624af3c
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:149
msgid "Perl dependencies"
msgstr ""

# 3cf28378b7a046bbab8e6ede4d3343f9
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:151
msgid ""
"Below the download URL, you will find a \"Dependencies\" link, which takes "
"you to a page listing all of the dependencies of the package. Packages "
"listed as \"Core module\" don't need to be added as dependencies, but all "
"direct dependencies should be added. Don't add dependencies of dependencies. "
"These should be added as dependencies to the dependency, not to your package."
msgstr ""

# f3acd1bb8faf4197970e117a58b86732
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:160
msgid "Passing arguments to configure"
msgstr ""

# 9013d9ddade14cbeb0505b702ecc137a
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:162
msgid ""
"Packages that have non-Perl dependencies often use command-line variables to "
"specify their installation directory. You can pass arguments to ``Makefile."
"PL`` or ``Build.PL`` by overriding ``configure_args`` like so:"
msgstr ""

# b5a56d53b63b457a9f5fac0fa55f56bf
# ab65512a03524409977a805ca8661658
# 0e0cd23989d6431f9e65d70dd073f6af
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:180
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:720
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:312
msgid "Alternatives to Spack"
msgstr ""

# b059b45109164dc78daa19cd94f70857
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:182
msgid ""
"If you need to maintain a stack of Perl modules for a user and don't want to "
"add all of them to Spack, a good alternative is ``cpanm``. If Perl is "
"already installed on your system, it should come with a ``cpan`` executable. "
"To install ``cpanm``, run the following command:"
msgstr ""

# 702dd9e3e6204434a30046ece9e33da6
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:192
msgid "Now, you can install any Perl module you want by running:"
msgstr ""

# 9eea223261e64989a5ae12cde71043cc
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:199
msgid ""
"Obviously, these commands can only be run if you have root privileges. "
"Furthermore, ``cpanm`` is not capable of installing non-Perl dependencies. "
"If you need to install to your home directory or need to install a module "
"with non-Perl dependencies, Spack is a better option."
msgstr ""

# a4e96597c58b4d0e9d3bc4e7faa83528
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:208
msgid ""
"You can find more information on installing Perl modules from source at: "
"http://www.perlmonks.org/?node_id=128077"
msgstr ""

# f1c50a326a344f46822fcda7d74c8e2d
#: ../spack/lib/spack/docs/build_systems/perlpackage.rst:211
msgid ""
"More generic Perl module installation instructions can be found at: http://"
"www.cpan.org/modules/INSTALL.html"
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# 2b8afd94443f42f1b632631d405eb600
# #-#-#-#-#  tutorial_buildsystems.pot (Spack 0.12)  #-#-#-#-#
# 10a016804e5d4b038e0b07d017580a97
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:10
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:639
msgid "PythonPackage"
msgstr ""

# 6ce6edc9e79c411097ab1ab170a24e3c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:12
msgid "Python packages and modules have their own special build system."
msgstr ""

# babeb10cddea4096af75d2e7b1c9aa17
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:18
msgid ""
"The ``PythonPackage`` base class provides the following phases that can be "
"overridden:"
msgstr ""

# 9847165083fc4ab5b0c507b62997a333
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:21
msgid "``build``"
msgstr ""

# 3a373ee1f96c4b8181ac89b62c1eed80
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:22
msgid "``build_py``"
msgstr ""

# 4422d9f6adb64d66943cf17557f94953
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:23
msgid "``build_ext``"
msgstr ""

# 2faf8fc6b9e4422cba1ad061a74d3a5c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:24
msgid "``build_clib``"
msgstr ""

# 62e52318a0bb4d20b395f0cb07c2d34a
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:25
msgid "``build_scripts``"
msgstr ""

# cb3c7ed6de594567830b86e9632d8ede
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:26
msgid "``clean``"
msgstr ""

# 1dab61b222be42f09e612210b442f1a9
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:27
msgid "``install``"
msgstr ""

# 1f5488ff2d634aebb6ff844a896b271a
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:28
msgid "``install_lib``"
msgstr ""

# 71676187bc7a4dbeacddc47311a4a532
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:29
msgid "``install_headers``"
msgstr ""

# fd5f9c4e92a64fe880f29c6a822520e2
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:30
msgid "``install_scripts``"
msgstr ""

# aa42c5d03b174b7eac3e53a8b49b26db
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:31
msgid "``install_data``"
msgstr ""

# 2964918c09dc470584029aa8acd0481e
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:32
msgid "``sdist``"
msgstr ""

# 913505801518470991936d9bad8fe578
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:33
msgid "``register``"
msgstr ""

# 800004db7c894b6d905e27496ab76ff1
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:34
msgid "``bdist``"
msgstr ""

# e23cdc4e65284086a2fc7a9d09046f83
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:35
msgid "``bdist_dumb``"
msgstr ""

# 9dbbb2eddf9744aea9baf55cd2c62f17
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:36
msgid "``bdist_rpm``"
msgstr ""

# 4956b64d2b9b493badc1e22ccff48d42
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:37
msgid "``bdist_wininst``"
msgstr ""

# f8e6322a2cda49dba08a79fb94cdc1d8
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:38
msgid "``upload``"
msgstr ""

# d192562789714dd59a6b16f68f31da93
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:39
msgid "``check``"
msgstr ""

# ff47268e37624fd082209f5b5aa0ee96
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:41
msgid ""
"These are all standard ``setup.py`` commands and can be found by running:"
msgstr ""

# 57e1df984ae3464491cc13314ff2405f
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:48
msgid "By default, only the ``build`` and ``install`` phases are run:"
msgstr ""

# 00889abfe53f4cb8b19fd01eb6e323eb
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:50
msgid "``build`` - build everything needed to install"
msgstr ""

# 71115a7fd73f45af9023d764acbdb0b4
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:51
msgid "``install`` - install everything from build directory"
msgstr ""

# 7ef51f0ea3a142f6bfd3307faa66b18b
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:53
msgid ""
"If for whatever reason you need to run more phases, simply modify your "
"``phases`` list like so:"
msgstr ""

# f489c9db7f3a4dd2a1ab090f70f7150f
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:61
msgid "Each phase provides a function ``<phase>`` that runs:"
msgstr ""

# ef295a6064b44fe6af09752928671609
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:68
msgid ""
"Each phase also has a ``<phase_args>`` function that can pass arguments to "
"this call. All of these functions are empty except for the ``install_args`` "
"function, which passes ``--prefix=/path/to/installation/prefix``. There is "
"also some additional logic specific to setuptools and eggs."
msgstr ""

# f3cca96f1ec34f1fbbf8d5ff0ca613a4
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:73
msgid ""
"If you need to run a phase that is not a standard ``setup.py`` command, "
"you'll need to define a function for it like so:"
msgstr ""

# b4ac533904064987844d510d653579d3
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:88
msgid ""
"Python packages can be identified by the presence of a ``setup.py`` file. "
"This file is used by package managers like ``pip`` to determine a package's "
"dependencies and the version of dependencies required, so if the ``setup."
"py`` file is not accurate, the package will not build properly. For this "
"reason, the ``setup.py`` file should be fairly reliable. If the "
"documentation and ``setup.py`` disagree on something, the ``setup.py`` file "
"should be considered to be the truth. As dependencies are added or removed, "
"the documentation is much more likely to become outdated than the ``setup."
"py``."
msgstr ""

# 1adc7f9ff4514b908c7350243759b47c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:100
msgid "Finding Python packages"
msgstr ""

# db3a2fee64c048198ab079038b8a7f5d
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:102
msgid ""
"The vast majority of Python packages are hosted on PyPI - The Python Package "
"Index. ``pip`` only supports packages hosted on PyPI, making it the only "
"option for developers who want a simple installation. Search for \"PyPI "
"<package-name>\" to find the download page. Note that some pages are "
"versioned, and the first result may not be the newest version. Click on the "
"\"Latest Version\" button to the top right to see if a newer version is "
"available. The download page is usually at: https://pypi.org/project/"
"<package-name>"
msgstr ""

# b6811507c22c4da3bd9164cf255039d7
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:115
msgid ""
"The top of the PyPI downloads page contains a description of the package. "
"The first line is usually a short description, while there may be a several "
"line \"Project Description\" that follows. Choose whichever is more useful. "
"You can also get these descriptions on the command-line using:"
msgstr ""

# a5c28f6919664a5d9ef885031c24519a
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:131
msgid ""
"Package developers use ``setup.py`` to upload new versions to PyPI. The "
"``setup`` method often passes metadata like ``homepage`` to PyPI. This "
"metadata is displayed on the left side of the download page. Search for the "
"text \"Homepage\" under \"Project links\" to find it. You should use this "
"page instead of the PyPI page if they differ. You can also get the homepage "
"on the command-line by running:"
msgstr ""

# ac3a1f3e8f6d47f7bb3e2672eae1f18b
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:147
msgid ""
"You may have noticed that Spack allows you to add multiple versions of the "
"same package without adding multiple versions of the download URL. It does "
"this by guessing what the version string in the URL is and replacing this "
"with the requested version. Obviously, if Spack cannot guess the version "
"correctly, or if non-version-related things change in the URL, Spack cannot "
"substitute the version properly."
msgstr ""

# dd87afaf57e14c0d8c94c199bc2f137a
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:154
msgid ""
"Once upon a time, PyPI offered nice, simple download URLs like: https://pypi."
"python.org/packages/source/n/numpy/numpy-1.13.1.zip"
msgstr ""

# f25ce48e196a4dc383c3a527fa02f750
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:157
msgid ""
"As you can see, the version is 1.13.1. It probably isn't hard to guess what "
"URL to use to download version 1.12.0, and Spack was perfectly capable of "
"performing this calculation."
msgstr ""

# 2765ca1e7b4342af94d6f9c97989e803
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:161
msgid ""
"However, PyPI switched to a new download URL format: https://pypi.python.org/"
"packages/c0/3a/40967d9f5675fbb097ffec170f59c2ba19fc96373e73ad47c2cae9a30aed/"
"numpy-1.13.1.zip#md5=2c3c0f4edf720c3a7b525dacc825b9ae"
msgstr ""

# dd58130f107a441d97759b2b4fa8feb7
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:164
msgid ""
"and more recently: https://files.pythonhosted.org/packages/"
"b0/2b/497c2bb7c660b2606d4a96e2035e92554429e139c6c71cdff67af66b58d2/"
"numpy-1.14.3.zip"
msgstr ""

# 04b4c34461ff4e979f4dd4c1ccfd3b0c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:167
msgid ""
"As you can imagine, it is impossible for Spack to guess what URL to use to "
"download version 1.12.0 given this URL. There is a solution, however. PyPI "
"offers a new hidden interface for downloading Python packages that does not "
"include a hash in the URL: https://pypi.io/packages/source/n/numpy/"
"numpy-1.13.1.zip"
msgstr ""

# 68e1676342bf4e658237272b3f719e68
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:173
msgid ""
"This URL redirects to the files.pythonhosted.org URL. The general syntax for "
"this pypi.io URL is: https://pypi.io/packages/source/<first-letter-of-name>/"
"<name>/<name>-<version>.<extension>"
msgstr ""

# b6dee15668c140d485e21659de5f2276
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:177
msgid ""
"Please use the pypi.io URL instead of the pypi.python.org URL. If both ``."
"tar.gz`` and ``.zip`` versions are available, ``.tar.gz`` is preferred. If "
"some releases offer both ``.tar.gz`` and ``.zip`` versions, but some only "
"offer ``.zip`` versions, use ``.zip``."
msgstr ""

# 600ab0547b1d43859062626427c05fd3
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:184
msgid "PyPI vs. GitHub"
msgstr ""

# 55b7271e8d6b48b398b0692aac75e5b4
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:186
msgid ""
"Many packages are hosted on PyPI, but are developed on GitHub and other "
"version control systems. The tarball can be downloaded from either location, "
"but PyPI is preferred for the following reasons:"
msgstr ""

# 77d38041123a43a395dfc5db4b68355f
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:190
msgid "PyPI contains the bare minimum of files to install the package."
msgstr ""

# aee753aee74f4616af8e0a52b7ed60ac
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:192
msgid ""
"You may notice that the tarball you download from PyPI does not have the "
"same checksum as the tarball you download from GitHub. When a developer "
"uploads a new release to PyPI, it doesn't contain every file in the "
"repository, only the files necessary to install the package. PyPI tarballs "
"are therefore smaller."
msgstr ""

# d03aa22193514494b946d9a96b15c942
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:198
msgid "PyPI is the official source for package managers like ``pip``."
msgstr ""

# 5a128b93450e4ba6873bbc27024f3556
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:200
msgid ""
"Let's be honest, ``pip`` is much more popular than Spack. If the GitHub "
"tarball contains a file not present in the PyPI tarball that causes a bug, "
"the developers may not realize this for quite some time. If the bug was in a "
"file contained in the PyPI tarball, users would notice the bug much more "
"quickly."
msgstr ""

# ecce5eec1c0c4b88a02408c67fa75f39
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:206
msgid "GitHub release may be a beta version."
msgstr ""

# a7c2e78902e64268bcd70d58d87da7d3
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:208
msgid ""
"When a developer releases a new version of a package on GitHub, it may not "
"be intended for most users. Until that release also makes its way to PyPI, "
"it should be assumed that the release is not yet ready for general use."
msgstr ""

# 5c3df961509241c5bd02012aa7727b5d
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:213
msgid "The checksum for a GitHub release may change."
msgstr ""

# b9ac38d49492450082e1ae1780caa977
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:215
msgid ""
"Unfortunately, some developers have a habit of patching releases without "
"incrementing the version number. This results in a change in tarball "
"checksum. Package managers like Spack that use checksums to verify the "
"integrity of a download tarball grind to a halt when the checksum for a "
"known version changes. Most of the time, the change is intentional, and "
"contains a needed bug fix. However, sometimes the change indicates a "
"download source that has been compromised, and a tarball that contains a "
"virus. If this happens, you must contact the developers to determine which "
"is the case. PyPI is nice because it makes it physically impossible to re-"
"release the same version of a package with a different checksum."
msgstr ""

# ece004b9cf024c00822a365c1b3b6946
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:227
msgid "There are some reasons to prefer downloading from GitHub:"
msgstr ""

# bae1433bea7846089c533e4a1eaf9cd5
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:229
msgid "The GitHub tarball may contain unit tests"
msgstr ""

# 4cd83e2620544cb8afd0a4804a5780bc
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:231
msgid ""
"As previously mentioned, the PyPI tarball contains the bare minimum of files "
"to install the package. Unless explicitly specified by the developers, it "
"will not contain development files like unit tests. If you desire to run the "
"unit tests during installation, you should use the GitHub tarball instead."
msgstr ""

# 39671b13515e41afae780996aea2ec29
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:237
msgid ""
"Spack does not yet support ``spack versions`` and ``spack checksum`` with "
"PyPI URLs"
msgstr ""

# 545646e335784ef39f0f4f864e7fbec5
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:240
msgid ""
"These commands work just fine with GitHub URLs. This is a minor annoyance, "
"not a reason to prefer GitHub over PyPI."
msgstr ""

# e6cdc1a0e75a4bb297e199a334ca05da
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:243
msgid ""
"If you really want to run these unit tests, no one will stop you from "
"submitting a PR for a new package that downloads from GitHub."
msgstr ""

# 3adf3f8be3e848e395635d6a80cc0eca
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:250
msgid ""
"There are a few dependencies common to the ``PythonPackage`` build system."
msgstr ""

# a037e7feaa064d31bd0dd55ae7eaee5c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:254
msgid "Python"
msgstr ""

# 37b0a4f506c04408a1a7e0af66f376c1
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:256
msgid ""
"Obviously, every ``PythonPackage`` needs Python at build-time to run "
"``python setup.py build && python setup.py install``. Python is also needed "
"at run-time if you want to import the module. Due to backwards incompatible "
"changes between Python 2 and 3, it is very important to specify which "
"versions of Python are supported. If the documentation mentions that Python "
"3 is required, this can be specified as:"
msgstr ""

# 210387e37c434f3591665723ca0383fe
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:268
msgid "If Python 2 is required, this would look like:"
msgstr ""

# 3441c5505ec64b3aad409101cb115531
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:275
msgid "If Python 2.7 is the only version that works, you can use:"
msgstr ""

# 176c3f8739f94b05bd87db8df39a30ce
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:282
msgid ""
"The documentation may not always specify supported Python versions. Another "
"place to check is in the ``setup.py`` file. Look for a line containing "
"``python_requires``. An example from `py-numpy <https://github.com/spack/"
"spack/blob/develop/var/spack/repos/builtin/packages/py-numpy/package.py>`_ "
"looks like:"
msgstr ""

# c2277cdf9fa243cc9e1ca210b01f35d4
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:293
msgid "More commonly, you will find a version check at the top of the file:"
msgstr ""

# 5a511a7da6184856a94927b523864410
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:301
msgid "This can be converted to Spack's spec notation like so:"
msgstr ""

# f6edc1d4845b4ec392289480c595be7c
# c13b40b6644348f0b8cfe6ab345aff4e
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:310
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:466
msgid "setuptools"
msgstr ""

# ddf987698a9949d48b2f639e067c6527
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:312
msgid ""
"Originally, the Python language had a single build system called distutils, "
"which is built into Python. Distutils provided a common framework for "
"package authors to describe their project and how it should be built. "
"However, distutils was not without limitations. Most notably, there was no "
"way to list a project's dependencies with distutils. Along came setuptools, "
"a non-builtin build system designed to overcome the limitations of "
"distutils. Both projects use a similar API, making the transition easy while "
"adding much needed functionality. Today, setuptools is used in around 75% of "
"the Python packages in Spack."
msgstr ""

# fbc4d6a8926f4a46b1919181780bc63e
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:323
msgid ""
"Since setuptools isn't built-in to Python, you need to add it as a "
"dependency. To determine whether or not a package uses setuptools, search "
"the file for an import statement like:"
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# 03dc01e2acd247149c28fbb39b3b2e73
# #-#-#-#-#  getting_started.pot (Spack 0.12)  #-#-#-#-#
# 227834f5c6ee4f08bec8cf6b849228d4
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:332
#: ../spack/lib/spack/docs/getting_started.rst:1021
msgid "or:"
msgstr ""

# cd03c78bb1084ef0b9f724d4dfec33a6
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:339
msgid ""
"Some packages are designed to work with both setuptools and distutils, so "
"you may find something like:"
msgstr ""

# 8adb313110014889a6d94cff5b79bcb5
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:350
msgid ""
"This uses setuptools if available, and falls back to distutils if not. In "
"this case, you would still want to add a setuptools dependency, as it offers "
"us more control over the installation."
msgstr ""

# b792ca66f5a74984b7610e8cb9c377c5
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:354
msgid ""
"Unless specified otherwise, setuptools is usually a build-only dependency. "
"That is, it is needed to install the software, but is not needed at run-"
"time. This can be specified as:"
msgstr ""

# db421dd2ef8147e5ab52a031b2a2affd
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:365
msgid "cython"
msgstr ""

# 10a2103fd52a4218a4a5b3d2c2b8c368
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:367
msgid ""
"Compared to compiled languages, interpreted languages like Python can be "
"quite a bit slower. To work around this, some Python developers rewrite "
"computationally demanding sections of code in C, a process referred to as "
"\"cythonizing\". In order to build these package, you need to add a build "
"dependency on cython:"
msgstr ""

# d4cec69b7ea8467d9a4c4382510b1f5e
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:378
msgid ""
"Look for references to \"cython\" in the ``setup.py`` to determine whether "
"or not this is necessary. Cython may be optional, but even then you should "
"list it as a required dependency. Spack is designed to compile software, and "
"is meant for HPC facilities where speed is crucial. There is no reason why "
"someone would not want an optimized version of a library instead of the pure-"
"Python version."
msgstr ""

# 97f3ece84a4142f1b0ef3f15841c7164
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:388
msgid "Python dependencies"
msgstr ""

# 58a7e50639064e6587605af7769bdd53
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:390
msgid ""
"When you install a package with ``pip``, it reads the ``setup.py`` file in "
"order to determine the dependencies of the package. If the dependencies are "
"not yet installed, ``pip`` downloads them and installs them for you. This "
"may sound convenient, but Spack cannot rely on this behavior for two reasons:"
msgstr ""

# 8184a28ebccc439386ca51c41ca7a7c3
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:396
msgid "Spack needs to be able to install packages on air-gapped networks."
msgstr ""

# 4e80b1b8ef4047f292c3cc004080df60
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:398
msgid ""
"If there is no internet connection, ``pip`` can't download the package "
"dependencies. By explicitly listing every dependency in the ``package.py``, "
"Spack knows what to download ahead of time."
msgstr ""

# 2b1cfb89f7f5498baf21b6b5838c5e35
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:402
msgid "Duplicate installations of the same dependency may occur."
msgstr ""

# 50d0d36e8bc341359a3b5afd10159d12
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:404
msgid ""
"Spack supports *activation* of Python extensions, which involves symlinking "
"the package installation prefix to the Python installation prefix. If your "
"package is missing a dependency, that dependency will be installed to the "
"installation directory of the same package. If you try to activate the "
"package + dependency, it may cause a problem if that package has already "
"been activated."
msgstr ""

# a47b034ca8b741ce96b3c748febf0a7c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:411
msgid ""
"For these reasons, you must always explicitly list all dependencies. "
"Although the documentation may list the package's dependencies, often the "
"developers assume people will use ``pip`` and won't have to worry about it. "
"Always check the ``setup.py`` to find the true dependencies."
msgstr ""

# 0466a25fdc7d4d1bbe3b6809dcd5aa05
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:417
msgid ""
"If the package relies on ``distutils``, it may not explicitly list its "
"dependencies. Check for statements like:"
msgstr ""

# 1793e6b04027463fa8d2ddd2c1d52ed1
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:428
msgid "Obviously, this means that ``py-numpy`` is a dependency."
msgstr ""

# e7e4fe70e41341e0af1fc6af22335060
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:430
msgid "If the package uses ``setuptools``, check for the following clues:"
msgstr ""

# d0515b1bd53749d6a1980b7226d0334f
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:432
msgid "``install_requires``"
msgstr ""

# 08cb0b2a748044b199df6a348ee0bfb4
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:434
msgid "These packages are required for installation."
msgstr ""

# bf874b1df51a438e8690a4a1c87c4d7d
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:436
msgid "``extra_requires``"
msgstr ""

# ca83d5656fb4455195c79a218dcc6ec6
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:438
msgid ""
"These packages are optional dependencies that enable additional "
"functionality. You should add a variant that optionally adds these "
"dependencies."
msgstr ""

# 4792defff1bf4e54906bab6312cb4d6f
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:442
msgid "``test_requires``"
msgstr ""

# 714be998a0ab4dd89939539476584d6a
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:444
msgid ""
"These are packages that are required to run the unit tests for the package. "
"These dependencies can be specified using the ``type='test'`` dependency "
"type."
msgstr ""

# b863c0b5b25847dead1a84720a3e2c2c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:448
msgid ""
"In the root directory of the package, you may notice a ``requirements.txt`` "
"file. It may look like this file contains a list of all of the package's "
"dependencies. Don't be fooled. This file is used by tools like Travis to "
"install the pre-requisites for the package... and a whole bunch of other "
"things. It often contains dependencies only needed for unit tests, like:"
msgstr ""

# 76940460ddcc4e8384733e5b219ff451
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:455
msgid "mock"
msgstr ""

# e37e5363b28a419c96c6a944e5c537db
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:456
msgid "nose"
msgstr ""

# 60ffaa62769f43db9efcad5ad795ca7a
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:457
msgid "pytest"
msgstr ""

# b4581c3555254eb4a59ad0cfb4621be0
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:459
msgid ""
"It can also contain dependencies for building the documentation, like "
"sphinx. If you can't find any information about the package's dependencies, "
"you can take a look in ``requirements.txt``, but be sure not to add test or "
"documentation dependencies."
msgstr ""

# 1bf6c9240af0483aae5ee5dd01ec7d7c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:468
msgid ""
"Setuptools is a bit of a special case. If a package requires setuptools at "
"run-time, how do they express this? They could add it to "
"``install_requires``, but setuptools is imported long before this and needed "
"to read this line. And since you can't install the package without "
"setuptools, the developers assume that setuptools will already be there, so "
"they never mention when it is required. We don't want to add run-time "
"dependencies if they aren't needed, so you need to determine whether or not "
"setuptools is needed. Grep the installation directory for any files "
"containing a reference to ``setuptools`` or ``pkg_resources``. Both modules "
"come from ``py-setuptools``. ``pkg_resources`` is particularly common in "
"scripts in ``prefix/bin``."
msgstr ""

# ac22bb280709484c8d8948bc46a68900
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:482
msgid "Passing arguments to setup.py"
msgstr ""

# 4b33efb6441447c494ade78c3a4728c1
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:484
msgid ""
"The default build and install phases should be sufficient to install most "
"packages. However, you may want to pass additional flags to either phase."
msgstr ""

# ea6aba4186c7406f8af703c7cb51c83c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:488
msgid "You can view the available options for a particular phase with:"
msgstr ""

# 20605f7959ef45f3a988286a97563eb6
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:495
msgid ""
"Each phase provides a ``<phase_args>`` function that can be used to pass "
"arguments to that phase. For example, `py-numpy <https://github.com/spack/"
"spack/blob/develop/var/spack/repos/builtin/packages/py-numpy/package.py>`_ "
"adds:"
msgstr ""

# fe558e1bb86b41e0a004727d58583cd1
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:520
msgid "``PythonPackage`` provides a couple of options for testing packages."
msgstr ""

# e823187736954d94b4eafb734bbc4882
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:524
msgid "Import tests"
msgstr ""

# d82f2d9187724f62bd198ea4e0b32e52
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:526
msgid ""
"Just because a package successfully built does not mean that it built "
"correctly. The most reliable test of whether or not the package was "
"correctly installed is to attempt to import all of the modules that get "
"installed. To get a list of modules, run the following command in the source "
"directory:"
msgstr ""

# e100b25668c546acbf927908033609c9
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:540
msgid ""
"Large, complex packages like ``numpy`` will return a long list of packages, "
"while other packages like ``six`` will return an empty list. ``py-six`` "
"installs a single ``six.py`` file. In Python packaging lingo, a \"package\" "
"is a directory containing files like:"
msgstr ""

# 17c94c8356f84779a648c407fae48c82
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:552
msgid ""
"whereas a \"module\" is a single Python file. Since ``find_packages`` only "
"returns packages, you'll have to determine the correct module names "
"yourself. You can now add these packages and modules to the package like so:"
msgstr ""

# 494314b0be0246fb8bf5634c278b3e32
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:562
msgid ""
"When you run ``spack install --test=root py-six``, Spack will attempt to "
"import the ``six`` module after installation."
msgstr ""

# 95ecf408923f459eb3c70381b08b2651
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:565
msgid ""
"These tests most often catch missing dependencies and non-RPATHed libraries. "
"Make sure not to add modules/packages containing the word \"test\", as these "
"likely won't end up in installation directory."
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# f994189435424b88b3f057bcd37d487a
# #-#-#-#-#  developer_guide.pot (Spack 0.12)  #-#-#-#-#
# c1749dedaffb4a5ab86728e4e742c61f
# 91299b53f4724632b1200495ff288643
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:571
#: ../spack/lib/spack/docs/developer_guide.rst:244
#: ../spack/lib/spack/docs/developer_guide.rst:350
msgid "Unit tests"
msgstr ""

# 19cf5989c3c34297ab50ef6a6a416b6b
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:573
msgid ""
"The package you want to install may come with additional unit tests. By "
"default, Spack runs:"
msgstr ""

# ecd5b5c5d997429184770623e092750f
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:581
msgid ""
"if it detects that the ``setup.py`` file supports a ``test`` phase. You can "
"add additional build-time or install-time tests by overriding ``test`` and "
"``installtest``, respectively. For example, ``py-numpy`` adds:"
msgstr ""

# 05727fb169e74d9f9267d384f3893c8a
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:595
msgid "Setup file in a sub-directory"
msgstr ""

# 3d0a402a13eb42c995c88d6366975e7b
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:597
msgid ""
"In order to be compatible with package managers like ``pip``, the package is "
"required to place its ``setup.py`` in the root of the tarball. However, not "
"every Python package cares about ``pip`` or PyPI. If you are installing a "
"package that is not hosted on PyPI, you may find that it places its ``setup."
"py`` in a sub-directory. To handle this, add the directory containing "
"``setup.py`` to the package like so:"
msgstr ""

# ff3163d0948440a699299f56f196b622
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:611
msgid "Alternate names for setup.py"
msgstr ""

# 972733e316c74a728cecb2f5be7299a1
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:613
msgid ""
"As previously mentioned, packages need to call their setup script ``setup."
"py`` in order to be compatible with package managers like ``pip``. However, "
"some packages like `py-meep <https://github.com/spack/spack/blob/develop/var/"
"spack/repos/builtin/packages/py-meep/package.py>`_  and `py-adios <https://"
"github.com/spack/spack/blob/develop/var/spack/repos/builtin/packages/py-"
"adios/package.py>`_ come with multiple setup scripts, one for a serial build "
"and another for a parallel build. You can override the default name to use "
"like so:"
msgstr ""

# 32b1e307de6a4db38eff04e647ae5a64
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:629
msgid "PythonPackage vs. packages that use Python"
msgstr ""

# 24a2a0c3ea6d43288579ed4cc63a9683
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:631
msgid ""
"There are many packages that make use of Python, but packages that depend on "
"Python are not necessarily ``PythonPackages``."
msgstr ""

# dc916423a6e84293a0951aa26fb2aa3b
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:636
msgid "Choosing a build system"
msgstr ""

# dd10a6c897684f549f965f4b1e7665ac
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:638
msgid ""
"First of all, you need to select a build system. ``spack create`` usually "
"does this for you, but if for whatever reason you need to do this manually, "
"choose ``PythonPackage`` if and only if the package contains a ``setup.py`` "
"file."
msgstr ""

# 5906b0eab2534d63b60194fdec693c27
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:645
msgid "Choosing a package name"
msgstr ""

# 0241d8b88a7f409d850c6235672337ea
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:647
msgid ""
"Selecting the appropriate package name is a little more complicated than "
"choosing the build system. By default, ``spack create`` will prepend ``py-`` "
"to the beginning of the package name if it detects that the package uses the "
"``PythonPackage`` build system. However, there are occasionally packages "
"that use ``PythonPackage`` that shouldn't start with ``py-``. For example:"
msgstr ""

# d0a8feb109774219a96f3514561ee1b7
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:654
msgid "busco"
msgstr ""

# c1ce268815904ee2908fae1d157e64c7
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:655
msgid "easybuild"
msgstr ""

# 5642a2a80a8f44cfac129204b108faa4
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:656
msgid "httpie"
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# 7e2116260d064b0987d5b61ead4fb5b3
# #-#-#-#-#  contribution_guide.pot (Spack 0.12)  #-#-#-#-#
# 33f78c89277745e1bab95d199aa7d1ec
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:657
#: ../spack/lib/spack/docs/contribution_guide.rst:234
msgid "mercurial"
msgstr ""

# 298c7c8300d846c680c08072ccdbb8fa
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:658
msgid "scons"
msgstr ""

# 71d27dc137ad4b4dab101e95df43709e
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:659
msgid "snakemake"
msgstr ""

# 7182f88edd8b4b8fa5b4ac1206eb0a97
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:661
msgid ""
"The thing these packages have in common is that they are command-line tools "
"that just so happen to be written in Python. Someone who wants to install "
"``mercurial`` with Spack isn't going to realize that it is written in "
"Python, and they certainly aren't going to assume the package is called ``py-"
"mercurial``. For this reason, we manually renamed the package to "
"``mercurial``."
msgstr ""

# 97d849c73c8848ecb1263a4bea79e4d9
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:668
msgid ""
"Likewise, there are occasionally packages that don't use the "
"``PythonPackage`` build system but should still be prepended with ``py-``. "
"For example:"
msgstr ""

# a27232df30164d2e8025881f2909cd5b
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:672
msgid "py-genders"
msgstr ""

# 48b8dc72f618440f9aa6944625e5fce5
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:673
msgid "py-py2cairo"
msgstr ""

# 478857d712864ebc98f8ec2fcd8a4f68
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:674
msgid "py-pygobject"
msgstr ""

# 3bc7a93ad2fd42f3be50423b3ccca5c3
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:675
msgid "py-pygtk"
msgstr ""

# d52caa0fcc6f423a90601f01523c5da6
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:676
msgid "py-pyqt"
msgstr ""

# bda8444541874109bd288f0fb43348d9
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:677
msgid "py-pyserial"
msgstr ""

# 2c7861894cd842559ec642489de33fea
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:678
msgid "py-sip"
msgstr ""

# 0e451455a9c04d3babcf6f23f953e204
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:679
msgid "py-xpyb"
msgstr ""

# 58a8789e8d224d07b077c55f1a20bfd8
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:681
msgid ""
"These packages are primarily used as Python libraries, not as command-line "
"tools. You may see C/C++ packages that have optional Python language-"
"bindings, such as:"
msgstr ""

# bd7ac4c8fb114006a77a357258112b7e
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:685
msgid "antlr"
msgstr ""

# ea9c7ce83ddb494994e3e800d8a2c482
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:686
msgid "cantera"
msgstr ""

# 684b4ba27068469c9fdbef0bfc792563
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:687
msgid "conduit"
msgstr ""

# f1b68006f34d401e84132c8dcb4b5de0
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:688
msgid "pagmo"
msgstr ""

# bf277c43f10441f4a5446e21395fd06c
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:689
msgid "vtk"
msgstr ""

# 53cdfc49f8144e3eba42c8ee90d21edb
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:691
msgid ""
"Don't prepend these kind of packages with ``py-``. When in doubt, think "
"about how this package will be used. Is it primarily a Python library that "
"will be imported in other Python scripts? Or is it a command-line tool, or C/"
"C++/Fortran program with optional Python modules? The former should be "
"prepended with ``py-``, while the latter should not."
msgstr ""

# 17635e41122f4574b12a8f03c7fe6b81
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:700
msgid "extends vs. depends_on"
msgstr ""

# 08776493334a4ab4a730664c03361d3e
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:702
msgid ""
"This is very similar to the naming dilemma above, with a slight twist. As "
"mentioned in the :ref:`Packaging Guide <packaging_extensions>`, ``extends`` "
"and ``depends_on`` are very similar, but ``extends`` adds the ability to "
"*activate* the package. Activation involves symlinking everything in the "
"installation prefix of the package to the installation prefix of Python. "
"This allows the user to import a Python module without having to add that "
"module to ``PYTHONPATH``."
msgstr ""

# a851f9cf80e7480e88eef33143419783
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:710
msgid ""
"When deciding between ``extends`` and ``depends_on``, the best rule of thumb "
"is to check the installation prefix. If Python libraries are installed to "
"``prefix/lib/python2.7/site-packages`` (where 2.7 is the MAJOR.MINOR version "
"of Python you used to install the package), then you should use ``extends``. "
"If Python libraries are installed elsewhere or the only files that get "
"installed reside in ``prefix/bin``, then don't use ``extends``, as "
"symlinking the package wouldn't be useful."
msgstr ""

# d808875b58324fb2a8a7767241934642
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:722
msgid ""
"PyPI has hundreds of thousands of packages that are not yet in Spack, and "
"``pip`` may be a perfectly valid alternative to using Spack. The main "
"advantage of Spack over ``pip`` is its ability to compile non-Python "
"dependencies. It can also build cythonized versions of a package or link to "
"an optimized BLAS/LAPACK library like MKL, resulting in calculations that "
"run orders of magnitude faster. Spack does not offer a significant advantage "
"to other python-management systems for installing and using tools like "
"flake8 and sphinx. But if you need packages with non-Python dependencies "
"like numpy and scipy, Spack will be very valuable to you."
msgstr ""

# 0ffd888da5bf4ddda221108987b0a987
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:733
msgid ""
"Anaconda is another great alternative to Spack, and comes with its own "
"``conda`` package manager. Like Spack, Anaconda is capable of compiling non-"
"Python dependencies. Anaconda contains many Python packages that are not yet "
"in Spack, and Spack contains many Python packages that are not yet in "
"Anaconda. The main advantage of Spack over Anaconda is its ability to choose "
"a specific compiler and BLAS/LAPACK or MPI library. Spack also has better "
"platform support for supercomputers. On the other hand, Anaconda offers "
"Windows support."
msgstr ""

# da501228b66c49bdaf914d633948a2f8
#: ../spack/lib/spack/docs/build_systems/pythonpackage.rst:746
msgid ""
"For more information on Python packaging, see: https://packaging.python.org/"
msgstr ""

# dc8f94a9ba2c411a92ca26bbaa398e7c
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:10
msgid "QMakePackage"
msgstr ""

# 4c386a8a58224e93bf690c6534373822
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:12
msgid ""
"Much like Autotools and CMake, QMake is a build-script generator designed by "
"the developers of Qt. In its simplest form, Spack's ``QMakePackage`` runs "
"the following steps:"
msgstr ""

# 18dc14083cab49b9ad87cf4c2860f135
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:24
msgid ""
"QMake does not appear to have a standardized way of specifying the "
"installation directory, so you may have to set environment variables or edit "
"``*.pro`` files to get things working properly."
msgstr ""

# 83eac548ed9c4e41b9ea2f5dd4867294
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:32
msgid "The ``QMakePackage`` base class comes with the following phases:"
msgstr ""

# 5511f70c0ef34a86b3ce4ac1a42bba78
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:34
msgid "``qmake`` - generate Makefiles"
msgstr ""

# c029730df6264aaab167bc5480c7d543
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:47
msgid ""
"Any of these phases can be overridden in your package as necessary. There is "
"also a ``check`` method that looks for a ``check`` target in the Makefile. "
"If a ``check`` target exists and the user runs:"
msgstr ""

# b576a9926e9c429d9e28e0d93a4bb61d
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:56
msgid "Spack will run ``make check`` after the build phase."
msgstr ""

# 88fb24455de54a918b52d4e51813940c
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:62
msgid ""
"Packages that use the QMake build system can be identified by the presence "
"of a ``<project-name>.pro`` file. This file declares things like build "
"instructions and dependencies."
msgstr ""

# 6fc49026be8a416eaf6ed9231acfd1a8
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:66
msgid "One thing to look for is the ``minQtVersion`` function:"
msgstr ""

# b84b833f2fc140f4858c3680acc4d3af
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:73
msgid ""
"This means that Qt 5.6.0 is the earliest release that will work. You should "
"specify this in a ``depends_on`` statement."
msgstr ""

# 89e152d4179641d3a15830d038b8e8fd
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:80
msgid ""
"At the bare minimum, packages that use the QMake build system need a ``qt`` "
"dependency. Since this is always the case, the ``QMakePackage`` base class "
"already contains:"
msgstr ""

# c5cff55241cf47189fd2f5510efa1dcc
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:89
msgid ""
"If you want to specify a particular version requirement, or need to link to "
"the ``qt`` libraries, you can override this in your package:"
msgstr ""

# a3d9288256eb4850b8d2f72bdf513067
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:98
msgid "Passing arguments to qmake"
msgstr ""

# 8c57189a9c414611b8de828dec6affd8
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:100
msgid ""
"If you need to pass any arguments to the ``qmake`` call, you can override "
"the ``qmake_args`` method like so:"
msgstr ""

# d851e0441b63430d82342d07c5233110
#: ../spack/lib/spack/docs/build_systems/qmakepackage.rst:115
msgid ""
"For more information on the QMake build system, see: http://doc.qt.io/qt-5/"
"qmake-manual.html"
msgstr ""

# 0470454e1d194339b7439f66aaae5318
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:10
msgid "RPackage"
msgstr ""

# 058ae7ca13f64e908ef1b4d2b538e8df
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:12
msgid "Like Python, R has its own built-in build system."
msgstr ""

# c9ed8bcbdbb1402e85b72b575ac06336
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:14
msgid ""
"The R build system is remarkably uniform and well-tested. This makes it one "
"of the easiest build systems to create new Spack packages for."
msgstr ""

# b63063126dc14f34ab2e2e3f9c7b7e74
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:22
msgid "The ``RPackage`` base class has a single phase:"
msgstr ""

# 106555cc83384cf5a500cb654e818de9
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:35
msgid "Finding R packages"
msgstr ""

# 83ae2607c0e5494cb3732e3be4bccedf
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:37
msgid ""
"The vast majority of R packages are hosted on CRAN - The Comprehensive R "
"Archive Network. If you are looking for a particular R package, search for "
"\"CRAN <package-name>\" and you should quickly find what you want. If it "
"isn't on CRAN, try Bioconductor, another common R repository."
msgstr ""

# a353478553a045d5bddc066fb5636053
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:42
msgid ""
"For the purposes of this tutorial, we will be walking through `r-caret "
"<https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/"
"packages/r-caret/package.py>`_ as an example. If you search for \"CRAN caret"
"\", you will quickly find what you are looking for at https://cran.r-project."
"org/web/packages/caret/index.html. If you search for \"Package source\", you "
"will find the download URL for the latest release. Use this URL with ``spack "
"create`` to create a new package."
msgstr ""

# dbea54af3fd44ad0b15eed3d0742f38d
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:54
msgid ""
"The first thing you'll notice is that Spack prepends ``r-`` to the front of "
"the package name. This is how Spack separates R package extensions from the "
"rest of the packages in Spack. Without this, we would end up with package "
"name collisions more frequently than we would like. For instance, there are "
"already packages for both:"
msgstr ""

# 3f90680dafd7467fbd92978ae6906764
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:60
msgid "``ape`` and ``r-ape``"
msgstr ""

# 98c1aac2c7cd40829824ddf9c2b8d178
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:61
msgid "``curl`` and ``r-curl``"
msgstr ""

# 0a9017a755564260ae70948d191d2adc
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:62
msgid "``gmp`` and ``r-gmp``"
msgstr ""

# 06c56c3d54904c159898d16a7bb3ee81
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:63
msgid "``jpeg`` and ``r-jpeg``"
msgstr ""

# 68b1c689e24c417ab6fe3808e1238442
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:64
msgid "``openssl`` and ``r-openssl``"
msgstr ""

# 5301ac51d88a49818b57be3196cb808f
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:65
msgid "``uuid`` and ``r-uuid``"
msgstr ""

# 3631804ae6674582b1cc2186c2db7e87
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:66
msgid "``xts`` and ``r-xts``"
msgstr ""

# 367812f048e14963b780b68672f91f53
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:68
msgid ""
"Many popular programs written in C/C++ are later ported to R as a separate "
"project."
msgstr ""

# 964da92bb7c74160ae5066ee31be3f5e
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:75
msgid ""
"The first thing you'll need to add to your new package is a description. The "
"top of the homepage for ``caret`` lists the following description:"
msgstr ""

# b108f956342d4cac9b3e3a37710a4a00
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:78
msgid "caret: Classification and Regression Training"
msgstr ""

# 3d214184f9d04dee886f9654fa0d0698
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:80
msgid ""
"Misc functions for training and plotting classification and regression "
"models."
msgstr ""

# 46fd93ae4eb94a00a62c56b65bcd19bb
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:82
msgid ""
"You can either use the short description (first line), long description "
"(second line), or both depending on what you feel is most appropriate."
msgstr ""

# ab0e437d901a4968ac251a49ce73588f
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:89
msgid "If you look at the bottom of the page, you'll see:"
msgstr ""

# 143d2bebd4e7475aada96cdf8bfe12f4
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:91
msgid "Linking:"
msgstr ""

# a25c5e7d58f14e82a6f682afb2a6651d
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:93
msgid ""
"Please use the canonical form https://CRAN.R-project.org/package=caret to "
"link to this page."
msgstr ""

# c939a521058641a28d9ece1418c9cc8b
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:95
msgid ""
"Please uphold the wishes of the CRAN admins and use https://CRAN.R-project."
"org/package=caret as the homepage instead of https://cran.r-project.org/web/"
"packages/caret/index.html. The latter may change without notice."
msgstr ""

# bdf82ea080a448c89e61ab5f451a15e4
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:104
msgid ""
"As previously mentioned, the download URL for the latest release can be "
"found by searching \"Package source\" on the homepage."
msgstr ""

# 8ced48435ce341fea7ca2ca189bb6213
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:109
msgid "List URL"
msgstr ""

# 92c0802e73c44032882f421a2a7cd6c3
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:111
msgid ""
"CRAN maintains a single webpage containing the latest release of every "
"single package: https://cran.r-project.org/src/contrib/"
msgstr ""

# e856373b70fa4b24894ccb68955f4174
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:114
msgid ""
"Of course, as soon as a new release comes out, the version you were using in "
"your package is no longer available at that URL. It is moved to an archive "
"directory. If you search for \"Old sources\", you will find: https://cran.r-"
"project.org/src/contrib/Archive/caret"
msgstr ""

# 5a93ba746d664bd494046e88ceb91d30
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:119
msgid ""
"If you only specify the URL for the latest release, your package will no "
"longer be able to fetch that version as soon as a new release comes out. To "
"get around this, add the archive directory as a ``list_url``."
msgstr ""

# 9441008855314d8b9462f39503e0f461
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:127
msgid ""
"As an extension of the R ecosystem, your package will obviously depend on R "
"to build and run. Normally, we would use ``depends_on`` to express this, but "
"for R packages, we use ``extends``. ``extends`` is similar to "
"``depends_on``, but adds an additional feature: the ability to \"activate\" "
"the package by symlinking it to the R installation directory. Since every R "
"package needs this, the ``RPackage`` base class contains:"
msgstr ""

# 22165a5964124a9da38d67dab7e61b63
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:140
msgid ""
"Take a close look at the homepage for ``caret``. If you look at the \"Depends"
"\" section, you'll notice that ``caret`` depends on \"R (≥ 2.10)\". You "
"should add this to your package like so:"
msgstr ""

# 6ad47724be0440ba9de389fa19a5ca41
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:151
msgid "R dependencies"
msgstr ""

# 7cf0bb6950b14208a3d89d002eec3096
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:153
msgid ""
"R packages are often small and follow the classic Unix philosophy of doing "
"one thing well. They are modular and usually depend on several other "
"packages. You may find a single package with over a hundred dependencies. "
"Luckily, CRAN packages are well-documented and list all of their "
"dependencies in the following sections:"
msgstr ""

# 66f5752784eb496cb6667c0df85632ac
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:159
msgid "Depends"
msgstr ""

# b135ff92ceca4e68a1c325477ad3af33
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:160
msgid "Imports"
msgstr ""

# 7fd0020388bf4759bb3b2638aad5c1db
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:161
msgid "LinkingTo"
msgstr ""

# 06353e665d824a929b9a3b8adf4a3cff
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:163
msgid ""
"As far as Spack is concerned, all 3 of these dependency types correspond to "
"``type=('build', 'run')``, so you don't have to worry about them. If you are "
"curious what they mean, https://github.com/spack/spack/issues/2951 has a "
"pretty good summary:"
msgstr ""

# e060bc46a871427fb447afdbee2a95d0
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:168
msgid ""
"``Depends`` is required and will cause those R packages to be *attached*, "
"that is, their APIs are exposed to the user. ``Imports`` *loads* packages so "
"that *the package* importing these packages can access their APIs, while "
"*not* being exposed to the user. When a user calls ``library(foo)`` s/he "
"*attaches* package ``foo`` and all of the packages under ``Depends``. Any "
"function in one of these package can be called directly as ``bar()``. If "
"there are conflicts, user can also specify ``pkgA::bar()`` and ``pkgB::"
"bar()`` to distinguish between them. Historically, there was only "
"``Depends`` and ``Suggests``, hence the confusing names. Today, maybe "
"``Depends`` would have been named ``Attaches``."
msgstr ""

# 5b303cf7527448bf9beb3557d5d23cf3
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:179
msgid ""
"The ``LinkingTo`` is not perfect and there was recently an extensive "
"discussion about API/ABI among other things on the R-devel mailing list "
"among very skilled R developers:"
msgstr ""

# a050bffbed1645a9b0a59c762b843bea
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:183
msgid "https://stat.ethz.ch/pipermail/r-devel/2016-December/073505.html"
msgstr ""

# ae248c820a3a44f4a55b0c91403c5f56
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:184
msgid "https://stat.ethz.ch/pipermail/r-devel/2017-January/073647.html"
msgstr ""

# 56cab71fdcb643e7840789ab6ebfafa3
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:186
msgid "Some packages also have a fourth section:"
msgstr ""

# d5feea3657b342f6b110f26ff075cbf6
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:188
msgid "Suggests"
msgstr ""

# f196c4f8f9e64f059dd99b0fe48dc22d
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:190
msgid ""
"These are optional, rarely-used dependencies that a user might find useful. "
"You should **NOT** add these dependencies to your package. R packages "
"already have enough dependencies as it is, and adding optional dependencies "
"can really slow down the concretization process. They can also introduce "
"circular dependencies."
msgstr ""

# f8bf5cd0e3514d53ba46bd25a526df26
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:198
msgid "Core, recommended, and non-core packages"
msgstr ""

# 86e170d7495048319b4f669f83f60cf2
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:200
msgid ""
"If you look at \"Depends\", \"Imports\", and \"LinkingTo\", you will notice "
"3 different types of packages:"
msgstr ""

# ecd47c4e500f49a2961b1ded30c642ae
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:205
msgid "Core packages"
msgstr ""

# b530064b709848aaa3104ea6b6392a05
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:207
msgid ""
"If you look at the ``caret`` homepage, you'll notice a few dependencies that "
"don't have a link to the package, like ``methods``, ``stats``, and "
"``utils``. These packages are part of the core R distribution and are tied "
"to the R version installed. You can basically consider these to be \"R itself"
"\". These are so essential to R so it would not make sense that they could "
"be updated via CRAN. If so, you would basically get a different version of "
"R. Thus, they're updated when R is updated."
msgstr ""

# af14cde6697c4f9d9c69e73bf3799b74
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:215
msgid ""
"You can find a list of these core libraries at: https://github.com/wch/r-"
"source/tree/trunk/src/library"
msgstr ""

# b6b33e502c384e389294f807975afb03
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:220
msgid "Recommended packages"
msgstr ""

# 56da1324d9ae4c6b9755f909b30b3cb1
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:222
msgid ""
"When you install R, there is an option called ``--with-recommended-"
"packages``. This flag causes the R installation to include a few "
"\"Recommended\" packages (legacy term). They are for historical reasons "
"quite tied to the core R distribution, developed by the R core team or "
"people closely related to it. The R core distribution \"knows\" about these "
"package, but they are indeed distributed via CRAN. Because they're "
"distributed via CRAN, they can also be updated between R version releases."
msgstr ""

# 6fb9ce6b5f66492dad45273c538cca4f
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:230
msgid ""
"Spack explicitly adds the ``--without-recommended-packages`` flag to prevent "
"the installation of these packages. Due to the way Spack handles package "
"activation (symlinking packages to the R installation directory), pre-"
"existing recommended packages will cause conflicts for already-existing "
"files. We could either not include these recommended packages in Spack and "
"require them to be installed through ``--with-recommended-packages``, or we "
"could not install them with R and let users choose the version of the "
"package they want to install. We chose the latter."
msgstr ""

# 119d3cbdd1e54cf1986cc92a2a33d452
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:239
msgid ""
"Since these packages are so commonly distributed with the R system, many "
"developers may assume these packages exist and fail to list them as "
"dependencies. Watch out for this."
msgstr ""

# 8b81f957100a48b6871ff4bfd1d2deb8
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:243
msgid ""
"You can find a list of these recommended packages at: https://github.com/wch/"
"r-source/blob/trunk/share/make/vars.mk"
msgstr ""

# e6edbb355a064cfc8a28a75e89243b55
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:248
msgid "Non-core packages"
msgstr ""

# 751b6d3448154217886d86ec12b206fe
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:250
msgid ""
"These are packages that are neither \"core\" nor \"recommended\". There are "
"more than 10,000 of these packages hosted on CRAN alone."
msgstr ""

# d7bbd99d7cc240218bf91d2e58a200e3
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:253
msgid ""
"For each of these package types, if you see that a specific version is "
"required, for example, \"lattice (≥ 0.20)\", please add this information to "
"the dependency:"
msgstr ""

# db088a8921714c0cbb6985ec757c850c
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:264
msgid "Non-R dependencies"
msgstr ""

# 2503dffd237d4fe78c20b0a72376d601
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:266
msgid ""
"Some packages depend on non-R libraries for linking. Check out the `r-"
"stringi <https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/"
"packages/r-stringi/package.py>`_ package for an example: https://CRAN.R-"
"project.org/package=stringi. If you search for the text \"SystemRequirements"
"\", you will see:"
msgstr ""

# 09d79f22e71e47de9969a8c6287906d5
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:271
msgid "ICU4C (>= 52, optional)"
msgstr ""

# ea2381a1e91e40faaf4cdec5c5492c17
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:273
msgid ""
"This is how non-R dependencies are listed. Make sure to add these "
"dependencies. The default dependency type should suffice."
msgstr ""

# ba95c145550344688f1c0ba32ba124a9
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:278
msgid "Passing arguments to the installation"
msgstr ""

# dd293b5f16ee487d85549880901ea869
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:280
msgid ""
"Some R packages provide additional flags that can be passed to ``R CMD "
"INSTALL``, often to locate non-R dependencies. `r-rmpi <https://github.com/"
"spack/spack/blob/develop/var/spack/repos/builtin/packages/r-rmpi/package."
"py>`_ is an example of this, and flags for linking to an MPI library. To "
"pass these to the installation command, you can override ``configure_args`` "
"like so:"
msgstr ""

# 5890c38078ba41a783b5ce94f6f4f689
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:307
msgid ""
"There is a similar ``configure_vars`` function that can be overridden to "
"pass variables to the build."
msgstr ""

# 8453ae6035bb43d9a06ede0206461aa3
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:314
msgid ""
"CRAN hosts over 10,000 R packages, most of which are not in Spack. Many "
"users may not need the advanced features of Spack, and may prefer to install "
"R packages the normal way:"
msgstr ""

# 68e478baa8ba4afca3e9551e1b02b99c
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:324
msgid ""
"R will search CRAN for the ``ggplot2`` package and install all necessary "
"dependencies for you. If you want to update all installed R packages to the "
"latest release, you can use:"
msgstr ""

# bab635ec5fd84ab5a9e6c6fc20006d60
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:333
msgid ""
"This works great for users who have internet access, but those on an air-"
"gapped cluster will find it easier to let Spack build a download mirror and "
"install these packages for you."
msgstr ""

# 2a00f01c67b34636ac017acd921181b8
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:337
msgid ""
"Where Spack really shines is its ability to install non-R dependencies and "
"link to them properly, something the R installation mechanism cannot handle."
msgstr ""

# de3893d451254ffcac98d5058ffc0f2f
#: ../spack/lib/spack/docs/build_systems/rpackage.rst:345
msgid ""
"For more information on installing R packages, see: https://stat.ethz.ch/R-"
"manual/R-devel/library/utils/html/INSTALL.html"
msgstr ""

# e7407b726bdc4e87af69d5b9eed7631f
#: ../spack/lib/spack/docs/build_systems/rubypackage.rst:10
msgid "RubyPackage"
msgstr ""

# a52680bf2b47450c803616b7a80e400c
#: ../spack/lib/spack/docs/build_systems/rubypackage.rst:12
msgid ""
"Like Perl, Python, and R, Ruby has its own build system for installing Ruby "
"gems."
msgstr ""

# 706c773ce144468f847f221569fccf17
#: ../spack/lib/spack/docs/build_systems/rubypackage.rst:15
msgid ""
"This build system is a work-in-progress. See https://github.com/spack/spack/"
"pull/3127 for more information."
msgstr ""

# 5cd9c9be87da4ac791094876785dcfd0
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:10
msgid "SConsPackage"
msgstr ""

# 1491aa7ef3eb4e9c92ef896c4b54f34a
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:12
msgid ""
"SCons is a general-purpose build system that does not rely on Makefiles to "
"build software. SCons is written in Python, and handles all building and "
"linking itself."
msgstr ""

# 2ba660f59b7740dc9830e6f3a681c3ab
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:16
msgid ""
"As far as build systems go, SCons is very non-uniform. It provides a common "
"framework for developers to write build scripts, but the build scripts "
"themselves can vary drastically. Some developers add subcommands like:"
msgstr ""

# 0d258edad2df46cf9b5f250659aba071
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:29
msgid ""
"Others don't add any subcommands. Some have configuration options that can "
"be specified through variables on the command line. Others don't."
msgstr ""

# 08f0182352dd489ab0f75fba3e639fba
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:36
msgid ""
"As previously mentioned, SCons allows developers to add subcommands like "
"``build`` and ``install``, but by default, installation usually looks like:"
msgstr ""

# a7b4d8a4badb4cb39dbae757b2ed0f1f
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:45
msgid ""
"To facilitate this, the ``SConsPackage`` base class provides the following "
"phases:"
msgstr ""

# c41f33df94a5457194ddb32f7cfb6b03
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:51
msgid ""
"Package developers often add unit tests that can be invoked with ``scons "
"test`` or ``scons check``. Spack provides a ``test`` method to handle this. "
"Since we don't know which one the package developer chose, the ``test`` "
"method does nothing by default, but can be easily overridden like so:"
msgstr ""

# cfbc49794fca4bb09c067096513caff8
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:67
msgid ""
"SCons packages can be identified by their ``SConstruct`` files. These files "
"handle everything from setting up subcommands and command-line options to "
"linking and compiling."
msgstr ""

# 4584c62be46f47d49a323d526f79f3fa
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:71
msgid "One thing to look for is the ``EnsureSConsVersion`` function:"
msgstr ""

# 40d857fe4b074b5ab2e81fee5b4fd83e
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:78
msgid ""
"This means that SCons 2.3.0 is the earliest release that will work. You "
"should specify this in a ``depends_on`` statement."
msgstr ""

# 54447cc0bd294b32827eb405ea9c79b3
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:85
msgid ""
"At the bare minimum, packages that use the SCons build system need a "
"``scons`` dependency. Since this is always the case, the ``SConsPackage`` "
"base class already contains:"
msgstr ""

# db1082e7e4d24b00b0583932cef48ebb
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:94
msgid ""
"If you want to specify a particular version requirement, you can override "
"this in your package:"
msgstr ""

# ac8eee18a96541a2b41178f5a81c3216
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:104
msgid "Finding available options"
msgstr ""

# 2aeeea6c0c0440b69988a63ea60e4e87
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:106
msgid ""
"The first place to start when looking for a list of valid options to build a "
"package is ``scons --help``. Some packages like `kahip <https://github.com/"
"spack/spack/blob/develop/var/spack/repos/builtin/packages/kahip/package."
"py>`_ don't bother overwriting the default SCons help message, so this isn't "
"very useful, but other packages like `serf <https://github.com/spack/spack/"
"blob/develop/var/spack/repos/builtin/packages/serf/package.py>`_ print a "
"list of valid command-line variables:"
msgstr ""

# 13656c9cc01e410fbe0502202169af7e
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:180
msgid ""
"More advanced packages like `cantera <https://github.com/spack/spack/blob/"
"develop/var/spack/repos/builtin/packages/cantera/package.py>`_ use ``scons --"
"help`` to print a list of subcommands:"
msgstr ""

# 9bcebf59638d42feb53a1883b077061c
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:227
msgid ""
"You'll notice that cantera provides a ``scons help`` subcommand. Running "
"``scons help`` prints a list of valid command-line variables."
msgstr ""

# 3abfecff0b104c70b6e8d3de577d9fde
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:232
msgid "Passing arguments to scons"
msgstr ""

# 9e224442703a4d7bae686c5b27acd24f
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:234
msgid ""
"Now that you know what arguments the project accepts, you can add them to "
"the package build phase. This is done by overriding ``build_args`` like so:"
msgstr ""

# 38fd7220076149d39eb14b696bddf277
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:253
msgid ""
"``SConsPackage`` also provides an ``install_args`` function that you can "
"override to pass additional arguments to ``scons install``."
msgstr ""

# #-#-#-#-#  build_systems.pot (Spack 0.12)  #-#-#-#-#
# cc9869b1615049c89aec6028c0c645b7
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# 83eccbc40fb7496480526254eb6c1ac8
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:258
#: ../spack/lib/spack/docs/packaging_guide.rst:3329
msgid "Compiler wrappers"
msgstr ""

# da65cca9517f4411a2e3cd1eca7de7d5
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:260
msgid ""
"By default, SCons builds all packages in a separate execution environment, "
"and doesn't pass any environment variables from the user environment. Even "
"changes to ``PATH`` are not propagated unless the package developer does so."
msgstr ""

# 051344e03c0b42e58ccf0c7ac021bfaa
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:265
msgid ""
"This is particularly troublesome for Spack's compiler wrappers, which depend "
"on environment variables to manage dependencies and linking flags. In many "
"cases, SCons packages are not compatible with Spack's compiler wrappers, and "
"linking must be done manually."
msgstr ""

# eedb561948574de1b0ddd227a54efff9
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:270
msgid ""
"First of all, check the list of valid options for anything relating to "
"environment variables. For example, cantera has the following option:"
msgstr ""

# d06505838f184c58912c893363078eed
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:282
msgid ""
"In the case of cantera, using ``env_vars=all`` allows us to use Spack's "
"compiler wrappers. If you don't see an option related to environment "
"variables, try using Spack's compiler wrappers by passing ``spack_cc``, "
"``spack_cxx``, and ``spack_fc`` via the ``CC``, ``CXX``, and ``FC`` "
"arguments, respectively. If you pass them to the build and you see an error "
"message like:"
msgstr ""

# 2c214310b12248f98f3bf969bcaf096b
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:294
msgid ""
"you'll know that the package isn't compatible with Spack's compiler "
"wrappers. In this case, you'll have to use the path to the actual compilers, "
"which are stored in ``self.compiler.cc`` and friends. Note that this may "
"involve passing additional flags to the build to locate dependencies, a task "
"normally done by the compiler wrappers. serf is an example of a package with "
"this limitation."
msgstr ""

# f0f5610ac8a94972be0d015621a7ab1e
#: ../spack/lib/spack/docs/build_systems/sconspackage.rst:305
msgid ""
"For more information on the SCons build system, see: http://scons.org/"
"documentation.html"
msgstr ""

# 4545561ad7894894a53f00773e86aefb
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:10
msgid "WafPackage"
msgstr ""

# c909ca4efd7d491298924f1259075319
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:12
msgid ""
"Like SCons, Waf is a general-purpose build system that does not rely on "
"Makefiles to build software."
msgstr ""

# 70fc14f235cc49769b4e1c927cbd6c99
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:19
msgid "The ``WafPackage`` base class comes with the following phases:"
msgstr ""

# 3ac65190aac2443d97b73d899a178a4b
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:21
msgid "``configure`` - configure the project"
msgstr ""

# 81cf79ebacbc41138090d9c1a40fa57c
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:34
msgid "Each of these are standard Waf commands and can be found by running:"
msgstr ""

# 93fa40903c114d3290e061a65c791af1
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:41
msgid "Each phase provides a ``<phase>`` function that runs:"
msgstr ""

# f247f0f55b5242f8872b9b8ee2e09b13
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:48
msgid ""
"where ``<jobs>`` is the number of parallel jobs to build with. Each phase "
"also has a ``<phase_args>`` function that can pass arguments to this call. "
"All of these functions are empty except for the ``configure_args`` function, "
"which passes ``--prefix=/path/to/installation/prefix``."
msgstr ""

# dc55c92babda4c3d936edde817d47791
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:57
msgid ""
"``WafPackage`` also provides ``test`` and ``installtest`` methods, which are "
"run after the ``build`` and ``install`` phases, respectively. By default, "
"these phases do nothing, but you can override them to run package-specific "
"unit tests. For example, the `py-py2cairo <https://github.com/spack/spack/"
"blob/develop/var/spack/repos/builtin/packages/py-py2cairo/package.py>`_ "
"package uses:"
msgstr ""

# 8a3e8bb537da4ca6981b86a08a0e5a08
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:76
msgid ""
"Each Waf package comes with a custom ``waf`` build script, written in "
"Python. This script contains instructions to build the project."
msgstr ""

# 8d3a18ae15b845a2a51a75c4fae04829
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:79
msgid ""
"The package also comes with a ``wscript`` file. This file is used to "
"override the default ``configure``, ``build``, and ``install`` phases to "
"customize the Waf project. It also allows developers to override the default "
"``./waf --help`` message. Check this file to find useful information about "
"dependencies and the minimum versions that are supported."
msgstr ""

# 6404c2f71e4d4933a2ac8b324e3815f2
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:90
msgid ""
"``WafPackage`` does not require ``waf`` to build. ``waf`` is only needed to "
"create the ``./waf`` script. Since ``./waf`` is a Python script, Python is "
"needed to build the project. ``WafPackage`` adds the following dependency "
"automatically:"
msgstr ""

# 222317a3d54642e3a469fa879945eb77
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:100
msgid "Waf only supports Python 2.5 and up."
msgstr ""

# 591aaa971c9044f0b3c5dd0ea9694716
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:104
msgid "Passing arguments to waf"
msgstr ""

# f6b2108522b443ac8c781d9b7b8adc91
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:106
msgid ""
"As previously mentioned, each phase comes with a ``<phase_args>`` function "
"that can be used to pass arguments to that particular phase. For example, if "
"you need to pass arguments to the build phase, you can use:"
msgstr ""

# c3f02066a85b4a57a06be676923fa647
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:122
msgid "A list of valid options can be found by running ``./waf --help``."
msgstr ""

# e13eaf165eef42529b405a3fd532f083
#: ../spack/lib/spack/docs/build_systems/wafpackage.rst:128
msgid "For more information on the Waf build system, see: https://waf.io/book/"
msgstr ""

# 3d8963007b3a4c4d8374e169b6a1e06c
#: ../spack/lib/spack/docs/chain.rst:10
msgid "Chaining Spack Installations"
msgstr ""

# eccd35fd554d43fe909e74a5dbaa6567
#: ../spack/lib/spack/docs/chain.rst:12
msgid ""
"You can point your Spack installation to another installation to use any "
"packages that are installed there. To register the other Spack instance, you "
"can add it as an entry to ``upstreams.yaml``:"
msgstr ""

# 37e5662916764f8d8c476e9910c95d37
#: ../spack/lib/spack/docs/chain.rst:24
msgid ""
"``install_tree`` must point to the ``opt/spack`` directory inside of the "
"Spack base directory."
msgstr ""

# 455ff7c7364a4a2d8ba0c516735048f6
#: ../spack/lib/spack/docs/chain.rst:27
msgid ""
"Once the upstream Spack instance has been added, ``spack find`` will "
"automatically check the upstream instance when querying installed packages, "
"and new package installations for the local Spack install will use any "
"dependencies that are installed in the upstream instance."
msgstr ""

# bf6a06a8df8e43f9a5d36c6232770bb7
#: ../spack/lib/spack/docs/chain.rst:32
msgid ""
"This other instance of Spack has no knowledge of the local Spack instance "
"and may not have the same permissions or ownership as the local Spack "
"instance. This has the following consequences:"
msgstr ""

# 026f4b84ea2442a8a91421615daa8dc6
#: ../spack/lib/spack/docs/chain.rst:36
msgid ""
"Upstream Spack instances are not locked. Therefore it is up to users to make "
"sure that the local instance is not using an upstream instance when it is "
"being modified."
msgstr ""

# 375a3ae94b024a958c87f861ec168d90
#: ../spack/lib/spack/docs/chain.rst:40
msgid ""
"Users should not uninstall packages from the upstream instance. Since the "
"upstream instance doesn't know about the local instance, it cannot prevent "
"the uninstallation of packages which the local instance depends on."
msgstr ""

# eb2eb9a9763f4ff184b5de17f52cc0bf
#: ../spack/lib/spack/docs/chain.rst:44
msgid "Other details about upstream installations:"
msgstr ""

# 298ff6856d2343a68573af54cf4c6d9b
#: ../spack/lib/spack/docs/chain.rst:46
msgid ""
"If a package is installed both locally and upstream, the local installation "
"will always be used as a dependency. This can occur if the local Spack "
"installs a package which is not present in the upstream, but later on the "
"upstream Spack instance also installs that package."
msgstr ""

# 14b7c962c334489a8b91aea13eed6d72
#: ../spack/lib/spack/docs/chain.rst:51
msgid ""
"If an upstream Spack instance registers and installs an external package, "
"the local Spack instance will treat this the same as a Spack-installed "
"package. This feature will only work if the upstream Spack instance includes "
"the upstream functionality (i.e. if its commit is after March 27, 2019)."
msgstr ""

# a1b63855cb024af18307788cf92c1629
#: ../spack/lib/spack/docs/chain.rst:59
msgid "Using Multiple Upstream Spack Instances"
msgstr ""

# f6d9f0e115ea488caaa79df6a2fea5be
#: ../spack/lib/spack/docs/chain.rst:61
msgid ""
"A single Spack instance can use multiple upstream Spack installations. Spack "
"will search upstream instances in the order you list them in your "
"configuration. If your installation refers to instances X and Y, in that "
"order, then instance X must list Y as an upstream in its own ``upstreams."
"yaml``."
msgstr ""

# b2ac79a39ba5480794002a38f1a000ea
#: ../spack/lib/spack/docs/chain.rst:68
msgid "Using Modules for Upstream Packages"
msgstr ""

# 42eb8013c1c94672905d79a188111cd4
#: ../spack/lib/spack/docs/chain.rst:70
msgid ""
"The local Spack instance does not generate modules for packages which are "
"installed upstream. The local Spack instance can be configured to use the "
"modules generated by the upstream Spack instance."
msgstr ""

# 2c685ad5c9594eac884261e44778dcc5
#: ../spack/lib/spack/docs/chain.rst:74
msgid ""
"There are two requirements to use the modules created by an upstream Spack "
"instance: firstly the upstream instance must do a ``spack module tcl "
"refresh``, which generates an index file that maps installed packages to "
"their modules; secondly, the local Spack instance must add a ``modules`` "
"entry to the configuration:"
msgstr ""

# 815ad57382c74d3eaec024a0f18d37d5
#: ../spack/lib/spack/docs/chain.rst:88
msgid ""
"Each time new packages are installed in the upstream Spack instance, the "
"upstream Spack maintainer should run ``spack module tcl refresh`` (or the "
"corresponding command for the type of module they intend to use)."
msgstr ""

# 97ce11ca50a847df887ad56d5be5e06c
#: ../spack/lib/spack/docs/chain.rst:94
msgid ""
"Spack can generate modules that :ref:`automatically load <autoloading-"
"dependencies>` the modules of dependency packages. Spack cannot currently do "
"this for modules in upstream packages."
msgstr ""

# 757992f76cc9453382122f1dd3062f43
#: ../spack/lib/spack/docs/command_index.rst:3
msgid "Command Reference"
msgstr "コマンドリファレンス"

#: ../spack/lib/spack/docs/command_index.rst:5
msgid ""
"This is a reference for all commands in the Spack command line interface. "
"The same information is available through :ref:`spack-help`."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:8
msgid ""
"Commands that also have sections in the main documentation have a link to "
"\"More documentation\"."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:12
msgid "Category"
msgstr "カテゴリー"

#: ../spack/lib/spack/docs/command_index.rst:12
msgid "Commands"
msgstr "コマンド"

#: ../spack/lib/spack/docs/command_index.rst:14
msgid "Administration"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:0
msgid ""
":ref:`bootstrap <spack-bootstrap>`, :ref:`clone <spack-clone>`, :ref:"
"`reindex <spack-reindex>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:17
msgid "Query packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:0
msgid ""
":ref:`dependencies <spack-dependencies>`, :ref:`dependents <spack-"
"dependents>`, :ref:`find <spack-find>`, :ref:`graph <spack-graph>`, :ref:"
"`info <spack-info>`, :ref:`list <spack-list>`, :ref:`location <spack-"
"location>`, :ref:`providers <spack-providers>`,"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:0
#: ../spack/lib/spack/docs/command_index.rst:226
msgid ":ref:`resource <spack-resource>`"
msgstr ""

# 37232671161840f1ae54c6b4bde00d4e
#: ../spack/lib/spack/docs/command_index.rst:26
msgid "Build packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:0
msgid ""
":ref:`build <spack-build>`, :ref:`build-env <spack-build-env>`, :ref:`clean "
"<spack-clean>`, :ref:`configure <spack-configure>`, :ref:`diy <spack-diy>`, :"
"ref:`fetch <spack-fetch>`, :ref:`install <spack-install>`, :ref:`log-parse "
"<spack-log-parse>`,"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:0
msgid ""
":ref:`patch <spack-patch>`, :ref:`release-jobs <spack-release-jobs>`, :ref:"
"`restage <spack-restage>`, :ref:`setup <spack-setup>`, :ref:`spec <spack-"
"spec>`, :ref:`stage <spack-stage>`, :ref:`uninstall <spack-uninstall>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:0
msgid ""
":ref:`config <spack-config>`, :ref:`mirror <spack-mirror>`, :ref:`repo "
"<spack-repo>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:44
msgid "Developer"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:0
msgid ""
":ref:`blame <spack-blame>`, :ref:`cd <spack-cd>`, :ref:`commands <spack-"
"commands>`, :ref:`debug <spack-debug>`, :ref:`flake8 <spack-flake8>`, :ref:"
"`license <spack-license>`, :ref:`pkg <spack-pkg>`, :ref:`pydoc <spack-"
"pydoc>`,"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:0
msgid ""
":ref:`python <spack-python>`, :ref:`test <spack-test>`, :ref:`url <spack-"
"url>`"
msgstr ""

# 3a8d6f12cb9f4c20814ced54e413d7b2
#: ../spack/lib/spack/docs/command_index.rst:55
msgid "Environments"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:0
msgid ""
":ref:`add <spack-add>`, :ref:`concretize <spack-concretize>`, :ref:`env "
"<spack-env>`, :ref:`remove <spack-remove>`, :ref:`view <spack-view>`"
msgstr ""

# 9ad3d89fabef402684b01faaa670f4b5
#: ../spack/lib/spack/docs/command_index.rst:60
#: ../spack/lib/spack/docs/packaging_guide.rst:2093
msgid "Extensions"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:0
msgid ""
":ref:`activate <spack-activate>`, :ref:`deactivate <spack-deactivate>`, :ref:"
"`extensions <spack-extensions>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:63
msgid "More help"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:0
msgid ":ref:`docs <spack-docs>`, :ref:`help <spack-help>`"
msgstr ""

# 0ea2e707182f4512beeafb5de6fbf1b2
# 930ea0318c7a4601823c6a72cc32f601
#: ../spack/lib/spack/docs/command_index.rst:65
#: ../spack/lib/spack/docs/module_file_support.rst:10
#: ../spack/lib/spack/docs/module_file_support.rst:114
msgid "Modules"
msgstr "モジュール"

#: ../spack/lib/spack/docs/command_index.rst:0
msgid ""
":ref:`load <spack-load>`, :ref:`module <spack-module>`, :ref:`unload <spack-"
"unload>`, :ref:`unuse <spack-unuse>`, :ref:`use <spack-use>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:70
msgid "Create packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:0
msgid ""
":ref:`buildcache <spack-buildcache>`, :ref:`checksum <spack-checksum>`, :ref:"
"`create <spack-create>`, :ref:`edit <spack-edit>`, :ref:`gpg <spack-gpg>`, :"
"ref:`upload-s3 <spack-upload-s3>`, :ref:`versions <spack-versions>`"
msgstr ""

# 21a4263270eb4eeab2e213bfc0fa759c
#: ../spack/lib/spack/docs/command_index.rst:77
#: ../spack/lib/spack/docs/tutorial_configuration.rst:49
msgid "System"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:0
msgid ""
":ref:`arch <spack-arch>`, :ref:`compiler <spack-compiler>`, :ref:`compilers "
"<spack-compilers>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:88
msgid "spack"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:90
msgid ""
"A flexible package manager that supports multiple versions, configurations, "
"platforms, and compilers."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:100
#: ../spack/lib/spack/docs/command_index.rst:264
#: ../spack/lib/spack/docs/command_index.rst:296
#: ../spack/lib/spack/docs/command_index.rst:316
#: ../spack/lib/spack/docs/command_index.rst:351
#: ../spack/lib/spack/docs/command_index.rst:380
#: ../spack/lib/spack/docs/command_index.rst:427
#: ../spack/lib/spack/docs/command_index.rst:456
#: ../spack/lib/spack/docs/command_index.rst:490
#: ../spack/lib/spack/docs/command_index.rst:530
#: ../spack/lib/spack/docs/command_index.rst:578
#: ../spack/lib/spack/docs/command_index.rst:614
#: ../spack/lib/spack/docs/command_index.rst:644
#: ../spack/lib/spack/docs/command_index.rst:677
#: ../spack/lib/spack/docs/command_index.rst:696
#: ../spack/lib/spack/docs/command_index.rst:732
#: ../spack/lib/spack/docs/command_index.rst:762
#: ../spack/lib/spack/docs/command_index.rst:786
#: ../spack/lib/spack/docs/command_index.rst:823
#: ../spack/lib/spack/docs/command_index.rst:881
#: ../spack/lib/spack/docs/command_index.rst:912
#: ../spack/lib/spack/docs/command_index.rst:953
#: ../spack/lib/spack/docs/command_index.rst:982
#: ../spack/lib/spack/docs/command_index.rst:1011
#: ../spack/lib/spack/docs/command_index.rst:1048
#: ../spack/lib/spack/docs/command_index.rst:1075
#: ../spack/lib/spack/docs/command_index.rst:1099
#: ../spack/lib/spack/docs/command_index.rst:1128
#: ../spack/lib/spack/docs/command_index.rst:1153
#: ../spack/lib/spack/docs/command_index.rst:1176
#: ../spack/lib/spack/docs/command_index.rst:1199
#: ../spack/lib/spack/docs/command_index.rst:1238
#: ../spack/lib/spack/docs/command_index.rst:1264
#: ../spack/lib/spack/docs/command_index.rst:1288
#: ../spack/lib/spack/docs/command_index.rst:1317
#: ../spack/lib/spack/docs/command_index.rst:1348
#: ../spack/lib/spack/docs/command_index.rst:1394
#: ../spack/lib/spack/docs/command_index.rst:1423
#: ../spack/lib/spack/docs/command_index.rst:1449
#: ../spack/lib/spack/docs/command_index.rst:1475
#: ../spack/lib/spack/docs/command_index.rst:1510
#: ../spack/lib/spack/docs/command_index.rst:1542
#: ../spack/lib/spack/docs/command_index.rst:1589
#: ../spack/lib/spack/docs/command_index.rst:1617
#: ../spack/lib/spack/docs/command_index.rst:1660
#: ../spack/lib/spack/docs/command_index.rst:1699
#: ../spack/lib/spack/docs/command_index.rst:1735
#: ../spack/lib/spack/docs/command_index.rst:1768
#: ../spack/lib/spack/docs/command_index.rst:1801
#: ../spack/lib/spack/docs/command_index.rst:1822
#: ../spack/lib/spack/docs/command_index.rst:1840
#: ../spack/lib/spack/docs/command_index.rst:1864
#: ../spack/lib/spack/docs/command_index.rst:1906
#: ../spack/lib/spack/docs/command_index.rst:1934
#: ../spack/lib/spack/docs/command_index.rst:1977
#: ../spack/lib/spack/docs/command_index.rst:2016
#: ../spack/lib/spack/docs/command_index.rst:2096
#: ../spack/lib/spack/docs/command_index.rst:2136
#: ../spack/lib/spack/docs/command_index.rst:2178
#: ../spack/lib/spack/docs/command_index.rst:2202
#: ../spack/lib/spack/docs/command_index.rst:2226
#: ../spack/lib/spack/docs/command_index.rst:2253
#: ../spack/lib/spack/docs/command_index.rst:2289
#: ../spack/lib/spack/docs/command_index.rst:2316
#: ../spack/lib/spack/docs/command_index.rst:2340
#: ../spack/lib/spack/docs/command_index.rst:2370
#: ../spack/lib/spack/docs/command_index.rst:2398
#: ../spack/lib/spack/docs/command_index.rst:2444
#: ../spack/lib/spack/docs/command_index.rst:2478
#: ../spack/lib/spack/docs/command_index.rst:2512
#: ../spack/lib/spack/docs/command_index.rst:2616
#: ../spack/lib/spack/docs/command_index.rst:2643
#: ../spack/lib/spack/docs/command_index.rst:2661
#: ../spack/lib/spack/docs/command_index.rst:2692
#: ../spack/lib/spack/docs/command_index.rst:2732
#: ../spack/lib/spack/docs/command_index.rst:2763
#: ../spack/lib/spack/docs/command_index.rst:2816
#: ../spack/lib/spack/docs/command_index.rst:2853
#: ../spack/lib/spack/docs/command_index.rst:2893
#: ../spack/lib/spack/docs/command_index.rst:2934
#: ../spack/lib/spack/docs/command_index.rst:2963
#: ../spack/lib/spack/docs/command_index.rst:2986
#: ../spack/lib/spack/docs/command_index.rst:3009
#: ../spack/lib/spack/docs/command_index.rst:3037
#: ../spack/lib/spack/docs/command_index.rst:3072
#: ../spack/lib/spack/docs/command_index.rst:3105
#: ../spack/lib/spack/docs/command_index.rst:3135
#: ../spack/lib/spack/docs/command_index.rst:3162
#: ../spack/lib/spack/docs/command_index.rst:3192
#: ../spack/lib/spack/docs/command_index.rst:3228
#: ../spack/lib/spack/docs/command_index.rst:3261
#: ../spack/lib/spack/docs/command_index.rst:3291
#: ../spack/lib/spack/docs/command_index.rst:3318
#: ../spack/lib/spack/docs/command_index.rst:3354
#: ../spack/lib/spack/docs/command_index.rst:3372
#: ../spack/lib/spack/docs/command_index.rst:3407
#: ../spack/lib/spack/docs/command_index.rst:3440
#: ../spack/lib/spack/docs/command_index.rst:3470
#: ../spack/lib/spack/docs/command_index.rst:3497
#: ../spack/lib/spack/docs/command_index.rst:3537
#: ../spack/lib/spack/docs/command_index.rst:3560
#: ../spack/lib/spack/docs/command_index.rst:3596
#: ../spack/lib/spack/docs/command_index.rst:3620
#: ../spack/lib/spack/docs/command_index.rst:3647
#: ../spack/lib/spack/docs/command_index.rst:3674
#: ../spack/lib/spack/docs/command_index.rst:3701
#: ../spack/lib/spack/docs/command_index.rst:3729
#: ../spack/lib/spack/docs/command_index.rst:3755
#: ../spack/lib/spack/docs/command_index.rst:3783
#: ../spack/lib/spack/docs/command_index.rst:3806
#: ../spack/lib/spack/docs/command_index.rst:3834
#: ../spack/lib/spack/docs/command_index.rst:3887
#: ../spack/lib/spack/docs/command_index.rst:3915
#: ../spack/lib/spack/docs/command_index.rst:3953
#: ../spack/lib/spack/docs/command_index.rst:3971
#: ../spack/lib/spack/docs/command_index.rst:3998
#: ../spack/lib/spack/docs/command_index.rst:4025
#: ../spack/lib/spack/docs/command_index.rst:4050
#: ../spack/lib/spack/docs/command_index.rst:4077
#: ../spack/lib/spack/docs/command_index.rst:4104
#: ../spack/lib/spack/docs/command_index.rst:4132
#: ../spack/lib/spack/docs/command_index.rst:4158
#: ../spack/lib/spack/docs/command_index.rst:4201
#: ../spack/lib/spack/docs/command_index.rst:4250
#: ../spack/lib/spack/docs/command_index.rst:4284
#: ../spack/lib/spack/docs/command_index.rst:4324
#: ../spack/lib/spack/docs/command_index.rst:4362
#: ../spack/lib/spack/docs/command_index.rst:4388
#: ../spack/lib/spack/docs/command_index.rst:4408
#: ../spack/lib/spack/docs/command_index.rst:4435
#: ../spack/lib/spack/docs/command_index.rst:4465
#: ../spack/lib/spack/docs/command_index.rst:4490
#: ../spack/lib/spack/docs/command_index.rst:4525
#: ../spack/lib/spack/docs/command_index.rst:4546
#: ../spack/lib/spack/docs/command_index.rst:4582
#: ../spack/lib/spack/docs/command_index.rst:4600
#: ../spack/lib/spack/docs/command_index.rst:4626
#: ../spack/lib/spack/docs/command_index.rst:4657
#: ../spack/lib/spack/docs/command_index.rst:4682
#: ../spack/lib/spack/docs/command_index.rst:4729
#: ../spack/lib/spack/docs/command_index.rst:4762
#: ../spack/lib/spack/docs/command_index.rst:4795
#: ../spack/lib/spack/docs/command_index.rst:4828
msgid "**Optional arguments**"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:103
#: ../spack/lib/spack/docs/command_index.rst:267
#: ../spack/lib/spack/docs/command_index.rst:300
#: ../spack/lib/spack/docs/command_index.rst:319
#: ../spack/lib/spack/docs/command_index.rst:354
#: ../spack/lib/spack/docs/command_index.rst:383
#: ../spack/lib/spack/docs/command_index.rst:430
#: ../spack/lib/spack/docs/command_index.rst:459
#: ../spack/lib/spack/docs/command_index.rst:494
#: ../spack/lib/spack/docs/command_index.rst:533
#: ../spack/lib/spack/docs/command_index.rst:581
#: ../spack/lib/spack/docs/command_index.rst:617
#: ../spack/lib/spack/docs/command_index.rst:647
#: ../spack/lib/spack/docs/command_index.rst:681
#: ../spack/lib/spack/docs/command_index.rst:699
#: ../spack/lib/spack/docs/command_index.rst:735
#: ../spack/lib/spack/docs/command_index.rst:765
#: ../spack/lib/spack/docs/command_index.rst:789
#: ../spack/lib/spack/docs/command_index.rst:826
#: ../spack/lib/spack/docs/command_index.rst:884
#: ../spack/lib/spack/docs/command_index.rst:915
#: ../spack/lib/spack/docs/command_index.rst:956
#: ../spack/lib/spack/docs/command_index.rst:985
#: ../spack/lib/spack/docs/command_index.rst:1015
#: ../spack/lib/spack/docs/command_index.rst:1051
#: ../spack/lib/spack/docs/command_index.rst:1078
#: ../spack/lib/spack/docs/command_index.rst:1102
#: ../spack/lib/spack/docs/command_index.rst:1131
#: ../spack/lib/spack/docs/command_index.rst:1156
#: ../spack/lib/spack/docs/command_index.rst:1179
#: ../spack/lib/spack/docs/command_index.rst:1202
#: ../spack/lib/spack/docs/command_index.rst:1242
#: ../spack/lib/spack/docs/command_index.rst:1268
#: ../spack/lib/spack/docs/command_index.rst:1291
#: ../spack/lib/spack/docs/command_index.rst:1320
#: ../spack/lib/spack/docs/command_index.rst:1351
#: ../spack/lib/spack/docs/command_index.rst:1397
#: ../spack/lib/spack/docs/command_index.rst:1427
#: ../spack/lib/spack/docs/command_index.rst:1453
#: ../spack/lib/spack/docs/command_index.rst:1478
#: ../spack/lib/spack/docs/command_index.rst:1513
#: ../spack/lib/spack/docs/command_index.rst:1545
#: ../spack/lib/spack/docs/command_index.rst:1593
#: ../spack/lib/spack/docs/command_index.rst:1620
#: ../spack/lib/spack/docs/command_index.rst:1664
#: ../spack/lib/spack/docs/command_index.rst:1702
#: ../spack/lib/spack/docs/command_index.rst:1738
#: ../spack/lib/spack/docs/command_index.rst:1771
#: ../spack/lib/spack/docs/command_index.rst:1804
#: ../spack/lib/spack/docs/command_index.rst:1826
#: ../spack/lib/spack/docs/command_index.rst:1844
#: ../spack/lib/spack/docs/command_index.rst:1867
#: ../spack/lib/spack/docs/command_index.rst:1910
#: ../spack/lib/spack/docs/command_index.rst:1937
#: ../spack/lib/spack/docs/command_index.rst:1980
#: ../spack/lib/spack/docs/command_index.rst:2019
#: ../spack/lib/spack/docs/command_index.rst:2099
#: ../spack/lib/spack/docs/command_index.rst:2140
#: ../spack/lib/spack/docs/command_index.rst:2182
#: ../spack/lib/spack/docs/command_index.rst:2206
#: ../spack/lib/spack/docs/command_index.rst:2229
#: ../spack/lib/spack/docs/command_index.rst:2256
#: ../spack/lib/spack/docs/command_index.rst:2292
#: ../spack/lib/spack/docs/command_index.rst:2319
#: ../spack/lib/spack/docs/command_index.rst:2343
#: ../spack/lib/spack/docs/command_index.rst:2374
#: ../spack/lib/spack/docs/command_index.rst:2401
#: ../spack/lib/spack/docs/command_index.rst:2447
#: ../spack/lib/spack/docs/command_index.rst:2482
#: ../spack/lib/spack/docs/command_index.rst:2515
#: ../spack/lib/spack/docs/command_index.rst:2620
#: ../spack/lib/spack/docs/command_index.rst:2647
#: ../spack/lib/spack/docs/command_index.rst:2664
#: ../spack/lib/spack/docs/command_index.rst:2695
#: ../spack/lib/spack/docs/command_index.rst:2735
#: ../spack/lib/spack/docs/command_index.rst:2766
#: ../spack/lib/spack/docs/command_index.rst:2819
#: ../spack/lib/spack/docs/command_index.rst:2856
#: ../spack/lib/spack/docs/command_index.rst:2896
#: ../spack/lib/spack/docs/command_index.rst:2937
#: ../spack/lib/spack/docs/command_index.rst:2966
#: ../spack/lib/spack/docs/command_index.rst:2989
#: ../spack/lib/spack/docs/command_index.rst:3013
#: ../spack/lib/spack/docs/command_index.rst:3041
#: ../spack/lib/spack/docs/command_index.rst:3075
#: ../spack/lib/spack/docs/command_index.rst:3108
#: ../spack/lib/spack/docs/command_index.rst:3138
#: ../spack/lib/spack/docs/command_index.rst:3165
#: ../spack/lib/spack/docs/command_index.rst:3196
#: ../spack/lib/spack/docs/command_index.rst:3231
#: ../spack/lib/spack/docs/command_index.rst:3264
#: ../spack/lib/spack/docs/command_index.rst:3294
#: ../spack/lib/spack/docs/command_index.rst:3321
#: ../spack/lib/spack/docs/command_index.rst:3358
#: ../spack/lib/spack/docs/command_index.rst:3376
#: ../spack/lib/spack/docs/command_index.rst:3410
#: ../spack/lib/spack/docs/command_index.rst:3443
#: ../spack/lib/spack/docs/command_index.rst:3473
#: ../spack/lib/spack/docs/command_index.rst:3500
#: ../spack/lib/spack/docs/command_index.rst:3540
#: ../spack/lib/spack/docs/command_index.rst:3564
#: ../spack/lib/spack/docs/command_index.rst:3600
#: ../spack/lib/spack/docs/command_index.rst:3624
#: ../spack/lib/spack/docs/command_index.rst:3651
#: ../spack/lib/spack/docs/command_index.rst:3678
#: ../spack/lib/spack/docs/command_index.rst:3705
#: ../spack/lib/spack/docs/command_index.rst:3733
#: ../spack/lib/spack/docs/command_index.rst:3759
#: ../spack/lib/spack/docs/command_index.rst:3786
#: ../spack/lib/spack/docs/command_index.rst:3810
#: ../spack/lib/spack/docs/command_index.rst:3837
#: ../spack/lib/spack/docs/command_index.rst:3890
#: ../spack/lib/spack/docs/command_index.rst:3919
#: ../spack/lib/spack/docs/command_index.rst:3957
#: ../spack/lib/spack/docs/command_index.rst:3974
#: ../spack/lib/spack/docs/command_index.rst:4001
#: ../spack/lib/spack/docs/command_index.rst:4028
#: ../spack/lib/spack/docs/command_index.rst:4054
#: ../spack/lib/spack/docs/command_index.rst:4080
#: ../spack/lib/spack/docs/command_index.rst:4108
#: ../spack/lib/spack/docs/command_index.rst:4136
#: ../spack/lib/spack/docs/command_index.rst:4161
#: ../spack/lib/spack/docs/command_index.rst:4204
#: ../spack/lib/spack/docs/command_index.rst:4253
#: ../spack/lib/spack/docs/command_index.rst:4287
#: ../spack/lib/spack/docs/command_index.rst:4327
#: ../spack/lib/spack/docs/command_index.rst:4366
#: ../spack/lib/spack/docs/command_index.rst:4392
#: ../spack/lib/spack/docs/command_index.rst:4412
#: ../spack/lib/spack/docs/command_index.rst:4438
#: ../spack/lib/spack/docs/command_index.rst:4468
#: ../spack/lib/spack/docs/command_index.rst:4494
#: ../spack/lib/spack/docs/command_index.rst:4528
#: ../spack/lib/spack/docs/command_index.rst:4549
#: ../spack/lib/spack/docs/command_index.rst:4586
#: ../spack/lib/spack/docs/command_index.rst:4604
#: ../spack/lib/spack/docs/command_index.rst:4629
#: ../spack/lib/spack/docs/command_index.rst:4660
#: ../spack/lib/spack/docs/command_index.rst:4685
#: ../spack/lib/spack/docs/command_index.rst:4732
#: ../spack/lib/spack/docs/command_index.rst:4765
#: ../spack/lib/spack/docs/command_index.rst:4798
#: ../spack/lib/spack/docs/command_index.rst:4831
msgid "``-h, --help``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:103
#: ../spack/lib/spack/docs/command_index.rst:267
#: ../spack/lib/spack/docs/command_index.rst:299
#: ../spack/lib/spack/docs/command_index.rst:319
#: ../spack/lib/spack/docs/command_index.rst:354
#: ../spack/lib/spack/docs/command_index.rst:383
#: ../spack/lib/spack/docs/command_index.rst:430
#: ../spack/lib/spack/docs/command_index.rst:459
#: ../spack/lib/spack/docs/command_index.rst:493
#: ../spack/lib/spack/docs/command_index.rst:533
#: ../spack/lib/spack/docs/command_index.rst:581
#: ../spack/lib/spack/docs/command_index.rst:617
#: ../spack/lib/spack/docs/command_index.rst:647
#: ../spack/lib/spack/docs/command_index.rst:680
#: ../spack/lib/spack/docs/command_index.rst:699
#: ../spack/lib/spack/docs/command_index.rst:735
#: ../spack/lib/spack/docs/command_index.rst:765
#: ../spack/lib/spack/docs/command_index.rst:789
#: ../spack/lib/spack/docs/command_index.rst:826
#: ../spack/lib/spack/docs/command_index.rst:884
#: ../spack/lib/spack/docs/command_index.rst:915
#: ../spack/lib/spack/docs/command_index.rst:956
#: ../spack/lib/spack/docs/command_index.rst:985
#: ../spack/lib/spack/docs/command_index.rst:1014
#: ../spack/lib/spack/docs/command_index.rst:1051
#: ../spack/lib/spack/docs/command_index.rst:1078
#: ../spack/lib/spack/docs/command_index.rst:1102
#: ../spack/lib/spack/docs/command_index.rst:1131
#: ../spack/lib/spack/docs/command_index.rst:1156
#: ../spack/lib/spack/docs/command_index.rst:1179
#: ../spack/lib/spack/docs/command_index.rst:1202
#: ../spack/lib/spack/docs/command_index.rst:1241
#: ../spack/lib/spack/docs/command_index.rst:1267
#: ../spack/lib/spack/docs/command_index.rst:1291
#: ../spack/lib/spack/docs/command_index.rst:1320
#: ../spack/lib/spack/docs/command_index.rst:1351
#: ../spack/lib/spack/docs/command_index.rst:1397
#: ../spack/lib/spack/docs/command_index.rst:1426
#: ../spack/lib/spack/docs/command_index.rst:1452
#: ../spack/lib/spack/docs/command_index.rst:1478
#: ../spack/lib/spack/docs/command_index.rst:1513
#: ../spack/lib/spack/docs/command_index.rst:1545
#: ../spack/lib/spack/docs/command_index.rst:1592
#: ../spack/lib/spack/docs/command_index.rst:1620
#: ../spack/lib/spack/docs/command_index.rst:1663
#: ../spack/lib/spack/docs/command_index.rst:1702
#: ../spack/lib/spack/docs/command_index.rst:1738
#: ../spack/lib/spack/docs/command_index.rst:1771
#: ../spack/lib/spack/docs/command_index.rst:1804
#: ../spack/lib/spack/docs/command_index.rst:1825
#: ../spack/lib/spack/docs/command_index.rst:1843
#: ../spack/lib/spack/docs/command_index.rst:1867
#: ../spack/lib/spack/docs/command_index.rst:1909
#: ../spack/lib/spack/docs/command_index.rst:1937
#: ../spack/lib/spack/docs/command_index.rst:1980
#: ../spack/lib/spack/docs/command_index.rst:2019
#: ../spack/lib/spack/docs/command_index.rst:2099
#: ../spack/lib/spack/docs/command_index.rst:2139
#: ../spack/lib/spack/docs/command_index.rst:2181
#: ../spack/lib/spack/docs/command_index.rst:2205
#: ../spack/lib/spack/docs/command_index.rst:2229
#: ../spack/lib/spack/docs/command_index.rst:2256
#: ../spack/lib/spack/docs/command_index.rst:2292
#: ../spack/lib/spack/docs/command_index.rst:2319
#: ../spack/lib/spack/docs/command_index.rst:2343
#: ../spack/lib/spack/docs/command_index.rst:2373
#: ../spack/lib/spack/docs/command_index.rst:2401
#: ../spack/lib/spack/docs/command_index.rst:2447
#: ../spack/lib/spack/docs/command_index.rst:2481
#: ../spack/lib/spack/docs/command_index.rst:2515
#: ../spack/lib/spack/docs/command_index.rst:2619
#: ../spack/lib/spack/docs/command_index.rst:2646
#: ../spack/lib/spack/docs/command_index.rst:2664
#: ../spack/lib/spack/docs/command_index.rst:2695
#: ../spack/lib/spack/docs/command_index.rst:2735
#: ../spack/lib/spack/docs/command_index.rst:2766
#: ../spack/lib/spack/docs/command_index.rst:2819
#: ../spack/lib/spack/docs/command_index.rst:2856
#: ../spack/lib/spack/docs/command_index.rst:2896
#: ../spack/lib/spack/docs/command_index.rst:2937
#: ../spack/lib/spack/docs/command_index.rst:2966
#: ../spack/lib/spack/docs/command_index.rst:2989
#: ../spack/lib/spack/docs/command_index.rst:3012
#: ../spack/lib/spack/docs/command_index.rst:3040
#: ../spack/lib/spack/docs/command_index.rst:3075
#: ../spack/lib/spack/docs/command_index.rst:3108
#: ../spack/lib/spack/docs/command_index.rst:3138
#: ../spack/lib/spack/docs/command_index.rst:3165
#: ../spack/lib/spack/docs/command_index.rst:3195
#: ../spack/lib/spack/docs/command_index.rst:3231
#: ../spack/lib/spack/docs/command_index.rst:3264
#: ../spack/lib/spack/docs/command_index.rst:3294
#: ../spack/lib/spack/docs/command_index.rst:3321
#: ../spack/lib/spack/docs/command_index.rst:3357
#: ../spack/lib/spack/docs/command_index.rst:3375
#: ../spack/lib/spack/docs/command_index.rst:3410
#: ../spack/lib/spack/docs/command_index.rst:3443
#: ../spack/lib/spack/docs/command_index.rst:3473
#: ../spack/lib/spack/docs/command_index.rst:3500
#: ../spack/lib/spack/docs/command_index.rst:3540
#: ../spack/lib/spack/docs/command_index.rst:3563
#: ../spack/lib/spack/docs/command_index.rst:3599
#: ../spack/lib/spack/docs/command_index.rst:3623
#: ../spack/lib/spack/docs/command_index.rst:3650
#: ../spack/lib/spack/docs/command_index.rst:3677
#: ../spack/lib/spack/docs/command_index.rst:3704
#: ../spack/lib/spack/docs/command_index.rst:3732
#: ../spack/lib/spack/docs/command_index.rst:3758
#: ../spack/lib/spack/docs/command_index.rst:3786
#: ../spack/lib/spack/docs/command_index.rst:3809
#: ../spack/lib/spack/docs/command_index.rst:3837
#: ../spack/lib/spack/docs/command_index.rst:3890
#: ../spack/lib/spack/docs/command_index.rst:3918
#: ../spack/lib/spack/docs/command_index.rst:3956
#: ../spack/lib/spack/docs/command_index.rst:3974
#: ../spack/lib/spack/docs/command_index.rst:4001
#: ../spack/lib/spack/docs/command_index.rst:4028
#: ../spack/lib/spack/docs/command_index.rst:4053
#: ../spack/lib/spack/docs/command_index.rst:4080
#: ../spack/lib/spack/docs/command_index.rst:4107
#: ../spack/lib/spack/docs/command_index.rst:4135
#: ../spack/lib/spack/docs/command_index.rst:4161
#: ../spack/lib/spack/docs/command_index.rst:4204
#: ../spack/lib/spack/docs/command_index.rst:4253
#: ../spack/lib/spack/docs/command_index.rst:4287
#: ../spack/lib/spack/docs/command_index.rst:4327
#: ../spack/lib/spack/docs/command_index.rst:4365
#: ../spack/lib/spack/docs/command_index.rst:4391
#: ../spack/lib/spack/docs/command_index.rst:4411
#: ../spack/lib/spack/docs/command_index.rst:4438
#: ../spack/lib/spack/docs/command_index.rst:4468
#: ../spack/lib/spack/docs/command_index.rst:4493
#: ../spack/lib/spack/docs/command_index.rst:4528
#: ../spack/lib/spack/docs/command_index.rst:4549
#: ../spack/lib/spack/docs/command_index.rst:4585
#: ../spack/lib/spack/docs/command_index.rst:4603
#: ../spack/lib/spack/docs/command_index.rst:4629
#: ../spack/lib/spack/docs/command_index.rst:4660
#: ../spack/lib/spack/docs/command_index.rst:4685
#: ../spack/lib/spack/docs/command_index.rst:4732
#: ../spack/lib/spack/docs/command_index.rst:4765
#: ../spack/lib/spack/docs/command_index.rst:4798
#: ../spack/lib/spack/docs/command_index.rst:4831
msgid "show this help message and exit"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:106
msgid "``-H, --all-help``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:106
msgid "show help for all commands (same as spack help --all)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:109
msgid "``--color {always,never,auto}``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:109
msgid "when to colorize output (default: auto)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:112
msgid "``-C DIR, --config-scope DIR``"
msgstr ""

# 9c98fd10a2b2403aba63f6a89cdd55d5
#: ../spack/lib/spack/docs/command_index.rst:112
msgid "add a custom configuration scope"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:115
msgid "``-d, --debug``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:115
msgid "write out debug logs during compile"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:118
msgid "``--timestamp``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:118
msgid "Add a timestamp to tty output"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:121
msgid "``--pdb``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:121
msgid "run spack under the pdb debugger"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:124
#: ../spack/lib/spack/docs/command_index.rst:854
#: ../spack/lib/spack/docs/command_index.rst:2794
msgid "``-e ENV, --env ENV``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:124
msgid "run with a specific environment (see spack env)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:127
msgid "``-D DIR, --env-dir DIR``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:127
msgid "run with an environment directory (ignore named environments)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:130
msgid "``-E, --no-env``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:130
msgid "run without any environments activated (see spack env)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:133
msgid "``--use-env-repo``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:133
msgid "when running in an environment, use its package repository"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:136
msgid "``-k, --insecure``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:136
msgid "do not check ssl certificates when downloading"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:139
msgid "``-l, --enable-locks``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:139
msgid "use filesystem locking (default)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:142
msgid "``-L, --disable-locks``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:142
msgid "do not use filesystem locking (unsafe)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:145
msgid "``-m, --mock``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:145
msgid "use mock packages instead of real ones"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:148
#: ../spack/lib/spack/docs/command_index.rst:2828
msgid "``-p, --profile``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:148
msgid "profile execution using cProfile"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:151
msgid "``--sorted-profile STAT``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:151
msgid ""
"profile and sort by one or more of: [cumulative, module, ncalls, pcalls, "
"file, line, name,  calls, stdname, nfl, filename, cumtime, time, tottime]"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:154
msgid "``--lines LINES``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:154
msgid "lines of profile output or 'all' (default: 20)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:157
#: ../spack/lib/spack/docs/command_index.rst:398
#: ../spack/lib/spack/docs/command_index.rst:434
#: ../spack/lib/spack/docs/command_index.rst:1324
#: ../spack/lib/spack/docs/command_index.rst:2554
#: ../spack/lib/spack/docs/command_index.rst:4170
#: ../spack/lib/spack/docs/command_index.rst:4688
msgid "``-v, --verbose``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:157
#: ../spack/lib/spack/docs/command_index.rst:433
#: ../spack/lib/spack/docs/command_index.rst:1323
msgid "print additional output during builds"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:160
msgid "``--stacktrace``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:160
msgid "add stacktraces to all printed statements"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:163
msgid "``-V, --version``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:163
msgid "show version number and exit"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:167
msgid "``--print-shell-vars PRINT_SHELL_VARS``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:166
msgid "print info needed by setup-env.[c]sh"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:169
#: ../spack/lib/spack/docs/command_index.rst:496
#: ../spack/lib/spack/docs/command_index.rst:1017
#: ../spack/lib/spack/docs/command_index.rst:1208
#: ../spack/lib/spack/docs/command_index.rst:1429
#: ../spack/lib/spack/docs/command_index.rst:1666
#: ../spack/lib/spack/docs/command_index.rst:2142
#: ../spack/lib/spack/docs/command_index.rst:2622
#: ../spack/lib/spack/docs/command_index.rst:2862
#: ../spack/lib/spack/docs/command_index.rst:3015
#: ../spack/lib/spack/docs/command_index.rst:3043
#: ../spack/lib/spack/docs/command_index.rst:3198
#: ../spack/lib/spack/docs/command_index.rst:3378
#: ../spack/lib/spack/docs/command_index.rst:3566
#: ../spack/lib/spack/docs/command_index.rst:3921
#: ../spack/lib/spack/docs/command_index.rst:4056
#: ../spack/lib/spack/docs/command_index.rst:4414
#: ../spack/lib/spack/docs/command_index.rst:4496
#: ../spack/lib/spack/docs/command_index.rst:4697
msgid "**Subcommands**"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:174
msgid ":ref:`activate <spack-activate>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:175
msgid ":ref:`add <spack-add>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:176
msgid ":ref:`arch <spack-arch>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:177
msgid ":ref:`blame <spack-blame>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:178
msgid ":ref:`bootstrap <spack-bootstrap>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:179
msgid ":ref:`build <spack-build>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:180
msgid ":ref:`build-env <spack-build-env>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:181
msgid ":ref:`buildcache <spack-buildcache>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:182
msgid ":ref:`cd <spack-cd>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:183
msgid ":ref:`checksum <spack-checksum>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:184
msgid ":ref:`clean <spack-clean>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:185
msgid ":ref:`clone <spack-clone>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:186
msgid ":ref:`commands <spack-commands>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:187
msgid ":ref:`compiler <spack-compiler>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:188
msgid ":ref:`compilers <spack-compilers>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:189
msgid ":ref:`concretize <spack-concretize>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:190
msgid ":ref:`config <spack-config>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:191
msgid ":ref:`configure <spack-configure>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:192
msgid ":ref:`create <spack-create>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:193
msgid ":ref:`deactivate <spack-deactivate>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:194
msgid ":ref:`debug <spack-debug>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:195
msgid ":ref:`dependencies <spack-dependencies>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:196
msgid ":ref:`dependents <spack-dependents>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:197
msgid ":ref:`diy <spack-diy>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:198
msgid ":ref:`docs <spack-docs>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:199
msgid ":ref:`edit <spack-edit>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:200
msgid ":ref:`env <spack-env>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:201
msgid ":ref:`extensions <spack-extensions>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:202
msgid ":ref:`fetch <spack-fetch>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:203
msgid ":ref:`find <spack-find>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:204
msgid ":ref:`flake8 <spack-flake8>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:205
msgid ":ref:`gpg <spack-gpg>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:206
msgid ":ref:`graph <spack-graph>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:207
msgid ":ref:`help <spack-help>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:208
msgid ":ref:`info <spack-info>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:209
msgid ":ref:`install <spack-install>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:210
msgid ":ref:`license <spack-license>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:211
msgid ":ref:`list <spack-list>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:212
msgid ":ref:`load <spack-load>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:213
msgid ":ref:`location <spack-location>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:214
msgid ":ref:`log-parse <spack-log-parse>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:215
msgid ":ref:`mirror <spack-mirror>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:216
msgid ":ref:`module <spack-module>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:217
msgid ":ref:`patch <spack-patch>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:218
msgid ":ref:`pkg <spack-pkg>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:219
msgid ":ref:`providers <spack-providers>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:220
msgid ":ref:`pydoc <spack-pydoc>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:221
msgid ":ref:`python <spack-python>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:222
msgid ":ref:`reindex <spack-reindex>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:223
msgid ":ref:`release-jobs <spack-release-jobs>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:224
msgid ":ref:`remove <spack-remove>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:225
msgid ":ref:`repo <spack-repo>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:227
msgid ":ref:`restage <spack-restage>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:228
msgid ":ref:`setup <spack-setup>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:229
msgid ":ref:`spec <spack-spec>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:230
msgid ":ref:`stage <spack-stage>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:231
msgid ":ref:`test <spack-test>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:232
msgid ":ref:`uninstall <spack-uninstall>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:233
msgid ":ref:`unload <spack-unload>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:234
msgid ":ref:`unuse <spack-unuse>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:235
msgid ":ref:`upload-s3 <spack-upload-s3>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:236
msgid ":ref:`url <spack-url>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:237
msgid ":ref:`use <spack-use>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:238
msgid ":ref:`versions <spack-versions>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:239
msgid ":ref:`view <spack-view>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:247
msgid "spack activate"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:249
msgid "activate a package extension"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:256
msgid ":ref:`More documentation <cmd-spack-activate>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:258
#: ../spack/lib/spack/docs/command_index.rst:290
#: ../spack/lib/spack/docs/command_index.rst:345
#: ../spack/lib/spack/docs/command_index.rst:421
#: ../spack/lib/spack/docs/command_index.rst:450
#: ../spack/lib/spack/docs/command_index.rst:524
#: ../spack/lib/spack/docs/command_index.rst:572
#: ../spack/lib/spack/docs/command_index.rst:608
#: ../spack/lib/spack/docs/command_index.rst:671
#: ../spack/lib/spack/docs/command_index.rst:817
#: ../spack/lib/spack/docs/command_index.rst:872
#: ../spack/lib/spack/docs/command_index.rst:906
#: ../spack/lib/spack/docs/command_index.rst:947
#: ../spack/lib/spack/docs/command_index.rst:976
#: ../spack/lib/spack/docs/command_index.rst:1042
#: ../spack/lib/spack/docs/command_index.rst:1069
#: ../spack/lib/spack/docs/command_index.rst:1122
#: ../spack/lib/spack/docs/command_index.rst:1232
#: ../spack/lib/spack/docs/command_index.rst:1258
#: ../spack/lib/spack/docs/command_index.rst:1282
#: ../spack/lib/spack/docs/command_index.rst:1311
#: ../spack/lib/spack/docs/command_index.rst:1342
#: ../spack/lib/spack/docs/command_index.rst:1388
#: ../spack/lib/spack/docs/command_index.rst:1469
#: ../spack/lib/spack/docs/command_index.rst:1504
#: ../spack/lib/spack/docs/command_index.rst:1536
#: ../spack/lib/spack/docs/command_index.rst:1611
#: ../spack/lib/spack/docs/command_index.rst:1693
#: ../spack/lib/spack/docs/command_index.rst:1759
#: ../spack/lib/spack/docs/command_index.rst:1795
#: ../spack/lib/spack/docs/command_index.rst:1858
#: ../spack/lib/spack/docs/command_index.rst:1897
#: ../spack/lib/spack/docs/command_index.rst:1928
#: ../spack/lib/spack/docs/command_index.rst:1971
#: ../spack/lib/spack/docs/command_index.rst:2010
#: ../spack/lib/spack/docs/command_index.rst:2090
#: ../spack/lib/spack/docs/command_index.rst:2169
#: ../spack/lib/spack/docs/command_index.rst:2196
#: ../spack/lib/spack/docs/command_index.rst:2220
#: ../spack/lib/spack/docs/command_index.rst:2247
#: ../spack/lib/spack/docs/command_index.rst:2280
#: ../spack/lib/spack/docs/command_index.rst:2361
#: ../spack/lib/spack/docs/command_index.rst:2392
#: ../spack/lib/spack/docs/command_index.rst:2438
#: ../spack/lib/spack/docs/command_index.rst:2472
#: ../spack/lib/spack/docs/command_index.rst:2506
#: ../spack/lib/spack/docs/command_index.rst:2686
#: ../spack/lib/spack/docs/command_index.rst:2726
#: ../spack/lib/spack/docs/command_index.rst:2757
#: ../spack/lib/spack/docs/command_index.rst:2810
#: ../spack/lib/spack/docs/command_index.rst:2887
#: ../spack/lib/spack/docs/command_index.rst:2925
#: ../spack/lib/spack/docs/command_index.rst:2957
#: ../spack/lib/spack/docs/command_index.rst:3066
#: ../spack/lib/spack/docs/command_index.rst:3099
#: ../spack/lib/spack/docs/command_index.rst:3129
#: ../spack/lib/spack/docs/command_index.rst:3156
#: ../spack/lib/spack/docs/command_index.rst:3222
#: ../spack/lib/spack/docs/command_index.rst:3255
#: ../spack/lib/spack/docs/command_index.rst:3285
#: ../spack/lib/spack/docs/command_index.rst:3312
#: ../spack/lib/spack/docs/command_index.rst:3348
#: ../spack/lib/spack/docs/command_index.rst:3401
#: ../spack/lib/spack/docs/command_index.rst:3434
#: ../spack/lib/spack/docs/command_index.rst:3464
#: ../spack/lib/spack/docs/command_index.rst:3491
#: ../spack/lib/spack/docs/command_index.rst:3531
#: ../spack/lib/spack/docs/command_index.rst:3590
#: ../spack/lib/spack/docs/command_index.rst:3614
#: ../spack/lib/spack/docs/command_index.rst:3638
#: ../spack/lib/spack/docs/command_index.rst:3665
#: ../spack/lib/spack/docs/command_index.rst:3692
#: ../spack/lib/spack/docs/command_index.rst:3723
#: ../spack/lib/spack/docs/command_index.rst:3749
#: ../spack/lib/spack/docs/command_index.rst:3777
#: ../spack/lib/spack/docs/command_index.rst:3828
#: ../spack/lib/spack/docs/command_index.rst:3881
#: ../spack/lib/spack/docs/command_index.rst:3944
#: ../spack/lib/spack/docs/command_index.rst:3992
#: ../spack/lib/spack/docs/command_index.rst:4019
#: ../spack/lib/spack/docs/command_index.rst:4098
#: ../spack/lib/spack/docs/command_index.rst:4126
#: ../spack/lib/spack/docs/command_index.rst:4152
#: ../spack/lib/spack/docs/command_index.rst:4195
#: ../spack/lib/spack/docs/command_index.rst:4244
#: ../spack/lib/spack/docs/command_index.rst:4278
#: ../spack/lib/spack/docs/command_index.rst:4318
#: ../spack/lib/spack/docs/command_index.rst:4356
#: ../spack/lib/spack/docs/command_index.rst:4382
#: ../spack/lib/spack/docs/command_index.rst:4519
#: ../spack/lib/spack/docs/command_index.rst:4620
#: ../spack/lib/spack/docs/command_index.rst:4651
#: ../spack/lib/spack/docs/command_index.rst:4720
#: ../spack/lib/spack/docs/command_index.rst:4753
#: ../spack/lib/spack/docs/command_index.rst:4786
#: ../spack/lib/spack/docs/command_index.rst:4819
msgid "**Positional arguments**"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:262
#: ../spack/lib/spack/docs/command_index.rst:821
#: ../spack/lib/spack/docs/command_index.rst:1392
#: ../spack/lib/spack/docs/command_index.rst:1473
#: ../spack/lib/spack/docs/command_index.rst:1508
#: ../spack/lib/spack/docs/command_index.rst:1540
#: ../spack/lib/spack/docs/command_index.rst:1932
#: ../spack/lib/spack/docs/command_index.rst:2730
#: ../spack/lib/spack/docs/command_index.rst:2761
#: ../spack/lib/spack/docs/command_index.rst:4156
#: ../spack/lib/spack/docs/command_index.rst:4360
#: ../spack/lib/spack/docs/command_index.rst:4386
#: ../spack/lib/spack/docs/command_index.rst:4624
#: ../spack/lib/spack/docs/command_index.rst:4727
#: ../spack/lib/spack/docs/command_index.rst:4760
#: ../spack/lib/spack/docs/command_index.rst:4793
#: ../spack/lib/spack/docs/command_index.rst:4826
msgid "spec"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:261
msgid "spec of package extension to activate"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:270
#: ../spack/lib/spack/docs/command_index.rst:539
#: ../spack/lib/spack/docs/command_index.rst:584
#: ../spack/lib/spack/docs/command_index.rst:630
#: ../spack/lib/spack/docs/command_index.rst:657
#: ../spack/lib/spack/docs/command_index.rst:1183
#: ../spack/lib/spack/docs/command_index.rst:1370
#: ../spack/lib/spack/docs/command_index.rst:1400
#: ../spack/lib/spack/docs/command_index.rst:3897
#: ../spack/lib/spack/docs/command_index.rst:4330
msgid "``-f, --force``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:270
msgid "activate without first activating dependencies"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:274
#: ../spack/lib/spack/docs/command_index.rst:1403
#: ../spack/lib/spack/docs/command_index.rst:1953
msgid "``-v VIEW, --view VIEW``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:273
#: ../spack/lib/spack/docs/command_index.rst:1403
#: ../spack/lib/spack/docs/command_index.rst:1952
msgid "the view to operate on"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:281
msgid "spack add"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:283
msgid "add a spec to an environment"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:294
#: ../spack/lib/spack/docs/command_index.rst:910
#: ../spack/lib/spack/docs/command_index.rst:2396
#: ../spack/lib/spack/docs/command_index.rst:2891
#: ../spack/lib/spack/docs/command_index.rst:3832
#: ../spack/lib/spack/docs/command_index.rst:3885
#: ../spack/lib/spack/docs/command_index.rst:4199
#: ../spack/lib/spack/docs/command_index.rst:4248
msgid "specs"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:293
msgid "specs of packages to add"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:307
msgid "spack arch"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:309
msgid "print architecture information about this machine"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:322
msgid "``-p, --platform``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:322
msgid "print only the platform"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:325
msgid "``-o, --operating-system``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:325
msgid "print only the operating system"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:329
msgid "``-t, --target``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:328
msgid "print only the target"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:336
msgid "spack blame"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:338
msgid "show contributors to packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:349
msgid "package_name"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:348
msgid ""
"name of package to show contributions for, or path to a file in the spack "
"repo"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:357
msgid "``-t, --time``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:357
msgid "sort by last modification date (default)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:360
msgid "``-p, --percent``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:360
msgid "sort by percent of code"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:364
msgid "``-g, --git``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:363
msgid "show git blame output instead of summary"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:371
msgid "spack bootstrap"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:373
msgid "Bootstrap packages needed for spack to run smoothly"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:386
#: ../spack/lib/spack/docs/command_index.rst:1548
#: ../spack/lib/spack/docs/command_index.rst:2521
#: ../spack/lib/spack/docs/command_index.rst:2835
msgid "``-j JOBS, --jobs JOBS``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:386
#: ../spack/lib/spack/docs/command_index.rst:1548
#: ../spack/lib/spack/docs/command_index.rst:2521
msgid "explicitly set number of parallel jobs"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:389
#: ../spack/lib/spack/docs/command_index.rst:1560
#: ../spack/lib/spack/docs/command_index.rst:2530
msgid "``--keep-prefix``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:389
#: ../spack/lib/spack/docs/command_index.rst:2530
msgid "don't remove the install prefix if installation fails"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:392
#: ../spack/lib/spack/docs/command_index.rst:888
#: ../spack/lib/spack/docs/command_index.rst:1354
#: ../spack/lib/spack/docs/command_index.rst:2533
msgid "``--keep-stage``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:392
#: ../spack/lib/spack/docs/command_index.rst:2533
msgid "don't remove the build stage if installation succeeds"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:395
#: ../spack/lib/spack/docs/command_index.rst:1557
#: ../spack/lib/spack/docs/command_index.rst:1983
#: ../spack/lib/spack/docs/command_index.rst:2551
#: ../spack/lib/spack/docs/command_index.rst:2860
#: ../spack/lib/spack/docs/command_index.rst:3544
#: ../spack/lib/spack/docs/command_index.rst:4167
#: ../spack/lib/spack/docs/command_index.rst:4256
msgid "``-n, --no-checksum``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:395
#: ../spack/lib/spack/docs/command_index.rst:1557
#: ../spack/lib/spack/docs/command_index.rst:1983
#: ../spack/lib/spack/docs/command_index.rst:2551
#: ../spack/lib/spack/docs/command_index.rst:2859
#: ../spack/lib/spack/docs/command_index.rst:3543
#: ../spack/lib/spack/docs/command_index.rst:4167
#: ../spack/lib/spack/docs/command_index.rst:4256
msgid "do not use checksums to verify downloaded files (unsafe)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:398
#: ../spack/lib/spack/docs/command_index.rst:2554
#: ../spack/lib/spack/docs/command_index.rst:4170
msgid "display verbose build output while installing"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:401
#: ../spack/lib/spack/docs/command_index.rst:462
#: ../spack/lib/spack/docs/command_index.rst:1569
#: ../spack/lib/spack/docs/command_index.rst:2566
#: ../spack/lib/spack/docs/command_index.rst:4173
msgid "``--clean``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:401
#: ../spack/lib/spack/docs/command_index.rst:462
#: ../spack/lib/spack/docs/command_index.rst:1569
#: ../spack/lib/spack/docs/command_index.rst:2566
#: ../spack/lib/spack/docs/command_index.rst:4173
msgid "unset harmful variables in the build environment (default)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:405
#: ../spack/lib/spack/docs/command_index.rst:465
#: ../spack/lib/spack/docs/command_index.rst:1573
#: ../spack/lib/spack/docs/command_index.rst:2569
#: ../spack/lib/spack/docs/command_index.rst:4177
msgid "``--dirty``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:404
#: ../spack/lib/spack/docs/command_index.rst:465
#: ../spack/lib/spack/docs/command_index.rst:1572
#: ../spack/lib/spack/docs/command_index.rst:2569
#: ../spack/lib/spack/docs/command_index.rst:4176
msgid "preserve user environment in the spack build environment (danger!)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:412
msgid "spack build"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:414
msgid "stops at build stage when installing a package, if possible"
msgstr ""

# e5651210b9ac460bac4fb383a1f07c4c
#: ../spack/lib/spack/docs/command_index.rst:425
#: ../spack/lib/spack/docs/command_index.rst:875
#: ../spack/lib/spack/docs/command_index.rst:1315
#: ../spack/lib/spack/docs/command_index.rst:2172
#: ../spack/lib/spack/docs/command_index.rst:2251
#: ../spack/lib/spack/docs/command_index.rst:2510
msgid "package"
msgstr "パッケージ"

#: ../spack/lib/spack/docs/command_index.rst:424
#: ../spack/lib/spack/docs/command_index.rst:1314
#: ../spack/lib/spack/docs/command_index.rst:2509
msgid "spec of the package to install"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:441
msgid "spack build-env"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:443
msgid ""
"run a command in a spec's install environment, or dump its environment to "
"screen or file"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:454
msgid "spec [--] [cmd]..."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:453
msgid "specs of package environment to emulate"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:468
msgid "``--dump FILE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:468
msgid "dump a source-able environment to FILE"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:472
msgid "``--pickle FILE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:471
msgid "dump a pickled source-able environment to FILE"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:479
msgid "spack buildcache"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:481
msgid "create, download and install binary packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:488
msgid ":ref:`More documentation <cmd-spack-buildcache>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:501
msgid ":ref:`buildcache create <spack-buildcache-create>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:502
msgid ":ref:`buildcache install <spack-buildcache-install>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:503
msgid ":ref:`buildcache list <spack-buildcache-list>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:504
msgid ":ref:`buildcache keys <spack-buildcache-keys>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:505
msgid ":ref:`buildcache preview <spack-buildcache-preview>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:506
msgid ":ref:`buildcache check <spack-buildcache-check>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:507
msgid ":ref:`buildcache download <spack-buildcache-download>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:508
msgid ""
":ref:`buildcache get-buildcache-name <spack-buildcache-get-buildcache-name>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:509
msgid ":ref:`buildcache save-yaml <spack-buildcache-save-yaml>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:517
msgid "spack buildcache create"
msgstr ""

# e5651210b9ac460bac4fb383a1f07c4c
#: ../spack/lib/spack/docs/command_index.rst:528
#: ../spack/lib/spack/docs/command_index.rst:576
#: ../spack/lib/spack/docs/command_index.rst:612
#: ../spack/lib/spack/docs/command_index.rst:675
#: ../spack/lib/spack/docs/command_index.rst:1975
#: ../spack/lib/spack/docs/command_index.rst:3535
#: ../spack/lib/spack/docs/command_index.rst:3594
#: ../spack/lib/spack/docs/command_index.rst:4130
#: ../spack/lib/spack/docs/command_index.rst:4322
msgid "packages"
msgstr "パッケージ"

#: ../spack/lib/spack/docs/command_index.rst:527
msgid "specs of packages to create buildcache for"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:536
msgid "``-r, --rel``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:536
msgid "make all rpaths relative before creating tarballs."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:539
msgid "overwrite tarball if it exists."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:542
#: ../spack/lib/spack/docs/command_index.rst:594
msgid "``-u, --unsigned``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:542
msgid "create unsigned buildcache tarballs for testing"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:545
#: ../spack/lib/spack/docs/command_index.rst:590
msgid "``-a, --allow-root``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:545
#: ../spack/lib/spack/docs/command_index.rst:590
msgid "allow install root string in binary files after RPATH substitution"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:548
msgid "``-k key, --key key``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:548
msgid "Key for signing."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:551
msgid "``-d directory, --directory directory``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:551
msgid "directory in which to save the tarballs."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:554
msgid "``--no-rebuild-index``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:554
msgid "skip rebuilding index after building package(s)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:558
#: ../spack/lib/spack/docs/command_index.rst:714
#: ../spack/lib/spack/docs/command_index.rst:741
#: ../spack/lib/spack/docs/command_index.rst:772
#: ../spack/lib/spack/docs/command_index.rst:4444
msgid "``-y SPEC_YAML, --spec-yaml SPEC_YAML``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:557
msgid "Create buildcache entry for spec from yaml file"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:565
msgid "spack buildcache install"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:575
msgid "specs of packages to install buildcache for"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:584
msgid "overwrite install directory if it exists."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:587
msgid "``-m, --multiple``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:587
msgid "allow all matching packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:593
msgid "install unsigned buildcache tarballs for testing"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:601
msgid "spack buildcache list"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:611
msgid "specs of packages to search for"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:620
#: ../spack/lib/spack/docs/command_index.rst:1940
#: ../spack/lib/spack/docs/command_index.rst:2031
#: ../spack/lib/spack/docs/command_index.rst:4207
msgid "``-l, --long``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:620
#: ../spack/lib/spack/docs/command_index.rst:1940
#: ../spack/lib/spack/docs/command_index.rst:2031
#: ../spack/lib/spack/docs/command_index.rst:4207
msgid "show dependency hashes as well as versions"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:623
#: ../spack/lib/spack/docs/command_index.rst:2034
#: ../spack/lib/spack/docs/command_index.rst:4210
msgid "``-L, --very-long``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:623
#: ../spack/lib/spack/docs/command_index.rst:2034
#: ../spack/lib/spack/docs/command_index.rst:4210
msgid "show full dependency hashes as well as versions"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:626
#: ../spack/lib/spack/docs/command_index.rst:2061
msgid "``-v, --variants``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:626
#: ../spack/lib/spack/docs/command_index.rst:2061
msgid "show variants in output (can be long)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:629
msgid "force new download of specs"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:637
msgid "spack buildcache keys"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:650
msgid "``-i, --install``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:650
msgid "install Keys pulled from mirror"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:653
msgid "``-t, --trust``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:653
msgid "trust all downloaded keys"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:656
msgid "force new download of keys"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:664
msgid "spack buildcache preview"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:674
msgid "list of installed packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:688
msgid "spack buildcache check"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:702
#: ../spack/lib/spack/docs/command_index.rst:3843
msgid "``-m MIRROR_URL, --mirror-url MIRROR_URL``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:702
msgid "Override any configured mirrors with this mirror url"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:705
#: ../spack/lib/spack/docs/command_index.rst:3846
msgid "``-o OUTPUT_FILE, --output-file OUTPUT_FILE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:705
msgid "File where rebuild info should be written"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:708
#: ../spack/lib/spack/docs/command_index.rst:1055
#: ../spack/lib/spack/docs/command_index.rst:1085
#: ../spack/lib/spack/docs/command_index.rst:1106
#: ../spack/lib/spack/docs/command_index.rst:1135
#: ../spack/lib/spack/docs/command_index.rst:1160
#: ../spack/lib/spack/docs/command_index.rst:1206
#: ../spack/lib/spack/docs/command_index.rst:2941
#: ../spack/lib/spack/docs/command_index.rst:2970
#: ../spack/lib/spack/docs/command_index.rst:2993
#: ../spack/lib/spack/docs/command_index.rst:3978
#: ../spack/lib/spack/docs/command_index.rst:4005
#: ../spack/lib/spack/docs/command_index.rst:4032
msgid "``--scope {defaults,system,site,user}[/PLATFORM]``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:708
msgid "configuration scope containing mirrors to check"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:711
#: ../spack/lib/spack/docs/command_index.rst:738
#: ../spack/lib/spack/docs/command_index.rst:768
#: ../spack/lib/spack/docs/command_index.rst:4441
msgid "``-s SPEC, --spec SPEC``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:711
msgid "Check single spec instead of release specs file"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:714
msgid "Check single spec from yaml file instead of release specs file"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:718
msgid "``--rebuild-on-error``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:717
msgid ""
"Default to rebuilding packages if errors are encountered during the process "
"of checking whether rebuilding is needed"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:725
msgid "spack buildcache download"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:738
msgid "Download built tarball for spec from mirror"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:741
msgid "Download built tarball for spec (from yaml file) from mirror"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:744
#: ../spack/lib/spack/docs/command_index.rst:4260
msgid "``-p PATH, --path PATH``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:744
msgid "Path to directory where tarball should be downloaded"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:748
msgid "``-c, --require-cdashid``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:747
msgid "Require .cdashid file to be downloaded with buildcache entry"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:755
msgid "spack buildcache get-buildcache-name"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:768
msgid "Spec string for which buildcache name is desired"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:771
msgid "Path to spec yaml file for which buildcache name is desired"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:779
msgid "spack buildcache save-yaml"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:792
msgid "``-r ROOT_SPEC, --root-spec ROOT_SPEC``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:792
msgid "Root spec of dependent spec"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:795
msgid "``-s SPECS, --specs SPECS``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:795
msgid "List of dependent specs for which saved yaml is desired"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:799
msgid "``-y YAML_DIR, --yaml-dir YAML_DIR``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:798
msgid "Path to directory where spec yamls should be saved"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:806
msgid "spack cd"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:808
msgid "cd to spack directories in the shell"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:815
msgid ":ref:`More documentation <cmd-spack-cd>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:820
#: ../spack/lib/spack/docs/command_index.rst:2760
msgid "spec of package to fetch directory for"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:829
#: ../spack/lib/spack/docs/command_index.rst:2769
msgid "``-m, --module-dir``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:829
#: ../spack/lib/spack/docs/command_index.rst:2769
msgid "spack python module directory"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:832
#: ../spack/lib/spack/docs/command_index.rst:2772
msgid "``-r, --spack-root``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:832
#: ../spack/lib/spack/docs/command_index.rst:2772
msgid "spack installation root"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:835
#: ../spack/lib/spack/docs/command_index.rst:2775
msgid "``-i, --install-dir``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:835
#: ../spack/lib/spack/docs/command_index.rst:2775
msgid "install prefix for spec (spec need not be installed)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:838
#: ../spack/lib/spack/docs/command_index.rst:2778
msgid "``-p, --package-dir``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:838
#: ../spack/lib/spack/docs/command_index.rst:2778
msgid "directory enclosing a spec's package.py file"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:841
#: ../spack/lib/spack/docs/command_index.rst:2781
msgid "``-P, --packages``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:841
#: ../spack/lib/spack/docs/command_index.rst:2781
msgid "top-level packages directory for Spack"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:844
#: ../spack/lib/spack/docs/command_index.rst:2784
msgid "``-s, --stage-dir``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:844
#: ../spack/lib/spack/docs/command_index.rst:2784
msgid "stage directory for a spec"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:847
#: ../spack/lib/spack/docs/command_index.rst:2787
msgid "``-S, --stages``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:847
#: ../spack/lib/spack/docs/command_index.rst:2787
msgid "top level stage directory"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:850
#: ../spack/lib/spack/docs/command_index.rst:2790
msgid "``-b, --build-dir``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:850
#: ../spack/lib/spack/docs/command_index.rst:2790
msgid ""
"checked out or expanded source directory for a spec (requires it to be "
"staged first)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:853
#: ../spack/lib/spack/docs/command_index.rst:2793
msgid "location of an environment managed by spack"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:861
msgid "spack checksum"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:863
msgid "checksum available versions of a package"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:870
msgid ":ref:`More documentation <cmd-spack-checksum>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:875
msgid "package to checksum versions for"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:879
msgid "versions"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:878
msgid "versions to generate checksums for"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:887
#: ../spack/lib/spack/docs/command_index.rst:1354
msgid "don't clean up staging area when command completes"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:895
msgid "spack clean"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:897
msgid "remove temporary build files and/or downloaded archives"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:904
msgid ":ref:`More documentation <cmd-spack-clean>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:909
msgid "removes the build stages and tarballs for specs"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:918
msgid "``-s, --stage``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:918
msgid "remove all temporary build stages (default)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:921
msgid "``-d, --downloads``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:921
msgid "remove cached downloads"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:924
msgid "``-m, --misc-cache``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:924
msgid "remove long-lived caches, like the virtual package index"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:927
msgid "``-p, --python-cache``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:927
msgid "remove .pyc, .pyo files and __pycache__ folders"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:931
#: ../spack/lib/spack/docs/command_index.rst:1081
#: ../spack/lib/spack/docs/command_index.rst:1407
#: ../spack/lib/spack/docs/command_index.rst:2108
#: ../spack/lib/spack/docs/command_index.rst:2450
#: ../spack/lib/spack/docs/command_index.rst:3893
#: ../spack/lib/spack/docs/command_index.rst:4340
#: ../spack/lib/spack/docs/command_index.rst:4805
msgid "``-a, --all``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:930
msgid "equivalent to -sdmp"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:938
msgid "spack clone"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:940
msgid "create a new installation of spack in another prefix"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:951
msgid "prefix"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:950
msgid "name of prefix where we should install spack"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:960
msgid "``-r REMOTE, --remote REMOTE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:959
msgid "name of the remote to clone from"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:967
msgid "spack commands"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:969
msgid "list available spack commands"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:980
msgid "rst_files"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:979
msgid "list of rst files to search for `_cmd-spack-<cmd>` cross-refs"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:988
msgid "``--format {rst,subcommands,names}``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:988
msgid "format to be used to print the output (default: names)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:991
msgid "``--header FILE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:991
msgid "prepend contents of FILE to the output (useful for rst format)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:995
#: ../spack/lib/spack/docs/command_index.rst:2704
msgid "``--update FILE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:994
msgid "write output to the specified file, if any command is newer"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1002
msgid "spack compiler"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1004
msgid "manage compilers"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1022
msgid ":ref:`compiler find <spack-compiler-find>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1023
msgid ":ref:`compiler remove <spack-compiler-remove>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1024
msgid ":ref:`compiler list <spack-compiler-list>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1025
msgid ":ref:`compiler info <spack-compiler-info>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1033
msgid "spack compiler find"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1040
msgid ":ref:`More documentation <cmd-spack-compiler-find>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1044
msgid "add_paths"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1054
#: ../spack/lib/spack/docs/command_index.rst:1084
#: ../spack/lib/spack/docs/command_index.rst:2940
#: ../spack/lib/spack/docs/command_index.rst:2969
#: ../spack/lib/spack/docs/command_index.rst:4004
#: ../spack/lib/spack/docs/command_index.rst:4031
msgid "configuration scope to modify"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1062
msgid "spack compiler remove"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1071
#: ../spack/lib/spack/docs/command_index.rst:1124
msgid "compiler_spec"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1081
msgid "remove ALL compilers that match spec"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1092
msgid "spack compiler list"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1105
#: ../spack/lib/spack/docs/command_index.rst:1134
#: ../spack/lib/spack/docs/command_index.rst:2992
#: ../spack/lib/spack/docs/command_index.rst:3977
msgid "configuration scope to read from"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1113
msgid "spack compiler info"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1120
msgid ":ref:`More documentation <cmd-spack-compiler-info>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1142
msgid "spack compilers"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1144
msgid "list available compilers"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1151
msgid ":ref:`More documentation <cmd-spack-compilers>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1159
#: ../spack/lib/spack/docs/command_index.rst:1205
msgid "configuration scope to read/modify"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1167
msgid "spack concretize"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1169
msgid "concretize an environment and write a lockfile"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1182
msgid "Re-concretize even if already concretized."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1190
msgid "spack config"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1192
msgid "get and set configuration options"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1213
msgid ":ref:`config get <spack-config-get>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1214
msgid ":ref:`config blame <spack-config-blame>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1215
msgid ":ref:`config edit <spack-config-edit>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1223
msgid "spack config get"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1230
msgid ":ref:`More documentation <cmd-spack-config-get>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1236
#: ../spack/lib/spack/docs/command_index.rst:1262
#: ../spack/lib/spack/docs/command_index.rst:1286
msgid "SECTION"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1235
#: ../spack/lib/spack/docs/command_index.rst:1261
msgid "configuration section to print. options: %(choices)s"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1249
msgid "spack config blame"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1256
msgid ":ref:`More documentation <cmd-spack-config-blame>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1275
msgid "spack config edit"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1285
msgid "configuration section to edit. options: %(choices)s"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1295
msgid "``--print-file``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1294
msgid "print the file name that would be edited"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1302
msgid "spack configure"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1304
msgid "stage and configure a package but do not install"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1331
msgid "spack create"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1333
msgid "create a new package file"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1340
msgid ":ref:`More documentation <cmd-spack-create>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1346
#: ../spack/lib/spack/docs/command_index.rst:2932
#: ../spack/lib/spack/docs/command_index.rst:4523
msgid "url"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1345
msgid "url of package archive"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1357
msgid "``-n NAME, --name NAME``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1357
msgid "name of the package to create"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1360
msgid "``-t TEMPLATE, --template TEMPLATE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1360
msgid "build system template to use. options: %(choices)s"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1363
#: ../spack/lib/spack/docs/command_index.rst:1638
msgid "``-r REPO, --repo REPO``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1363
msgid "path to a repository where the package should be created"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1366
#: ../spack/lib/spack/docs/command_index.rst:1642
msgid "``-N NAMESPACE, --namespace NAMESPACE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1366
msgid ""
"specify a namespace for the package. must be the namespace of a repository "
"registered with Spack"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1369
msgid "overwrite any existing package file with the same name"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1377
msgid "spack deactivate"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1379
msgid "deactivate a package extension"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1386
msgid ":ref:`More documentation <cmd-spack-deactivate>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1391
msgid "spec of package extension to deactivate"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1400
msgid "run deactivation even if spec is NOT currently activated"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1406
msgid ""
"deactivate all extensions of an extendable package, or deactivate an "
"extension AND its dependencies"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1414
msgid "spack debug"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1416
msgid "debugging commands for troubleshooting Spack"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1434
msgid ":ref:`debug create-db-tarball <spack-debug-create-db-tarball>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1442
msgid "spack debug create-db-tarball"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1460
msgid "spack dependencies"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1462
msgid "show dependencies of a package"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1472
#: ../spack/lib/spack/docs/command_index.rst:1507
msgid "spec or package name"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1481
#: ../spack/lib/spack/docs/command_index.rst:1516
#: ../spack/lib/spack/docs/command_index.rst:2416
msgid "``-i, --installed``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1481
msgid ""
"List installed dependencies of an installed spec, instead of possible "
"dependencies of a package."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1484
#: ../spack/lib/spack/docs/command_index.rst:1520
msgid "``-t, --transitive``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1484
msgid "show all transitive dependencies"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1488
msgid "``-V, --no-expand-virtuals``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1487
msgid "do not expand virtual dependencies"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1495
msgid "spack dependents"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1497
msgid "show packages that depend on another"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1516
msgid ""
"List installed dependents of an installed spec, instead of possible "
"dependents of a package."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1519
msgid "Show all transitive dependents."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1527
msgid "spack diy"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1529
msgid "do-it-yourself: build from an existing source directory"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1539
#: ../spack/lib/spack/docs/command_index.rst:4155
msgid "specs to use for install. must contain package AND version"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1551
msgid "``-d SOURCE_PATH, --source-path SOURCE_PATH``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1551
msgid "path to source directory. defaults to the current directory"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1554
#: ../spack/lib/spack/docs/command_index.rst:4164
msgid "``-i, --ignore-dependencies``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1554
msgid "don't try to install dependencies of requested packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1560
msgid "do not remove the install prefix if installation fails"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1563
msgid "``--skip-patch``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1563
msgid "skip patching for the DIY build"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1566
msgid "``-q, --quiet``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1566
msgid "do not display verbose build output while installing"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1580
msgid "spack docs"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1582
msgid "open spack documentation in a web browser"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1600
msgid "spack edit"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1602
msgid "open package files in $EDITOR"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1609
msgid ":ref:`More documentation <cmd-spack-edit>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1615
#: ../spack/lib/spack/docs/command_index.rst:2283
#: ../spack/lib/spack/docs/command_index.rst:2928
#: ../spack/lib/spack/docs/command_index.rst:2959
msgid "name"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1614
msgid "name of package to edit"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1623
msgid "``-b, --build-system``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1623
msgid "Edit the build system with the supplied name."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1626
msgid "``-c, --command``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1626
msgid "edit the command with the supplied name"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1629
msgid "``-d, --docs``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1629
msgid "edit the docs with the supplied name"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1632
msgid "``-t, --test``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1632
msgid "edit the test with the supplied name"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1635
msgid "``-m, --module``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1635
msgid "edit the main spack module with the supplied name"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1638
msgid "path to repo to edit package in"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1641
msgid "namespace of package to edit"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1649
msgid "spack env"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1651
msgid "manage virtual environments"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1658
msgid ":ref:`More documentation <cmd-spack-env>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1671
msgid ":ref:`env activate <spack-env-activate>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1672
msgid ":ref:`env deactivate <spack-env-deactivate>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1673
msgid ":ref:`env create <spack-env-create>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1674
msgid ":ref:`env remove <spack-env-remove>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1675
msgid ":ref:`env list <spack-env-list>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1676
msgid ":ref:`env status <spack-env-status>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1677
msgid ":ref:`env loads <spack-env-loads>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1678
msgid ":ref:`env view <spack-env-view>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1686
msgid "spack env activate"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1697
#: ../spack/lib/spack/docs/command_index.rst:1862
msgid "env"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1696
msgid "name of environment to activate"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1705
#: ../spack/lib/spack/docs/command_index.rst:1741
msgid "``--sh``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1705
msgid "print sh commands to activate the environment"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1708
#: ../spack/lib/spack/docs/command_index.rst:1745
msgid "``--csh``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1708
msgid "print csh commands to activate the environment"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1711
msgid "``-v, --with-view``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1711
msgid "update PATH etc. with associated view"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1714
msgid "``-V, --without-view``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1714
msgid "do not update PATH etc. with associated view"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1717
#: ../spack/lib/spack/docs/command_index.rst:1774
msgid "``-d, --dir``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1717
msgid "force spack to treat env as a directory, not a name"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1721
msgid "``-p, --prompt``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1720
msgid "decorate the command line prompt when activating"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1728
msgid "spack env deactivate"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1741
msgid "print sh commands to deactivate the environment"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1744
msgid "print csh commands to deactivate the environment"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1752
msgid "spack env create"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1762
#: ../spack/lib/spack/docs/command_index.rst:1799
msgid "ENV"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1762
msgid "name of environment to create"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1766
msgid "envfile"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1765
msgid "optional init file; can be spack.yaml or spack.lock"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1774
msgid "create an environment in a specific directory"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1777
msgid "``--without-view``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1777
msgid "do not maintain a view for this environment"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1781
msgid "``--with-view WITH_VIEW``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1780
msgid ""
"specify that this environment should maintain a view at the specified path "
"(by default the view is maintained in the environment directory)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1788
msgid "spack env remove"
msgstr ""

# 3a8d6f12cb9f4c20814ced54e413d7b2
#: ../spack/lib/spack/docs/command_index.rst:1798
msgid "environment(s) to remove"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1808
#: ../spack/lib/spack/docs/command_index.rst:2600
#: ../spack/lib/spack/docs/command_index.rst:3085
#: ../spack/lib/spack/docs/command_index.rst:3142
#: ../spack/lib/spack/docs/command_index.rst:3241
#: ../spack/lib/spack/docs/command_index.rst:3298
#: ../spack/lib/spack/docs/command_index.rst:3420
#: ../spack/lib/spack/docs/command_index.rst:3477
#: ../spack/lib/spack/docs/command_index.rst:4336
msgid "``-y, --yes-to-all``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1807
#: ../spack/lib/spack/docs/command_index.rst:2599
#: ../spack/lib/spack/docs/command_index.rst:3084
#: ../spack/lib/spack/docs/command_index.rst:3141
#: ../spack/lib/spack/docs/command_index.rst:3240
#: ../spack/lib/spack/docs/command_index.rst:3297
#: ../spack/lib/spack/docs/command_index.rst:3419
#: ../spack/lib/spack/docs/command_index.rst:3476
#: ../spack/lib/spack/docs/command_index.rst:4336
msgid "assume \"yes\" is the answer to every confirmation request"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1815
msgid "spack env list"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1833
msgid "spack env status"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1851
msgid "spack env loads"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1861
msgid "name of env to generate loads file for"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1870
msgid "``-m {tcl,lmod}, --module-type {tcl,lmod}``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1870
msgid "type of module system to generate loads for"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1873
#: ../spack/lib/spack/docs/command_index.rst:3168
#: ../spack/lib/spack/docs/command_index.rst:3324
#: ../spack/lib/spack/docs/command_index.rst:3503
msgid "``--input-only``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1873
#: ../spack/lib/spack/docs/command_index.rst:3168
#: ../spack/lib/spack/docs/command_index.rst:3324
#: ../spack/lib/spack/docs/command_index.rst:3503
msgid "generate input for module command (instead of a shell script)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1876
#: ../spack/lib/spack/docs/command_index.rst:3171
#: ../spack/lib/spack/docs/command_index.rst:3327
#: ../spack/lib/spack/docs/command_index.rst:3506
msgid "``-p PREFIX, --prefix PREFIX``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1876
#: ../spack/lib/spack/docs/command_index.rst:3171
#: ../spack/lib/spack/docs/command_index.rst:3327
#: ../spack/lib/spack/docs/command_index.rst:3506
msgid "prepend to module names when issuing module load commands"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1879
#: ../spack/lib/spack/docs/command_index.rst:3174
#: ../spack/lib/spack/docs/command_index.rst:3330
#: ../spack/lib/spack/docs/command_index.rst:3509
msgid "``-x EXCLUDE, --exclude EXCLUDE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1879
#: ../spack/lib/spack/docs/command_index.rst:3174
#: ../spack/lib/spack/docs/command_index.rst:3330
#: ../spack/lib/spack/docs/command_index.rst:3509
msgid "exclude package from output; may be specified multiple times"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1883
#: ../spack/lib/spack/docs/command_index.rst:2739
#: ../spack/lib/spack/docs/command_index.rst:3115
#: ../spack/lib/spack/docs/command_index.rst:3178
#: ../spack/lib/spack/docs/command_index.rst:3271
#: ../spack/lib/spack/docs/command_index.rst:3334
#: ../spack/lib/spack/docs/command_index.rst:3450
#: ../spack/lib/spack/docs/command_index.rst:3513
#: ../spack/lib/spack/docs/command_index.rst:4633
msgid "``-r, --dependencies``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1882
#: ../spack/lib/spack/docs/command_index.rst:2738
#: ../spack/lib/spack/docs/command_index.rst:3114
#: ../spack/lib/spack/docs/command_index.rst:3177
#: ../spack/lib/spack/docs/command_index.rst:3270
#: ../spack/lib/spack/docs/command_index.rst:3333
#: ../spack/lib/spack/docs/command_index.rst:3449
#: ../spack/lib/spack/docs/command_index.rst:3512
#: ../spack/lib/spack/docs/command_index.rst:4632
msgid "recursively traverse spec dependencies"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1890
msgid "spack env view"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1900
msgid "{regenerate,enable,disable}"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1900
msgid "action to take for the environment's view"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1904
msgid "view_path"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1903
msgid "when enabling a view, optionally set the path manually"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1917
msgid "spack extensions"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1919
msgid "list extensions for package"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1926
msgid ":ref:`More documentation <cmd-spack-extensions>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1931
msgid "spec of package to list extensions for"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1943
#: ../spack/lib/spack/docs/command_index.rst:2025
msgid "``-p, --paths``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1943
msgid "show paths to extension install directories"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1946
#: ../spack/lib/spack/docs/command_index.rst:2028
msgid "``-d, --deps``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1946
msgid "show full dependency DAG of extensions"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1949
msgid "``-s TYPE, --show TYPE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1949
msgid "one of packages, installed, activated, all"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1960
msgid "spack fetch"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1962
msgid "fetch archives for packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1969
msgid ":ref:`More documentation <cmd-spack-fetch>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1974
msgid "specs of packages to fetch"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1986
#: ../spack/lib/spack/docs/command_index.rst:2058
msgid "``-m, --missing``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1986
msgid "fetch only missing (not yet installed) dependencies"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1990
#: ../spack/lib/spack/docs/command_index.rst:2905
msgid "``-D, --dependencies``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1989
#: ../spack/lib/spack/docs/command_index.rst:2905
msgid "also fetch all dependencies"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1997
msgid "spack find"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:1999
msgid "list and search installed packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2008
msgid ":ref:`More documentation <cmd-spack-find>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2014
#: ../spack/lib/spack/docs/command_index.rst:3070
#: ../spack/lib/spack/docs/command_index.rst:3103
#: ../spack/lib/spack/docs/command_index.rst:3133
#: ../spack/lib/spack/docs/command_index.rst:3160
#: ../spack/lib/spack/docs/command_index.rst:3226
#: ../spack/lib/spack/docs/command_index.rst:3259
#: ../spack/lib/spack/docs/command_index.rst:3289
#: ../spack/lib/spack/docs/command_index.rst:3316
#: ../spack/lib/spack/docs/command_index.rst:3352
#: ../spack/lib/spack/docs/command_index.rst:3405
#: ../spack/lib/spack/docs/command_index.rst:3438
#: ../spack/lib/spack/docs/command_index.rst:3468
#: ../spack/lib/spack/docs/command_index.rst:3495
msgid "constraint"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2013
#: ../spack/lib/spack/docs/command_index.rst:3069
#: ../spack/lib/spack/docs/command_index.rst:3102
#: ../spack/lib/spack/docs/command_index.rst:3132
#: ../spack/lib/spack/docs/command_index.rst:3159
#: ../spack/lib/spack/docs/command_index.rst:3225
#: ../spack/lib/spack/docs/command_index.rst:3258
#: ../spack/lib/spack/docs/command_index.rst:3288
#: ../spack/lib/spack/docs/command_index.rst:3315
#: ../spack/lib/spack/docs/command_index.rst:3351
#: ../spack/lib/spack/docs/command_index.rst:3404
#: ../spack/lib/spack/docs/command_index.rst:3437
#: ../spack/lib/spack/docs/command_index.rst:3467
#: ../spack/lib/spack/docs/command_index.rst:3494
msgid "constraint to select a subset of installed packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2022
msgid "``-s, --short``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2022
msgid "show only specs (default)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2025
msgid "show paths to package install directories"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2028
msgid "show full dependency DAG of installed packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2037
#: ../spack/lib/spack/docs/command_index.rst:2708
msgid "``-t TAGS, --tags TAGS``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2037
#: ../spack/lib/spack/docs/command_index.rst:2707
msgid "filter a package query by tags"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2040
msgid "``-c, --show-concretized``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2040
msgid "show concretized specs in an environment"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2043
msgid "``-f, --show-flags``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2043
msgid "show spec compiler flags"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2046
msgid "``--show-full-compiler``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2046
msgid "show full compiler specs"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2049
msgid "``-x, --explicit``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2049
msgid "show only specs that were installed explicitly"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2052
msgid "``-X, --implicit``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2052
msgid "show only specs that were installed as dependencies"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2055
msgid "``-u, --unknown``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2055
msgid "show only specs Spack does not have a package for"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2058
msgid "show missing dependencies as well as installed specs"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2064
msgid "``-M, --only-missing``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2064
msgid "show only missing dependencies"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2067
msgid "``-N, --namespace``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2067
#: ../spack/lib/spack/docs/command_index.rst:4222
msgid "show fully qualified package names"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2070
msgid "``--start-date START_DATE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2070
msgid "earliest date of installation [YYYY-MM-DD]"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2074
msgid "``--end-date END_DATE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2073
msgid "latest date of installation [YYYY-MM-DD]"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2081
msgid "spack flake8"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2083
msgid "runs source code style checks on Spack. requires flake8"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2094
msgid "files"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2093
msgid "specific files to check"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2102
msgid "``-b BASE, --base BASE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2102
msgid "select base branch for collecting list of modified files"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2105
msgid "``-k, --keep-temp``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2105
msgid ""
"do not delete temporary directory where flake8 runs. use for debugging, to "
"see filtered files"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2108
msgid "check all files, not just changed files"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2111
msgid "``-o, --output``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2111
msgid "send filtered files to stdout as well as temp files"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2114
msgid "``-r, --root-relative``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2114
msgid "print root-relative paths (default: cwd-relative)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2118
msgid "``-U, --no-untracked``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2117
msgid "exclude untracked files from checks"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2125
msgid "spack gpg"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2127
msgid "handle GPG actions for spack"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2134
msgid ":ref:`More documentation <cmd-spack-gpg>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2147
msgid ":ref:`gpg verify <spack-gpg-verify>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2148
msgid ":ref:`gpg trust <spack-gpg-trust>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2149
msgid ":ref:`gpg untrust <spack-gpg-untrust>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2150
msgid ":ref:`gpg sign <spack-gpg-sign>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2151
msgid ":ref:`gpg create <spack-gpg-create>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2152
msgid ":ref:`gpg list <spack-gpg-list>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2153
msgid ":ref:`gpg init <spack-gpg-init>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2154
msgid ":ref:`gpg export <spack-gpg-export>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2162
msgid "spack gpg verify"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2172
msgid "the package to verify"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2176
msgid "signature"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2175
msgid "the signature file"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2189
msgid "spack gpg trust"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2200
msgid "keyfile"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2199
msgid "add a key to the trust store"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2213
msgid "spack gpg untrust"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2224
#: ../spack/lib/spack/docs/command_index.rst:2368
msgid "keys"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2223
msgid "remove keys from the trust store"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2233
#: ../spack/lib/spack/docs/command_index.rst:2326
msgid "``--signing``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2232
msgid "allow untrusting signing keys"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2240
msgid "spack gpg sign"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2250
msgid "the package to sign"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2259
msgid "``--output DEST``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2259
msgid "the directory to place signatures"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2262
msgid "``--key KEY``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2262
msgid "the key to use for signing"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2266
msgid "``--clearsign``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2265
msgid "if specified, create a clearsign signature"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2273
msgid "spack gpg create"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2283
msgid "the name to use for the new key"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2287
msgid "email"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2286
msgid "the email address to use for the new key"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2295
msgid "``--comment COMMENT``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2295
msgid "a description for the intended use of the key"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2298
msgid "``--expires EXPIRATION``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2298
msgid "when the key should expire"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2302
msgid "``--export DEST``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2301
msgid "export the public key to a file"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2309
msgid "spack gpg list"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2322
msgid "``--trusted``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2322
msgid "list trusted keys"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2325
msgid "list keys which may be used for signing"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2333
msgid "spack gpg init"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2347
msgid "``--from DIR``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2346
msgid "==SUPPRESS=="
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2354
msgid "spack gpg export"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2364
msgid "location"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2364
msgid "where to export keys"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2367
msgid "the keys to export; all secret keys if unspecified"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2381
msgid "spack graph"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2383
msgid "generate graphs of package dependency relationships"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2390
msgid ":ref:`More documentation <cmd-spack-graph>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2395
msgid "specs of packages to graph"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2404
msgid "``-a, --ascii``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2404
msgid "draw graph as ascii to stdout (default)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2407
msgid "``-d, --dot``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2407
msgid "generate graph in dot format and print to stdout"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2410
msgid "``-n, --normalize``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2410
msgid "skip concretization; only print normalized spec"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2413
msgid "``-s, --static``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2413
msgid "use static information from packages, not dynamic spec info"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2416
msgid "graph all installed specs in dot format (implies --dot)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2420
msgid "``-t DEPTYPE, --deptype DEPTYPE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2419
msgid ""
"comma-separated list of deptypes to traverse. default=build,link,run,test"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2427
msgid "spack help"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2429
msgid "get help on spack and its commands"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2436
msgid ":ref:`More documentation <cmd-spack-help>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2442
msgid "help_command"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2441
msgid "command to get help on"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2450
#: ../spack/lib/spack/docs/command_index.rst:2453
msgid "print all available commands"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2454
msgid "``--spec``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2461
msgid "spack info"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2463
msgid "get detailed information on a particular package"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2470
msgid ":ref:`More documentation <cmd-spack-info>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2476
#: ../spack/lib/spack/docs/command_index.rst:4655
msgid "PACKAGE"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2475
msgid "name of package to get info for"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2489
msgid "spack install"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2491
msgid "build and install packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2504
msgid ":ref:`More documentation <cmd-spack-install>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2518
msgid "``--only {package,dependencies}``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2518
msgid ""
"select the mode of installation. the default is to install the package along "
"with all its dependencies. alternatively one can decide to install only the "
"package or only the dependencies"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2524
#: ../spack/lib/spack/docs/command_index.rst:4213
msgid "``-I, --install-status``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2524
#: ../spack/lib/spack/docs/command_index.rst:4213
msgid ""
"show install status of packages. packages can be: installed [+], missing and "
"needed by an installed package [-], or not installed (no annotation)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2527
msgid "``--overwrite``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2527
msgid "reinstall an existing spec, even if it has dependents"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2536
msgid "``--dont-restage``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2536
msgid "if a partial install is detected, don't delete prior state"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2539
msgid "``--use-cache``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2539
msgid "check for pre-built Spack packages in mirrors (default)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2542
msgid "``--no-cache``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2542
msgid "do not check for pre-built Spack packages in mirrors"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2545
msgid "``--show-log-on-error``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2545
msgid "print full build log to stderr if build fails"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2548
msgid "``--source``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2548
msgid "install source files in prefix"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2557
msgid "``--fake``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2557
msgid "fake install for debug purposes."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2560
msgid "``--only-concrete``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2560
msgid "(with environment) only install already concretized specs"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2563
msgid "``-f SPEC_YAML_FILE, --file SPEC_YAML_FILE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2563
msgid "install from file. Read specs to install from .yaml files"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2572
msgid "``--test {root,all}``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2572
msgid ""
"If 'root' is chosen, run package tests during installation for top-level "
"packages (but skip tests for dependencies). if 'all' is chosen, run package "
"tests during installation for all packages. If neither are chosen, don't run "
"tests for any packages."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2575
msgid "``--run-tests``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2575
msgid "run package tests during installation (same as --test=all)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2578
msgid "``--log-format {None,junit,cdash}``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2578
msgid "format to be used for log files"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2581
msgid "``--log-file LOG_FILE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2581
msgid "filename for the log file. if not passed a default will be used"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2584
msgid "``--cdash-upload-url CDASH_UPLOAD_URL``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2584
msgid "CDash URL where reports will be uploaded"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2587
msgid "``--cdash-build CDASH_BUILD``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2587
msgid ""
"The name of the build that will be reported to CDash. Defaults to spec of "
"the package to install."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2590
msgid "``--cdash-site CDASH_SITE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2590
msgid ""
"The site name that will be reported to CDash. Defaults to current system "
"hostname."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2593
msgid "``--cdash-track CDASH_TRACK``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2593
msgid ""
"Results will be reported to this group on CDash. Defaults to Experimental."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2596
msgid "``--cdash-buildstamp CDASH_BUILDSTAMP``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2596
msgid ""
"Instead of letting the CDash reporter prepare the buildstamp which, when "
"combined with build name, site and project, uniquely identifies the build, "
"provide this argument to identify the build yourself.  Format: %%Y%%m%%d-%%H%"
"%M-[cdash-track]"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2607
msgid "spack license"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2609
msgid "list and check license headers on files in spack"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2627
msgid ":ref:`license list-files <spack-license-list-files>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2628
msgid ":ref:`license verify <spack-license-verify>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2636
msgid "spack license list-files"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2654
msgid "spack license verify"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2668
msgid "``--root ROOT``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2667
msgid "scan a different prefix for license issues"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2675
msgid "spack list"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2677
msgid "list and search available packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2684
msgid ":ref:`More documentation <cmd-spack-list>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2690
msgid "filter"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2689
msgid "optional case-insensitive glob patterns to filter results"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2698
msgid "``-d, --search-description``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2698
msgid "filtering will also search the description for a match"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2701
msgid "``--format {rst,name_only,html}``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2701
msgid "format to be used to print the output [default: name_only]"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2704
msgid "write output to the specified file, if any package is newer"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2715
msgid "spack load"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2717
msgid "add package to environment using `module load`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2724
msgid ":ref:`More documentation <cmd-spack-load>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2729
msgid "spec of package to load with modules"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2746
msgid "spack location"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2748
msgid "print out locations of packages and spack directories"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2755
msgid ":ref:`More documentation <cmd-spack-location>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2801
msgid "spack log-parse"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2803
msgid "filter errors and warnings from build logs"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2814
msgid "file"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2813
msgid "a log file containing build output, or - for stdin"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2822
msgid "``--show SHOW``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2822
msgid "comma-separated list of what to show; options: errors, warnings"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2825
msgid "``-c CONTEXT, --context CONTEXT``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2825
msgid "lines of context to show around lines of interest"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2828
msgid "print out a profile of time spent in regexes during parse"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2831
msgid "``-w WIDTH, --width WIDTH``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2831
msgid "wrap width: auto-size to terminal by default; 0 for no wrap"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2834
msgid ""
"number of jobs to parse log file (default: 1 for short logs, ncpus for long "
"logs)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2842
msgid "spack mirror"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2844
msgid "manage mirrors (source and binary)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2851
msgid ":ref:`More documentation <cmd-spack-mirror>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2867
msgid ":ref:`mirror create <spack-mirror-create>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2868
msgid ":ref:`mirror add <spack-mirror-add>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2869
msgid ":ref:`mirror remove <spack-mirror-remove>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2870
msgid ":ref:`mirror list <spack-mirror-list>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2878
msgid "spack mirror create"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2885
msgid ":ref:`More documentation <cmd-spack-mirror-create>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2890
msgid "specs of packages to put in mirror"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2899
msgid "``-d DIRECTORY, --directory DIRECTORY``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2899
msgid "directory in which to create mirror"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2902
msgid "``-f FILE, --file FILE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2902
msgid "file with specs of packages to put in mirror"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2909
msgid "``-n VERSIONS_PER_SPEC, --versions-per-spec VERSIONS_PER_SPEC``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2908
msgid "the number of versions to fetch for each spec"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2916
msgid "spack mirror add"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2923
msgid ":ref:`More documentation <cmd-spack-mirror-add>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2928
msgid "mnemonic name for mirror"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2931
msgid "url of mirror directory from 'spack mirror create'"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2948
msgid "spack mirror remove"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2955
msgid ":ref:`More documentation <cmd-spack-mirror-remove>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2977
msgid "spack mirror list"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:2984
msgid ":ref:`More documentation <cmd-spack-mirror-list>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3000
msgid "spack module"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3002
msgid "manipulate module files"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3020
msgid ":ref:`module dotkit <spack-module-dotkit>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3021
msgid ":ref:`module lmod <spack-module-lmod>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3022
msgid ":ref:`module tcl <spack-module-tcl>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3030
msgid "spack module dotkit"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3048
msgid ":ref:`module dotkit refresh <spack-module-dotkit-refresh>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3049
msgid ":ref:`module dotkit find <spack-module-dotkit-find>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3050
msgid ":ref:`module dotkit rm <spack-module-dotkit-rm>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3051
msgid ":ref:`module dotkit loads <spack-module-dotkit-loads>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3059
msgid "spack module dotkit refresh"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3078
#: ../spack/lib/spack/docs/command_index.rst:3234
#: ../spack/lib/spack/docs/command_index.rst:3413
msgid "``--delete-tree``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3078
#: ../spack/lib/spack/docs/command_index.rst:3234
#: ../spack/lib/spack/docs/command_index.rst:3413
msgid "delete the module file tree before refresh"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3081
#: ../spack/lib/spack/docs/command_index.rst:3237
#: ../spack/lib/spack/docs/command_index.rst:3416
msgid "``--upstream-modules``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3081
#: ../spack/lib/spack/docs/command_index.rst:3237
#: ../spack/lib/spack/docs/command_index.rst:3416
msgid "generate modules for packages installed upstream"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3092
msgid "spack module dotkit find"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3111
#: ../spack/lib/spack/docs/command_index.rst:3267
#: ../spack/lib/spack/docs/command_index.rst:3446
msgid "``--full-path``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3111
#: ../spack/lib/spack/docs/command_index.rst:3267
#: ../spack/lib/spack/docs/command_index.rst:3446
msgid "display full path to module file"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3122
msgid "spack module dotkit rm"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3149
msgid "spack module dotkit loads"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3185
msgid "spack module lmod"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3203
msgid ":ref:`module lmod refresh <spack-module-lmod-refresh>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3204
msgid ":ref:`module lmod find <spack-module-lmod-find>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3205
msgid ":ref:`module lmod rm <spack-module-lmod-rm>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3206
msgid ":ref:`module lmod loads <spack-module-lmod-loads>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3207
msgid ":ref:`module lmod setdefault <spack-module-lmod-setdefault>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3215
msgid "spack module lmod refresh"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3248
msgid "spack module lmod find"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3278
msgid "spack module lmod rm"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3305
msgid "spack module lmod loads"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3341
msgid "spack module lmod setdefault"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3365
msgid "spack module tcl"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3383
msgid ":ref:`module tcl refresh <spack-module-tcl-refresh>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3384
msgid ":ref:`module tcl find <spack-module-tcl-find>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3385
msgid ":ref:`module tcl rm <spack-module-tcl-rm>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3386
msgid ":ref:`module tcl loads <spack-module-tcl-loads>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3394
msgid "spack module tcl refresh"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3427
msgid "spack module tcl find"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3457
msgid "spack module tcl rm"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3484
msgid "spack module tcl loads"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3520
msgid "spack patch"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3522
msgid "patch expanded archive sources in preparation for install"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3529
msgid ":ref:`More documentation <cmd-spack-patch>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3534
#: ../spack/lib/spack/docs/command_index.rst:4247
msgid "specs of packages to stage"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3551
msgid "spack pkg"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3553
msgid "query packages associated with particular git revisions"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3571
msgid ":ref:`pkg add <spack-pkg-add>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3572
msgid ":ref:`pkg list <spack-pkg-list>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3573
msgid ":ref:`pkg diff <spack-pkg-diff>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3574
msgid ":ref:`pkg added <spack-pkg-added>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3575
msgid ":ref:`pkg removed <spack-pkg-removed>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3583
msgid "spack pkg add"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3593
msgid "names of packages to add to git repo"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3607
msgid "spack pkg list"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3618
msgid "rev"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3617
msgid "revision to list packages for"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3631
msgid "spack pkg diff"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3641
#: ../spack/lib/spack/docs/command_index.rst:3668
#: ../spack/lib/spack/docs/command_index.rst:3695
msgid "rev1"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3641
#: ../spack/lib/spack/docs/command_index.rst:3668
#: ../spack/lib/spack/docs/command_index.rst:3695
msgid "revision to compare against"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3645
#: ../spack/lib/spack/docs/command_index.rst:3672
#: ../spack/lib/spack/docs/command_index.rst:3699
msgid "rev2"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3644
#: ../spack/lib/spack/docs/command_index.rst:3671
#: ../spack/lib/spack/docs/command_index.rst:3698
msgid "revision to compare to rev1 (default is HEAD)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3658
msgid "spack pkg added"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3685
msgid "spack pkg removed"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3712
msgid "spack providers"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3714
msgid "list packages that provide a particular virtual package"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3721
msgid ":ref:`More documentation <cmd-spack-providers>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3727
msgid "virtual_package"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3726
msgid "find packages that provide this virtual package"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3740
msgid "spack pydoc"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3742
msgid "run pydoc from within spack"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3753
msgid "entity"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3752
msgid "run pydoc help on entity"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3766
msgid "spack python"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3768
msgid "launch an interpreter as spack would launch a command"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3775
msgid ":ref:`More documentation <cmd-spack-python>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3781
msgid "python_args"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3780
msgid "file to run plus arguments"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3790
msgid "``-c PYTHON_COMMAND``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3789
msgid "command to execute"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3797
msgid "spack reindex"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3799
msgid "rebuild Spack's package database"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3817
msgid "spack release-jobs"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3819
msgid "generate release build set as .gitlab-ci.yml"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3831
msgid ""
"These positional arguments are generally for internal use.  The --spec-set "
"argument should be used to identify a yaml file describing the set of "
"release specs to include in the .gitlab-ci.yml file."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3840
msgid "``-s SPEC_SET, --spec-set SPEC_SET``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3840
msgid "path to release spec-set yaml file"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3843
msgid "url of binary mirror where builds should be pushed"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3846
msgid "path to output file to write"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3849
msgid "``-t SHARED_RUNNER_TAG, --shared-runner-tag SHARED_RUNNER_TAG``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3849
msgid "tag to add to jobs for shared runner selection"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3852
msgid "``-k SIGNING_KEY, --signing-key SIGNING_KEY``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3852
msgid "hash of gpg key to use for package signing"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3855
msgid "``-c CDASH_URL, --cdash-url CDASH_URL``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3855
msgid "Base url of CDash instance jobs should communicate with"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3858
msgid "``-p, --print-summary``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3858
msgid "Print summary of staged jobs to standard output"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3861
msgid "``--resolve-deps-locally``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3861
msgid ""
"Use only the current machine to concretize specs, instead of iterating over "
"items in os-container-mapping.yaml and using docker run.  Assumes the "
"current machine architecure is listed in the os-container-mapping.yaml "
"config file."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3865
msgid "``--specs-deps-output SPECS_DEPS_OUTPUT``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3864
msgid ""
"A file path to which spec deps should be written.  This argument is "
"generally for internal use, and should not be provided by end-users under "
"normal conditions."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3872
msgid "spack remove"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3874
msgid "remove specs from an environment"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3884
msgid "specs to be removed"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3893
msgid "remove all specs from (clear) the environment"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3896
msgid "remove concretized spec (if any) immediately"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3904
msgid "spack repo"
msgstr ""

# 6c2adf019c044223abc4bf24a4f51df5
#: ../spack/lib/spack/docs/command_index.rst:3906
msgid "manage package source repositories"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3913
msgid ":ref:`More documentation <cmd-spack-repo>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3926
msgid ":ref:`repo create <spack-repo-create>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3927
msgid ":ref:`repo list <spack-repo-list>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3928
msgid ":ref:`repo add <spack-repo-add>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3929
msgid ":ref:`repo remove <spack-repo-remove>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3937
msgid "spack repo create"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3947
msgid "directory"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3947
msgid "directory to create the repo in"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3951
msgid "namespace"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3950
msgid ""
"namespace to identify packages in the repository. defaults to the directory "
"name"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3964
msgid "spack repo list"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3985
msgid "spack repo add"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3996
#: ../spack/lib/spack/docs/command_index.rst:4723
#: ../spack/lib/spack/docs/command_index.rst:4756
#: ../spack/lib/spack/docs/command_index.rst:4789
#: ../spack/lib/spack/docs/command_index.rst:4822
msgid "path"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:3995
msgid "path to a Spack package repository directory"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4012
msgid "spack repo remove"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4023
msgid "path_or_namespace"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4022
msgid "path or namespace of a Spack package repository"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4039
msgid "spack resource"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4041
msgid "list downloadable resources (tarballs, repos, patches, etc.)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4048
msgid ":ref:`More documentation <cmd-spack-resource>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4061
msgid ":ref:`resource list <spack-resource-list>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4062
msgid ":ref:`resource show <spack-resource-show>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4070
msgid "spack resource list"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4084
msgid "``--only-hashes``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4083
msgid "only print sha256 hashes of resources"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4091
msgid "spack resource show"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4100
msgid "hash"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4115
msgid "spack restage"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4117
msgid "revert checked out package source code"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4124
msgid ":ref:`More documentation <cmd-spack-restage>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4129
msgid "specs of packages to restage"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4143
msgid "spack setup"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4145
msgid "create a configuration script and module, but don't build"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4164
msgid "do not try to install dependencies of requested packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4184
msgid "spack spec"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4186
msgid "show what would be installed, given a spec"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4193
msgid ":ref:`More documentation <cmd-spack-spec>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4198
msgid "specs of packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4216
msgid "``-y, --yaml``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4216
msgid "print concrete spec as YAML"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4219
msgid "``-c {nodes,edges,paths}, --cover {nodes,edges,paths}``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4219
msgid "how extensively to traverse the DAG (default: nodes)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4222
msgid "``-N, --namespaces``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4226
msgid "``-t, --types``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4225
msgid "show dependency types"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4233
msgid "spack stage"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4235
msgid "expand downloaded archive in preparation for install"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4242
msgid ":ref:`More documentation <cmd-spack-stage>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4259
msgid "path to stage package, does not add to spack tree"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4267
msgid "spack test"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4269
msgid "run spack's unit tests"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4276
msgid ":ref:`More documentation <cmd-spack-test>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4282
msgid "tests"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4281
msgid "list of tests to run (will be passed to pytest -k)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4290
msgid "``-H, --pytest-help``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4290
msgid "print full pytest help message, showing advanced options"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4293
msgid "``-l, --list``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4293
msgid "list basic test names"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4296
msgid "``-L, --long-list``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4296
msgid "list the entire hierarchy of tests"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4300
msgid "``--extension EXTENSION``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4299
msgid "run test for a given Spack extension"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4307
msgid "spack uninstall"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4309
msgid "remove installed packages"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4316
msgid ":ref:`More documentation <cmd-spack-uninstall>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4321
msgid "specs of packages to uninstall"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4330
msgid ""
"remove regardless of whether other packages or environments depend on this "
"one"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4333
msgid "``-R, --dependents``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4333
msgid ""
"also uninstall any packages that depend on the ones given via command line"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4339
msgid ""
"USE CAREFULLY. Remove ALL installed packages that match each supplied spec. "
"i.e., if you `uninstall --all libelf`, ALL versions of `libelf` are "
"uninstalled. If no spec is supplied, all installed packages will be "
"uninstalled. If used in an environment, all packages in the environment will "
"be uninstalled."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4347
msgid "spack unload"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4349
msgid "remove package from environment using `module unload`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4359
msgid "spec of package to unload with modules"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4373
msgid "spack unuse"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4375
msgid "remove package from environment using dotkit"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4385
msgid "spec of package to unuse with dotkit"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4399
msgid "spack upload-s3"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4401
msgid "temporary command to upload buildcaches to 's3.spack.io'"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4419
msgid ":ref:`upload-s3 spec <spack-upload-s3-spec>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4420
msgid ":ref:`upload-s3 index <spack-upload-s3-index>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4428
msgid "spack upload-s3 spec"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4441
msgid "Spec to upload"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4444
msgid "Path to spec yaml file containing spec to upload"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4447
msgid "``-b BASE_DIR, --base-dir BASE_DIR``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4447
msgid "Path to root of buildcaches"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4451
#: ../spack/lib/spack/docs/command_index.rst:4472
msgid "``-e ENDPOINT_URL, --endpoint-url ENDPOINT_URL``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4450
#: ../spack/lib/spack/docs/command_index.rst:4471
msgid "URL of mirror"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4458
msgid "spack upload-s3 index"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4479
msgid "spack url"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4481
msgid "debugging tool for url parsing"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4488
msgid ":ref:`More documentation <cmd-spack-url>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4501
msgid ":ref:`url parse <spack-url-parse>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4502
msgid ":ref:`url list <spack-url-list>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4503
msgid ":ref:`url summary <spack-url-summary>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4504
msgid ":ref:`url stats <spack-url-stats>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4512
msgid "spack url parse"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4522
msgid "url to parse"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4532
msgid "``-s, --spider``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4531
msgid "spider the source page for versions"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4539
msgid "spack url list"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4552
msgid "``-c, --color``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4552
msgid ""
"color the parsed version and name in the urls shown (versions will be cyan, "
"name red)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4555
msgid "``-e, --extrapolation``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4555
msgid ""
"color the versions used for extrapolation as well (additional versions will "
"be green, names magenta)"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4558
msgid "``-n, --incorrect-name``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4558
msgid "only list urls for which the name was incorrectly parsed"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4561
msgid "``-N, --correct-name``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4561
msgid "only list urls for which the name was correctly parsed"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4564
msgid "``-v, --incorrect-version``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4564
msgid "only list urls for which the version was incorrectly parsed"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4568
msgid "``-V, --correct-version``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4567
msgid "only list urls for which the version was correctly parsed"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4575
msgid "spack url summary"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4593
msgid "spack url stats"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4611
msgid "spack use"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4613
msgid "add package to environment using dotkit"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4623
msgid "spec of package to use with dotkit"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4640
msgid "spack versions"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4642
msgid "list available versions of a package"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4649
msgid ":ref:`More documentation <cmd-spack-versions>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4654
msgid "package to list versions for"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4664
msgid "``-s, --safe-only``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4663
msgid "only list safe versions of the package"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4671
msgid "spack view"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4673
msgid "project packages to a compact naming scheme on the filesystem."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4680
msgid ":ref:`More documentation <cmd-spack-view>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4688
msgid "If not verbose only warnings/errors will be printed."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4691
msgid "``-e EXCLUDE, --exclude EXCLUDE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4691
msgid "exclude packages with names matching the given regex pattern"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4695
msgid "``-d {true,false,yes,no}, --dependencies {true,false,yes,no}``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4694
msgid "Link/remove/list dependencies."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4702
msgid ":ref:`view symlink <spack-view-symlink>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4703
msgid ":ref:`view hardlink <spack-view-hardlink>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4704
msgid ":ref:`view remove <spack-view-remove>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4705
msgid ":ref:`view statlink <spack-view-statlink>`"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4713
msgid "spack view symlink"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4723
#: ../spack/lib/spack/docs/command_index.rst:4756
#: ../spack/lib/spack/docs/command_index.rst:4789
#: ../spack/lib/spack/docs/command_index.rst:4822
msgid "path to file system view directory"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4726
#: ../spack/lib/spack/docs/command_index.rst:4759
#: ../spack/lib/spack/docs/command_index.rst:4792
#: ../spack/lib/spack/docs/command_index.rst:4825
msgid "seed specs of the packages to view"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4735
#: ../spack/lib/spack/docs/command_index.rst:4768
msgid "``--projection-file PROJECTION_FILE``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4735
#: ../spack/lib/spack/docs/command_index.rst:4768
msgid "Initialize view using projections from file."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4737
#: ../spack/lib/spack/docs/command_index.rst:4770
msgid "``-i, --ignore-conflicts``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4746
msgid "spack view hardlink"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4779
msgid "spack view remove"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4801
msgid "``--no-remove-dependents``"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4801
msgid "Do not remove dependents of specified specs."
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4804
msgid "act on all specs in view"
msgstr ""

#: ../spack/lib/spack/docs/command_index.rst:4812
msgid "spack view statlink"
msgstr ""

# 197c01de21f548afaa39af797b5f0fef
#: ../spack/lib/spack/docs/config_yaml.rst:10
msgid "Basic Settings"
msgstr "基本設定"

# 769f67da7f3f48fe89fac04bd4cf4e56
#: ../spack/lib/spack/docs/config_yaml.rst:12
msgid ""
"Spack's basic configuration options are set in ``config.yaml``.  You can see "
"the default settings by looking at ``etc/spack/defaults/config.yaml``:"
msgstr ""

# 858813c7d3564aa8b90f26880ac5bf82
#: ../spack/lib/spack/docs/config_yaml.rst:19
msgid ""
"These settings can be overridden in ``etc/spack/config.yaml`` or ``~/.spack/"
"config.yaml``.  See :ref:`configuration-scopes` for details."
msgstr ""

# 4e6b37b527e040b6a4e103f48246e794
#: ../spack/lib/spack/docs/config_yaml.rst:24
msgid "``install_tree``"
msgstr ""

# d765be9a5da645ee933c0c05ce2d044b
#: ../spack/lib/spack/docs/config_yaml.rst:26
msgid ""
"The location where Spack will install packages and their dependencies. "
"Default is ``$spack/opt/spack``."
msgstr ""

# be0380766e90414bb905def3c2bdfb4c
#: ../spack/lib/spack/docs/config_yaml.rst:31
msgid "``install_hash_length`` and ``install_path_scheme``"
msgstr ""

# 2aaeb44551ad4993927fd4ebafa9207e
#: ../spack/lib/spack/docs/config_yaml.rst:33
msgid ""
"The default Spack installation path can be very long and can create problems "
"for scripts with hardcoded shebangs. There are two parameters to help with "
"that. Firstly, the ``install_hash_length`` parameter can set the length of "
"the hash in the installation path from 1 to 32. The default path uses the "
"full 32 characters."
msgstr ""

# c35ac3e741e746f59e0ce547f473d14c
#: ../spack/lib/spack/docs/config_yaml.rst:39
msgid ""
"Secondly, it is also possible to modify the entire installation scheme. By "
"default Spack uses ``{architecture}/{compiler.name}-{compiler.version}/"
"{name}-{version}-{hash}`` where the tokens that are available for use in "
"this directive are the same as those understood by the ``Spec.format`` "
"method. Using this parameter it is possible to use a different package "
"layout or reduce the depth of the installation paths. For example"
msgstr ""

# 174649cde422403e9474fba27be4f855
#: ../spack/lib/spack/docs/config_yaml.rst:53
msgid ""
"would install packages into sub-directories using only the package name, "
"version and a hash length of 7 characters."
msgstr ""

# 538ec7dfdf5047ea987a28d46fc6bdd8
#: ../spack/lib/spack/docs/config_yaml.rst:56
msgid ""
"When using either parameter to set the hash length it only affects the "
"representation of the hash in the installation directory. You should be "
"aware that the smaller the hash length the more likely naming conflicts will "
"occur. These parameters are independent of those used to configure module "
"names."
msgstr ""

# bf04ecf955f947d087cdb59048bd21e5
#: ../spack/lib/spack/docs/config_yaml.rst:62
msgid ""
"Modifying the installation hash length or path scheme after packages have "
"been installed will prevent Spack from being able to find the old "
"installation directories."
msgstr ""

# 7cfc5f0494714a489e78a1967f6a8962
#: ../spack/lib/spack/docs/config_yaml.rst:68
msgid "``module_roots``"
msgstr ""

# d5568eae483345c097afd15ce4ec9460
#: ../spack/lib/spack/docs/config_yaml.rst:70
msgid ""
"Controls where Spack installs generated module files.  You can customize the "
"location for each type of module.  e.g.:"
msgstr ""

# e0bff739a2f640f59d4b834675394f83
#: ../spack/lib/spack/docs/config_yaml.rst:80
msgid "See :ref:`modules` for details."
msgstr ""

# adb2124b3d4f47baa98050ff2edea655
#: ../spack/lib/spack/docs/config_yaml.rst:84
msgid "``build_stage``"
msgstr ""

# 690d4415eacf4ec08c3ad1c1976f43dc
#: ../spack/lib/spack/docs/config_yaml.rst:86
msgid ""
"Spack is designed to run out of a user home directory, and on many systems "
"the home directory is a (slow) network file system.  On most systems, "
"building in a temporary file system results in faster builds than building "
"in the home directory.  Usually, there is also more space available in the "
"temporary location than in the home directory. So, Spack tries to create "
"build stages in temporary space."
msgstr ""

# db1d21311d6d44ee8c02a1e370e555b9
#: ../spack/lib/spack/docs/config_yaml.rst:93
msgid "By default, Spack's ``build_stage`` is configured like this:"
msgstr ""

# f218ec5ca796425d9362b996279377da
#: ../spack/lib/spack/docs/config_yaml.rst:101
msgid ""
"This is an ordered list of paths that Spack should search when trying to "
"find a temporary directory for the build stage.  The list is searched in "
"order, and Spack will use the first directory to which it has write access. "
"See :ref:`config-file-variables` for more on ``$tempdir`` and ``$spack``."
msgstr ""

# 23843975b1034d51b7f094d504d2f7c0
#: ../spack/lib/spack/docs/config_yaml.rst:106
msgid ""
"When Spack builds a package, it creates a temporary directory within the "
"``build_stage``, and it creates a symbolic link to that directory in ``"
"$spack/var/spack/stage``. This is used to track the temporary directory.  "
"After the package is successfully installed, Spack deletes the temporary "
"directory it used to build.  Unsuccessful builds are not deleted, but you "
"can manually purge them with :ref:`spack clean --stage <cmd-spack-clean>`."
msgstr ""

# ee944deddd9648efb29920dadcfef2d3
#: ../spack/lib/spack/docs/config_yaml.rst:116
msgid ""
"The last item in the list is ``$spack/var/spack/stage``.  If this is the "
"only writable directory in the ``build_stage`` list, Spack will build "
"*directly* in ``$spack/var/spack/stage`` and will not link to temporary "
"space."
msgstr ""

# 1241051bb51a4b8a89cf3b10218055d5
#: ../spack/lib/spack/docs/config_yaml.rst:123
msgid "``source_cache``"
msgstr ""

# 559ad87d56804be1a6c66e0716758e16
#: ../spack/lib/spack/docs/config_yaml.rst:125
msgid ""
"Location to cache downloaded tarballs and repositories.  By default these "
"are stored in ``$spack/var/spack/cache``.  These are stored indefinitely by "
"default. Can be purged with :ref:`spack clean --downloads <cmd-spack-clean>`."
msgstr ""

# 563e890e51804dfb9c3059fb2557b6ff
#: ../spack/lib/spack/docs/config_yaml.rst:132
msgid "``misc_cache``"
msgstr ""

# a0e1f16a414846b88bcd0a49e2f760a4
#: ../spack/lib/spack/docs/config_yaml.rst:134
msgid ""
"Temporary directory to store long-lived cache files, such as indices of "
"packages available in repositories.  Defaults to ``~/.spack/cache``.  Can be "
"purged with :ref:`spack clean --misc-cache <cmd-spack-clean>`."
msgstr ""

# c197050089084d5aa20f84f12525ac38
#: ../spack/lib/spack/docs/config_yaml.rst:140
msgid "``verify_ssl``"
msgstr ""

# 5de4c6a03d63459e85b86d10e4a1694e
#: ../spack/lib/spack/docs/config_yaml.rst:142
msgid ""
"When set to ``true`` (default) Spack will verify certificates of remote "
"hosts when making ``ssl`` connections.  Set to ``false`` to disable, and "
"tools like ``curl`` will use their ``--insecure`` options.  Disabling this "
"can expose you to attacks.  Use at your own risk."
msgstr ""

# 16bb318ccaf84ae6b9b167ac7ea48968
#: ../spack/lib/spack/docs/config_yaml.rst:149
msgid "``checksum``"
msgstr ""

# 9f39c1a8bc56462da4210d8804d4e8d6
#: ../spack/lib/spack/docs/config_yaml.rst:151
msgid ""
"When set to ``true``, Spack verifies downloaded source code using a "
"checksum, and will refuse to build packages that it cannot verify.  Set to "
"``false`` to disable these checks.  Disabling this can expose you to "
"attacks.  Use at your own risk."
msgstr ""

# 935e9513e68e4baea49cee7c7fef8af4
#: ../spack/lib/spack/docs/config_yaml.rst:158
msgid "``locks``"
msgstr ""

# 96a8d2d3f7cd4e78b2cb91f6feef9c4b
#: ../spack/lib/spack/docs/config_yaml.rst:160
msgid ""
"When set to ``true``, concurrent instances of Spack will use locks to avoid "
"modifying the install tree, database file, etc. If false, Spack will disable "
"all locking, but you must **not** run concurrent instances of Spack.  For "
"file systems that don't support locking, you should set this to ``false`` "
"and run one Spack at a time, but otherwise we recommend enabling locks."
msgstr ""

# d27b4c39c1a44480a2c1a76d7367e354
#: ../spack/lib/spack/docs/config_yaml.rst:169
msgid "``dirty``"
msgstr ""

# 39cc2ff74ab64c79a14230ccf26aed08
#: ../spack/lib/spack/docs/config_yaml.rst:171
msgid ""
"By default, Spack unsets variables in your environment that can change the "
"way packages build. This includes ``LD_LIBRARY_PATH``, ``CPATH``, "
"``LIBRARY_PATH``, ``DYLD_LIBRARY_PATH``, and others."
msgstr ""

# 2e7e58e58c954e6ea2812abf91d794c2
#: ../spack/lib/spack/docs/config_yaml.rst:175
msgid ""
"By default, builds are ``clean``, but on some machines, compilers and other "
"tools may need custom ``LD_LIBRARY_PATH`` settings to run.  You can set "
"``dirty`` to ``true`` to skip the cleaning step and make all builds \"dirty"
"\" by default.  Be aware that this will reduce the reproducibility of builds."
msgstr ""

# 9dbbd1c2f973498a852e676ec4a48ec6
#: ../spack/lib/spack/docs/config_yaml.rst:183
msgid "``build_jobs``"
msgstr ""

# 1d5e199922dd4ad0b20f4772dd5b79c7
#: ../spack/lib/spack/docs/config_yaml.rst:185
msgid ""
"Unless overridden in a package or on the command line, Spack builds all "
"packages in parallel. For a build system that uses Makefiles, this means "
"running ``make -j<build_jobs>``, where ``build_jobs`` is the number of "
"threads to use."
msgstr ""

# 236cc588de21464281923c044a1fc352
#: ../spack/lib/spack/docs/config_yaml.rst:190
msgid ""
"The default parallelism is equal to the number of cores on your machine. If "
"you work on a shared login node or have a strict ulimit, it may be necessary "
"to set the default to a lower value. By setting ``build_jobs`` to 4, for "
"example, commands like ``spack install`` will run ``make -j4`` instead of "
"hogging every core."
msgstr ""

# 383a09aae5114f158a52f5dc70b82398
#: ../spack/lib/spack/docs/config_yaml.rst:196
msgid "To build all software in serial, set ``build_jobs`` to 1."
msgstr ""

# 332b3bfd953e4e23a070baeada698294
#: ../spack/lib/spack/docs/config_yaml.rst:200
msgid "``ccache``"
msgstr ""

# e598f8b243414e43a565f32b69e8c6cb
#: ../spack/lib/spack/docs/config_yaml.rst:202
msgid ""
"When set to ``true`` Spack will use ccache to cache compiles. This is useful "
"specifically in two cases: (1) when using ``spack setup``, and (2) when "
"building the same package with many different variants. The default is "
"``false``."
msgstr ""

# cf71344ddb5a43d88bfc253b30aae9ef
#: ../spack/lib/spack/docs/config_yaml.rst:207
msgid ""
"When enabled, Spack will look inside your ``PATH`` for a ``ccache`` "
"executable and stop if it is not found. Some systems come with ``ccache``, "
"but it can also be installed using ``spack install ccache``. ``ccache`` "
"comes with reasonable defaults for cache size and location. (See the "
"*Configuration settings* section of ``man ccache`` to learn more about the "
"default settings and how to change them). Please note that we currently "
"disable ccache's ``hash_dir`` feature to avoid an issue with the stage "
"directory (see https://github.com/LLNL/spack/"
"pull/3761#issuecomment-294352232)."
msgstr ""

# cd3b01fdb54c49d5907f5cfd0fdb4303
#: ../spack/lib/spack/docs/configuration.rst:10
msgid "Configuration Files"
msgstr "設定ファイル"

# 64428c64a6cf452a8a784d52c9498864
#: ../spack/lib/spack/docs/configuration.rst:12
msgid ""
"Spack has many configuration files.  Here is a quick list of them, in case "
"you want to skip directly to specific docs:"
msgstr ""

# 5e30b6f7aa234fb8934ead54975dcfdb
#: ../spack/lib/spack/docs/configuration.rst:15
msgid ":ref:`compilers.yaml <compiler-config>`"
msgstr ""

# f88e5248bb7543359dc23e937d36986c
#: ../spack/lib/spack/docs/configuration.rst:16
msgid ":ref:`config.yaml <config-yaml>`"
msgstr ""

# 822780fb39874537a12ba4ff08498b11
#: ../spack/lib/spack/docs/configuration.rst:17
msgid ":ref:`mirrors.yaml <mirrors>`"
msgstr ""

# d0ea3381fe324a4a911eae942fcabef7
#: ../spack/lib/spack/docs/configuration.rst:18
msgid ":ref:`modules.yaml <modules>`"
msgstr ""

# dcd9eb27666c4b49be065e50d6f71c64
#: ../spack/lib/spack/docs/configuration.rst:19
msgid ":ref:`packages.yaml <build-settings>`"
msgstr ""

# a401ce605bb141e1a83e5113e4b415f6
#: ../spack/lib/spack/docs/configuration.rst:20
msgid ":ref:`repos.yaml <repositories>`"
msgstr ""

# #-#-#-#-#  configuration.pot (Spack 0.12)  #-#-#-#-#
# d582c1ece0d444faa924be61a9e855f4
# #-#-#-#-#  tutorial_configuration.pot (Spack 0.12)  #-#-#-#-#
# 3fbdbe3a97c64b67b580b5e4782e53a7
#: ../spack/lib/spack/docs/configuration.rst:24
#: ../spack/lib/spack/docs/tutorial_configuration.rst:102
msgid "YAML Format"
msgstr ""

# a098dc35e83643ff917efc8f5071ca94
#: ../spack/lib/spack/docs/configuration.rst:26
msgid ""
"Spack configuration files are written in YAML.  We chose YAML because it's "
"human readable, but also versatile in that it supports dictionaries, lists, "
"and nested sections. For more details on the format, see `yaml.org <http://"
"yaml.org>`_ and `libyaml <http://pyyaml.org/wiki/LibYAML>`_. Here is an "
"example ``config.yaml`` file:"
msgstr ""

# d8efd82098b2442aa93f007b21e3dc97
#: ../spack/lib/spack/docs/configuration.rst:42
msgid ""
"Each Spack configuration file is nested under a top-level section "
"corresponding to its name. So, ``config.yaml`` starts with ``config:``, "
"``mirrors.yaml`` starts with ``mirrors:``, etc."
msgstr ""

# #-#-#-#-#  configuration.pot (Spack 0.12)  #-#-#-#-#
# 087bcf2965444c55ab15f9ebbb1eb65f
# #-#-#-#-#  tutorial_configuration.pot (Spack 0.12)  #-#-#-#-#
# 98301a776e7a4e7a8345a81cbc969c55
#: ../spack/lib/spack/docs/configuration.rst:50
#: ../spack/lib/spack/docs/tutorial_configuration.rst:34
msgid "Configuration Scopes"
msgstr ""

# efaf7f67fb024649b08bc5edba8518bd
#: ../spack/lib/spack/docs/configuration.rst:52
msgid ""
"Spack pulls configuration data from files in several directories. There are "
"six configuration scopes. From lowest to highest:"
msgstr ""

# 99800a1d57f3451587e6d401328a5605
#: ../spack/lib/spack/docs/configuration.rst:55
msgid ""
"**defaults**: Stored in ``$(prefix)/etc/spack/defaults/``. These are the "
"\"factory\" settings. Users should generally not modify the settings here, "
"but should override them in other configuration scopes. The defaults here "
"will change from version to version of Spack."
msgstr ""

# e344d2b6be4e47c28e096d0665331860
#: ../spack/lib/spack/docs/configuration.rst:60
msgid ""
"**system**: Stored in ``/etc/spack/``. These are settings for this machine, "
"or for all machines on which this file system is mounted. The site scope can "
"be used for settings idiosyncratic to a particular machine, such as the "
"locations of compilers or external packages. These settings are presumably "
"controlled by someone with root access on the machine. They override the "
"defaults scope."
msgstr ""

# e43ea887810b4250942deb50506fe93c
#: ../spack/lib/spack/docs/configuration.rst:67
msgid ""
"**site**: Stored in ``$(prefix)/etc/spack/``. Settings here affect only "
"*this instance* of Spack, and they override the defaults and system scopes.  "
"The site scope can can be used for per-project settings (one Spack instance "
"per project) or for site-wide settings on a multi-user machine (e.g., for a "
"common Spack instance)."
msgstr ""

# ca51e8668888456ab50afc0f97cff0e0
#: ../spack/lib/spack/docs/configuration.rst:73
msgid ""
"**user**: Stored in the home directory: ``~/.spack/``. These settings affect "
"all instances of Spack and take higher precedence than site, system, or "
"defaults scopes."
msgstr ""

# bd4a9195704346318b60c2156e177bea
#: ../spack/lib/spack/docs/configuration.rst:77
msgid ""
"**custom**: Stored in a custom directory specified by ``--config-scope``. If "
"multiple scopes are listed on the command line, they are ordered from lowest "
"to highest precedence."
msgstr ""

# 2e9c029577024d5c8ee4dbfed50287f1
#: ../spack/lib/spack/docs/configuration.rst:81
msgid ""
"**command line**: Build settings specified on the command line take "
"precedence over all other scopes."
msgstr ""

# f990f6579a214461ad0ef3bb26dc1de3
#: ../spack/lib/spack/docs/configuration.rst:84
msgid ""
"Each configuration directory may contain several configuration files, such "
"as ``config.yaml``, ``compilers.yaml``, or ``mirrors.yaml``.  When "
"configurations conflict, settings from higher-precedence scopes override "
"lower-precedence settings."
msgstr ""

# 0765c8e1c7e3424abdd70680bb206080
#: ../spack/lib/spack/docs/configuration.rst:89
msgid ""
"Commands that modify scopes (e.g., ``spack compilers``, ``spack repo``, "
"etc.) take a ``--scope=<name>`` parameter that you can use to control which "
"scope is modified.  By default, they modify the highest-precedence scope."
msgstr ""

# 19004427dc384b74825aec9c1a1b4095
#: ../spack/lib/spack/docs/configuration.rst:98
msgid "Custom scopes"
msgstr ""

# ce545540c89046aa9adc3afbc3bcdcb3
#: ../spack/lib/spack/docs/configuration.rst:100
msgid ""
"In addition to the ``defaults``, ``system``, ``site``, and ``user`` scopes, "
"you may add configuration scopes directly on the command line with the ``--"
"config-scope`` argument, or ``-C`` for short."
msgstr ""

# 8f04e5179fa44f35b8fb68884ca3a5a6
#: ../spack/lib/spack/docs/configuration.rst:104
msgid ""
"For example, the following adds two configuration scopes, named ``scopea`` "
"and ``scopeb``, to a ``spack spec`` command:"
msgstr ""

# 90b9d327d6a3415cb03384a7579dcb1a
#: ../spack/lib/spack/docs/configuration.rst:111
msgid ""
"Custom scopes come *after* the ``spack`` command and *before* the "
"subcommand, and they specify a single path to a directory full of "
"configuration files. You can add the same configuration files to that "
"directory that you can add to any other scope (``config.yaml``, ``packages."
"yaml``, etc.)."
msgstr ""

# 474b73406bd7440f98b9500f27d68203
#: ../spack/lib/spack/docs/configuration.rst:117
msgid "If multiple scopes are provided:"
msgstr ""

# de06873ee7ce47af866333127366224f
#: ../spack/lib/spack/docs/configuration.rst:119
msgid "Each must be preceded with the ``--config-scope`` or ``-C`` flag."
msgstr ""

# 34b155b59d7b420b8eb26b5d4d06c7e9
#: ../spack/lib/spack/docs/configuration.rst:120
msgid "They must be ordered from lowest to highest precedence."
msgstr ""

# 07ffb58b278f4a0d8e098567cc74410b
#: ../spack/lib/spack/docs/configuration.rst:124
msgid "Example: scopes for release and development"
msgstr ""

# 0b0ddee996274205b27e80d26eb9d002
#: ../spack/lib/spack/docs/configuration.rst:126
msgid ""
"Suppose that you need to support simultaneous building of release and "
"development versions of ``mypackage``, where ``mypackage`` -> ``A`` -> "
"``B``. You could create The following files:"
msgstr ""

# c802b5f7225b459da7b112005b84e5db
#: ../spack/lib/spack/docs/configuration.rst:130
msgid "~/myscopes/release/packages.yaml"
msgstr ""

# 32f4c5f21d5f4e6683e1f02ef0f20002
#: ../spack/lib/spack/docs/configuration.rst:141
msgid "~/myscopes/develop/packages.yaml"
msgstr ""

# 919c126e31bc4e77932b7ff86addb080
#: ../spack/lib/spack/docs/configuration.rst:152
msgid ""
"You can switch between ``release`` and ``develop`` configurations using "
"configuration arguments.  You would type ``spack -C ~/myscopes/release`` "
"when you want to build the designated release versions of ``mypackage``, "
"``A``, and ``B``, and you would type ``spack -C ~/myscopes/develop`` when "
"you want to build all of these packages at the ``develop`` version."
msgstr ""

# 7318870cf1404a2badb21a9636b5a652
#: ../spack/lib/spack/docs/configuration.rst:160
msgid "Example: swapping MPI providers"
msgstr ""

# 8bef11302c8d4d279c3fea24432705d4
#: ../spack/lib/spack/docs/configuration.rst:162
msgid ""
"Suppose that you need to build two software packages, ``packagea`` and "
"``packageb``. ``packagea`` is Python 2-based and ``packageb`` is Python 3-"
"based. ``packagea`` only builds with OpenMPI and ``packageb`` only builds "
"with MPICH. You can create different configuration scopes for use with "
"``packagea`` and ``packageb``:"
msgstr ""

# cbca8f1ceb2b4c75885b0b49a261ffad
#: ../spack/lib/spack/docs/configuration.rst:168
msgid "~/myscopes/packgea/packages.yaml"
msgstr ""

# 58c4fb97686c447d9982c425b03fa408
#: ../spack/lib/spack/docs/configuration.rst:178
msgid "~/myscopes/packageb/packages.yaml"
msgstr ""

# #-#-#-#-#  configuration.pot (Spack 0.12)  #-#-#-#-#
# 442d8b302723471cb823e97ebef61021
# #-#-#-#-#  tutorial_configuration.pot (Spack 0.12)  #-#-#-#-#
# bc5463e6337b4088b94601ed9ba66632
#: ../spack/lib/spack/docs/configuration.rst:193
#: ../spack/lib/spack/docs/tutorial_configuration.rst:80
msgid "Platform-specific Scopes"
msgstr ""

# 58481cffd8a54051b9da71974eefa32a
#: ../spack/lib/spack/docs/configuration.rst:195
msgid ""
"For each scope above, there can also be platform-specific settings. For "
"example, on most platforms, GCC is the preferred compiler. However, on macOS "
"(darwin), Clang often works for more packages, and is set as the default "
"compiler. This configuration is set in ``$(prefix)/etc/spack/defaults/darwin/"
"packages.yaml``. It will take precedence over settings in the ``defaults`` "
"scope, but can still be overridden by settings in ``system``, ``system/"
"darwin``, ``site``, ``site/darwin``, ``user``, ``user/darwin``, ``custom``, "
"or ``custom/darwin``. So, the full scope precedence is:"
msgstr ""

# 0387e027a5e146928f4386c534e8095a
#: ../spack/lib/spack/docs/configuration.rst:205
msgid "``defaults``"
msgstr ""

# dccd6a34a68f4c59a31221d0cdd1f235
#: ../spack/lib/spack/docs/configuration.rst:206
msgid "``defaults/<platform>``"
msgstr ""

# 575ea5917be04fe9b5b389eba8ba3891
#: ../spack/lib/spack/docs/configuration.rst:207
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config:9
msgid "``system``"
msgstr ""

# 8b86947cdc9f431c9d6b7f395a1569f2
#: ../spack/lib/spack/docs/configuration.rst:208
msgid "``system/<platform>``"
msgstr ""

# 9906cd8ce4cb4fe9bddd819207ade2b2
#: ../spack/lib/spack/docs/configuration.rst:209
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config:10
msgid "``site``"
msgstr ""

# b29c63cf4ab244a396f2f1fb7cb5293e
#: ../spack/lib/spack/docs/configuration.rst:210
msgid "``site/<platform>``"
msgstr ""

# 2c12b897105b467eb17f6e6d2c9ca71c
#: ../spack/lib/spack/docs/configuration.rst:211
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config:11
msgid "``user``"
msgstr ""

# 822c71ff2b4048fba192082e260e4015
#: ../spack/lib/spack/docs/configuration.rst:212
msgid "``user/<platform>``"
msgstr ""

# 7a8d905a13f64493a55bd53573a9636e
#: ../spack/lib/spack/docs/configuration.rst:213
msgid "``custom``"
msgstr ""

# 13733220d4c9430c9330239d34da9abd
#: ../spack/lib/spack/docs/configuration.rst:214
msgid "``custom/<platform>``"
msgstr ""

# 3298a8ca501c4ee4b4b90771358386dc
#: ../spack/lib/spack/docs/configuration.rst:216
msgid ""
"You can get the name to use for ``<platform>`` by running ``spack arch --"
"platform``. The system config scope has a ``<platform>`` section for sites "
"at which ``/etc`` is mounted on multiple heterogeneous machines."
msgstr ""

# 2013d7abb40e4c7693f780768b30d842
#: ../spack/lib/spack/docs/configuration.rst:222
msgid "Scope Precedence"
msgstr ""

# cec8c9651d6f46febdb214b87e4695a1
#: ../spack/lib/spack/docs/configuration.rst:224
msgid ""
"When spack queries for configuration parameters, it searches in higher-"
"precedence scopes first. So, settings in a higher-precedence file can "
"override those with the same key in a lower-precedence one. For list-valued "
"settings, Spack *prepends* higher-precedence settings to lower-precedence "
"settings. Completely ignoring higher-level configuration options is "
"supported with the ``::`` notation for keys (see :ref:`config-overrides` "
"below)."
msgstr ""

# 384a0577ef9249879847915180b009af
#: ../spack/lib/spack/docs/configuration.rst:234
msgid "Simple keys"
msgstr ""

# 0b63774d5eb44e14bbeab8520f425ab9
#: ../spack/lib/spack/docs/configuration.rst:236
msgid ""
"Let's look at an example of overriding a single key in a Spack file. If your "
"configurations look like this:"
msgstr ""

# 010f54e82eb9429a95233db2d9728cb0
# 88a4732c746b4df0b9e6df2e34f226bb
#: ../spack/lib/spack/docs/configuration.rst:239
#: ../spack/lib/spack/docs/configuration.rst:311
msgid "$(prefix)/etc/spack/defaults/config.yaml"
msgstr ""

# d5f0e8bb2f024024b8f92b17bbc539da
# a597a1f3c858420a82640331ac5fe0ae
# 361a3722e5664177a323a3d8be928f60
# d3fd2cf9e06b452eac3a0f83c116e4b0
#: ../spack/lib/spack/docs/configuration.rst:251
#: ../spack/lib/spack/docs/configuration.rst:287
#: ../spack/lib/spack/docs/configuration.rst:322
#: ../spack/lib/spack/docs/configuration.rst:354
msgid "~/.spack/config.yaml"
msgstr ""

# 8fdbe24d3dd949c881522babaee3fc01
#: ../spack/lib/spack/docs/configuration.rst:258
msgid ""
"Spack will only override ``install_tree`` in the ``config`` section, and "
"will take the site preferences for other settings. You can see the final, "
"combined configuration with the ``spack config get <configtype>`` command:"
msgstr ""

# a48b405877d74ed3b8b8a1da2d001136
#: ../spack/lib/spack/docs/configuration.rst:280
msgid "Overriding entire sections"
msgstr ""

# 64149c020fb346c681750cf8d065d5a7
#: ../spack/lib/spack/docs/configuration.rst:282
msgid ""
"Above, the user ``config.yaml`` only overrides specific settings in the "
"default ``config.yaml``. Sometimes, it is useful to *completely* override "
"lower-precedence settings. To do this, you can use *two* colons at the end "
"of a key in a configuration file. For example:"
msgstr ""

# 4d22b15b63ed4c1f8824a8914ef905d1
#: ../spack/lib/spack/docs/configuration.rst:294
msgid ""
"Spack will ignore all lower-precedence configuration under the ``config::`` "
"section:"
msgstr ""

# fca75459eff044da9b99cd1d731f7c17
#: ../spack/lib/spack/docs/configuration.rst:306
msgid "List-valued settings"
msgstr ""

# 3ad90513badf49fa876dbfbf7678f73b
#: ../spack/lib/spack/docs/configuration.rst:308
msgid ""
"Let's revisit the ``config.yaml`` example one more time. The ``build_stage`` "
"setting's value is an ordered list of directories:"
msgstr ""

# b278aa881c8f4846a70d837dc360cb44
#: ../spack/lib/spack/docs/configuration.rst:319
msgid ""
"Suppose the user configuration adds its *own* list of ``build_stage`` paths:"
msgstr ""

# b9f850f27ec84317b85fd6da681fa944
#: ../spack/lib/spack/docs/configuration.rst:330
msgid ""
"Spack will first look at the paths in the defaults ``config.yaml``, then the "
"paths in the user's ``~/.spack/config.yaml``. The list in the higher-"
"precedence scope is *prepended* to the defaults. ``spack config get config`` "
"shows the result:"
msgstr ""

# 34f4a7cd60bf4f3a819a8cd01b6af078
#: ../spack/lib/spack/docs/configuration.rst:350
msgid ""
"As in :ref:`config-overrides`, the higher-precedence scope can *completely* "
"override the lower-precedence scope using ``::``. So if the user config "
"looked like this:"
msgstr ""

# 6c6e61ad4de5433488b0897697cb1519
#: ../spack/lib/spack/docs/configuration.rst:363
msgid "The merged configuration would look like this:"
msgstr ""

# 60c23146c2474cec9bb5cb22beedb3a5
#: ../spack/lib/spack/docs/configuration.rst:382
msgid "Config File Variables"
msgstr ""

# 0e9e601e6d444fa6a46061a110ab2a8b
#: ../spack/lib/spack/docs/configuration.rst:384
msgid ""
"Spack understands several variables which can be used in config file paths "
"wherever they appear. There are three sets of these variables: Spack-"
"specific variables, environment variables, and user path variables. Spack-"
"specific variables and environment variables are both indicated by prefixing "
"the variable name with ``$``. User path variables are indicated at the start "
"of the path with ``~`` or ``~user``."
msgstr ""

# 1b5d25631aec461e87c8f8915d49cbfd
#: ../spack/lib/spack/docs/configuration.rst:393
msgid "Spack-specific variables"
msgstr ""

# 76c01af1c2b046ca9933f42f042ad0b9
#: ../spack/lib/spack/docs/configuration.rst:395
msgid "Spack understands several special variables. These are:"
msgstr ""

# 912344ba13cd4b8c8660b620b26df7c1
#: ../spack/lib/spack/docs/configuration.rst:397
msgid "``$spack``: path to the prefix of this Spack installation"
msgstr ""

# c77eb2a327604174b568700bf19ec7fe
#: ../spack/lib/spack/docs/configuration.rst:398
msgid ""
"``$tempdir``: default system temporary directory (as specified in Python's "
"`tempfile.tempdir <https://docs.python.org/2/library/tempfile.html#tempfile."
"tempdir>`_ variable."
msgstr ""

# d64d20c8102a4250b2693c7575134c9f
#: ../spack/lib/spack/docs/configuration.rst:402
msgid "``$user``: name of the current user"
msgstr ""

# a305cff0683343478c7ab07a42f9c183
#: ../spack/lib/spack/docs/configuration.rst:404
msgid ""
"Note that, as with shell variables, you can write these as ``$varname`` or "
"with braces to distinguish the variable from surrounding characters: ``"
"${varname}``. Their names are also case insensitive, meaning that ``$SPACK`` "
"works just as well as ``$spack``. These special variables are substituted "
"first, so any environment variables with the same name will not be used."
msgstr ""

# 3aab52c77f274efc849505b34b82b267
#: ../spack/lib/spack/docs/configuration.rst:415
msgid ""
"After Spack-specific variables are evaluated, environment variables are "
"expanded. These are formatted like Spack-specific variables, e.g., ``"
"${varname}``. You can use this to insert environment variables in your Spack "
"configuration."
msgstr ""

# 5a5671a68cff473285091a5b50c05c28
#: ../spack/lib/spack/docs/configuration.rst:422
msgid "User home directories"
msgstr ""

# a0616b035a6c4808912fe520eea07a1d
#: ../spack/lib/spack/docs/configuration.rst:424
msgid ""
"Spack performs Unix-style tilde expansion on paths in configuration files. "
"This means that tilde (``~``) will expand to the current user's home "
"directory, and ``~user`` will expand to a specified user's home directory. "
"The ``~`` must appear at the beginning of the path, or Spack will not expand "
"it."
msgstr ""

# 1b8756e1472c41f29ce4f6c6a8b2aa4f
#: ../spack/lib/spack/docs/configuration.rst:432
msgid "Seeing Spack's Configuration"
msgstr ""

# 28b66c376eb343619eff24b9ae677f66
#: ../spack/lib/spack/docs/configuration.rst:434
msgid ""
"With so many scopes overriding each other, it can sometimes be difficult to "
"understand what Spack's final configuration looks like."
msgstr ""

# 7fc0549cd0e74b6e8017c7fd4dae710b
#: ../spack/lib/spack/docs/configuration.rst:437
msgid ""
"Spack provides two useful ways to view the final \"merged\" version of any "
"configuration file: ``spack config get`` and ``spack config blame``."
msgstr ""

# d9d85377bcaf484a8494a484d0a51e9e
#: ../spack/lib/spack/docs/configuration.rst:444
msgid "``spack config get``"
msgstr ""

# b6e1b68cfb674cbc98ad0047185a3858
#: ../spack/lib/spack/docs/configuration.rst:446
msgid ""
"``spack config get`` shows a fully merged configuration file, taking into "
"account all scopes. For example, to see the fully merged ``config.yaml``, "
"you can type:"
msgstr ""

# aaa934eebd804ff2aeaf8797fd1d6344
#: ../spack/lib/spack/docs/configuration.rst:475
msgid "Likewise, this will show the fully merged ``packages.yaml``:"
msgstr ""

# 04fe0e11b03c45dcaeebd18b79e407fd
#: ../spack/lib/spack/docs/configuration.rst:481
msgid ""
"You can use this in conjunction with the ``-C`` / ``--config-scope`` "
"argument to see how your scope will affect Spack's configuration:"
msgstr ""

# d3d616c2802346e5a5ddc98d83dd2668
#: ../spack/lib/spack/docs/configuration.rst:493
msgid "``spack config blame``"
msgstr ""

# d69892410fa048ff9d48288045149eec
#: ../spack/lib/spack/docs/configuration.rst:495
msgid ""
"``spack config blame`` functions much like ``spack config get``, but it "
"shows exactly which configuration file each preference came from. If you do "
"not know why Spack is behaving a certain way, this can help you track down "
"the problem:"
msgstr ""

# 6a480e76381342f0832d5ab268f0f73a
#: ../spack/lib/spack/docs/configuration.rst:526
msgid ""
"You can see above that the ``build_jobs`` and ``debug`` settings are built "
"in and are not overridden by a configuration file. The ``verify_ssl`` "
"setting comes from the ``--insceure`` option on the command line. ``dirty`` "
"and ``install_tree`` come from the custom scopes ``./my-scope`` and ``./my-"
"scope-2``, and all other configuration options come from the default "
"configuration files that ship with Spack."
msgstr ""

# 0ee13eb2e81f4e8a95b50cc6fd462206
#: ../spack/lib/spack/docs/contribution_guide.rst:10
msgid "Contribution Guide"
msgstr ""

# 79dee1b0a5bf4978a2f77454f793fae1
#: ../spack/lib/spack/docs/contribution_guide.rst:12
msgid ""
"This guide is intended for developers or administrators who want to "
"contribute a new package, feature, or bugfix to Spack. It assumes that you "
"have at least some familiarity with Git VCS and Github. The guide will show "
"a few examples of contributing workflows and discuss the granularity of pull-"
"requests (PRs). It will also discuss the tests your PR must pass in order to "
"be accepted into Spack."
msgstr ""

# 1ee09274139c4b8786693e496ed4ea4d
#: ../spack/lib/spack/docs/contribution_guide.rst:19
msgid ""
"First, what is a PR? Quoting `Bitbucket's tutorials <https://www.atlassian."
"com/git/tutorials/making-a-pull-request/>`_:"
msgstr ""

# 9291060a7d4f4fc3ba3b9aa0116ddb82
#: ../spack/lib/spack/docs/contribution_guide.rst:21
msgid ""
"Pull requests are a mechanism for a developer to notify team members that "
"they have **completed a feature**. The pull request is more than just a "
"notification—it’s a dedicated forum for discussing the proposed feature."
msgstr ""

# 56cf33ed5ff24f96aa610c48a0ea0ce1
#: ../spack/lib/spack/docs/contribution_guide.rst:25
msgid ""
"Important is **completed feature**. The changes one proposes in a PR should "
"correspond to one feature/bugfix/extension/etc. One can create PRs with "
"changes relevant to different ideas, however reviewing such PRs becomes "
"tedious and error prone. If possible, try to follow the **one-PR-one-package/"
"feature** rule."
msgstr ""

# fb7afa26c6b840bf82da756d59698f66
#: ../spack/lib/spack/docs/contribution_guide.rst:30
msgid ""
"Spack uses a rough approximation of the `Git Flow <http://nvie.com/posts/a-"
"successful-git-branching-model/>`_ branching model. The develop branch "
"contains the latest contributions, and master is always tagged and points to "
"the latest stable release. Therefore, when you send your request, make "
"``develop`` the destination branch on the `Spack repository <https://github."
"com/spack/spack>`_."
msgstr ""

# c63714e44af84c5fb9997565c9d9806d
#: ../spack/lib/spack/docs/contribution_guide.rst:38
msgid "Continuous Integration"
msgstr ""

# 32f0fc1bb5014001ac4fb5e344aa0e8f
#: ../spack/lib/spack/docs/contribution_guide.rst:40
msgid ""
"Spack uses `Travis CI <https://travis-ci.org/spack/spack>`_ for Continuous "
"Integration testing. This means that every time you submit a pull request, a "
"series of tests will be run to make sure you didn't accidentally introduce "
"any bugs into Spack. **Your PR will not be accepted until it passes all of "
"these tests.** While you can certainly wait for the results of these tests "
"after submitting a PR, we recommend that you run them locally to speed up "
"the review process."
msgstr ""

# 7fdc268a20764ec48d8c772cb46cf2a3
#: ../spack/lib/spack/docs/contribution_guide.rst:49
msgid ""
"Oftentimes, Travis will fail for reasons other than a problem with your PR. "
"For example, apt-get, pip, or homebrew will fail to download one of the "
"dependencies for the test suite, or a transient bug will cause the unit "
"tests to timeout. If Travis fails, click the \"Details\" link and click on "
"the test(s) that is failing. If it doesn't look like it is failing for "
"reasons related to your PR, you have two options. If you have write "
"permissions for the Spack repository, you should see a \"Restart job\" "
"button on the right-hand side. If not, you can close and reopen your PR to "
"rerun all of the tests. If the same test keeps failing, there may be a "
"problem with your PR. If you notice that every recent PR is failing with the "
"same error message, it may be that Travis is down or one of Spack's "
"dependencies put out a new release that is causing problems. If this is the "
"case, please file an issue."
msgstr ""

# 015e1b92565a483383703d688508ccca
#: ../spack/lib/spack/docs/contribution_guide.rst:63
msgid ""
"If you take a look in ``$SPACK_ROOT/.travis.yml``, you'll notice that we "
"test against Python 2.6, 2.7, and 3.4-3.7 on both macOS and Linux. We "
"currently perform 3 types of tests:"
msgstr ""

# 5e426b9a445143da8e15ff2f323c6351
#: ../spack/lib/spack/docs/contribution_guide.rst:69
msgid "Unit Tests"
msgstr ""

# ef8841e6f4d54fdb8a145d6b9265c93e
#: ../spack/lib/spack/docs/contribution_guide.rst:71
msgid ""
"Unit tests ensure that core Spack features like fetching or spec resolution "
"are working as expected. If your PR only adds new packages or modifies "
"existing ones, there's very little chance that your changes could cause the "
"unit tests to fail. However, if you make changes to Spack's core libraries, "
"you should run the unit tests to make sure you didn't break anything."
msgstr ""

# 9ba1025f2d964952b6f86e20c7ebfc24
#: ../spack/lib/spack/docs/contribution_guide.rst:77
msgid ""
"Since they test things like fetching from VCS repos, the unit tests require "
"`git <https://git-scm.com/>`_, `mercurial <https://www.mercurial-scm.org/"
">`_, and `subversion <https://subversion.apache.org/>`_ to run. Make sure "
"these are installed on your system and can be found in your ``PATH``. All of "
"these can be installed with Spack or with your system package manager."
msgstr ""

# e3aed341a6c7433ca5759b1be4023401
#: ../spack/lib/spack/docs/contribution_guide.rst:83
msgid "To run *all* of the unit tests, use:"
msgstr ""

# 522318eba1f142749b40fbc01df38e19
#: ../spack/lib/spack/docs/contribution_guide.rst:89
msgid ""
"These tests may take several minutes to complete. If you know you are only "
"modifying a single Spack feature, you can run a single unit test at a time:"
msgstr ""

# 0e536b0806b74321a1cc8da288753262
#: ../spack/lib/spack/docs/contribution_guide.rst:96
msgid ""
"This allows you to develop iteratively: make a change, test that change, "
"make another change, test that change, etc. To get a list of all available "
"unit tests, run:"
msgstr ""

# 3e2614253db340e28858c9e075b501dc
#: ../spack/lib/spack/docs/contribution_guide.rst:102
msgid ""
"A more detailed list of available unit tests can be found by running ``spack "
"test --long-list``."
msgstr ""

# 9fae01743d9741eeaec89b2ab1494b6b
#: ../spack/lib/spack/docs/contribution_guide.rst:105
msgid ""
"By default, ``pytest`` captures the output of all unit tests. If you add "
"print statements to a unit test and want to see the output, simply run:"
msgstr ""

# d89e00943a3e4e418ffff6d7d0e72a82
#: ../spack/lib/spack/docs/contribution_guide.rst:112
msgid ""
"Unit tests are crucial to making sure bugs aren't introduced into Spack. If "
"you are modifying core Spack libraries or adding new functionality, please "
"consider adding new unit tests or strengthening existing tests."
msgstr ""

# 0b01e8f258c1443ca835fa196e09db5c
#: ../spack/lib/spack/docs/contribution_guide.rst:118
msgid ""
"There is also a ``run-unit-tests`` script in ``share/spack/qa`` that runs "
"the unit tests. Afterwards, it reports back to Codecov with the percentage "
"of Spack that is covered by unit tests. This script is designed for Travis "
"CI. If you want to run the unit tests yourself, we suggest you use ``spack "
"test``."
msgstr ""

# 93e2c1ff3b00425f825ce5c1ad466feb
#: ../spack/lib/spack/docs/contribution_guide.rst:126
msgid "Flake8 Tests"
msgstr ""

# a7d6c20be6114fa4a63825890e6b3b74
#: ../spack/lib/spack/docs/contribution_guide.rst:128
msgid ""
"Spack uses `Flake8 <http://flake8.pycqa.org/en/latest/>`_ to test for `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`_ conformance. PEP 8 is a series "
"of style guides for Python that provide suggestions for everything from "
"variable naming to indentation. In order to limit the number of PRs that "
"were mostly style changes, we decided to enforce PEP 8 conformance. Your PR "
"needs to comply with PEP 8 in order to be accepted."
msgstr ""

# bdf702b9e9424cd08ef360f52eff24ca
#: ../spack/lib/spack/docs/contribution_guide.rst:135
msgid ""
"Testing for PEP 8 compliance is easy. Simply run the ``spack flake8`` "
"command:"
msgstr ""

# ec6526e7bf5140d494ce6cb37dc888d3
#: ../spack/lib/spack/docs/contribution_guide.rst:142
msgid ""
"``spack flake8`` has a couple advantages over running ``flake8`` by hand:"
msgstr ""

# 2592d16879b7424a877460a0fdcf2fdd
#: ../spack/lib/spack/docs/contribution_guide.rst:144
msgid ""
"It only tests files that you have modified since branching off of "
"``develop``."
msgstr ""

# f073c08025d3437eb328bdeb3c07288c
#: ../spack/lib/spack/docs/contribution_guide.rst:147
msgid "It works regardless of what directory you are in."
msgstr ""

# c3e5ff02974841809e713b5c6dce9920
#: ../spack/lib/spack/docs/contribution_guide.rst:149
msgid ""
"It automatically adds approved exemptions from the ``flake8`` checks. For "
"example, URLs are often longer than 80 characters, so we exempt them from "
"line length checks. We also exempt lines that start with \"homepage\", \"url"
"\", \"version\", \"variant\", \"depends_on\", and \"extends\" in ``package."
"py`` files."
msgstr ""

# 7022b261082c41c781a0dd5ce3476b5e
#: ../spack/lib/spack/docs/contribution_guide.rst:155
msgid ""
"More approved flake8 exemptions can be found `here <https://github.com/spack/"
"spack/blob/develop/.flake8>`_."
msgstr ""

# 62f26b10496f42a5985ed9fa5c55f221
#: ../spack/lib/spack/docs/contribution_guide.rst:158
msgid "If all is well, you'll see something like this:"
msgstr ""

# 4414cb5a678a474f91695afa61dbeb43
#: ../spack/lib/spack/docs/contribution_guide.rst:175
msgid "However, if you aren't compliant with PEP 8, flake8 will complain:"
msgstr ""

# 4aa6f685fbbe4aefa7a030a3fdc0e7bd
#: ../spack/lib/spack/docs/contribution_guide.rst:184
msgid ""
"Most of the error messages are straightforward, but if you don't understand "
"what they mean, just ask questions about them when you submit your PR. The "
"line numbers will change if you add or delete lines, so simply run ``spack "
"flake8`` again to update them."
msgstr ""

# f30e2939dfb14f3299076a989d2505a3
#: ../spack/lib/spack/docs/contribution_guide.rst:191
msgid ""
"Try fixing flake8 errors in reverse order. This eliminates the need for "
"multiple runs of ``spack flake8`` just to re-compute line numbers and makes "
"it much easier to fix errors directly off of the Travis output."
msgstr ""

# 3f554f53ed554149907b51d700f1e4bf
#: ../spack/lib/spack/docs/contribution_guide.rst:197
msgid ""
"Flake8 and ``pep8-naming`` require a number of dependencies in order to "
"run.  If you installed ``py-flake8`` and ``py-pep8-naming``, the easiest way "
"to ensure the right packages are on your ``PYTHONPATH`` is to run::"
msgstr ""

# d24c95cb9da94fc18cd1035e05c9eb81
# 89ea1f2a4eb2423b862ffb67d3f2c289
#: ../spack/lib/spack/docs/contribution_guide.rst:205
#: ../spack/lib/spack/docs/contribution_guide.rst:249
msgid ""
"so that all of the dependencies are symlinked to a central location. If you "
"see an error message like:"
msgstr ""

# a2f3d44bca5a4104a495b5ee5cda91c5
#: ../spack/lib/spack/docs/contribution_guide.rst:215
msgid "that means Flake8 couldn't find setuptools in your ``PYTHONPATH``."
msgstr ""

# 190877db814a43b39f8797714d7aa7fa
#: ../spack/lib/spack/docs/contribution_guide.rst:219
msgid "Documentation Tests"
msgstr ""

# cd82206e7757401686221ab226bf80d3
#: ../spack/lib/spack/docs/contribution_guide.rst:221
msgid ""
"Spack uses `Sphinx <http://www.sphinx-doc.org/en/stable/>`_ to build its "
"documentation. In order to prevent things like broken links and missing "
"imports, we added documentation tests that build the documentation and fail "
"if there are any warning or error messages."
msgstr ""

# 081cba1bf2ac45f8aec1ea0ad34033da
#: ../spack/lib/spack/docs/contribution_guide.rst:226
msgid ""
"Building the documentation requires several dependencies, all of which can "
"be installed with Spack:"
msgstr ""

# 2744965e937a4b4192d78817c2306c53
#: ../spack/lib/spack/docs/contribution_guide.rst:229
msgid "sphinx"
msgstr ""

# 61178abd329940d6a2983f1418a40488
#: ../spack/lib/spack/docs/contribution_guide.rst:230
msgid "sphinxcontrib-programoutput"
msgstr ""

# 55013578c6dc4465979cbbf762c645ee
#: ../spack/lib/spack/docs/contribution_guide.rst:231
msgid "sphinx-rtd-theme"
msgstr ""

# 6d19be5fb64d49c49ff375fa51fea7d5
#: ../spack/lib/spack/docs/contribution_guide.rst:232
msgid "graphviz"
msgstr ""

# b3e03d2506174a5d9eb9f1f93d4aba55
#: ../spack/lib/spack/docs/contribution_guide.rst:233
msgid "git"
msgstr ""

# 2bf24c1ead6a4c3a8de374d0aedafae6
#: ../spack/lib/spack/docs/contribution_guide.rst:235
msgid "subversion"
msgstr ""

# cfe852ec88e14ab1bdf244fd7413fbe1
#: ../spack/lib/spack/docs/contribution_guide.rst:239
msgid ""
"Sphinx has `several required dependencies <https://github.com/spack/spack/"
"blob/develop/var/spack/repos/builtin/packages/py-sphinx/package.py>`_. If "
"you installed ``py-sphinx`` with Spack, make sure to add all of these "
"dependencies to your ``PYTHONPATH``. The easiest way to do this is to run:"
msgstr ""

# 9fa0c15604fe4bb49926bb5e7a521aef
#: ../spack/lib/spack/docs/contribution_guide.rst:258
msgid ""
"that means Sphinx couldn't find ``py-sphinxcontrib-programoutput`` in your "
"``PYTHONPATH``."
msgstr ""

# f93b30636e4645c9a968b2997a60af90
#: ../spack/lib/spack/docs/contribution_guide.rst:261
msgid ""
"Once all of the dependencies are installed, you can try building the "
"documentation:"
msgstr ""

# c1de88cee5c248e4a6e46db03fd47160
#: ../spack/lib/spack/docs/contribution_guide.rst:269
msgid ""
"If you see any warning or error messages, you will have to correct those "
"before your PR is accepted."
msgstr ""

# ed234ebda88147559b1161d53c3f87c5
#: ../spack/lib/spack/docs/contribution_guide.rst:274
msgid ""
"There is also a ``run-doc-tests`` script in ``share/spack/qa``. The only "
"difference between running this script and running ``make`` by hand is that "
"the script will exit immediately if it encounters an error or warning. This "
"is necessary for Travis CI. If you made a lot of documentation changes, it "
"is much quicker to run ``make`` by hand so that you can see all of the "
"warnings at once."
msgstr ""

# f205c40935d1426ab3d343136bd33a3b
#: ../spack/lib/spack/docs/contribution_guide.rst:281
msgid ""
"If you are editing the documentation, you should obviously be running the "
"documentation tests. But even if you are simply adding a new package, your "
"changes could cause the documentation tests to fail:"
msgstr ""

# 67cb1cae98e1475eb8d5d7273f7a8c86
#: ../spack/lib/spack/docs/contribution_guide.rst:289
msgid ""
"At first, this error message will mean nothing to you, since you didn't edit "
"that file. Until you look at line 8745 of the file in question:"
msgstr ""

# 1892abf38fc746c4a86cb3381a742995
#: ../spack/lib/spack/docs/contribution_guide.rst:299
msgid ""
"Our documentation includes :ref:`a list of all Spack packages <package-"
"list>`. If you add a new package, its docstring is added to this page. The "
"problem in this case was that the docstring looked like:"
msgstr ""

# 7da9895abf864d4881cc1556debf8477
#: ../spack/lib/spack/docs/contribution_guide.rst:312
msgid ""
"Docstrings cannot start with a newline character, or else Sphinx will "
"complain. Instead, they should look like:"
msgstr ""

# e779f75f029f428586cbc9a8f7f1ab5a
#: ../spack/lib/spack/docs/contribution_guide.rst:322
msgid ""
"Documentation changes can result in much more obfuscated warning messages. "
"If you don't understand what they mean, feel free to ask when you submit "
"your PR."
msgstr ""

# 47ad5a29e9cb4c1d902de07787b682d3
#: ../spack/lib/spack/docs/contribution_guide.rst:328
msgid "Coverage"
msgstr ""

# ea57d81075ea45d5bf72cb352fa5c512
#: ../spack/lib/spack/docs/contribution_guide.rst:330
msgid ""
"Spack uses `Codecov <https://codecov.io/>`_ to generate and report unit test "
"coverage. This helps us tell what percentage of lines of code in Spack are "
"covered by unit tests. Although code covered by unit tests can still contain "
"bugs, it is much less error prone than code that is not covered by unit "
"tests."
msgstr ""

# 6867269aea774e52819baa9f91ba126d
#: ../spack/lib/spack/docs/contribution_guide.rst:335
msgid ""
"Codecov provides `browser extensions <https://github.com/codecov/browser-"
"extension>`_ for Google Chrome, Firefox, and Opera. These extensions "
"integrate with GitHub and allow you to see coverage line-by-line when "
"viewing the Spack repository. If you are new to Spack, a great way to get "
"started is to write unit tests to increase coverage!"
msgstr ""

# 02eb110bb61b4a33bb2c4b7a92ce57e5
#: ../spack/lib/spack/docs/contribution_guide.rst:341
msgid ""
"Unlike with Travis, Codecov tests are not required to pass in order for your "
"PR to be merged. If you modify core Spack libraries, we would greatly "
"appreciate unit tests that cover these changed lines. Otherwise, we have no "
"way of knowing whether or not your changes introduce a bug. If you make "
"substantial changes to the core, we may request unit tests to increase "
"coverage."
msgstr ""

# 88dd3b28cfb74736aaaa24f63ca35af9
#: ../spack/lib/spack/docs/contribution_guide.rst:349
msgid ""
"If the only files you modified are package files, we do not care about "
"coverage on your PR. You may notice that the Codecov tests fail even though "
"you didn't modify any core files. This means that Spack's overall coverage "
"has increased since you branched off of develop. This is a good thing! If "
"you really want to get the Codecov tests to pass, you can rebase off of the "
"latest develop, but again, this is not required."
msgstr ""

# 8e66b51a274144d1b8ead5cf209e8c76
#: ../spack/lib/spack/docs/contribution_guide.rst:359
msgid "Git Workflows"
msgstr ""

# 25605cce6ed94ee189b24735da542dab
#: ../spack/lib/spack/docs/contribution_guide.rst:361
msgid ""
"Spack is still in the beta stages of development. Most of our users run off "
"of the develop branch, and fixes and new features are constantly being "
"merged. So how do you keep up-to-date with upstream while maintaining your "
"own local differences and contributing PRs to Spack?"
msgstr ""

# 68a6648678f0441291c9877319a54a63
#: ../spack/lib/spack/docs/contribution_guide.rst:368
msgid "Branching"
msgstr ""

# fd2a048e965b4468b214bc5ab59e532d
#: ../spack/lib/spack/docs/contribution_guide.rst:370
msgid ""
"The easiest way to contribute a pull request is to make all of your changes "
"on new branches. Make sure your ``develop`` is up-to-date and create a new "
"branch off of it:"
msgstr ""

# 6c9d7791996443979343383a6b4680a0
#: ../spack/lib/spack/docs/contribution_guide.rst:381
msgid ""
"Here we assume that the local ``develop`` branch tracks the upstream develop "
"branch of Spack. This is not a requirement and you could also do the same "
"with remote branches. But for some it is more convenient to have a local "
"branch that tracks upstream."
msgstr ""

# 15f638a4d62c40d0b50557a8e3568f03
#: ../spack/lib/spack/docs/contribution_guide.rst:386
msgid ""
"Normally we prefer that commits pertaining to a package ``<package-name>`` "
"have a message ``<package-name>: descriptive message``. It is important to "
"add descriptive message so that others, who might be looking at your changes "
"later (in a year or maybe two), would understand the rationale behind them."
msgstr ""

# 934b43dbdd2c4e17b770554a722e0b20
#: ../spack/lib/spack/docs/contribution_guide.rst:391
msgid ""
"Now, you can make your changes while keeping the ``develop`` branch pure. "
"Edit a few files and commit them by running:"
msgstr ""

# 45e56e4c5f96483cbe8c4c3a1d2a4264
#: ../spack/lib/spack/docs/contribution_guide.rst:399
msgid "Next, push it to your remote fork and create a PR:"
msgstr ""

# fd37adb81c3f439398db95e22dc28f56
#: ../spack/lib/spack/docs/contribution_guide.rst:405
msgid ""
"GitHub provides a `tutorial <https://help.github.com/articles/about-pull-"
"requests/>`_ on how to file a pull request. When you send the request, make "
"``develop`` the destination branch."
msgstr ""

# d4b8ab9928804c76bbd04d926b29c030
#: ../spack/lib/spack/docs/contribution_guide.rst:409
msgid ""
"If you need this change immediately and don't have time to wait for your PR "
"to be merged, you can always work on this branch. But if you have multiple "
"PRs, another option is to maintain a Frankenstein branch that combines all "
"of your other branches:"
msgstr ""

# edef5d30f29f4437adb7969dc7330b31
#: ../spack/lib/spack/docs/contribution_guide.rst:421
msgid ""
"This can be done with each new PR you submit. Just make sure to keep this "
"local branch up-to-date with upstream ``develop`` too."
msgstr ""

# f5a123efad8f49a587cc3eb2fe5855ec
#: ../spack/lib/spack/docs/contribution_guide.rst:426
msgid "Cherry-Picking"
msgstr ""

# fe902fbce10946aaa86ea9259b754837
#: ../spack/lib/spack/docs/contribution_guide.rst:428
msgid ""
"What if you made some changes to your local modified develop branch and "
"already committed them, but later decided to contribute them to Spack? You "
"can use cherry-picking to create a new branch with only these commits."
msgstr ""

# 690c1be280444c0abdce62f97886a292
#: ../spack/lib/spack/docs/contribution_guide.rst:432
msgid "First, check out your local modified develop branch:"
msgstr ""

# 67f65177d6154f02a6f9f346545ef4ce
#: ../spack/lib/spack/docs/contribution_guide.rst:438
msgid "Now, get the hashes of the commits you want from the output of:"
msgstr ""

# 6d3a2198afa04b2688b4005af3a5ac61
#: ../spack/lib/spack/docs/contribution_guide.rst:444
msgid ""
"Next, create a new branch off of upstream ``develop`` and copy the commits "
"that you want in your PR:"
msgstr ""

# 77c593de032e4a6a8ac79471cccad10f
#: ../spack/lib/spack/docs/contribution_guide.rst:456
msgid ""
"Now you can create a PR from the web-interface of GitHub. The net result is "
"as follows:"
msgstr ""

# 551cf815aa73476e9e7fac46552f1270
#: ../spack/lib/spack/docs/contribution_guide.rst:459
msgid "You patched your local version of Spack and can use it further."
msgstr ""

# 21ad54743cdb4470b0ad630269b89bab
#: ../spack/lib/spack/docs/contribution_guide.rst:460
msgid ""
"You \"cherry-picked\" these changes in a stand-alone branch and submitted it "
"as a PR upstream."
msgstr ""

# 5545e8f941f84797bfc720ca95d58116
#: ../spack/lib/spack/docs/contribution_guide.rst:463
msgid ""
"Should you have several commits to contribute, you could follow the same "
"procedure by getting hashes of all of them and cherry-picking to the PR "
"branch."
msgstr ""

# 1e72ea94c6d649a0a97625bd82e7119e
#: ../spack/lib/spack/docs/contribution_guide.rst:468
msgid ""
"It is important that whenever you change something that might be of "
"importance upstream, create a pull request as soon as possible. Do not wait "
"for weeks/months to do this, because:"
msgstr ""

# 7dcabab304f24b60954220e1d10bcaef
#: ../spack/lib/spack/docs/contribution_guide.rst:472
msgid "you might forget why you modified certain files"
msgstr ""

# 9366458e02a04c9eb40f13cb64546dd9
#: ../spack/lib/spack/docs/contribution_guide.rst:473
msgid ""
"it could get difficult to isolate this change into a stand-alone clean PR."
msgstr ""

# 58a709d4791c4e0f81e041eaefcfefa6
#: ../spack/lib/spack/docs/contribution_guide.rst:477
msgid "Rebasing"
msgstr ""

# 64539f8c04bc46549ae82d2bcbd503a2
#: ../spack/lib/spack/docs/contribution_guide.rst:479
msgid ""
"Other developers are constantly making contributions to Spack, possibly on "
"the same files that your PR changed. If their PR is merged before yours, it "
"can create a merge conflict. This means that your PR can no longer be "
"automatically merged without a chance of breaking your changes. In this "
"case, you will be asked to rebase on top of the latest upstream ``develop``."
msgstr ""

# 8468a141f3214be6872f316dc1454cb5
#: ../spack/lib/spack/docs/contribution_guide.rst:485
msgid "First, make sure your develop branch is up-to-date:"
msgstr ""

# a92c090536134225b58ca2a180aa1949
#: ../spack/lib/spack/docs/contribution_guide.rst:492
msgid ""
"Now, we need to switch to the branch you submitted for your PR and rebase it "
"on top of develop:"
msgstr ""

# 9473f1a50fc348a090ed782e9d699858
#: ../spack/lib/spack/docs/contribution_guide.rst:500
msgid ""
"Git will likely ask you to resolve conflicts. Edit the file that it says "
"can't be merged automatically and resolve the conflict. Then, run:"
msgstr ""

# 6e7e592aa2c746a5a6a2e6135aa05336
#: ../spack/lib/spack/docs/contribution_guide.rst:508
msgid ""
"You may have to repeat this process multiple times until all conflicts are "
"resolved. Once this is done, simply force push your rebased branch to your "
"remote fork:"
msgstr ""

# a327a46102e64b7d873dce2442fe591e
#: ../spack/lib/spack/docs/contribution_guide.rst:517
msgid "Rebasing with cherry-pick"
msgstr ""

# cb26a0e4057a4906a391642cc06dbd1b
#: ../spack/lib/spack/docs/contribution_guide.rst:519
msgid ""
"You can also perform a rebase using ``cherry-pick``. First, create a "
"temporary backup branch:"
msgstr ""

# 38dd6af69d454125a01740d9682f3f1d
#: ../spack/lib/spack/docs/contribution_guide.rst:527
msgid ""
"If anything goes wrong, you can always go back to your ``tmp`` branch. Now, "
"look at the logs and save the hashes of any commits you would like to keep:"
msgstr ""

# d97c3e3787644bef9f297d129b4088d5
#: ../spack/lib/spack/docs/contribution_guide.rst:534
msgid ""
"Next, go back to the original branch and reset it to ``develop``. Before "
"doing so, make sure that you local ``develop`` branch is up-to-date with "
"upstream:"
msgstr ""

# f10b767c822546018bb78b61f6c65c1c
#: ../spack/lib/spack/docs/contribution_guide.rst:545
msgid "Now you can cherry-pick relevant commits:"
msgstr ""

# 653763daad5448cd94087da7355d11c9
#: ../spack/lib/spack/docs/contribution_guide.rst:552
msgid "Push the modified branch to your fork:"
msgstr ""

# b116d76f8b0f4fab8835f1469a66ea96
#: ../spack/lib/spack/docs/contribution_guide.rst:558
msgid "If everything looks good, delete the backup branch:"
msgstr ""

# fc96b0f917a349d398da3e691a2f159f
#: ../spack/lib/spack/docs/contribution_guide.rst:566
msgid "Re-writing History"
msgstr ""

# be727ffbeb8c4a93ac1d0ec86c8cdd1c
#: ../spack/lib/spack/docs/contribution_guide.rst:568
msgid ""
"Sometimes you may end up on a branch that has diverged so much from develop "
"that it cannot easily be rebased. If the current commits history is more of "
"an experimental nature and only the net result is important, you may rewrite "
"the history."
msgstr ""

# cbea3c56919c4688b3c6e01f2419309b
#: ../spack/lib/spack/docs/contribution_guide.rst:573
msgid ""
"First, merge upstream ``develop`` and reset you branch to it. On the branch "
"in question, run:"
msgstr ""

# 15df4287100e456c97e6c16a5c43ca45
#: ../spack/lib/spack/docs/contribution_guide.rst:581
msgid ""
"At this point your branch will point to the same commit as develop and "
"thereby the two are indistinguishable. However, all the files that were "
"previously modified will stay as such. In other words, you do not lose the "
"changes you made. Changes can be reviewed by looking at diffs:"
msgstr ""

# 18263038011f42e481e55edd923d5356
#: ../spack/lib/spack/docs/contribution_guide.rst:591
msgid ""
"The next step is to rewrite the history by adding files and creating commits:"
msgstr ""

# 4897867a19804a869956347304a6be18
#: ../spack/lib/spack/docs/contribution_guide.rst:598
msgid ""
"After all changed files are committed, you can push the branch to your fork "
"and create a PR:"
msgstr ""

# aaefe961893f4389ab67dc0f34c4166d
#: ../spack/lib/spack/docs/developer_guide.rst:10
msgid "Developer Guide"
msgstr ""

# b5359ed50ca34cab99cd9ddbd9d8e62a
#: ../spack/lib/spack/docs/developer_guide.rst:12
msgid ""
"This guide is intended for people who want to work on Spack itself. If you "
"just want to develop packages, see the :ref:`packaging-guide`."
msgstr ""

# 8393ba705b1c4e6d99ca9643f05302e8
#: ../spack/lib/spack/docs/developer_guide.rst:15
msgid ""
"It is assumed that you've read the :ref:`basic-usage` and :ref:`packaging-"
"guide` sections, and that you're familiar with the concepts discussed "
"there.  If you're not, we recommend reading those first."
msgstr ""

# #-#-#-#-#  developer_guide.pot (Spack 0.12)  #-#-#-#-#
# 5871c4d803614bddbb94743ed8b96323
# #-#-#-#-#  docker_for_developers.pot (Spack 0.12)  #-#-#-#-#
# d3357c7306cb41d59a9c845f92545ffa
#: ../spack/lib/spack/docs/developer_guide.rst:22
#: ../spack/lib/spack/docs/docker_for_developers.rst:18
msgid "Overview"
msgstr ""

# fc179137cef74b78bc8766acd65279a3
#: ../spack/lib/spack/docs/developer_guide.rst:24
msgid "Spack is designed with three separate roles in mind:"
msgstr ""

# 1ce3310f58c04be1937654da41cbc0fc
#: ../spack/lib/spack/docs/developer_guide.rst:26
msgid ""
"**Users**, who need to install software *without* knowing all the details "
"about how it is built."
msgstr ""

# 4fcd238882fc493c9bfaf9fe31bd03f4
#: ../spack/lib/spack/docs/developer_guide.rst:28
msgid ""
"**Packagers** who know how a particular software package is built and encode "
"this information in package files."
msgstr ""

# f0d8208997964e14872ff81eae6a0528
#: ../spack/lib/spack/docs/developer_guide.rst:30
msgid ""
"**Developers** who work on Spack, add new features, and try to make the jobs "
"of packagers and users easier."
msgstr ""

# c86127d0a7f64814ada5bc5c8fdbd007
#: ../spack/lib/spack/docs/developer_guide.rst:33
msgid ""
"Users could be end users installing software in their home directory, or "
"administrators installing software to a shared directory on a shared "
"machine.  Packagers could be administrators who want to automate software "
"builds, or application developers who want to make their software more "
"accessible to users."
msgstr ""

# 28fa28846ef048e0b5377154390f4359
#: ../spack/lib/spack/docs/developer_guide.rst:39
msgid ""
"As you might expect, there are many types of users with different levels of "
"sophistication, and Spack is designed to accommodate both simple and complex "
"use cases for packages.  A user who only knows that he needs a certain "
"package should be able to type something simple, like ``spack install "
"<package name>``, and get the package that he wants.  If a user wants to ask "
"for a specific version, use particular compilers, or build several versions "
"with different configurations, then that should be possible with a minimal "
"amount of additional specification."
msgstr ""

# fcb1fbf6309c416fa64233af104a43e0
#: ../spack/lib/spack/docs/developer_guide.rst:49
msgid "This gets us to the two key concepts in Spack's software design:"
msgstr ""

# #-#-#-#-#  developer_guide.pot (Spack 0.12)  #-#-#-#-#
# f28f9f33036840de97c7b8fc27c017a1
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# 5b8f439271874fb191be56ef83b7ecfb
#: ../spack/lib/spack/docs/developer_guide.rst:51
#: ../spack/lib/spack/docs/packaging_guide.rst:20
msgid "**Specs**: expressions for describing builds of software, and"
msgstr ""

# e392a3a533b54a2b8e90e3f4d4cb8378
#: ../spack/lib/spack/docs/developer_guide.rst:52
msgid "**Packages**: Python modules that build software according to a spec."
msgstr ""

# 21aee53378a8471aa65ba008a5077b73
#: ../spack/lib/spack/docs/developer_guide.rst:55
msgid ""
"A package is a template for building particular software, and a spec as a "
"descriptor for one or more instances of that template.  Users express the "
"configuration they want using a spec, and a package turns the spec into a "
"complete build."
msgstr ""

# 36f43ee73bc945278e1e166f357c3cfc
#: ../spack/lib/spack/docs/developer_guide.rst:60
msgid ""
"The obvious difficulty with this design is that users under-specify what "
"they want.  To build a software package, the package object needs a "
"*complete* specification.  In Spack, if a spec describes only one instance "
"of a package, then we say it is **concrete**.  If a spec could describes "
"many instances, (i.e. it is under-specified in one way or another), then we "
"say it is **abstract**."
msgstr ""

# 61bf76711bed457e8cc9e5967f67ee6e
#: ../spack/lib/spack/docs/developer_guide.rst:67
msgid ""
"Spack's job is to take an *abstract* spec from the user, find a *concrete* "
"spec that satisfies the constraints, and hand the task of building the "
"software off to the package object.  The rest of this document describes all "
"the pieces that come together to make that happen."
msgstr ""

# f6a2fa8c76094871b56a2e4ddcad904a
#: ../spack/lib/spack/docs/developer_guide.rst:75
msgid "Directory Structure"
msgstr ""

# 842ac8ab1e834ebdb978031824dd8905
#: ../spack/lib/spack/docs/developer_guide.rst:77
msgid ""
"So that you can familiarize yourself with the project, we'll start with a "
"high level view of Spack's directory structure:"
msgstr ""

# a4992032ab1f433d96426c393f1fbdbf
#: ../spack/lib/spack/docs/developer_guide.rst:115
msgid ""
"Spack is designed so that it could live within a `standard UNIX directory "
"hierarchy <http://linux.die.net/man/7/hier>`_, so ``lib``, ``var``, and "
"``opt`` all contain a ``spack`` subdirectory in case Spack is installed "
"alongside other software.  Most of the interesting parts of Spack live in "
"``lib/spack``."
msgstr ""

# ce06082031c444c0960fa3bc0228e399
#: ../spack/lib/spack/docs/developer_guide.rst:121
msgid ""
"Spack has *one* directory layout and there is no install process. Most "
"Python programs don't look like this (they use distutils, ``setup.py``, "
"etc.) but we wanted to make Spack *very* easy to use.  The simple layout "
"spares users from the need to install Spack into a Python environment. Many "
"users don't have write access to a Python installation, and installing an "
"entire new instance of Python to bootstrap Spack would be very complicated. "
"Users should not have to install a big, complicated package to use the thing "
"that's supposed to spare them from the details of big, complicated "
"packages.  The end result is that Spack works out of the box: clone it and "
"add ``bin`` to your PATH and you're ready to go."
msgstr ""

# 5a29aaa0689c4fc88ec30152087feb36
#: ../spack/lib/spack/docs/developer_guide.rst:134
msgid "Code Structure"
msgstr ""

# f691bae5bbb5429ba9623487758ae81a
#: ../spack/lib/spack/docs/developer_guide.rst:136
msgid ""
"This section gives an overview of the various Python modules in Spack, "
"grouped by functionality."
msgstr ""

# 1843a3dfb3a3453a81adb685b346e36a
#: ../spack/lib/spack/docs/developer_guide.rst:141
msgid "Package-related modules"
msgstr ""

# 500a91b441194f7288dfa18ba4387fc0
#: ../spack/lib/spack/docs/developer_guide.rst:147
msgid ":mod:`spack.package`"
msgstr ""

# a74a09229af64de7bf2966bd5f0b56e1
#: ../spack/lib/spack/docs/developer_guide.rst:144
msgid ""
"Contains the :class:`Package <spack.package.Package>` class, which is the "
"superclass for all packages in Spack.  Methods on ``Package`` implement all "
"phases of the :ref:`package lifecycle <package-lifecycle>` and manage the "
"build process."
msgstr ""

# ea51c8799d154085be8e000224648b75
#: ../spack/lib/spack/docs/developer_guide.rst:155
msgid ":mod:`spack.packages`"
msgstr ""

# ae7a4bfb56c94569bb6bb26fb40c958e
#: ../spack/lib/spack/docs/developer_guide.rst:150
msgid ""
"Contains all of the packages in Spack and methods for managing them. "
"Functions like :func:`packages.get <spack.packages.get>` and :func:"
"`class_name_for_package_name <packages.class_name_for_package_name>` handle "
"mapping package module names to class names and dynamically instantiating "
"packages by name from module files."
msgstr ""

# 69b375d2769a4be280804d80e41fdbde
#: ../spack/lib/spack/docs/developer_guide.rst:161
msgid ":mod:`spack.relations`"
msgstr ""

# 48873fff829948e6af6d374d0c330a9c
#: ../spack/lib/spack/docs/developer_guide.rst:158
msgid ""
"*Relations* are relationships between packages, like :func:`depends_on "
"<spack.relations.depends_on>` and :func:`provides <spack.relations."
"provides>`.  See :ref:`dependencies` and :ref:`virtual-dependencies`."
msgstr ""

# fb76282057c64d76ab95eff2dd404c48
#: ../spack/lib/spack/docs/developer_guide.rst:166
msgid ":mod:`spack.multimethod`"
msgstr ""

# 9af91353564a4d7fa6e45afe73b566f4
#: ../spack/lib/spack/docs/developer_guide.rst:164
msgid ""
"Implementation of the :func:`@when <spack.multimethod.when>` decorator, "
"which allows :ref:`multimethods <multimethods>` in packages."
msgstr ""

# a6e09c24d75d4912bff9c4f77ead4620
#: ../spack/lib/spack/docs/developer_guide.rst:170
msgid "Spec-related modules"
msgstr ""

# 8dde876f44c94273b82c1ea75c4a60b6
#: ../spack/lib/spack/docs/developer_guide.rst:175
msgid ":mod:`spack.spec`"
msgstr ""

# 9382bb117670465db5e247774554c1da
#: ../spack/lib/spack/docs/developer_guide.rst:173
msgid ""
"Contains :class:`Spec <spack.spec.Spec>` and :class:`SpecParser <spack.spec."
"SpecParser>`. Also implements most of the logic for normalization and "
"concretization of specs."
msgstr ""

# feea29c638e244b2acfaa7f270c0f95f
#: ../spack/lib/spack/docs/developer_guide.rst:181
msgid ":mod:`spack.parse`"
msgstr ""

# 51e1ed82e8514d539e836b366f4b9c15
#: ../spack/lib/spack/docs/developer_guide.rst:178
msgid ""
"Contains some base classes for implementing simple recursive descent "
"parsers: :class:`Parser <spack.parse.Parser>` and :class:`Lexer <spack.parse."
"Lexer>`.  Used by :class:`SpecParser <spack.spec.SpecParser>`."
msgstr ""

# 34c9e1dd06fc4e22b4c5370bb5a15d3c
#: ../spack/lib/spack/docs/developer_guide.rst:186
msgid ":mod:`spack.concretize`"
msgstr ""

# 817953b363e34b7db9f5d71f931c6c07
#: ../spack/lib/spack/docs/developer_guide.rst:184
msgid ""
"Contains :class:`DefaultConcretizer <spack.concretize.DefaultConcretizer>` "
"implementation, which allows site administrators to change Spack's :ref:"
"`concretization-policies`."
msgstr ""

# 95de52a227d8479eb5560d16291fb167
#: ../spack/lib/spack/docs/developer_guide.rst:197
msgid ":mod:`spack.version`"
msgstr ""

# aadfce3c324d4009a03641da58a161c8
#: ../spack/lib/spack/docs/developer_guide.rst:189
msgid ""
"Implements a simple :class:`Version <spack.version.Version>` class with "
"simple comparison semantics.  Also implements :class:`VersionRange <spack."
"version.VersionRange>` and :class:`VersionList <spack.version."
"VersionList>`.  All three are comparable with each other and offer union and "
"intersection operations.  Spack uses these classes to compare versions and "
"to manage version constraints on specs.  Comparison semantics are similar to "
"the ``LooseVersion`` class in ``distutils`` and to the way RPM compares "
"version strings."
msgstr ""

# d003088f90e44d7aa3578f1645623612
#: ../spack/lib/spack/docs/developer_guide.rst:207
msgid ":mod:`spack.compilers`"
msgstr ""

# 6ab6755b5a37445bab765f5007a0eef8
#: ../spack/lib/spack/docs/developer_guide.rst:200
msgid ""
"Submodules contains descriptors for all valid compilers in Spack. This is "
"used by the build system to set up the build environment."
msgstr ""

# f52a6a01b5834960bc6ac368c6517e91
#: ../spack/lib/spack/docs/developer_guide.rst:205
msgid ""
"Not yet implemented.  Currently has two compiler descriptions, but compilers "
"aren't fully integrated with the build process yet."
msgstr ""

# 5b4ab55f43854c9991800915b2f5dd61
#: ../spack/lib/spack/docs/developer_guide.rst:216
msgid ":mod:`spack.architecture`"
msgstr ""

# a69ef26f85f841a9b019ba088bdd2e51
#: ../spack/lib/spack/docs/developer_guide.rst:210
msgid ""
":func:`architecture.sys_type <spack.architecture.sys_type>` is used to "
"determine the host architecture while building."
msgstr ""

# e19a804a4bc241f4a4ac37c11e3e05ab
#: ../spack/lib/spack/docs/developer_guide.rst:215
msgid ""
"Not yet implemented.  Should eventually have architecture descriptions for "
"cross-compiling."
msgstr ""

# e7e092ad77974b0ab40eb40e63445ffb
#: ../spack/lib/spack/docs/developer_guide.rst:220
msgid "Build environment"
msgstr ""

# d029cd6ff69f411cae9e9861dcdc4d82
#: ../spack/lib/spack/docs/developer_guide.rst:223
msgid ":mod:`spack.stage`"
msgstr ""

# f0022d55f18941c499ab9fef3d511df2
#: ../spack/lib/spack/docs/developer_guide.rst:223
msgid "Handles creating temporary directories for builds."
msgstr ""

# b699e1769e1b4bc09b69895fe68d2328
#: ../spack/lib/spack/docs/developer_guide.rst:227
msgid ":mod:`spack.compilation`"
msgstr ""

# c5e0eec869874b93960b0eaf0a8d6d3e
#: ../spack/lib/spack/docs/developer_guide.rst:226
msgid ""
"This contains utility functions used by the compiler wrapper script, ``cc``."
msgstr ""

# 8edfc58457774a7db63e3c62cd6c24ca
#: ../spack/lib/spack/docs/developer_guide.rst:232
msgid ":mod:`spack.directory_layout`"
msgstr ""

# 01a0aa03fc5e4315a4f7564e66ffd231
#: ../spack/lib/spack/docs/developer_guide.rst:230
msgid ""
"Classes that control the way an installation directory is laid out. Create "
"more implementations of this to change the hierarchy and naming scheme in ``"
"$spack_prefix/opt``"
msgstr ""

# 2043ab5967db4e88b07624f9d0f3b31b
#: ../spack/lib/spack/docs/developer_guide.rst:236
msgid "Spack Subcommands"
msgstr ""

# 453b413375314f3a8ed4cbb35a8bbf28
#: ../spack/lib/spack/docs/developer_guide.rst:240
msgid ":mod:`spack.cmd`"
msgstr ""

# 93c33bef05d24e40b452dd7bacfdbe1c
#: ../spack/lib/spack/docs/developer_guide.rst:239
msgid ""
"Each module in this package implements a Spack subcommand.  See :ref:"
"`writing commands <writing-commands>` for details."
msgstr ""

# 01350ef0937345d2ae20957c7c43ef3b
#: ../spack/lib/spack/docs/developer_guide.rst:248
msgid ":mod:`spack.test`"
msgstr ""

# 9e79ecd163e64584bcdfe283bc17114d
#: ../spack/lib/spack/docs/developer_guide.rst:247
msgid ""
"Implements Spack's test suite.  Add a module and put its name in the test "
"suite in ``__init__.py`` to add more unit tests."
msgstr ""

# 3918351cca6f4c378eaaa8258bae4913
#: ../spack/lib/spack/docs/developer_guide.rst:252
msgid ":mod:`spack.test.mock_packages`"
msgstr ""

# 7f089613de0c447e8a3cbbc0945ef718
#: ../spack/lib/spack/docs/developer_guide.rst:251
msgid ""
"This is a fake package hierarchy used to mock up packages for Spack's test "
"suite."
msgstr ""

# 50707fbd40634f0baf942a79793b7625
#: ../spack/lib/spack/docs/developer_guide.rst:256
msgid "Other Modules"
msgstr ""

# 0b7ea89502434e858c60f1ad51fc3157
#: ../spack/lib/spack/docs/developer_guide.rst:260
msgid ":mod:`spack.url`"
msgstr ""

# 3d867b19f1d2467db9d41a47f74b7fb4
#: ../spack/lib/spack/docs/developer_guide.rst:259
msgid ""
"URL parsing, for deducing names and versions of packages from tarball URLs."
msgstr ""

# d295255e721b46ff87f00f6cf529e46b
#: ../spack/lib/spack/docs/developer_guide.rst:264
msgid ":mod:`spack.error`"
msgstr ""

# 8aecf020ddc34000838aaf7f8a441622
#: ../spack/lib/spack/docs/developer_guide.rst:263
msgid ""
":class:`SpackError <spack.error.SpackError>`, the base class for Spack's "
"exception hierarchy."
msgstr ""

# 4f6619aced354bd6ba855eda0ffb90ee
#: ../spack/lib/spack/docs/developer_guide.rst:268
msgid ":mod:`llnl.util.tty`"
msgstr ""

# 6f9e3eeb44c54150ae340ca1b9af08a4
#: ../spack/lib/spack/docs/developer_guide.rst:267
msgid ""
"Basic output functions for all of the messages Spack writes to the terminal."
msgstr ""

# c2f79538b9de478c911d86228372c56c
#: ../spack/lib/spack/docs/developer_guide.rst:271
msgid ":mod:`llnl.util.tty.color`"
msgstr ""

# cd93f0c8ff144959bbd6246e1d5ecf15
#: ../spack/lib/spack/docs/developer_guide.rst:271
msgid "Implements a color formatting syntax used by ``spack.tty``."
msgstr ""

# db9f726cf538428d84643059a6b51855
#: ../spack/lib/spack/docs/developer_guide.rst:275
msgid ":mod:`llnl.util`"
msgstr ""

# 22763ba00f7f4efbbb9f8bab2684ac0c
#: ../spack/lib/spack/docs/developer_guide.rst:274
msgid "In this package are a number of utility modules for the rest of Spack."
msgstr ""

# #-#-#-#-#  developer_guide.pot (Spack 0.12)  #-#-#-#-#
# 58ddf54973434a6ebcbaba6d26050470
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# b6a77c8e5c6f47cb8f460fcfc93c567e
#: ../spack/lib/spack/docs/developer_guide.rst:279
#: ../spack/lib/spack/docs/packaging_guide.rst:3111
msgid "Spec objects"
msgstr ""

# a299a1ca638d4388aca01d7ee2e4eaf6
#: ../spack/lib/spack/docs/developer_guide.rst:283
msgid "Package objects"
msgstr ""

# 22f60385683048c7ae5444bc425bb244
#: ../spack/lib/spack/docs/developer_guide.rst:285
msgid "Most spack commands look something like this:"
msgstr ""

# 3e7d12b09dbb4732b8cf10709c6e4327
#: ../spack/lib/spack/docs/developer_guide.rst:287
msgid "Parse an abstract spec (or specs) from the command line,"
msgstr ""

# e7ab46e698d34ee5be73cb2a1803d2e0
#: ../spack/lib/spack/docs/developer_guide.rst:288
msgid "*Normalize* the spec based on information in package files,"
msgstr ""

# a7c81ee5ba084ef6bd064487e7256998
#: ../spack/lib/spack/docs/developer_guide.rst:289
msgid "*Concretize* the spec according to some customizable policies,"
msgstr ""

# 144464e62a9a40488d92afdb1cfc59a6
#: ../spack/lib/spack/docs/developer_guide.rst:290
msgid "Instantiate a package based on the spec, and"
msgstr ""

# 2a866130fe5447f7bb2feb73461d11ae
#: ../spack/lib/spack/docs/developer_guide.rst:291
msgid "Call methods (e.g., ``install()``) on the package object."
msgstr ""

# d6a88b5230664b59847f3ef39891213b
#: ../spack/lib/spack/docs/developer_guide.rst:293
msgid "The information in Package files is used at all stages in this process."
msgstr ""

# 9f51adafe2754dedb322412d779cfb31
#: ../spack/lib/spack/docs/developer_guide.rst:296
msgid "Conceptually, packages are overloaded.  They contain:"
msgstr ""

# 12395a1740454af9a263e19fca75c76c
#: ../spack/lib/spack/docs/developer_guide.rst:300
msgid "Stage objects"
msgstr ""

# 1812e48f7ffe495eaf1663d1539528a5
#: ../spack/lib/spack/docs/developer_guide.rst:306
msgid "Writing commands"
msgstr ""

# b2cdcf1ac19b48bfb02cba04fe3688ad
#: ../spack/lib/spack/docs/developer_guide.rst:308
msgid ""
"Adding a new command to Spack is easy. Simply add a ``<name>.py`` file to "
"``lib/spack/spack/cmd/``, where ``<name>`` is the name of the subcommand. At "
"the bare minimum, two functions are required in this file:"
msgstr ""

# 8765c995c97d47d2b4ff8a6b6f0a4fcc
#: ../spack/lib/spack/docs/developer_guide.rst:314
msgid "``setup_parser()``"
msgstr ""

# 378c85b9bc7f461cbddf967116ce100a
#: ../spack/lib/spack/docs/developer_guide.rst:316
msgid ""
"Unless your command doesn't accept any arguments, a ``setup_parser()`` "
"function is required to define what arguments and flags your command takes. "
"See the `Argparse documentation <https://docs.python.org/2.7/library/"
"argparse.html>`_ for more details on how to add arguments."
msgstr ""

# 77178052e07d45f6bfd80e92cefa8386
#: ../spack/lib/spack/docs/developer_guide.rst:321
msgid ""
"Some commands have a set of subcommands, like ``spack compiler find`` or "
"``spack module lmod refresh``. You can add subparsers to your parser to "
"handle this. Check out ``spack edit --command compiler`` for an example of "
"this."
msgstr ""

# 722d46e5e90149eb8bcad777697574df
#: ../spack/lib/spack/docs/developer_guide.rst:325
msgid ""
"A lot of commands take the same arguments and flags. These arguments should "
"be defined in ``lib/spack/spack/cmd/common/arguments.py`` so that they don't "
"need to be redefined in multiple commands."
msgstr ""

# 91d88bd22e8147518c835924507917a3
#: ../spack/lib/spack/docs/developer_guide.rst:331
msgid "``<name>()``"
msgstr ""

# aa6adf94e0f346daa8301aa2bb1208d8
#: ../spack/lib/spack/docs/developer_guide.rst:333
msgid ""
"In order to run your command, Spack searches for a function with the same "
"name as your command in ``<name>.py``. This is the main method for your "
"command, and can call other helper methods to handle common tasks."
msgstr ""

# 7d7765b2e1e54ec595bb34ecca35d440
#: ../spack/lib/spack/docs/developer_guide.rst:337
msgid ""
"Remember, before adding a new command, think to yourself whether or not this "
"new command is actually necessary. Sometimes, the functionality you desire "
"can be added to an existing command. Also remember to add unit tests for "
"your command. If it isn't used very frequently, changes to the rest of Spack "
"can cause your command to break without sufficient unit tests to prevent "
"this from happening."
msgstr ""

# 0c6109e4112a473ba0244b9a4f36dfec
#: ../spack/lib/spack/docs/developer_guide.rst:344
msgid ""
"Whenever you add/remove/rename a command or flags for an existing command, "
"make sure to update Spack's `Bash tab completion script <https://github.com/"
"adamjstewart/spack/blob/develop/share/spack/spack-completion.bash>`_."
msgstr ""

# be9e9cad49274dbabeef182b6b57c602
#: ../spack/lib/spack/docs/developer_guide.rst:354
msgid "Unit testing"
msgstr ""

# ce62b512913041778b1f5cb3f45a9c1b
#: ../spack/lib/spack/docs/developer_guide.rst:358
msgid "Developer commands"
msgstr ""

# dcb983886d0d4f16afd620644fed073d
#: ../spack/lib/spack/docs/developer_guide.rst:364
msgid "``spack doc``"
msgstr ""

# 9e136af6f230423d939e7ee72f5e8b9e
#: ../spack/lib/spack/docs/developer_guide.rst:370
msgid "``spack test``"
msgstr ""

# f01efebd52384286b31f34698eeddb95
#: ../spack/lib/spack/docs/developer_guide.rst:376
msgid "``spack python``"
msgstr ""

# 4e363bca1c0b49549baf304c984a7999
#: ../spack/lib/spack/docs/developer_guide.rst:378
msgid ""
"``spack python`` is a command that lets you import and debug things as if "
"you were in a Spack interactive shell. Without any arguments, it is similar "
"to a normal interactive Python shell, except you can import spack and any "
"other Spack modules:"
msgstr ""

# 424881188efc4352a9741f1c80f978d7
#: ../spack/lib/spack/docs/developer_guide.rst:398
msgid "You can also run a single command:"
msgstr ""

# 7da3b0e204f24a5daf96fc71b88d79a4
#: ../spack/lib/spack/docs/developer_guide.rst:405
msgid "or a file:"
msgstr ""

# 793117f1fd52489bac4f2d6e8e9dc18e
#: ../spack/lib/spack/docs/developer_guide.rst:411
msgid "just like you would with the normal ``python`` command."
msgstr ""

# 7a405e1f97494fdbb64d28cd85260865
#: ../spack/lib/spack/docs/developer_guide.rst:417
msgid "``spack url``"
msgstr ""

# 214a3a43ebd74d4195736ffb2cf6a02b
#: ../spack/lib/spack/docs/developer_guide.rst:419
msgid ""
"A package containing a single URL can be used to download several different "
"versions of the package. If you've ever wondered how this works, all of the "
"magic is in :mod:`spack.url`. This module contains methods for extracting "
"the name and version of a package from its URL. The name is used by ``spack "
"create`` to guess the name of the package. By determining the version from "
"the URL, Spack can replace it with other versions to determine where to "
"download them from."
msgstr ""

# 938a64edbc594a07869222bde986c73f
#: ../spack/lib/spack/docs/developer_guide.rst:427
msgid ""
"The regular expressions in ``parse_name_offset`` and "
"``parse_version_offset`` are used to extract the name and version, but they "
"aren't perfect. In order to debug Spack's URL parsing support, the ``spack "
"url`` command can be used."
msgstr ""

# fa5741ade10744fb8f5fab312c2e25c0
#: ../spack/lib/spack/docs/developer_guide.rst:433
msgid "``spack url parse``"
msgstr ""

# 6112119017694eccac74be8dec69edaf
#: ../spack/lib/spack/docs/developer_guide.rst:435
msgid "If you need to debug a single URL, you can use the following command:"
msgstr ""

# 76cc7169dc364cb7bee2663cff5bb15f
#: ../spack/lib/spack/docs/developer_guide.rst:439
msgid ""
"You'll notice that the name and version of this URL are correctly detected, "
"and you can even see which regular expressions it was matched to. However, "
"you'll notice that when it substitutes the version number in, it doesn't "
"replace the ``2.2`` with ``9.9`` where we would expect ``9.9.9b`` to live. "
"This particular package may require a ``list_url`` or ``url_for_version`` "
"function."
msgstr ""

# 950d7353840a4990bd1753672848db3c
#: ../spack/lib/spack/docs/developer_guide.rst:446
msgid ""
"This command also accepts a ``--spider`` flag. If provided, Spack searches "
"for other versions of the package and prints the matching URLs."
msgstr ""

# bbc3fa075fe94000a1ab063ca1d0607d
#: ../spack/lib/spack/docs/developer_guide.rst:451
msgid "``spack url list``"
msgstr ""

# 4127b4eef50c4b91a64119e09da011a4
#: ../spack/lib/spack/docs/developer_guide.rst:453
msgid ""
"This command lists every URL in every package in Spack. If given the ``--"
"color`` and ``--extrapolation`` flags, it also colors the part of the string "
"that it detected to be the name and version. The ``--incorrect-name`` and "
"``--incorrect-version`` flags can be used to print URLs that were not being "
"parsed correctly."
msgstr ""

# 8496498d3aa945e38968cb4591a99aab
#: ../spack/lib/spack/docs/developer_guide.rst:461
msgid "``spack url summary``"
msgstr ""

# 44d74ebb88c54f3d9a4d06f5b24f42d5
#: ../spack/lib/spack/docs/developer_guide.rst:463
msgid ""
"This command attempts to parse every URL for every package in Spack and "
"prints a summary of how many of them are being correctly parsed. It also "
"prints a histogram showing which regular expressions are being matched and "
"how frequently:"
msgstr ""

# f0ffc4e3b5c0493c8cfacd6ca42ca6d8
#: ../spack/lib/spack/docs/developer_guide.rst:470
msgid ""
"This command is essential for anyone adding or changing the regular "
"expressions that parse names and versions. By running this command before "
"and after the change, you can make sure that your regular expression fixes "
"more packages than it breaks."
msgstr ""

# de57197e529a4004b523a74255374fa5
#: ../spack/lib/spack/docs/developer_guide.rst:477
msgid "Profiling"
msgstr ""

# c422761fe33e4237a65e2571e11a0612
#: ../spack/lib/spack/docs/developer_guide.rst:479
msgid ""
"Spack has some limited built-in support for profiling, and can report "
"statistics using standard Python timing tools.  To use this feature, supply "
"``--profile`` to Spack on the command line, before any subcommands."
msgstr ""

# b0bc8ab31b6b4e6d8d082fe0fddf969c
#: ../spack/lib/spack/docs/developer_guide.rst:487
msgid "``spack --profile``"
msgstr ""

# 5b19fcb511684dab93d68654ccbeffae
#: ../spack/lib/spack/docs/developer_guide.rst:489
msgid "``spack --profile`` output looks like this:"
msgstr ""

# c294e16a026b44c5bea0532beed1e02e
#: ../spack/lib/spack/docs/developer_guide.rst:494
msgid ""
"The bottom of the output shows the top most time consuming functions, "
"slowest on top.  The profiling support is from Python's built-in tool, "
"`cProfile <https://docs.python.org/2/library/profile.html#module-cProfile>`_."
msgstr ""

# cd58a4c7fadc43b6a952bcacd96b4ca8
#: ../spack/lib/spack/docs/docker_for_developers.rst:10
msgid "Docker for Developers"
msgstr ""

# c16067ff0f0e4f5883ea6c05479a223b
#: ../spack/lib/spack/docs/docker_for_developers.rst:12
msgid ""
"This guide is intended for people who want to use our prepared docker "
"environments to work on developing Spack or working on spack packages. It is "
"meant to serve as the companion documentation for the :ref:`packaging-guide`."
msgstr ""

# 708b7e38d3f548dfb0e28f97a3d4a70f
#: ../spack/lib/spack/docs/docker_for_developers.rst:20
msgid "To get started, all you need is the latest version of ``docker``."
msgstr ""

# 93e4daded960473ba41e63fa2db8ab09
#: ../spack/lib/spack/docs/docker_for_developers.rst:28
msgid ""
"This command should drop you into an interactive shell where you can run "
"spack within an isolated docker container running ubuntu.  The copy of spack "
"being used should be tied to the working copy of your cloned git repo, so "
"any changes you make should be immediately reflected in the running docker "
"container.  Feel free to add or modify any packages or to hack on spack, "
"itself.  Your contained copy of spack should immediately reflect all changes."
msgstr ""

# 7dfe51a384334e93a34ec1cd8ec07cd4
#: ../spack/lib/spack/docs/docker_for_developers.rst:35
msgid ""
"To work within a container running a different linux distro, source one of "
"the other environment files under ``config``."
msgstr ""

# 463420b9e3af47dba0e6adf49596663b
#: ../spack/lib/spack/docs/extensions.rst:10
msgid "Custom Extensions"
msgstr ""

# fb200c38408f4d7c83d1b9628b0229e4
#: ../spack/lib/spack/docs/extensions.rst:14
msgid ""
"The support for extending Spack with custom commands is still experimental. "
"Users should expect APIs or prescribed directory structures to change at any "
"time."
msgstr ""

# 50c870327751401ca80d83da9073a770
#: ../spack/lib/spack/docs/extensions.rst:18
msgid ""
"*Spack extensions* permit you to extend Spack capabilities by deploying your "
"own custom commands or logic in an arbitrary location on your filesystem. "
"This might be extremely useful e.g. to develop and maintain a command whose "
"purpose is too specific to be considered for reintegration into the mainline "
"or to evolve a command through its early stages before starting a discussion "
"to merge it upstream. From Spack's point of view an extension is any path in "
"your filesystem which respects a prescribed naming and layout for files:"
msgstr ""

# e0aa050cfab34719bd0635eba561cfea
#: ../spack/lib/spack/docs/extensions.rst:39
msgid ""
"In the example above the extension named *scripting* adds an additional "
"command (``filter``) and unit tests to verify its behavior. The code for "
"this example can be obtained by cloning the corresponding git repository:"
msgstr ""

# 538f50aba06e4506a59ef2c5c3191d06
#: ../spack/lib/spack/docs/extensions.rst:57
msgid ""
"As you can see by inspecting the sources, Python modules that are part of "
"the extension can import any core Spack module."
msgstr ""

# 42d5c3f12672469bbed51b82eb621193
#: ../spack/lib/spack/docs/extensions.rst:62
msgid "Configure Spack to Use Extensions"
msgstr ""

# c93f94299cae4435b61ff2bd23547af8
#: ../spack/lib/spack/docs/extensions.rst:64
msgid ""
"To make your current Spack instance aware of extensions you should add their "
"root paths to ``config.yaml``. In the case of our example this means "
"ensuring that:"
msgstr ""

# 6b6b2e30805f4175a34520d292146d54
#: ../spack/lib/spack/docs/extensions.rst:73
msgid ""
"is part of your configuration file. Once this is setup any command that the "
"extension provides will be available from the command line:"
msgstr ""

# 633caa896a6e426cb16855a41fbac37a
#: ../spack/lib/spack/docs/extensions.rst:96
msgid ""
"The corresponding unit tests can be run giving the appropriate options to "
"``spack test``:"
msgstr ""

# 1ae54eebb0e14bc9b39e2612f7521c9e
#: ../spack/lib/spack/docs/features.rst:8
msgid "Feature Overview"
msgstr "機能概要"

# e79b5624e8a8447784701eac1e0a23b6
#: ../spack/lib/spack/docs/features.rst:10
msgid ""
"This is a high-level overview of features that make Spack different from "
"other `package managers <http://en.wikipedia.org/wiki/"
"Package_management_system>`_ and `port systems <http://en.wikipedia.org/wiki/"
"Ports_collection>`_."
msgstr ""

# 73f89c0903ec448ba9da6dbebec2522a
#: ../spack/lib/spack/docs/features.rst:17
msgid "Simple package installation"
msgstr ""

# 1e42878785814dd3b22c9d7b0c3e971a
#: ../spack/lib/spack/docs/features.rst:19
msgid ""
"Installing the default version of a package is simple. This will install the "
"latest version of the ``mpileaks`` package and all of its dependencies:"
msgstr ""

# 9c98fd10a2b2403aba63f6a89cdd55d5
#: ../spack/lib/spack/docs/features.rst:28
msgid "Custom versions & configurations"
msgstr "バージョンとコンフィギュレーションのカスタマイズ"

# d23125960fdc4da691909639399685d7
#: ../spack/lib/spack/docs/features.rst:30
msgid ""
"Spack allows installation to be customized.  Users can specify the version, "
"build compiler, compile-time options, and cross-compile platform, all on the "
"command line."
msgstr ""

# 6286a83b3b3049eb91e4feb8edb7eccb
#: ../spack/lib/spack/docs/features.rst:54
msgid ""
"Users can specify as many or few options as they care about. Spack will fill "
"in the unspecified values with sensible defaults. The two listed syntaxes "
"for variants are identical when the value is boolean."
msgstr ""

# 11dfba313d264e59963724b419a2a311
#: ../spack/lib/spack/docs/features.rst:60
msgid "Customize dependencies"
msgstr ""

# a5d31ec417074d6a9760ee882f4b36d5
#: ../spack/lib/spack/docs/features.rst:62
msgid ""
"Spack allows *dependencies* of a particular installation to be customized "
"extensively.  Suppose that ``mpileaks`` depends indirectly on ``libelf`` and "
"``libdwarf``.  Using ``^``, users can add custom configurations for the "
"dependencies:"
msgstr ""

# 502b8d2f2fb74852aa63dbdc247b40b9
#: ../spack/lib/spack/docs/features.rst:74
msgid "Non-destructive installs"
msgstr ""

# 86627debb00a4e44894d4a6c8586bf98
#: ../spack/lib/spack/docs/features.rst:76
msgid ""
"Spack installs every unique package/dependency configuration into its own "
"prefix, so new installs will not break existing ones."
msgstr ""

# be262890154f4c4d88cf307fc2267984
#: ../spack/lib/spack/docs/features.rst:81
msgid "Packages can peacefully coexist"
msgstr ""

# da3d8f53314c4e679ca19fdf5339e25e
#: ../spack/lib/spack/docs/features.rst:83
msgid ""
"Spack avoids library misconfiguration by using ``RPATH`` to link "
"dependencies.  When a user links a library or runs a program, it is tied to "
"the dependencies it was built with, so there is no need to manipulate "
"``LD_LIBRARY_PATH`` at runtime."
msgstr ""

# d543b3f92c8d43269b850174f8461bfc
#: ../spack/lib/spack/docs/features.rst:90
msgid "Creating packages is easy"
msgstr ""

# d7bc4ba50c4548c280abfa74dc7c428b
#: ../spack/lib/spack/docs/features.rst:92
msgid ""
"To create a new packages, all Spack needs is a URL for the source archive.  "
"The ``spack create`` command will create a boilerplate package file, and the "
"package authors can fill in specific build steps in pure Python."
msgstr ""

# 8f3c25ff04674ae19198787b1248bbb3
#: ../spack/lib/spack/docs/features.rst:97
msgid "For example, this command:"
msgstr ""

# 11fbe186cda447fdbca52769119aacd6
#: ../spack/lib/spack/docs/features.rst:103
msgid "creates a simple python file:"
msgstr ""

# 4734d3d04f334f528bda5124fe3435b4
#: ../spack/lib/spack/docs/features.rst:130
msgid ""
"It doesn't take much python coding to get from there to a working package:"
msgstr ""

# dce10ac30cb148f691598c0d815bd8e0
#: ../spack/lib/spack/docs/features.rst:136
msgid ""
"Spack also provides wrapper functions around common commands like "
"``configure``, ``make``, and ``cmake`` to make writing packages simple."
msgstr ""

# #-#-#-#-#  getting_started.pot (Spack 0.12)  #-#-#-#-#
# b4f06efbe70e4ae7b38037fc26b30fca
# #-#-#-#-#  tutorial_packaging.pot (Spack 0.12)  #-#-#-#-#
# 2ea56ae2215d49f7a0c7c75a6a051922
#: ../spack/lib/spack/docs/getting_started.rst:10
#: ../spack/lib/spack/docs/tutorial_packaging.rst:33
msgid "Getting Started"
msgstr "はじめに"

# acc3a53acffa48db92870097392298cd
#: ../spack/lib/spack/docs/getting_started.rst:14
msgid "Prerequisites"
msgstr ""

# 76ef5fd9394b4930992d361e4b3f50d6
#: ../spack/lib/spack/docs/getting_started.rst:16
msgid ""
"Spack has the following minimum requirements, which must be installed before "
"Spack is run:"
msgstr ""

# ea2708be6cdb4998877da9d8ea96447a
#: ../spack/lib/spack/docs/getting_started.rst:19
msgid "Python 2 (2.6 or 2.7) or 3 (3.4 - 3.7) to run Spack"
msgstr ""

# e5a632ee1b564675b24a705f8394bb17
#: ../spack/lib/spack/docs/getting_started.rst:20
msgid "A C/C++ compiler for building"
msgstr ""

# 2c7250034c434681bb119836b94094f5
#: ../spack/lib/spack/docs/getting_started.rst:21
msgid "The ``make`` executable for building"
msgstr ""

# 3aad6aa8907440608fa2d2a0bda8b2e2
#: ../spack/lib/spack/docs/getting_started.rst:22
msgid "The ``git`` and ``curl`` commands for fetching"
msgstr ""

# 12d8cf35ca644bd081228db689656552
#: ../spack/lib/spack/docs/getting_started.rst:23
msgid "If using the ``gpg`` subcommand, ``gnupg2`` is required"
msgstr ""

# aa38762563e2435d81ab6db9f41fa238
#: ../spack/lib/spack/docs/getting_started.rst:25
msgid ""
"These requirements can be easily installed on most modern Linux systems; on "
"Macintosh, XCode is required.  Spack is designed to run on HPC platforms "
"like Cray and BlueGene/Q.  Not all packages should be expected to work on "
"all platforms.  A build matrix showing which packages are working on which "
"systems is planned but not yet available."
msgstr ""

# fb84a50b2f7d431594f7cd965c581be7
#: ../spack/lib/spack/docs/getting_started.rst:33
msgid "Installation"
msgstr ""

# 8044677d95d7436b9c0cc44611c2881b
#: ../spack/lib/spack/docs/getting_started.rst:35
msgid ""
"Getting Spack is easy.  You can clone it from the `github repository "
"<https://github.com/spack/spack>`_ using this command:"
msgstr ""

# bf011c15b3d5432a90c6b58657df23ca
#: ../spack/lib/spack/docs/getting_started.rst:42
msgid "This will create a directory called ``spack``."
msgstr ""

# 20dc86761c1148968e24245c3520f1dd
#: ../spack/lib/spack/docs/getting_started.rst:46
msgid "Add Spack to the Shell"
msgstr ""

# add43ebdbde44016843d8f25a7cc408b
#: ../spack/lib/spack/docs/getting_started.rst:48
msgid ""
"We'll assume that the full path to your downloaded Spack directory is in the "
"``SPACK_ROOT`` environment variable.  Add ``$SPACK_ROOT/bin`` to your path "
"and you're ready to go:"
msgstr ""

# 542896507e4044edb76378a60a20b331
#: ../spack/lib/spack/docs/getting_started.rst:57
msgid "For a richer experience, use Spack's shell support:"
msgstr ""

# 2fffbeac3d914140a234b46fc44ff667
#: ../spack/lib/spack/docs/getting_started.rst:70
msgid ""
"This automatically adds Spack to your ``PATH`` and allows the ``spack`` "
"command to be used to execute spack :ref:`commands <shell-support>` and :ref:"
"`useful packaging commands <packaging-shell-support>`."
msgstr ""

# 783d148cfa6443dfa928b4eefa232fdf
#: ../spack/lib/spack/docs/getting_started.rst:74
msgid ""
"If :ref:`environment-modules or dotkit <InstallEnvironmentModules>` is "
"installed and available, the ``spack`` command can also load and unload :ref:"
"`modules <modules>`."
msgstr ""

# 0bb9788e71a74763af47ff5130f4fd09
#: ../spack/lib/spack/docs/getting_started.rst:80
msgid "Clean Environment"
msgstr ""

# 67edaddf7b22481588248c296862e38d
#: ../spack/lib/spack/docs/getting_started.rst:82
msgid ""
"Many packages' installs can be broken by changing environment variables.  "
"For example, a package might pick up the wrong build-time dependencies (most "
"of them not specified) depending on the setting of ``PATH``.  ``GCC`` seems "
"to be particularly vulnerable to these issues."
msgstr ""

# dcf90e6ddbd840c8bac076a39bc4ddad
#: ../spack/lib/spack/docs/getting_started.rst:87
msgid ""
"Therefore, it is recommended that Spack users run with a *clean "
"environment*, especially for ``PATH``.  Only software that comes with the "
"system, or that you know you wish to use with Spack, should be included.  "
"This procedure will avoid many strange build errors."
msgstr ""

# be9caa7d8fb444aa912be966be876be1
#: ../spack/lib/spack/docs/getting_started.rst:95
msgid "Check Installation"
msgstr ""

# 86073364caf0448182c87472a7acb889
#: ../spack/lib/spack/docs/getting_started.rst:97
msgid ""
"With Spack installed, you should be able to run some basic Spack commands.  "
"For example:"
msgstr ""

# 31c1389c65154a82a93a8abf247389bf
#: ../spack/lib/spack/docs/getting_started.rst:105
msgid "Optional: Alternate Prefix"
msgstr ""

# 61e2237c3427449dba554fd491c26ba5
#: ../spack/lib/spack/docs/getting_started.rst:107
msgid ""
"You may want to run Spack out of a prefix other than the git repository you "
"cloned.  The ``spack clone`` command provides this functionality.  To "
"install spack in a new directory, simply type:"
msgstr ""

# 5798bba9f4f143c086969894b533fced
#: ../spack/lib/spack/docs/getting_started.rst:115
msgid ""
"This will install a new spack script in ``/my/favorite/prefix/bin``, which "
"you can use just like you would the regular spack script.  Each copy of "
"spack installs packages into its own ``$PREFIX/opt`` directory."
msgstr ""

# cdfc72269aa547f3bcee4a2b1dd0f2e9
#: ../spack/lib/spack/docs/getting_started.rst:123
msgid "Next Steps"
msgstr ""

# 99bb1ca887764ef6b81501f585ea8ebc
#: ../spack/lib/spack/docs/getting_started.rst:125
msgid ""
"In theory, Spack doesn't need any additional installation; just download and "
"run!  But in real life, additional steps are usually required before Spack "
"can work in a practical sense.  Read on..."
msgstr ""

# d257928cc2d943f4b406e4debf85154c
#: ../spack/lib/spack/docs/getting_started.rst:134
msgid "Compiler configuration"
msgstr ""

# 1ecb8aca70bd4d67a083b1349b19675b
#: ../spack/lib/spack/docs/getting_started.rst:136
msgid ""
"Spack has the ability to build packages with multiple compilers and compiler "
"versions. Spack searches for compilers on your machine automatically the "
"first time it is run. It does this by inspecting your ``PATH``."
msgstr ""

# c9ef35103e4947c6bbee2db92d0f39b6
#: ../spack/lib/spack/docs/getting_started.rst:145
msgid "``spack compilers``"
msgstr ""

# 38444c33a09f45249312bb9ffa4e5d57
#: ../spack/lib/spack/docs/getting_started.rst:147
msgid ""
"You can see which compilers spack has found by running ``spack compilers`` "
"or ``spack compiler list``:"
msgstr ""

# 8fcaa01a72314a5cb5ac8a9e5a55ec58
#: ../spack/lib/spack/docs/getting_started.rst:169
msgid ""
"Any of these compilers can be used to build Spack packages.  More on how "
"this is done is in :ref:`sec-specs`."
msgstr ""

# 375f869dd60b40a08b1e01604fd4a0d2
#: ../spack/lib/spack/docs/getting_started.rst:176
msgid "``spack compiler add``"
msgstr ""

# fa923780a0044801b96217cbb0985ba0
#: ../spack/lib/spack/docs/getting_started.rst:178
msgid "An alias for ``spack compiler find``."
msgstr ""

# 5b16f4c036914baa81a5cbee6d46ee6b
#: ../spack/lib/spack/docs/getting_started.rst:184
msgid "``spack compiler find``"
msgstr ""

# 6afbee2f408f46fa9f6846892d0ab499
#: ../spack/lib/spack/docs/getting_started.rst:186
msgid ""
"If you do not see a compiler in this list, but you want to use it with "
"Spack, you can simply run ``spack compiler find`` with the path to where the "
"compiler is installed.  For example:"
msgstr ""

# 70a077aad3384e99858b59c8b4a4b5ad
#: ../spack/lib/spack/docs/getting_started.rst:196
msgid ""
"Or you can run ``spack compiler find`` with no arguments to force auto-"
"detection.  This is useful if you do not know where compilers are installed, "
"but you know that new compilers have been added to your ``PATH``.  For "
"example, you might load a module, like this:"
msgstr ""

# 9b208d33fb6b4830b1f28157b8812503
#: ../spack/lib/spack/docs/getting_started.rst:208
msgid ""
"This loads the environment module for gcc-4.9.0 to add it to ``PATH``, and "
"then it adds the compiler to Spack."
msgstr ""

# 189318bb4acd450184e3640faa53161c
#: ../spack/lib/spack/docs/getting_started.rst:213
msgid ""
"By default, spack does not fill in the ``modules:`` field in the ``compilers."
"yaml`` file.  If you are using a compiler from a module, then you should add "
"this field manually. See the section on :ref:`compilers-requiring-modules`."
msgstr ""

# 4f6a98f1aa2044a6b352a09606454553
#: ../spack/lib/spack/docs/getting_started.rst:222
msgid "``spack compiler info``"
msgstr ""

# f7cc6f012d644551ba72046586e88cc1
#: ../spack/lib/spack/docs/getting_started.rst:224
msgid ""
"If you want to see specifics on a particular compiler, you can run ``spack "
"compiler info`` on it:"
msgstr ""

# e9adefb8d83b4439a10bd716be106de1
#: ../spack/lib/spack/docs/getting_started.rst:240
msgid ""
"This shows which C, C++, and Fortran compilers were detected by Spack. "
"Notice also that we didn't have to be too specific about the version. We "
"just said ``intel@15``, and information about the only matching Intel "
"compiler was displayed."
msgstr ""

# 5ace8e8c54d6428e86ccc70fa3bfeb76
#: ../spack/lib/spack/docs/getting_started.rst:247
msgid "Manual compiler configuration"
msgstr ""

# f993cf7e3e354bb3b1bf00a4286f086f
#: ../spack/lib/spack/docs/getting_started.rst:249
msgid ""
"If auto-detection fails, you can manually configure a compiler by editing "
"your ``~/.spack/compilers.yaml`` file.  You can do this by running ``spack "
"config edit compilers``, which will open the file in your ``$EDITOR``."
msgstr ""

# f54ea430c1d24a1ebf523773c5902ef1
#: ../spack/lib/spack/docs/getting_started.rst:253
msgid "Each compiler configuration in the file looks like this:"
msgstr ""

# 5ff9136b504f4347b3b21ec29f5a4650
#: ../spack/lib/spack/docs/getting_started.rst:268
msgid ""
"For compilers that do not support Fortran (like ``clang``), put ``None`` for "
"``f77`` and ``fc``:"
msgstr ""

# 5ddc5ff903504fc1be84d79447baa082
#: ../spack/lib/spack/docs/getting_started.rst:284
msgid ""
"Once you save the file, the configured compilers will show up in the list "
"displayed by ``spack compilers``."
msgstr ""

# 6907258a421b430189303685aba2c416
#: ../spack/lib/spack/docs/getting_started.rst:287
msgid ""
"You can also add compiler flags to manually configured compilers. These "
"flags should be specified in the ``flags`` section of the compiler "
"specification. The valid flags are ``cflags``, ``cxxflags``, ``fflags``, "
"``cppflags``, ``ldflags``, and ``ldlibs``. For example:"
msgstr ""

# 4c9ecb6d1a324d339560bc499f0dd473
#: ../spack/lib/spack/docs/getting_started.rst:309
msgid ""
"These flags will be treated by spack as if they were entered from the "
"command line each time this compiler is used. The compiler wrappers then "
"inject those flags into the compiler command. Compiler flags entered from "
"the command line will be discussed in more detail in the following section."
msgstr ""

# c4ecb35de69349ea891d3adbbe2c182c
#: ../spack/lib/spack/docs/getting_started.rst:317
msgid "Build Your Own Compiler"
msgstr ""

# f46a8abc012142ea9ac55e77753122ff
#: ../spack/lib/spack/docs/getting_started.rst:319
msgid ""
"If you are particular about which compiler/version you use, you might wish "
"to have Spack build it for you.  For example:"
msgstr ""

# 202ceaaf2b4e401989031563ffb35d16
#: ../spack/lib/spack/docs/getting_started.rst:326
msgid ""
"Once that has finished, you will need to add it to your ``compilers.yaml`` "
"file.  You can then set Spack to use it by default by adding the following "
"to your ``packages.yaml`` file:"
msgstr ""

# e3028718c58447a28956ac76a1f0b3ba
#: ../spack/lib/spack/docs/getting_started.rst:340
msgid "Compilers Requiring Modules"
msgstr ""

# ee592387823241f6bd57e5270eee9e79
#: ../spack/lib/spack/docs/getting_started.rst:342
msgid ""
"Many installed compilers will work regardless of the environment they are "
"called with.  However, some installed compilers require ``$LD_LIBRARY_PATH`` "
"or other environment variables to be set in order to run; this is typical "
"for Intel and other proprietary compilers."
msgstr ""

# 9a87fe9112514086a80cdbd28c188ae4
#: ../spack/lib/spack/docs/getting_started.rst:347
msgid ""
"In such a case, you should tell Spack which module(s) to load in order to "
"run the chosen compiler (If the compiler does not come with a module file, "
"you might consider making one by hand).  Spack will load this module into "
"the environment ONLY when the compiler is run, and NOT in general for a "
"package's ``install()`` method.  See, for example, this ``compilers.yaml`` "
"file:"
msgstr ""

# c66df052679f40b388608555b3c00e20
#: ../spack/lib/spack/docs/getting_started.rst:367
msgid ""
"Some compilers require special environment settings to be loaded not just to "
"run, but also to execute the code they build, breaking packages that need to "
"execute code they just compiled.  If it's not possible or practical to use a "
"better compiler, you'll need to ensure that environment settings are "
"preserved for compilers like this (i.e., you'll need to load the module or "
"source the compiler's shell script)."
msgstr ""

# afab9847779a4d298c4cb6fcd0151ad7
#: ../spack/lib/spack/docs/getting_started.rst:374
msgid ""
"By default, Spack tries to ensure that builds are reproducible by cleaning "
"the environment before building.  If this interferes with your compiler "
"settings, you CAN use ``spack install --dirty`` as a workaround. Note that "
"this MAY interfere with package builds."
msgstr ""

# ceb802f10ab44d7babab3963bda44f14
#: ../spack/lib/spack/docs/getting_started.rst:383
msgid "Licensed Compilers"
msgstr ""

# 03a1e3f84e144fd8bb0a06e79c598043
#: ../spack/lib/spack/docs/getting_started.rst:385
msgid ""
"Some proprietary compilers require licensing to use.  If you need to use a "
"licensed compiler (eg, PGI), the process is similar to a mix of build your "
"own, plus modules:"
msgstr ""

# a5f97c33c1ae4c5c964b50c1e2cd0e05
#: ../spack/lib/spack/docs/getting_started.rst:389
msgid ""
"Create a Spack package (if it doesn't exist already) to install your "
"compiler.  Follow instructions on installing :ref:`license`."
msgstr ""

# 5caa01682cef4da681d2d5c21661bb22
#: ../spack/lib/spack/docs/getting_started.rst:392
msgid ""
"Once the compiler is installed, you should be able to test it by using Spack "
"to load the module it just created, and running simple builds (eg: ``cc "
"helloWorld.c && ./a.out``)"
msgstr ""

# 35c924063e1243948cf6fdd8a34f4244
#: ../spack/lib/spack/docs/getting_started.rst:396
msgid "Add the newly-installed compiler to ``compilers.yaml`` as shown above."
msgstr ""

# f81a65df24cc4f1bab317a7b8e006a77
#: ../spack/lib/spack/docs/getting_started.rst:403
msgid "Mixed Toolchains"
msgstr ""

# 92109b2bc59746f498b3dc3bbbd3d68b
#: ../spack/lib/spack/docs/getting_started.rst:405
msgid ""
"Modern compilers typically come with related compilers for C, C++ and "
"Fortran bundled together.  When possible, results are best if the same "
"compiler is used for all languages."
msgstr ""

# 889251f9a2cf461f92c9a81bd12b075d
#: ../spack/lib/spack/docs/getting_started.rst:409
msgid ""
"In some cases, this is not possible.  For example, starting with macOS El "
"Capitan (10.11), many packages no longer build with GCC, but XCode provides "
"no Fortran compilers.  The user is therefore forced to use a mixed "
"toolchain: XCode-provided Clang for C/C++ and GNU ``gfortran`` for Fortran."
msgstr ""

# a67c475183a74290bca2630305556edf
#: ../spack/lib/spack/docs/getting_started.rst:415
msgid ""
"You need to make sure that Xcode is installed. Run the following command:"
msgstr ""

# 5a9fa2fa022c4e989bf522288abb6003
#: ../spack/lib/spack/docs/getting_started.rst:422
msgid ""
"If the Xcode command-line tools are already installed, you will see an error "
"message:"
msgstr ""

# 20dac41d50dc445ba7f0a17931f7cdfe
#: ../spack/lib/spack/docs/getting_started.rst:430
msgid ""
"For most packages, the Xcode command-line tools are sufficient. However, "
"some packages like ``qt`` require the full Xcode suite. You can check to see "
"which you have installed by running:"
msgstr ""

# 03c1d355a6e540fb88b4f4e2bbb7ab8d
#: ../spack/lib/spack/docs/getting_started.rst:439
msgid "If the output is:"
msgstr ""

# 09392317e76b4504a765fa3576b85ed4
#: ../spack/lib/spack/docs/getting_started.rst:446
msgid "you already have the full Xcode suite installed. If the output is:"
msgstr ""

# 8d8aec0cea494a55aa193a81d2eac983
#: ../spack/lib/spack/docs/getting_started.rst:453
msgid ""
"you only have the command-line tools installed. The full Xcode suite can be "
"installed through the App Store. Make sure you launch the Xcode application "
"and accept the license agreement before using Spack. It may ask you to "
"install additional components. Alternatively, the license can be accepted "
"through the command line:"
msgstr ""

# 7acbc140f10b426d851e077c86db6c2c
#: ../spack/lib/spack/docs/getting_started.rst:464
msgid "Note: the flag is ``-license``, not ``--license``."
msgstr ""

# 7ac1358d66fc4df2b98fdca4561857af
#: ../spack/lib/spack/docs/getting_started.rst:466
msgid "Run ``spack compiler find`` to locate Clang."
msgstr ""

# 3a424f20273445a397c38f01aeb2876c
#: ../spack/lib/spack/docs/getting_started.rst:468
msgid ""
"There are different ways to get ``gfortran`` on macOS. For example, you can "
"install GCC with Spack (``spack install gcc``) or with Homebrew (``brew "
"install gcc``)."
msgstr ""

# d8efdca976a24b59a46f7d97d6d1fc96
#: ../spack/lib/spack/docs/getting_started.rst:472
msgid ""
"The only thing left to do is to edit ``~/.spack/compilers.yaml`` to provide "
"the path to ``gfortran``:"
msgstr ""

# 0b5e7e00616f4838966eb17bf2747a4f
#: ../spack/lib/spack/docs/getting_started.rst:485
msgid ""
"If you used Spack to install GCC, you can get the installation prefix by "
"``spack location -i gcc`` (this will only work if you have a single version "
"of GCC installed). Whereas for Homebrew, GCC is installed in ``/usr/local/"
"Cellar/gcc/x.y.z``."
msgstr ""

# 979962933fbb4aa396baa19b7f32f61f
#: ../spack/lib/spack/docs/getting_started.rst:492
msgid "Compiler Verification"
msgstr ""

# 0aabf058c90347818e9a544b67b54d39
#: ../spack/lib/spack/docs/getting_started.rst:494
msgid ""
"You can verify that your compilers are configured properly by installing a "
"simple package.  For example:"
msgstr ""

# f03ae64de8384f6da72b3bcb0148da33
#: ../spack/lib/spack/docs/getting_started.rst:506
msgid "Vendor-Specific Compiler Configuration"
msgstr ""

# a0886b7edf964cb1ba9d3db6f10d950e
#: ../spack/lib/spack/docs/getting_started.rst:508
msgid ""
"With Spack, things usually \"just work\" with GCC.  Not so for other "
"compilers.  This section provides details on how to get specific compilers "
"working."
msgstr ""

# c5bce936f55c48fd9d04d708a0644595
#: ../spack/lib/spack/docs/getting_started.rst:514
msgid "Intel Compilers"
msgstr ""

# 6a60103e82dd4b6ea4082e61cb56ad30
#: ../spack/lib/spack/docs/getting_started.rst:516
msgid ""
"Intel compilers are unusual because a single Intel compiler version can "
"emulate multiple GCC versions.  In order to provide this functionality, the "
"Intel compiler needs GCC to be installed. Therefore, the following steps are "
"necessary to successfully use Intel compilers:"
msgstr ""

# 4f7db379ff364d3697141dfa87ffbcad
#: ../spack/lib/spack/docs/getting_started.rst:522
msgid ""
"Install a version of GCC that implements the desired language features "
"(``spack install gcc``)."
msgstr ""

# badfa12508614c9f9674e42886aac4c6
#: ../spack/lib/spack/docs/getting_started.rst:525
msgid ""
"Tell the Intel compiler how to find that desired GCC.  This may be done in "
"one of two ways:"
msgstr ""

# dc03c32fbffd45efa7740b03707f48b9
#: ../spack/lib/spack/docs/getting_started.rst:528
msgid ""
"\"By default, the compiler determines which version of ``gcc`` or ``g++`` "
"you have installed from the ``PATH`` environment variable."
msgstr ""

# 08f97c04315f45e0b30e7cdc5466d7f2
#: ../spack/lib/spack/docs/getting_started.rst:531
msgid ""
"If you want use a version of ``gcc`` or ``g++`` other than the default "
"version on your system, you need to use either the ``-gcc-name`` or ``-gxx-"
"name`` compiler option to specify the path to the version of ``gcc`` or ``g+"
"+`` that you want to use.\""
msgstr ""

# 9424bd52cf4b41c88a7af1d624960678
#: ../spack/lib/spack/docs/getting_started.rst:538
msgid ""
"Intel compilers may therefore be configured in one of two ways with Spack: "
"using modules, or using compiler flags."
msgstr ""

# 6fa325fcf10741a4b7cfc80b2bfd8566
#: ../spack/lib/spack/docs/getting_started.rst:543
msgid "Configuration with Modules"
msgstr ""

# ca0b93c388414403920d19ff754d6310
#: ../spack/lib/spack/docs/getting_started.rst:545
msgid ""
"One can control which GCC is seen by the Intel compiler with modules. A "
"module must be loaded both for the Intel Compiler (so it will run) and GCC "
"(so the compiler can find the intended GCC).  The following configuration in "
"``compilers.yaml`` illustrates this technique:"
msgstr ""

# 2cb4b1d3b2b14ae19f194aaebdf495f2
#: ../spack/lib/spack/docs/getting_started.rst:566
msgid ""
"The version number on the Intel compiler is a combination of the \"native\" "
"Intel version number and the GNU compiler it is targeting."
msgstr ""

# 6d537766fba64ec2812ecb42f07c1225
#: ../spack/lib/spack/docs/getting_started.rst:572
msgid "Command Line Configuration"
msgstr ""

# bfab436ca44f47cf904e7becd1d88093
#: ../spack/lib/spack/docs/getting_started.rst:574
msgid ""
"One can also control which GCC is seen by the Intel compiler by adding flags "
"to the ``icc`` command:"
msgstr ""

# 6977ff0d02ba4f859499b53644a9c0bf
#: ../spack/lib/spack/docs/getting_started.rst:577
msgid "Identify the location of the compiler you just installed:"
msgstr ""

# c06577c03715427c8b8298e9585894d7
#: ../spack/lib/spack/docs/getting_started.rst:584
msgid "Set up ``compilers.yaml``, for example:"
msgstr ""

# 62d2fe5aa61d4655950926cbb39933de
#: ../spack/lib/spack/docs/getting_started.rst:605
msgid "PGI"
msgstr ""

# dcef73a0c7074cd9ab901d715fcd3251
#: ../spack/lib/spack/docs/getting_started.rst:607
msgid ""
"PGI comes with two sets of compilers for C++ and Fortran, distinguishable by "
"their names.  \"Old\" compilers:"
msgstr ""

# 0053bdb2ccb94d47baf33ce379bc386b
#: ../spack/lib/spack/docs/getting_started.rst:617
msgid "\"New\" compilers:"
msgstr ""

# 8085d14e5de341c6b6e39ebae9827def
#: ../spack/lib/spack/docs/getting_started.rst:626
msgid ""
"Older installations of PGI contains just the old compilers; whereas newer "
"installations contain the old and the new.  The new compiler is considered "
"preferable, as some packages (``hdf``) will not build with the old compiler."
msgstr ""

# c2ef056fb01748c899ef61381982060b
#: ../spack/lib/spack/docs/getting_started.rst:631
msgid ""
"When auto-detecting a PGI compiler, there are cases where Spack will find "
"the old compilers, when you really want it to find the new compilers.  It is "
"best to check this ``compilers.yaml``; and if the old compilers are being "
"used, change ``pgf77`` and ``pgf90`` to ``pgfortran``."
msgstr ""

# f08bf14d4f3c4ede8f3c6caeb9a8f4f6
#: ../spack/lib/spack/docs/getting_started.rst:637
msgid "Other issues:"
msgstr ""

# df7c594c5f58467db7f004d456261dd4
#: ../spack/lib/spack/docs/getting_started.rst:639
msgid ""
"There are reports that some packages will not build with PGI, including "
"``libpciaccess`` and ``openssl``.  A workaround is to build these packages "
"with another compiler and then use them as dependencies for PGI-build "
"packages.  For example:"
msgstr ""

# c1fb7ec448a548b982996ffdb984ffe7
#: ../spack/lib/spack/docs/getting_started.rst:649
msgid ""
"PGI requires a license to use; see :ref:`licensed-compilers` for more "
"information on installation."
msgstr ""

# d7755ba2112c437982a8488d4fd2040f
#: ../spack/lib/spack/docs/getting_started.rst:654
msgid ""
"It is believed the problem with HDF 4 is that everything is compiled with "
"the ``F77`` compiler, but at some point some Fortran 90 code slipped in "
"there. So compilers that can handle both FORTRAN 77 and Fortran 90 "
"(``gfortran``, ``pgfortran``, etc) are fine.  But compilers specific to one "
"or the other (``pgf77``, ``pgf90``) won't work."
msgstr ""

# 403b6ca14b884aa0a8fbf68fb9a7c2e1
#: ../spack/lib/spack/docs/getting_started.rst:664
msgid "NAG"
msgstr ""

# df56d7726cfe48fdb64c978798f7ea09
#: ../spack/lib/spack/docs/getting_started.rst:666
msgid ""
"The Numerical Algorithms Group provides a licensed Fortran compiler. Like "
"Clang, this requires you to set up a :ref:`mixed-toolchains`. It is "
"recommended to use GCC for your C/C++ compilers."
msgstr ""

# bcfd2a7b56ae46109257c6903cc8a1bc
#: ../spack/lib/spack/docs/getting_started.rst:670
msgid ""
"The NAG Fortran compilers are a bit more strict than other compilers, and "
"many packages will fail to install with error messages like:"
msgstr ""

# a94c6fe6ca2b4f33856952038b47e69b
#: ../spack/lib/spack/docs/getting_started.rst:677
msgid ""
"In order to convince the NAG compiler not to be too picky about calling "
"conventions, you can use ``FFLAGS=-mismatch`` and ``FCFLAGS=-mismatch``. "
"This can be done through the command line:"
msgstr ""

# d1afe007620b406bbe10195949188146
#: ../spack/lib/spack/docs/getting_started.rst:685
msgid "Or it can be set permanently in your ``compilers.yaml``:"
msgstr ""

# 4fb870becbdd4f5a8b415d8b2eb1055c
#: ../spack/lib/spack/docs/getting_started.rst:704
msgid "System Packages"
msgstr ""

# cac1dcde2d9c4d1f8427ec5eca99af3b
#: ../spack/lib/spack/docs/getting_started.rst:706
msgid ""
"Once compilers are configured, one needs to determine which pre-installed "
"system packages, if any, to use in builds.  This is configured in the file "
"``~/.spack/packages.yaml``.  For example, to use an OpenMPI installed in /"
"opt/local, one would use:"
msgstr ""

# 10cf881409b74476a9cd3d2f4608c26f
#: ../spack/lib/spack/docs/getting_started.rst:719
msgid ""
"In general, Spack is easier to use and more reliable if it builds all of its "
"own dependencies.  However, there are two packages for which one commonly "
"needs to use system versions:"
msgstr ""

# #-#-#-#-#  getting_started.pot (Spack 0.12)  #-#-#-#-#
# 7a7fdc24349e47b2a2af9f445bfc2fe4
# #-#-#-#-#  workflows.pot (Spack 0.12)  #-#-#-#-#
# add662f6f68e40afbbfa7e3e38de6a0c
#: ../spack/lib/spack/docs/getting_started.rst:725
#: ../spack/lib/spack/docs/workflows.rst:1271
msgid "MPI"
msgstr ""

# ecd733459a704a87819fb76fcf8fe575
#: ../spack/lib/spack/docs/getting_started.rst:727
msgid ""
"On supercomputers, sysadmins have already built MPI versions that take into "
"account the specifics of that computer's hardware.  Unless you know how they "
"were built and can choose the correct Spack variants, you are unlikely to "
"get a working MPI from Spack.  Instead, use an appropriate pre-installed MPI."
msgstr ""

# 413a5d8e97f94e94b7e224aa09027195
#: ../spack/lib/spack/docs/getting_started.rst:733
msgid ""
"If you choose a pre-installed MPI, you should consider using the pre-"
"installed compiler used to build that MPI; see above on ``compilers.yaml``."
msgstr ""

# e6d6ae781add4d96939a5d0cbcf52655
#: ../spack/lib/spack/docs/getting_started.rst:739
msgid "OpenSSL"
msgstr ""

# 8411b45458eb499ea57e5aa1281378c2
#: ../spack/lib/spack/docs/getting_started.rst:741
msgid ""
"The ``openssl`` package underlies much of modern security in a modern OS; an "
"attacker can easily \"pwn\" any computer on which they can modify SSL. "
"Therefore, any ``openssl`` used on a system should be created in a \"trusted "
"environment\" --- for example, that of the OS vendor."
msgstr ""

# 6bfac456cf6b47f8bb2b917a748bdab0
#: ../spack/lib/spack/docs/getting_started.rst:746
msgid ""
"OpenSSL is also updated by the OS vendor from time to time, in response to "
"security problems discovered in the wider community.  It is in everyone's "
"best interest to use any newly updated versions as soon as they come out.  "
"Modern Linux installations have standard procedures for security updates "
"without user involvement."
msgstr ""

# d175e54139eb4e97b26a4e9b58976573
#: ../spack/lib/spack/docs/getting_started.rst:752
msgid ""
"Spack running at user-level is not a trusted environment, nor do Spack users "
"generally keep up-to-date on the latest security holes in SSL.  For these "
"reasons, a Spack-installed OpenSSL should likely not be trusted."
msgstr ""

# 78f1ecf213bb4e48bb01d3ddec40f444
#: ../spack/lib/spack/docs/getting_started.rst:756
msgid ""
"As long as the system-provided SSL works, you can use it instead.  One can "
"check if it works by trying to download an ``https://``.  For example:"
msgstr ""

# 2eaf0b32b3e34a0c8e852c26cf4e8068
#: ../spack/lib/spack/docs/getting_started.rst:764
msgid ""
"To tell Spack to use the system-supplied OpenSSL, first determine what "
"version you have:"
msgstr ""

# 99d9873ed33346878b50cda3d19ecc82
#: ../spack/lib/spack/docs/getting_started.rst:772
msgid "Then add the following to ``~/.spack/packages.yaml``:"
msgstr ""

# 951ec6f867d646d5ba54c1ced1542aaa
#: ../spack/lib/spack/docs/getting_started.rst:785
msgid "BLAS / LAPACK"
msgstr ""

# 2c462ae23a214503a26ae8acddd4df0b
#: ../spack/lib/spack/docs/getting_started.rst:787
msgid ""
"The recommended way to use system-supplied BLAS / LAPACK packages is to add "
"the following to ``packages.yaml``:"
msgstr ""

# 609819d1c452499aa3a491628da1e8e4
#: ../spack/lib/spack/docs/getting_started.rst:804
msgid ""
"Above we pretend that the system-provided BLAS / LAPACK is ``netlib-lapack`` "
"only because it is the only BLAS / LAPACK provider which use standard names "
"for libraries (as opposed to, for example, ``libopenblas.so``)."
msgstr ""

# 58115618a5964e7b9441725cc8e7eb19
#: ../spack/lib/spack/docs/getting_started.rst:808
msgid ""
"Although we specify external package in ``/usr``, Spack is smart enough not "
"to add ``/usr/lib`` to RPATHs, where it could cause unrelated system "
"libraries to be used instead of their Spack equivalents. ``usr/bin`` will be "
"present in PATH, however it will have lower precedence compared to paths "
"from other dependencies. This ensures that binaries in Spack dependencies "
"are preferred over system binaries."
msgstr ""

# #-#-#-#-#  getting_started.pot (Spack 0.12)  #-#-#-#-#
# 45396881fcc2408ea05076d92975fd4c
# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# 7d6b06e8670b46be995ae001ebd0a9f8
#: ../spack/lib/spack/docs/getting_started.rst:817
#: ../spack/lib/spack/docs/packaging_guide.rst:872
msgid "Git"
msgstr ""

# 5a340fe55b7d41b185ee9d9f102933ec
#: ../spack/lib/spack/docs/getting_started.rst:819
msgid ""
"Some Spack packages use ``git`` to download, which might not work on some "
"computers.  For example, the following error was encountered on a Macintosh "
"during ``spack install julia-master``:"
msgstr ""

# 83d44350c5e94f35bcb75c7e6cfd665e
#: ../spack/lib/spack/docs/getting_started.rst:832
msgid ""
"This problem is related to OpenSSL, and in some cases might be solved by "
"installing a new version of ``git`` and ``openssl``:"
msgstr ""

# 9167bf24863d4a6f8a5db73c7732476d
#: ../spack/lib/spack/docs/getting_started.rst:835
msgid "Run ``spack install git``"
msgstr ""

# 18aa71f53d4f4c7f9da6ccc519e762e9
#: ../spack/lib/spack/docs/getting_started.rst:836
msgid "Add the output of ``spack module tcl loads git`` to your ``.bashrc``."
msgstr ""

# d00c870493c341188ae080b9e706e78d
#: ../spack/lib/spack/docs/getting_started.rst:838
msgid ""
"If this doesn't work, it is also possible to disable checking of SSL "
"certificates by using:"
msgstr ""

# ca9c13093ab54fbe93aa2e37ae208f4d
#: ../spack/lib/spack/docs/getting_started.rst:845
msgid ""
"Using ``--insecure`` makes Spack disable SSL checking when fetching from "
"websites and from git."
msgstr ""

# 4af79133092a474a94aadb9bad474bb8
#: ../spack/lib/spack/docs/getting_started.rst:850
msgid ""
"This workaround should be used ONLY as a last resort!  Wihout SSL "
"certificate verification, spack and git will download from sites you "
"wouldn't normally trust.  The code you download and run may then be "
"compromised!  While this is not a major issue for archives that will be "
"checksummed, it is especially problematic when downloading from name Git "
"branches or tags, which relies entirely on trusting a certificate for "
"security (no verification)."
msgstr ""

# 31d967198b5b4737b7f66dec2cb61f61
#: ../spack/lib/spack/docs/getting_started.rst:856
msgid "certificate for security (no verification)."
msgstr ""

# 9ca540259e33483e9bd0f539dd82a8e1
#: ../spack/lib/spack/docs/getting_started.rst:860
msgid "Utilities Configuration"
msgstr ""

# 6b6f341ffe23441ca629cde59be1f444
#: ../spack/lib/spack/docs/getting_started.rst:862
msgid ""
"Although Spack does not need installation *per se*, it does rely on other "
"packages to be available on its host system.  If those packages are out of "
"date or missing, then Spack will not work.  Sometimes, an appeal to the "
"system's package manager can fix such problems.  If not, the solution is "
"have Spack install the required packages, and then have Spack use them."
msgstr ""

# e1b4e687a7c340a2b8089b99762c57b6
#: ../spack/lib/spack/docs/getting_started.rst:869
msgid ""
"For example, if ``curl`` doesn't work, one could use the following steps to "
"provide Spack a working ``curl``:"
msgstr ""

# 23f3f8f0721542598db34c7c7166313a
#: ../spack/lib/spack/docs/getting_started.rst:877
msgid "or alternately:"
msgstr ""

# 3d75379f52a3471e9680a32a41d53f57
#: ../spack/lib/spack/docs/getting_started.rst:883
msgid "or if environment modules don't work:"
msgstr ""

# 420d9484c3d04c4ba3b3ca94fb2ef1dd
#: ../spack/lib/spack/docs/getting_started.rst:890
msgid ""
"External commands are used by Spack in two places: within core Spack, and in "
"the package recipes. The bootstrapping procedure for these two cases is "
"somewhat different, and is treated separately below."
msgstr ""

# 521ea583917e4451a6f5dc6f56d552ce
#: ../spack/lib/spack/docs/getting_started.rst:896
msgid "Core Spack Utilities"
msgstr ""

# c09438987bae4ce192bbd8852e555310
#: ../spack/lib/spack/docs/getting_started.rst:898
msgid ""
"Core Spack uses the following packages, mainly to download and unpack source "
"code, and to load generated environment modules: ``curl``, ``env``, ``git``, "
"``go``, ``hg``, ``svn``, ``tar``, ``unzip``, ``patch``, ``environment-"
"modules``."
msgstr ""

# f8adf7b2928e4e90810ca8ebf157ec80
#: ../spack/lib/spack/docs/getting_started.rst:903
msgid ""
"As long as the user's environment is set up to successfully run these "
"programs from outside of Spack, they should work inside of Spack as well.  "
"They can generally be activated as in the ``curl`` example above; or some "
"systems might already have an appropriate hand-built environment module that "
"may be loaded.  Either way works."
msgstr ""

# fa7971dc2bf547aa8723c4e7bbee9e4e
#: ../spack/lib/spack/docs/getting_started.rst:909
msgid ""
"If you find that you are missing some of these programs, ``spack`` can build "
"some of them for you with ``spack bootstrap``. Currently supported programs "
"are ``environment-modules``."
msgstr ""

# b3dc5ac440c0455eb7be6389395f2428
#: ../spack/lib/spack/docs/getting_started.rst:913
msgid "A few notes on specific programs in this list:"
msgstr ""

# 2d95e7b83329465789953ab12d1261d6
#: ../spack/lib/spack/docs/getting_started.rst:917
msgid "cURL, git, Mercurial, etc."
msgstr ""

# 49f4e66cbbb74a6fa7065032f1135a36
#: ../spack/lib/spack/docs/getting_started.rst:919
msgid ""
"Spack depends on cURL to download tarballs, the format that most Spack-"
"installed packages come in.  Your system's cURL should always be able to "
"download unencrypted ``http://``.  However, the cURL on some systems has "
"problems with SSL-enabled ``https://`` URLs, due to outdated / insecure "
"versions of OpenSSL on those systems.  This will prevent Spack from "
"installing any software requiring ``https://`` until a new cURL has been "
"installed, using the technique above."
msgstr ""

# 59393e206cf540898c01b41b08ee2a17
#: ../spack/lib/spack/docs/getting_started.rst:929
msgid ""
"remember that if you install ``curl`` via Spack that it may rely on a user-"
"space OpenSSL that is not upgraded regularly.  It may fall out of date "
"faster than your system OpenSSL."
msgstr ""

# 2ecf2464ed9140eeb5d3f6abed659233
#: ../spack/lib/spack/docs/getting_started.rst:933
msgid ""
"Some packages use source code control systems as their download method: "
"``git``, ``hg``, ``svn`` and occasionally ``go``.  If you had to install a "
"new ``curl``, then chances are the system-supplied version of these other "
"programs will also not work, because they also rely on OpenSSL. Once "
"``curl`` has been installed, you can similarly install the others."
msgstr ""

# 3a8d6f12cb9f4c20814ced54e413d7b2
#: ../spack/lib/spack/docs/getting_started.rst:944
msgid "Environment Modules"
msgstr "Environment Modules"

# fb2ce15a6fb04381812c640cd68ffa3b
#: ../spack/lib/spack/docs/getting_started.rst:946
msgid ""
"In order to use Spack's generated module files, you must have installed "
"``environment-modules`` or ``lmod``. The simplest way to get the latest "
"version of either of these tools is installing it as part of Spack's "
"bootstrap procedure:"
msgstr ""

# 9e2557f5bd554a218e89fce43ca6cd40
#: ../spack/lib/spack/docs/getting_started.rst:956
msgid ""
"At the moment ``spack bootstrap`` is only able to install ``environment-"
"modules``. Extending its capabilities to prefer ``lmod`` where possible is "
"in the roadmap, and likely to happen before the next release."
msgstr ""

# eaebaaf6a38b48ceb9ea4fe71e05f37a
#: ../spack/lib/spack/docs/getting_started.rst:960
msgid ""
"Alternatively, on many Linux distributions, you can install a pre-built "
"binary from the vendor's repository. On Fedora/RHEL/CentOS, for example, "
"this can be done with the command:"
msgstr ""

# 3fe21e2c56cb47a8b43b90bba5db07e7
#: ../spack/lib/spack/docs/getting_started.rst:968
msgid ""
"Once you have the tool installed and available in your path, you can source "
"Spack's setup file:"
msgstr ""

# 59df1543ce2148cc9781f433c06ffa83
#: ../spack/lib/spack/docs/getting_started.rst:975
msgid ""
"This activates :ref:`shell support <shell-support>` and makes commands like "
"``spack load`` available for use."
msgstr ""

# 3795d3a7fa30478a9f5738749dfd08f8
#: ../spack/lib/spack/docs/getting_started.rst:981
msgid "Package Utilities"
msgstr ""

# 2504b7ef5d294f6bb32d87d6b0780a57
#: ../spack/lib/spack/docs/getting_started.rst:983
msgid ""
"Spack may also encounter bootstrapping problems inside a package's "
"``install()`` method.  In this case, Spack will normally be running inside a "
"*sanitized build environment*.  This includes all of the package's "
"dependencies, but none of the environment Spack inherited from the user: if "
"you load a module or modify ``$PATH`` before launching Spack, it will have "
"no effect."
msgstr ""

# a511db06402f49bdad0ced2ca34c2092
#: ../spack/lib/spack/docs/getting_started.rst:990
msgid ""
"In this case, you will likely need to use the ``--dirty`` flag when running "
"``spack install``, causing Spack to **not** sanitize the build environment.  "
"You are now responsible for making sure that environment does not do strange "
"things to Spack or its installs."
msgstr ""

# adc79d6e6dcf43cc828f525417f1eb71
#: ../spack/lib/spack/docs/getting_started.rst:995
msgid ""
"Another way to get Spack to use its own version of something is to add that "
"something to a package that needs it.  For example:"
msgstr ""

# 8e8fd9c9d60a483daa23ac7e16cedc0e
#: ../spack/lib/spack/docs/getting_started.rst:1002
msgid ""
"This is considered best practice for some common build dependencies, such as "
"``autotools`` (if the ``autoreconf`` command is needed) and ``cmake`` --- "
"``cmake`` especially, because different packages require a different version "
"of CMake."
msgstr ""

# b61307148fb54371a3d3a07fb8f4cd85
#: ../spack/lib/spack/docs/getting_started.rst:1009
msgid "binutils"
msgstr ""

# 2e43b614f9e84646b7e295f9e1853d10
#: ../spack/lib/spack/docs/getting_started.rst:1013
msgid ""
"Sometimes, strange error messages can happen while building a package. For "
"example, ``ld`` might crash.  Or one receives a message like:"
msgstr ""

# f260f6eddef5418e89a8ae8a97df25eb
#: ../spack/lib/spack/docs/getting_started.rst:1027
msgid ""
"These problems are often caused by an outdated ``binutils`` on your system.  "
"Unlike CMake or Autotools, adding ``depends_on('binutils')`` to every "
"package is not considered a best practice because every package written in C/"
"C++/Fortran would need it.  A potential workaround is to load a recent "
"``binutils`` into your environment and use the ``--dirty`` flag."
msgstr ""

# 591829c3cb074ddfabde1725a0007f65
#: ../spack/lib/spack/docs/getting_started.rst:1036
msgid "GPG Signing"
msgstr ""

# ae1fb0f2b9d84a28a0a9d69aea4d46f1
#: ../spack/lib/spack/docs/getting_started.rst:1042
msgid "``spack gpg``"
msgstr ""

# 065d17664e504e1e866d92734d9af29b
#: ../spack/lib/spack/docs/getting_started.rst:1044
msgid ""
"Spack has support for signing and verifying packages using GPG keys. A "
"separate keyring is used for Spack, so any keys available in the user's home "
"directory are not used."
msgstr ""

# 7da04a4187b549c1846c149c7349f6ef
#: ../spack/lib/spack/docs/getting_started.rst:1050
msgid "``spack gpg init``"
msgstr ""

# ea70777bd77747de84bc8ca41bbf5f4f
#: ../spack/lib/spack/docs/getting_started.rst:1052
msgid ""
"When Spack is first installed, its keyring is empty. Keys stored in :file:"
"`var/spack/gpg` are the default keys for a Spack installation. These keys "
"may be imported by running ``spack gpg init``. This will import the default "
"keys into the keyring as trusted keys."
msgstr ""

# 609dee74af244bdaae4c1d217a4e6e4a
#: ../spack/lib/spack/docs/getting_started.rst:1059
msgid "Trusting keys"
msgstr ""

# bb5fba31835841f082994608827734c9
#: ../spack/lib/spack/docs/getting_started.rst:1061
msgid ""
"Additional keys may be added to the keyring using ``spack gpg trust "
"<keyfile>``. Once a key is trusted, packages signed by the owner of they key "
"may be installed."
msgstr ""

# aab7bb4a532d4d10b55197055229b5d3
#: ../spack/lib/spack/docs/getting_started.rst:1067
msgid "Creating keys"
msgstr ""

# 5ef67a5ea0cc49f380d3f35c5f2e9d25
#: ../spack/lib/spack/docs/getting_started.rst:1069
msgid ""
"You may also create your own key so that you may sign your own packages "
"using ``spack gpg create <name> <email>``. By default, the key has no "
"expiration, but it may be set with the ``--expires <date>`` flag (see the "
"``gnupg2`` documentation for accepted date formats). It is also recommended "
"to add a comment as to the use of the key using the ``--comment <comment>`` "
"flag. The public half of the key can also be exported for sharing with "
"others so that they may use packages you have signed using the ``--export "
"<keyfile>`` flag. Secret keys may also be later exported using the ``spack "
"gpg export <location> [<key>...]`` command."
msgstr ""

# 9f7989e21e37499f9961471b8827eb27
#: ../spack/lib/spack/docs/getting_started.rst:1107
msgid "Key creation speed"
msgstr ""

# 5a28c04ea9e14421a7acfa2f3ab1b03c
#: ../spack/lib/spack/docs/getting_started.rst:1082
msgid ""
"The creation of a new GPG key requires generating a lot of random numbers. "
"Depending on the entropy produced on your system, the entire process may "
"take a long time (*even appearing to hang*). Virtual machines and cloud "
"instances are particularly likely to display this behavior."
msgstr ""

# d9e3bf97ba784c3e9dfc8a82966f35fd
#: ../spack/lib/spack/docs/getting_started.rst:1087
msgid ""
"To speed it up you may install tools like ``rngd``, which is usually "
"available as a package in the host OS.  On e.g. an Ubuntu machine you need "
"to give the following commands:"
msgstr ""

# 5c964c0dda914dd6a4ccdea94c9f74a2
#: ../spack/lib/spack/docs/getting_started.rst:1096
msgid "before generating the keys."
msgstr ""

# c1d3134a587448b5a5ac763440a66f8a
#: ../spack/lib/spack/docs/getting_started.rst:1098
msgid ""
"Another alternative is ``haveged``, which can be installed on RHEL/CentOS "
"machines as follows:"
msgstr ""

# c5cda42aad3949a3a5cd083aa197f9b3
#: ../spack/lib/spack/docs/getting_started.rst:1106
msgid ""
"`This Digital Ocean tutorial <https://www.digitalocean.com/community/"
"tutorials/how-to-setup-additional-entropy-for-cloud-servers-using-haveged>`_ "
"provides a good overview of sources of randomness."
msgstr ""

# efb84e5ae95647db81ad08ac065975e8
#: ../spack/lib/spack/docs/getting_started.rst:1112
msgid "Listing keys"
msgstr ""

# d96a084966ce44619b18118c80f0123f
#: ../spack/lib/spack/docs/getting_started.rst:1114
msgid ""
"In order to list the keys available in the keyring, the ``spack gpg list`` "
"command will list trusted keys with the ``--trusted`` flag and keys "
"available for signing using ``--signing``. If you would like to remove keys "
"from your keyring, ``spack gpg untrust <keyid>``. Key IDs can be email "
"addresses, names, or (best) fingerprints."
msgstr ""

# 2720020afd4443058b4c39477cb1f757
#: ../spack/lib/spack/docs/getting_started.rst:1122
msgid "Signing and Verifying Packages"
msgstr ""

# 6a32861da83b43cb8fb6bd11341a7223
#: ../spack/lib/spack/docs/getting_started.rst:1124
msgid ""
"In order to sign a package, ``spack gpg sign <file>`` should be used. By "
"default, the signature will be written to ``<file>.asc``, but that may be "
"changed by using the ``--output <file>`` flag. If there is only one signing "
"key available, it will be used, but if there is more than one, the key to "
"use must be specified using the ``--key <keyid>`` flag. The ``--clearsign`` "
"flag may also be used to create a signed file which contains the contents, "
"but it is not recommended. Signed packages may be verified by using ``spack "
"gpg verify <file>``."
msgstr ""

# e6d23935a071485d92f5b653d4d27592
#: ../spack/lib/spack/docs/getting_started.rst:1137
msgid "Spack on Cray"
msgstr ""

# 67ca2c60c1944ce6aadac145d29cbfb7
#: ../spack/lib/spack/docs/getting_started.rst:1139
msgid ""
"Spack differs slightly when used on a Cray system. The architecture spec can "
"differentiate between the front-end and back-end processor and operating "
"system. For example, on Edison at NERSC, the back-end target processor is "
"\"Ivy Bridge\", so you can specify to use the back-end this way:"
msgstr ""

# d178a35d0ad34650a2f05983603cc2a9
#: ../spack/lib/spack/docs/getting_started.rst:1148
msgid "You can also use the operating system to build against the back-end:"
msgstr ""

# a57abe7528844e8dafd30fc3bec5b5c6
#: ../spack/lib/spack/docs/getting_started.rst:1154
msgid ""
"Notice that the name includes both the operating system name and the major "
"version number concatenated together."
msgstr ""

# 797345f606f043869e84916bd3133df3
#: ../spack/lib/spack/docs/getting_started.rst:1157
msgid ""
"Alternatively, if you want to build something for the front-end, you can "
"specify the front-end target processor. The processor for a login node on "
"Edison is \"Sandy bridge\" so we specify on the command line like so:"
msgstr ""

# 7376ee733fdf421da50d2aa5d7411b65
#: ../spack/lib/spack/docs/getting_started.rst:1165
msgid "And the front-end operating system is:"
msgstr ""

# 46ab8ec39bc1435580523d25984eaf67
#: ../spack/lib/spack/docs/getting_started.rst:1173
msgid "Cray compiler detection"
msgstr ""

# a60a5da60d624d8ebcc0db46a9df335c
#: ../spack/lib/spack/docs/getting_started.rst:1175
msgid ""
"Spack can detect compilers using two methods. For the front-end, we treat "
"everything the same. The difference lies in back-end compiler detection. "
"Back-end compiler detection is made via the Tcl module avail command. Once "
"it detects the compiler it writes the appropriate PrgEnv and compiler module "
"name to compilers.yaml and sets the paths to each compiler with Cray\\'s "
"compiler wrapper names (i.e. cc, CC, ftn). During build time, Spack will "
"load the correct PrgEnv and compiler module and will call appropriate "
"wrapper."
msgstr ""

# b06b722328de4e40b8e3a676f77a3e6b
#: ../spack/lib/spack/docs/getting_started.rst:1183
msgid ""
"The compilers.yaml config file will also differ. There is a modules section "
"that is filled with the compiler's Programming Environment and module name. "
"On other systems, this field is empty []:"
msgstr ""

# eaa93841f02a436b9362d43de4a323a3
#: ../spack/lib/spack/docs/getting_started.rst:1194
msgid ""
"As mentioned earlier, the compiler paths will look different on a Cray "
"system. Since most compilers are invoked using cc, CC and ftn, the paths for "
"each compiler are replaced with their respective Cray compiler wrapper names:"
msgstr ""

# 51f8587c56254c9e861a71473d9ac2b9
#: ../spack/lib/spack/docs/getting_started.rst:1206
msgid ""
"As opposed to an explicit path to the compiler executable. This allows Spack "
"to call the Cray compiler wrappers during build time."
msgstr ""

# 679f17bfaf5b468ea765e99564800b62
#: ../spack/lib/spack/docs/getting_started.rst:1209
msgid "For more on compiler configuration, check out :ref:`compiler-config`."
msgstr ""

# 219941e5920c43ac917d585a5e1c1aeb
#: ../spack/lib/spack/docs/getting_started.rst:1211
msgid ""
"Spack sets the default Cray link type to dynamic, to better match other "
"other platforms. Individual packages can enable static linking (which is the "
"default outside of Spack on cray systems) using the ``-static`` flag."
msgstr ""

# e3e771d4b367499d876e3adec6a97874
#: ../spack/lib/spack/docs/getting_started.rst:1217
msgid "Setting defaults and using Cray modules"
msgstr ""

# c8121d5c885e4112a783108d91f4fac0
#: ../spack/lib/spack/docs/getting_started.rst:1219
msgid ""
"If you want to use default compilers for each PrgEnv and also be able to "
"load cray external modules, you will need to set up a ``packages.yaml``."
msgstr ""

# 87455ba7ea8344bdae4e7963a3917fd7
#: ../spack/lib/spack/docs/getting_started.rst:1222
msgid "Here's an example of an external configuration for cray modules:"
msgstr ""

# f54497942ae044feaa030e698e912ace
#: ../spack/lib/spack/docs/getting_started.rst:1235
msgid ""
"This tells Spack that for whatever package that depends on mpi, load the "
"cray-mpich module into the environment. You can then be able to use whatever "
"environment variables, libraries, etc, that are brought into the environment "
"via module load."
msgstr ""

# 25fae47c763d4c63a4c6999d776a75f2
#: ../spack/lib/spack/docs/getting_started.rst:1242
msgid ""
"For Cray-provided packages, it is best to use ``modules:`` instead of "
"``paths:`` in ``packages.yaml``, because the Cray Programming Environment "
"heavily relies on modules (e.g., loading the ``cray-mpich`` module adds MPI "
"libraries to the compiler wrapper link line)."
msgstr ""

# f8d53f075c4a4e27be28928d3b3479c6
#: ../spack/lib/spack/docs/getting_started.rst:1247
msgid ""
"You can set the default compiler that Spack can use for each compiler type. "
"If you want to use the Cray defaults, then set them under ``all:`` in "
"packages.yaml. In the compiler field, set the compiler specs in your order "
"of preference. Whenever you build with that compiler type, Spack will "
"concretize to that version."
msgstr ""

# d159dae901884c12bac61afa0811ef02
#: ../spack/lib/spack/docs/getting_started.rst:1252
msgid "Here is an example of a full packages.yaml used at NERSC"
msgstr ""

# 29a30b7fdc45480a9cd2b3064034bd06
#: ../spack/lib/spack/docs/getting_started.rst:1277
msgid ""
"Here we tell spack that whenever we want to build with gcc use version 5.2.0 "
"or if we want to build with intel compilers, use version 16.0.0.109. We add "
"a spec for each compiler type for each cray modules. This ensures that for "
"each compiler on our system we can use that external module."
msgstr ""

# 035c748a2fa840c2bc47e52ec665c75f
#: ../spack/lib/spack/docs/getting_started.rst:1282
msgid ""
"For more on external packages check out the section :ref:`sec-external-"
"packages`."
msgstr ""

# 548ecf8ed38947c0ac96afe7f4696b9e
#: ../spack/lib/spack/docs/getting_started.rst:1286
msgid "Using Linux containers on Cray machines"
msgstr ""

# d1fc096a09344063baa87daf0f377d9f
#: ../spack/lib/spack/docs/getting_started.rst:1288
msgid ""
"Spack uses environment variables particular to the Cray programming "
"environment to determine which systems are Cray platforms. These environment "
"variables may be propagated into containers that are not using the Cray "
"programming environment."
msgstr ""

# dafac8ba39d4487cbe6c396113eff8ec
#: ../spack/lib/spack/docs/getting_started.rst:1293
msgid ""
"To ensure that Spack does not autodetect the Cray programming environment, "
"unset the environment variable ``CRAYPE_VERSION``. This will cause Spack to "
"treat a linux container on a Cray system as a base linux distro."
msgstr ""

# 136c9dc0f7c04a72a5170850e1899f6f
#: ../spack/lib/spack/docs/index.rst:50
msgid "Basics"
msgstr "全般"

# 757992f76cc9453382122f1dd3062f43
#: ../spack/lib/spack/docs/index.rst:61
msgid "Reference"
msgstr "リファレンス"

# 54f854e6b59e4c5d89d2cf858f91a8a1
#: ../spack/lib/spack/docs/index.rst:77
msgid "Contributing"
msgstr "貢献"

# 86f20446a35c4744b77a25d2ec46dfa6
#: ../spack/lib/spack/docs/index.rst:87
msgid "API Docs"
msgstr "APIドキュメント"

# b3947e721c2a40899614f88bb5ef99bd
#: ../spack/lib/spack/docs/index.rst:13
msgid "Spack"
msgstr ""

# 31eff8527a3d467b8ca21d1e14acae24
#: ../spack/lib/spack/docs/index.rst:17
msgid ""
"`These are docs for the Spack package manager. For sphere packing, see` "
"`pyspack <https://pyspack.readthedocs.io>`_."
msgstr ""
"本サイトではSpackに関連する文書を公開しています。Sphere packing(球充填)につい"
"ては `pyspack <https://pyspack.readthedocs.io>`_ をご参照ください。"

# 849fd98022dd4839980e1b79e0d72166
#: ../spack/lib/spack/docs/index.rst:19
msgid ""
"Spack is a package management tool designed to support multiple versions and "
"configurations of software on a wide variety of platforms and environments.  "
"It was designed for large supercomputing centers, where many users and "
"application teams share common installations of software on clusters with "
"exotic architectures, using libraries that do not have a standard ABI.  "
"Spack is non-destructive: installing a new version does not break existing "
"installations, so many configurations can coexist on the same system."
msgstr ""
"Spackは様々なプラットフォームやシステム環境にインストールされているソフトウェ"
"アの複数のバージョン、設定などを管理するために設計されています。Spackは、スー"
"パーコンピュータシステムを運用するセンターなどでの利用を想定して設計していま"
"す。大規模なセンターなどでは、多くのユーザやチームがシステムにインストールさ"
"れているソフトウェアを利用したり、ソフトウェアを共有したりしていますが、それ"
"らは、様々のクラスタ上で標準的なABI(Application Binary Interface)を持たないラ"
"イブラリを利用しています。Spackを利用することで、新しいバージョンのソフトウェ"
"アをインストールしても既存の環境を破壊することなく、同じシステム上に多数の構"
"成を共存させることができます。"

# 0d78e17b892a483a9db9a2fe86d35455
#: ../spack/lib/spack/docs/index.rst:28
msgid ""
"Most importantly, Spack is *simple*.  It offers a simple *spec* syntax so "
"that users can specify versions and configuration options concisely.  Spack "
"is also simple for package authors: package files are written in pure "
"Python, and specs allow package authors to maintain a single file for many "
"different builds of the same package."
msgstr ""
"Spackがシンプルであることは、最も重要な点です。Spackユーザは、シンプルな文法"
"で利用したいソフトウェアのバージョン、設定、オプション等を指定できます。ま"
"た、Spackは、パッケージングを行うユーザにとってもシンプルです。パッケージファ"
"イルは純粋なPythonで記述されていて、多種多様なビルド方法を記載する場合でも、"
"更新するのは単一のファイルです。"

# f835d415a49649fcb1984a143d343de0
#: ../spack/lib/spack/docs/index.rst:34
msgid "See the :doc:`features` for examples and highlights."
msgstr "使用例とハイライトについては、 :doc:`features` をご参照ください。"

# bd04d080f6bc4f46976bb89b1540074b
#: ../spack/lib/spack/docs/index.rst:36
msgid ""
"Get spack from the `github repository <https://github.com/spack/spack>`_ and "
"install your first package:"
msgstr ""
"以下の方法でSpackを `github <https://github.com/spack/spack>`  から入手し、最"
"初のパッケージをインストールしてみてください。"

# 431d6d7bc9524c83b5e57d70d8887202
#: ../spack/lib/spack/docs/index.rst:46
msgid ""
"If you're new to spack and want to start using it, see :doc:"
"`getting_started`, or refer to the full manual below."
msgstr ""
"Spackを利用するのが初めての場合は、 :doc:`getting_started` をご参照ください。"
"もしくは、下記のマニュアルをご参照ください。"

# 38ccfc7258cd4f4898fb49d731354a59
#: ../spack/lib/spack/docs/index.rst:96
msgid "Indices and tables"
msgstr "目次と索引"

# a52a1cb24e7949a7a92829013c458de4
#: ../spack/lib/spack/docs/index.rst:98
msgid ":ref:`genindex`"
msgstr ""

# 4f733e305d9940cab61ab153d7884bef
#: ../spack/lib/spack/docs/index.rst:99
msgid ":ref:`modindex`"
msgstr ""

# d6ca94e8dda749eba87ee7f18470ec2c
#: ../spack/lib/spack/docs/index.rst:100
msgid ":ref:`search`"
msgstr ""

# f059333d7de24d978920a44a09e73faa
#: ../spack/lib/spack/docs/known_issues.rst:8
msgid "Known Issues"
msgstr "既知の問題"

# 798a4b103b7b4eda9db9207adcac0a14
#: ../spack/lib/spack/docs/known_issues.rst:10
msgid ""
"This is a list of known bugs in Spack. It provides ways of getting around "
"these problems if you encounter them."
msgstr ""

# fbaae6818d7c49fc8bd503748e290e91
#: ../spack/lib/spack/docs/known_issues.rst:15
msgid "Variants are not properly forwarded to dependencies"
msgstr ""

# ee7676dcb7604cdc8c6d789bfaaf12fc
#: ../spack/lib/spack/docs/known_issues.rst:17
msgid "**Status:** Expected to be fixed in the next release"
msgstr ""

# 4eb556dde68d49d98e279c5293d4e3a1
#: ../spack/lib/spack/docs/known_issues.rst:19
msgid ""
"Sometimes, a variant of a package can also affect how its dependencies are "
"built. For example, in order to build MPI support for a package, it may "
"require that its dependencies are also built with MPI support. In the "
"``package.py``, this looks like:"
msgstr ""

# 5cdc22e1d4f9449594585dc73c7e3f36
#: ../spack/lib/spack/docs/known_issues.rst:29
msgid ""
"Spack handles this situation properly for *immediate* dependencies, and "
"builds ``hdf5`` with the same variant you used for the package that depends "
"on it. However, for *indirect* dependencies (dependencies of dependencies), "
"Spack does not backtrack up the DAG far enough to handle this. Users "
"commonly run into this situation when trying to build R with X11 support:"
msgstr ""

# 853a5a04ef0546108473210e2efa9e95
#: ../spack/lib/spack/docs/known_issues.rst:43
msgid ""
"A workaround is to explicitly activate the variants of dependencies as well:"
msgstr ""

# 2cba6e2d24cd47c9a302ac614be0147c
#: ../spack/lib/spack/docs/known_issues.rst:49
msgid ""
"See https://github.com/spack/spack/issues/267 and https://github.com/spack/"
"spack/issues/2546 for further details."
msgstr ""

# 761fc9ceba5f41ea83155246bc1bd951
#: ../spack/lib/spack/docs/known_issues.rst:55
msgid "``spack setup`` doesn't work"
msgstr ""

# 67e06f2c360c48b3808ed68fb59d1561
#: ../spack/lib/spack/docs/known_issues.rst:57
msgid "**Status:** Work in progress"
msgstr ""

# f0f92c2f51d34145972310672e39fa4c
#: ../spack/lib/spack/docs/known_issues.rst:59
msgid ""
"Spack provides a ``setup`` command that is useful for the development of "
"software outside of Spack. Unfortunately, this command no longer works. See "
"https://github.com/spack/spack/issues/2597 and https://github.com/spack/"
"spack/issues/2662 for details. This is expected to be fixed by https://"
"github.com/spack/spack/pull/2664."
msgstr ""

# 5f740b20e24847c79d215c9584872aea
#: ../spack/lib/spack/docs/mirrors.rst:10
msgid "Mirrors"
msgstr "ミラー"

# c2fc52b8feb04d64a426bcdb1879129f
#: ../spack/lib/spack/docs/mirrors.rst:12
msgid ""
"Some sites may not have access to the internet for fetching packages. These "
"sites will need a local repository of tarballs from which they can get their "
"files.  Spack has support for this with *mirrors*.  A mirror is a URL that "
"points to a directory, either on the local filesystem or on some server, "
"containing tarballs for all of Spack's packages."
msgstr ""

# 9c0913d7ecf74ee6975f67a6491c6edc
#: ../spack/lib/spack/docs/mirrors.rst:19
msgid "Here's an example of a mirror's directory structure:"
msgstr ""

# ad8e4739137b4ac4a4445e785773faa7
#: ../spack/lib/spack/docs/mirrors.rst:43
msgid ""
"The structure is very simple.  There is a top-level directory.  The second "
"level directories are named after packages, and the third level contains "
"tarballs for each package, named after each package."
msgstr ""

# af77a89e01f2411098c221d1340475a5
#: ../spack/lib/spack/docs/mirrors.rst:49
msgid ""
"Archives are **not** named exactly the way they were in the package's fetch "
"URL.  They have the form ``<name>-<version>.<extension>``, where ``<name>`` "
"is Spack's name for the package, ``<version>`` is the version of the "
"tarball, and ``<extension>`` is whatever format the package's fetch URL "
"contains."
msgstr ""

# de28af3f067f4bdcbb8b231005d13144
#: ../spack/lib/spack/docs/mirrors.rst:55
msgid ""
"In order to make mirror creation reasonably fast, we copy the tarball in its "
"original format to the mirror directory, but we do not standardize on a "
"particular compression algorithm, because this would potentially require "
"expanding and re-compressing each archive."
msgstr ""

# 564afa0d20aa4ea2b399bb7cc1312245
#: ../spack/lib/spack/docs/mirrors.rst:64
msgid "``spack mirror``"
msgstr ""

# e7f79b1c053e48f58099b46eef4c9f9a
#: ../spack/lib/spack/docs/mirrors.rst:66
msgid ""
"Mirrors are managed with the ``spack mirror`` command.  The help for ``spack "
"mirror`` looks like this:"
msgstr ""

# 87bae7b28fe247309a0cdb67fd8b8599
#: ../spack/lib/spack/docs/mirrors.rst:71
msgid ""
"The ``create`` command actually builds a mirror by fetching all of its "
"packages from the internet and checksumming them."
msgstr ""

# 1a5616ea665246e8ba204db90e5291de
#: ../spack/lib/spack/docs/mirrors.rst:74
msgid ""
"The other three commands are for managing mirror configuration.  They "
"control the URL(s) from which Spack downloads its packages."
msgstr ""

# b51a2250d4214f6f8af2864eefcce031
#: ../spack/lib/spack/docs/mirrors.rst:81
msgid "``spack mirror create``"
msgstr ""

# 9047da10cd4e4e07a31afac9b164de57
#: ../spack/lib/spack/docs/mirrors.rst:83
msgid ""
"You can create a mirror using the ``spack mirror create`` command, assuming "
"you're on a machine where you can access the internet."
msgstr ""

# f58eb2b2dd74417eba132770ad0aaee1
#: ../spack/lib/spack/docs/mirrors.rst:86
msgid ""
"The command will iterate through all of Spack's packages and download the "
"safe ones into a directory structure like the one above.  Here is what it "
"looks like:"
msgstr ""

# 892ce371bb99401ba64815a031cdd65a
#: ../spack/lib/spack/docs/mirrors.rst:121
msgid ""
"Once this is done, you can tar up the ``spack-mirror-2014-06-24`` directory "
"and copy it over to the machine you want it hosted on."
msgstr ""

# 75f361a34f994a53ad4ffe993491b545
#: ../spack/lib/spack/docs/mirrors.rst:126
msgid "Custom package sets"
msgstr ""

# fbf94d0e0eb84c419c4b85f432f291d3
#: ../spack/lib/spack/docs/mirrors.rst:128
msgid ""
"Normally, ``spack mirror create`` downloads all the archives it has "
"checksums for.  If you want to only create a mirror for a subset of "
"packages, you can do that by supplying a list of package specs on the "
"command line after ``spack mirror create``.  For example, this command:"
msgstr ""

# fd2be69706cc421f80f33ad2e324dd3b
#: ../spack/lib/spack/docs/mirrors.rst:138
msgid ""
"Will create a mirror for libelf versions greater than or equal to 0.8.12 and "
"boost versions greater than or equal to 1.44."
msgstr ""

# 7b065233051f42cc989fa483e4470b5f
#: ../spack/lib/spack/docs/mirrors.rst:143
msgid "Mirror files"
msgstr ""

# 24367282fc1341d4ae8bfe6dcb909da4
#: ../spack/lib/spack/docs/mirrors.rst:145
msgid ""
"If you have a *very* large number of packages you want to mirror, you can "
"supply a file with specs in it, one per line:"
msgstr ""

# def21544ab9a4757b75e28c677b21e7c
#: ../spack/lib/spack/docs/mirrors.rst:159
msgid ""
"This is useful if there is a specific suite of software managed by your site."
msgstr ""

# 628ce2468e3242d5a770b3792e60f7ab
#: ../spack/lib/spack/docs/mirrors.rst:166
msgid "``spack mirror add``"
msgstr ""

# a4ac3e6649344ac6a1854e95c618d465
#: ../spack/lib/spack/docs/mirrors.rst:168
msgid ""
"Once you have a mirror, you need to let spack know about it.  This is "
"relatively simple.  First, figure out the URL for the mirror.  If it's a "
"directory, you can use a file URL like this one:"
msgstr ""

# 8a08d9e7788f4808b5c4b50f08e28b59
#: ../spack/lib/spack/docs/mirrors.rst:176
msgid ""
"That points to the directory on the local filesystem.  If it were on a web "
"server, you could use a URL like this one:"
msgstr ""

# 1434c43029f94965aad27c1651fd4176
#: ../spack/lib/spack/docs/mirrors.rst:179
msgid "https://example.com/some/web-hosted/directory/spack-mirror-2014-06-24"
msgstr ""

# 64e9b77233d049fc8498d94a3edc0f8a
#: ../spack/lib/spack/docs/mirrors.rst:181
msgid ""
"Spack will use the URL as the root for all of the packages it fetches. You "
"can tell your Spack installation to use that mirror like this:"
msgstr ""

# 3c538808075a430fbd2af8c67bdc6c98
#: ../spack/lib/spack/docs/mirrors.rst:188
msgid "Each mirror has a name so that you can refer to it again later."
msgstr ""

# 8b07c396aefb4b408b3ed7ce9af706a4
#: ../spack/lib/spack/docs/mirrors.rst:194
msgid "``spack mirror list``"
msgstr ""

# 0525eb22ac584926b9fcc656dd021a6e
#: ../spack/lib/spack/docs/mirrors.rst:196
msgid "To see all the mirrors Spack knows about, run ``spack mirror list``:"
msgstr ""

# 7658b82c304342cf80e128a21e412a8f
#: ../spack/lib/spack/docs/mirrors.rst:207
msgid "``spack mirror remove``"
msgstr ""

# d71b27c0813a470b8873aafe4cd39c1a
#: ../spack/lib/spack/docs/mirrors.rst:209
msgid "To remove a mirror by name, run:"
msgstr ""

# 61578cf61988462abc998e71b8cd54cc
#: ../spack/lib/spack/docs/mirrors.rst:219
msgid "Mirror precedence"
msgstr ""

# 316a60ffc6f44100b98b77de68c6995c
#: ../spack/lib/spack/docs/mirrors.rst:221
msgid "Adding a mirror really adds a line in ``~/.spack/mirrors.yaml``:"
msgstr ""

# a12102e1acf84cce9edab75eeb563150
#: ../spack/lib/spack/docs/mirrors.rst:229
msgid ""
"If you want to change the order in which mirrors are searched for packages, "
"you can edit this file and reorder the sections.  Spack will search the "
"topmost mirror first and the bottom-most mirror last."
msgstr ""

# 3d3e0ff577ec4ec2a90fa4b330d543c3
#: ../spack/lib/spack/docs/mirrors.rst:237
msgid "Local Default Cache"
msgstr ""

# 1101eb088bb94715afa5fbf93572aeb8
#: ../spack/lib/spack/docs/mirrors.rst:239
msgid ""
"Spack caches resources that are downloaded as part of installs. The cache is "
"a valid spack mirror: it uses the same directory structure and naming scheme "
"as other Spack mirrors (so it can be copied anywhere and referenced with a "
"URL like other mirrors). The mirror is maintained locally (within the Spack "
"installation directory) at :file:`var/spack/cache/`. It is always enabled "
"(and is always searched first when attempting to retrieve files for an "
"installation) but can be cleared with :ref:`clean <cmd-spack-clean>`; the "
"cache directory can also be deleted manually without issue."
msgstr ""

# 27cf57ff939b44199dbcbeda74177d07
#: ../spack/lib/spack/docs/mirrors.rst:248
msgid ""
"Caching includes retrieved tarball archives and source control repositories, "
"but only resources with an associated digest or commit ID (e.g. a revision "
"number for SVN) will be cached."
msgstr ""

# 9c7d1829fdd247dea2c433d6d9db4705
#: ../spack/lib/spack/docs/module_file_support.rst:12
msgid ""
"The use of module systems to manage user environment in a controlled way is "
"a common practice at HPC centers that is often embraced also by individual "
"programmers on their development machines. To support this common practice "
"Spack integrates with `Environment Modules <http://modules.sourceforge.net/"
">`_ ,  `LMod <http://lmod.readthedocs.io/en/latest/>`_ and `Dotkit <https://"
"computing.llnl.gov/?set=jobs&page=dotkit>`_ by providing post-install hooks "
"that generate module files and commands to manipulate them."
msgstr ""

# 8696f02e0b104bb986c9d74733c23c70
#: ../spack/lib/spack/docs/module_file_support.rst:22
msgid ""
"If your machine does not already have a module system installed, we advise "
"you to use either Environment Modules or LMod. See :ref:"
"`InstallEnvironmentModules` for more details."
msgstr ""

# 661d9af1f3bd455f878dbf9861eca264
#: ../spack/lib/spack/docs/module_file_support.rst:30
msgid "Using module files via Spack"
msgstr ""

# 0c35ff1e68d6468d82dafc47085cb8c2
#: ../spack/lib/spack/docs/module_file_support.rst:32
msgid ""
"If you have installed a supported module system either manually or through "
"``spack bootstrap``, you should be able to run either ``module avail`` or "
"``use -l spack`` to see what module files have been installed.  Here is "
"sample output of those programs, showing lots of installed packages:"
msgstr ""

# bbabaca535a84b88bf0caafc524fd4f7
#: ../spack/lib/spack/docs/module_file_support.rst:57
msgid ""
"The names should look familiar, as they resemble the output from ``spack "
"find``. You *can* use the modules here directly.  For example, you could "
"type either of these commands to load the ``cmake`` module:"
msgstr ""

# ab5e03435023416c9e7f7e669ddb31cd
#: ../spack/lib/spack/docs/module_file_support.rst:69
msgid ""
"Neither of these is particularly pretty, easy to remember, or easy to type. "
"Luckily, Spack has its own interface for using modules and dotkits."
msgstr ""

# 0ad9b8c5ba8344f1bdc8532f62b96a04
#: ../spack/lib/spack/docs/module_file_support.rst:74
msgid "Shell support"
msgstr ""

# 4450d51b649943bd8774cbee4d543657
#: ../spack/lib/spack/docs/module_file_support.rst:76
msgid ""
"To enable additional Spack commands for loading and unloading module files, "
"and to add the correct path to ``MODULEPATH``,  you need to source the "
"appropriate setup file in the ``$SPACK_ROOT/share/spack`` directory. This "
"will activate shell support for the commands that need it. For ``bash``, "
"``ksh`` or ``zsh`` users:"
msgstr ""

# 10008760209a4fe0b938756e9f47be54
#: ../spack/lib/spack/docs/module_file_support.rst:85
msgid "For ``csh`` and ``tcsh`` instead:"
msgstr ""

# 8dc16e72537e493c8444c9a3d65ba209
#: ../spack/lib/spack/docs/module_file_support.rst:92
msgid ""
"Note that in the latter case it is necessary to explicitly set "
"``SPACK_ROOT`` before sourcing the setup file (you will get a meaningful "
"error message if you don't)."
msgstr ""

# 6f1b8775099046e5b6fe45dbe46a79be
#: ../spack/lib/spack/docs/module_file_support.rst:96
msgid ""
"When ``bash`` and ``ksh`` users update their environment with ``setup-env."
"sh``, it will check for spack-installed environment modules and add the "
"``module`` command to their environment; This only occurs if the module "
"command is not already available. You can install ``environment-modules`` "
"with ``spack bootstrap`` as described in :ref:`InstallEnvironmentModules`."
msgstr ""

# 783b5714eea84da3aec8de3bcc2032c1
#: ../spack/lib/spack/docs/module_file_support.rst:98
msgid ""
"Finally, if you want to have Spack's shell support available on the command "
"line at any login you can put this source line in one of the files that are "
"sourced at startup (like ``.profile``, ``.bashrc`` or ``.cshrc``). Be aware "
"though that the startup time may be slightly increased because of that."
msgstr ""

# c4d865255aad4ac499daf18ff02605ea
#: ../spack/lib/spack/docs/module_file_support.rst:108
msgid "``spack load / unload``"
msgstr ""

# ad2049d677e6412e83a3f142a9c4ecfe
#: ../spack/lib/spack/docs/module_file_support.rst:110
msgid ""
"Once you have shell support enabled you can use the same spec syntax you're "
"used to:"
msgstr ""

# 5ec835df1f724f5aa756a635f1da6f9e
#: ../spack/lib/spack/docs/module_file_support.rst:114
msgid "Dotkit"
msgstr ""

# 11729850cc34492babdb9f003b6b6345
#: ../spack/lib/spack/docs/module_file_support.rst:116
msgid "``spack load <spec>``"
msgstr ""

# 92b195100e734b9f9e68d6cbc068016f
#: ../spack/lib/spack/docs/module_file_support.rst:116
msgid "``spack use <spec>``"
msgstr ""

# 130c107ad2d947bb8a89a3e65107fa89
#: ../spack/lib/spack/docs/module_file_support.rst:117
msgid "``spack unload <spec>``"
msgstr ""

# 0e8bc951cff14d9ca8814b0c75051002
#: ../spack/lib/spack/docs/module_file_support.rst:117
msgid "``spack unuse <spec>``"
msgstr ""

# ca5fd525d8d641609e31c70201e950d6
#: ../spack/lib/spack/docs/module_file_support.rst:120
msgid ""
"And you can use the same shortened names you use everywhere else in Spack."
msgstr ""

# 9c11d0fd02e948499953423063d0b817
#: ../spack/lib/spack/docs/module_file_support.rst:123
msgid ""
"For example, if you are using dotkit, this will add the ``mpich`` package "
"built with ``gcc`` to your path:"
msgstr ""

# 665d6d4adc8c4e2da8cb173982953909
#: ../spack/lib/spack/docs/module_file_support.rst:137
msgid "Or, similarly if you are using modules, you could type:"
msgstr ""

# d7f01b2aa8224f838983b5d23bf8015c
#: ../spack/lib/spack/docs/module_file_support.rst:143
msgid ""
"These commands will add appropriate directories to your ``PATH``, "
"``MANPATH``, ``CPATH``, and ``LD_LIBRARY_PATH``.  When you no longer want to "
"use a package, you can type unload or unuse similarly:"
msgstr ""

# d98ac38f89d24cfab14d2e3297b1ee8f
#: ../spack/lib/spack/docs/module_file_support.rst:154
msgid ""
"These ``use``, ``unuse``, ``load``, and ``unload`` subcommands are only "
"available if you have enabled Spack's shell support *and* you have dotkit or "
"modules installed on your machine."
msgstr ""

# 8eb27f563bd048f68af061696dba6d60
#: ../spack/lib/spack/docs/module_file_support.rst:160
msgid "Ambiguous module names"
msgstr ""

# b80e62a18beb400d9eb1d75fbd730f74
#: ../spack/lib/spack/docs/module_file_support.rst:162
msgid ""
"If a spec used with load/unload or use/unuse is ambiguous (i.e. more than "
"one installed package matches it), then Spack will warn you:"
msgstr ""

# 1e8f63779adb44858e9080caf00364df
#: ../spack/lib/spack/docs/module_file_support.rst:172
msgid ""
"You can either type the ``spack load`` command again with a fully qualified "
"argument, or you can add just enough extra constraints to identify one "
"package.  For example, above, the key differentiator is that one ``libelf`` "
"is built with the Intel compiler, while the other used ``gcc``.  You could "
"therefore just type:"
msgstr ""

# d7887378a4bd4053aaee313726e9d38a
#: ../spack/lib/spack/docs/module_file_support.rst:182
msgid "To identify just the one built with the Intel compiler."
msgstr ""

# de1b8089e92143c2b660e9078634ebef
#: ../spack/lib/spack/docs/module_file_support.rst:190
msgid "``spack module tcl loads``"
msgstr ""

# 0ebf2c7ebed846f18dc53517fdaa6825
#: ../spack/lib/spack/docs/module_file_support.rst:192
msgid ""
"In some cases, it is desirable to load not just a module, but also all the "
"modules it depends on.  This is not required for most modules because Spack "
"builds binaries with RPATH support.  However, not all packages use RPATH to "
"find their dependencies: this can be true in particular for Python "
"extensions, which are currently *not* built with RPATH."
msgstr ""

# 8bb25f5d920542b4aeb815d6cb5e0edb
#: ../spack/lib/spack/docs/module_file_support.rst:199
msgid "Scripts to load modules recursively may be made with the command:"
msgstr ""

# 65bfcf5bcb7b43748d70ad3eac605f74
#: ../spack/lib/spack/docs/module_file_support.rst:205
msgid ""
"An equivalent alternative using `process substitution <http://tldp.org/LDP/"
"abs/html/process-sub.html>`_ is:"
msgstr ""

# db8124c71b49419ba25e4d9217538600
#: ../spack/lib/spack/docs/module_file_support.rst:214
msgid "Module Commands for Shell Scripts"
msgstr ""

# 51075565e0474270b58c08df5c20e4d2
#: ../spack/lib/spack/docs/module_file_support.rst:216
msgid ""
"Although Spack is flexible, the ``module`` command is much faster. This "
"could become an issue when emitting a series of ``spack load`` commands "
"inside a shell script.  By adding the ``--shell`` flag, ``spack module tcl "
"find`` may also be used to generate code that can be cut-and-pasted into a "
"shell script.  For example:"
msgstr ""

# 0c6bcc36f34844ec97a61c2800fae9bb
#: ../spack/lib/spack/docs/module_file_support.rst:256
msgid "The script may be further edited by removing unnecessary modules."
msgstr ""

# 5c151a3e11d142f985668042e99bd722
#: ../spack/lib/spack/docs/module_file_support.rst:261
msgid "Module Prefixes"
msgstr ""

# 218966f0ff934931a3dd9b4190322465
#: ../spack/lib/spack/docs/module_file_support.rst:263
msgid ""
"On some systems, modules are automatically prefixed with a certain string; "
"``spack module tcl loads`` needs to know about that prefix when it issues "
"``module load`` commands.  Add the ``--prefix`` option to your ``spack "
"module tcl loads`` commands if this is necessary."
msgstr ""

# 6a70f2cc31554926bf8907ae8a41d38b
#: ../spack/lib/spack/docs/module_file_support.rst:268
msgid "For example, consider the following on one system:"
msgstr ""

# 9bbf3f90055941569f0a060d93b56362
#: ../spack/lib/spack/docs/module_file_support.rst:285
msgid "Module file customization"
msgstr ""

# de8160202ecf4fb48f1d986b76e1cf91
#: ../spack/lib/spack/docs/module_file_support.rst:287
msgid ""
"Module files are generated by post-install hooks after the successful "
"installation of a package. The table below summarizes the essential "
"information associated with the different file formats that can be generated "
"by Spack:"
msgstr ""

# 4d3db7e1312645698d6356ef0cceb448
#: ../spack/lib/spack/docs/module_file_support.rst:293
msgid "**Hook name**"
msgstr ""

# 93310dac9cfb4c90aaa0c7b26f4b45b2
#: ../spack/lib/spack/docs/module_file_support.rst:293
msgid "**Default root directory**"
msgstr ""

# a4a0d8b2232641138a7a91995e911843
#: ../spack/lib/spack/docs/module_file_support.rst:293
msgid "**Default template file**"
msgstr ""

# 5b0afcbbf9a848b7afc89555e605289a
#: ../spack/lib/spack/docs/module_file_support.rst:293
msgid "**Compatible tools**"
msgstr ""

# 5d11dcd9b9a94d7e82d3c408ac15b267
#: ../spack/lib/spack/docs/module_file_support.rst:295
msgid "**Dotkit**"
msgstr ""

# cef47b2d98be494eb3e43cdd11133576
#: ../spack/lib/spack/docs/module_file_support.rst:295
msgid "``dotkit``"
msgstr ""

# ed79fa5ae15e4267afbc79b3e3e12f6f
#: ../spack/lib/spack/docs/module_file_support.rst:295
msgid "share/spack/dotkit"
msgstr ""

# 28fa973150524ed7bcefc9d982240d2a
#: ../spack/lib/spack/docs/module_file_support.rst:295
msgid "share/spack/templates/modules/modulefile.dk"
msgstr ""

# 5a2d004828ab461289f53f4fbfdd05bd
#: ../spack/lib/spack/docs/module_file_support.rst:295
msgid "DotKit"
msgstr ""

# 253cee82ff91479dbc28e91a620da827
#: ../spack/lib/spack/docs/module_file_support.rst:297
msgid "**TCL - Non-Hierarchical**"
msgstr ""

# 8aaedf74b5dd40219eebc48ce69d49d6
#: ../spack/lib/spack/docs/module_file_support.rst:297
msgid "``tcl``"
msgstr ""

# f0969b8a29b247fcbd01293adf92a559
#: ../spack/lib/spack/docs/module_file_support.rst:297
msgid "share/spack/modules"
msgstr ""

# e27df14ce7c946cc9e81299b155f4b09
#: ../spack/lib/spack/docs/module_file_support.rst:297
msgid "share/spack/templates/modules/modulefile.tcl"
msgstr ""

# d5ac0b8700874f23a817cf150e6f95d9
#: ../spack/lib/spack/docs/module_file_support.rst:297
msgid "Env. Modules/LMod"
msgstr ""

# 68a5a707ea954cf68547baa2a42a8cb7
#: ../spack/lib/spack/docs/module_file_support.rst:299
msgid "**Lua - Hierarchical**"
msgstr ""

# 476b604c0b2c4db193440520547339cf
#: ../spack/lib/spack/docs/module_file_support.rst:299
msgid "``lmod``"
msgstr ""

# c26f6ef37af84b86befc6ca6ee906849
#: ../spack/lib/spack/docs/module_file_support.rst:299
msgid "share/spack/lmod"
msgstr ""

# c2fce2673c25415292e2a545ed0cd209
#: ../spack/lib/spack/docs/module_file_support.rst:299
msgid "share/spack/templates/modules/modulefile.lua"
msgstr ""

# fe22ea499c384f92a7c62919fe32a86a
#: ../spack/lib/spack/docs/module_file_support.rst:299
msgid "LMod"
msgstr ""

# 33e0efeec8974b51ad6565ef4dc18acb
#: ../spack/lib/spack/docs/module_file_support.rst:303
msgid ""
"Spack ships with sensible defaults for the generation of module files, but "
"you can customize many aspects of it to accommodate package or site specific "
"needs. In general you can override or extend the default behavior by:"
msgstr ""

# 434434d6a67b42d483b3ab566303c21f
#: ../spack/lib/spack/docs/module_file_support.rst:307
msgid "overriding certain callback APIs in the Python packages"
msgstr ""

# 40ffe4d06fd84acaaddf7db5443303d7
#: ../spack/lib/spack/docs/module_file_support.rst:308
msgid "writing specific rules in the ``modules.yaml`` configuration file"
msgstr ""

# f5fa06c6204840acaa0f1d7114f7918a
#: ../spack/lib/spack/docs/module_file_support.rst:309
msgid "writing your own templates to override or extend the defaults"
msgstr ""

# cd674908047649b3aca9108f629b8081
#: ../spack/lib/spack/docs/module_file_support.rst:311
msgid ""
"The former method let you express changes in the run-time environment that "
"are needed to use the installed software properly, e.g. injecting variables "
"from language interpreters into their extensions. The latter two instead "
"permit to fine tune the filesystem layout, content and creation of module "
"files to meet site specific conventions."
msgstr ""

# 44e1eb60c3124bfd9d9f5b09c6dd1f3d
#: ../spack/lib/spack/docs/module_file_support.rst:319
msgid "Override API calls in ``package.py``"
msgstr ""

# 3042f852bd0246a58de2145769a4ca24
#: ../spack/lib/spack/docs/module_file_support.rst:321
msgid ""
"There are two methods that you can override in any ``package.py`` to affect "
"the content of the module files generated by Spack. The first one:"
msgstr ""

# a61c4c68fb52421598180c396c114858
#: ../spack/lib/spack/docs/module_file_support.rst:330
msgid ""
"can alter the content of the module file associated with the same package "
"where it is overridden. The second method:"
msgstr ""

# 66074879d6cb4f68bb9f060d15b2cb7a
#: ../spack/lib/spack/docs/module_file_support.rst:339
msgid ""
"can instead inject run-time environment modifications in the module files of "
"packages that depend on it. In both cases you need to fill ``run_env`` with "
"the desired list of environment modifications."
msgstr ""

# 13013eab2f5e4d0b93d76743cdda2f10
#: ../spack/lib/spack/docs/module_file_support.rst:365
msgid "The ``r`` package and callback APIs"
msgstr ""

# a6b71c7ac72e4eb08aca981ee6b23cf2
#: ../spack/lib/spack/docs/module_file_support.rst:345
msgid ""
"An example in which it is crucial to override both methods is given by the "
"``r`` package. This package installs libraries and headers in non-standard "
"locations and it is possible to prepend the appropriate directory to the "
"corresponding environment variables:"
msgstr ""

# fc0d49af456a4e9a98b6185f33a4dcef
#: ../spack/lib/spack/docs/module_file_support.rst:351
msgid "LIBRARY_PATH"
msgstr ""

# bcca79282e16426bb15cfecb20fa2911
# ddb698cebf80462ebaa64ee1efea8a63
#: ../spack/lib/spack/docs/module_file_support.rst:351
#: ../spack/lib/spack/docs/module_file_support.rst:352
msgid "``self.prefix/rlib/R/lib``"
msgstr ""

# d642df48bb854660af6970bce459732e
#: ../spack/lib/spack/docs/module_file_support.rst:352
msgid "LD_LIBRARY_PATH"
msgstr ""

# ade9fb73238542b38bd41cace10f268f
#: ../spack/lib/spack/docs/module_file_support.rst:353
msgid "CPATH"
msgstr ""

# 99ae9b5779554f8d9734300eccee7d30
#: ../spack/lib/spack/docs/module_file_support.rst:353
msgid "``self.prefix/rlib/R/include``"
msgstr ""

# cfb0b90062a148fea185bd6222c312fa
#: ../spack/lib/spack/docs/module_file_support.rst:356
msgid "with the following snippet:"
msgstr ""

# 2eecbc320fa24f1b90e36b510c84a81f
#: ../spack/lib/spack/docs/module_file_support.rst:361
msgid ""
"The ``r`` package also knows which environment variable should be modified "
"to make language extensions provided by other packages available, and "
"modifies it appropriately in the override of the second method:"
msgstr ""

# 3815c6af70e74b80b340d966fcd46b3e
#: ../spack/lib/spack/docs/module_file_support.rst:372
msgid "Write a configuration file"
msgstr ""

# 9c4f02501e6e4e399a89238ee39522d0
#: ../spack/lib/spack/docs/module_file_support.rst:374
msgid ""
"The configuration files that control module generation behavior are named "
"``modules.yaml``. The default configuration:"
msgstr ""

# 696b13f2fb48452abe409e7c774392e4
#: ../spack/lib/spack/docs/module_file_support.rst:380
msgid ""
"activates the hooks to generate ``tcl`` and ``dotkit`` module files and "
"inspects the installation folder of each package for the presence of a set "
"of subdirectories (``bin``, ``man``, ``share/man``, etc.). If any is found "
"its full path is prepended to the environment variables listed below the "
"folder name."
msgstr ""

# fd0139f1404b4b7889c5837920968f08
#: ../spack/lib/spack/docs/module_file_support.rst:387
msgid "Activate other hooks"
msgstr ""

# 5b93c5ccdbaf498eaba90ca5964d9296
#: ../spack/lib/spack/docs/module_file_support.rst:389
msgid ""
"Any other module file generator shipped with Spack can be activated adding "
"it to the list under the ``enable`` key in the module file. Currently the "
"only generator that is not active by default is ``lmod``, which produces "
"hierarchical lua module files."
msgstr ""

# 7e8a1cb974884712990866a45e0e2889
#: ../spack/lib/spack/docs/module_file_support.rst:393
msgid ""
"Each module system can then be configured separately. In fact, you should "
"list configuration options that affect a particular type of module files "
"under a top level key corresponding to the generator being customized:"
msgstr ""

# ddf312b3aad444108e877789f41b8965
#: ../spack/lib/spack/docs/module_file_support.rst:411
msgid ""
"In general, the configuration options that you can use in ``modules.yaml`` "
"will either change the layout of the module files on the filesystem, or they "
"will affect their content. For the latter point it is possible to use "
"anonymous specs to fine tune the set of packages on which the modifications "
"should be applied."
msgstr ""

# 054897a29380430280a9dbb5a0f43640
#: ../spack/lib/spack/docs/module_file_support.rst:420
msgid "Selection by anonymous specs"
msgstr ""

# cc613163866345dba2730485709a0a8f
#: ../spack/lib/spack/docs/module_file_support.rst:422
msgid ""
"In the configuration file you can use *anonymous specs* (i.e. specs that "
"**are not required to have a root package** and are thus used just to "
"express constraints) to apply certain modifications on a selected set of the "
"installed software. For instance, in the snippet below:"
msgstr ""

# d4412a34ebaa404eaa211436e85f923f
#: ../spack/lib/spack/docs/module_file_support.rst:454
msgid ""
"you are instructing Spack to set the environment variable ``BAR=bar`` for "
"every module, unless the associated spec satisfies ``^openmpi`` in which "
"case ``BAR=baz``. In addition in any spec that satisfies ``zlib`` the value "
"``foo`` will be prepended to ``LD_LIBRARY_PATH`` and in any spec that "
"satisfies ``zlib%gcc@4.8`` the variable ``FOOBAR`` will be unset."
msgstr ""

# 81ae395a74b348d7937a58728656ef52
#: ../spack/lib/spack/docs/module_file_support.rst:463
msgid "Order does matter"
msgstr ""

# 38a26fa3f1074065a2562826ba4e5ca7
#: ../spack/lib/spack/docs/module_file_support.rst:462
msgid ""
"The modifications associated with the ``all`` keyword are always evaluated "
"first, no matter where they appear in the configuration file. All the other "
"spec constraints are instead evaluated top to bottom."
msgstr ""

# 1953af73de0b4d11b421dc199af8646b
#: ../spack/lib/spack/docs/module_file_support.rst:468
msgid "Blacklist or whitelist specific module files"
msgstr ""

# f2506849db134d21912a749c0bf800d2
#: ../spack/lib/spack/docs/module_file_support.rst:470
msgid ""
"You can use anonymous specs also to prevent module files from being written "
"or to force them to be written. Consider the case where you want to hide "
"from users all the boilerplate software that you had to build in order to "
"bootstrap a new compiler. Suppose for instance that ``gcc@4.4.7`` is the "
"compiler provided by your system. If you write a configuration file like:"
msgstr ""

# f92a1862759a498b9a3917a0a7fa53ba
#: ../spack/lib/spack/docs/module_file_support.rst:483
msgid ""
"you will prevent the generation of module files for any package that is "
"compiled with ``gcc@4.4.7``, with the only exception of any ``gcc`` or any "
"``llvm`` installation."
msgstr ""

# df9fd9a4f62e4c5b89718c64a53e740b
#: ../spack/lib/spack/docs/module_file_support.rst:492
msgid "Customize the naming scheme"
msgstr ""

# 0e707c3714f341f99c3f1fb303ea520c
#: ../spack/lib/spack/docs/module_file_support.rst:494
msgid ""
"The names of environment modules generated by spack are not always easy to "
"fully comprehend due to the long hash in the name. There are two module "
"configuration options to help with that. The first is a global setting to "
"adjust the hash length. It can be set anywhere from 0 to 32 and has a "
"default length of 7. This is the representation of the hash in the module "
"file name and does not affect the size of the package hash. Be aware that "
"the smaller the hash length the more likely naming conflicts will occur. The "
"following snippet shows how to set hash length in the module file names:"
msgstr ""

# 6458575ad8454db2aa9cc0212f5dc17b
#: ../spack/lib/spack/docs/module_file_support.rst:509
msgid ""
"To help make module names more readable, and to help alleviate name "
"conflicts with a short hash, one can use the ``suffixes`` option in the "
"modules configuration file. This option will add strings to modules that "
"match a spec. For instance, the following config options,"
msgstr ""

# abf466988a464fbeb7593a8f44cd1c06
#: ../spack/lib/spack/docs/module_file_support.rst:523
msgid ""
"will add a ``python-2.7.12`` version string to any packages compiled with "
"python matching the spec, ``python@2.7.12``. This is useful to know which "
"version of python a set of python extensions is associated with. Likewise, "
"the ``openblas`` string is attached to any program that has openblas in the "
"spec, most likely via the ``+blas`` variant specification."
msgstr ""

# f99ae69c5a204ceb90fd8634c5b37931
#: ../spack/lib/spack/docs/module_file_support.rst:547
msgid "TCL module files"
msgstr ""

# fff6ae3f47cd4827be2bedab38643819
#: ../spack/lib/spack/docs/module_file_support.rst:531
msgid ""
"A modification that is specific to ``tcl`` module files is the possibility "
"to change the naming scheme of modules."
msgstr ""

# 67fa9ddc97f74fed8f99eb888b6f8d08
#: ../spack/lib/spack/docs/module_file_support.rst:544
msgid ""
"will create module files that will conflict with ``intel/14.0.1`` and with "
"the base directory of the same module, effectively preventing the "
"possibility to load two or more versions of the same software at the same "
"time. The tokens that are available for use in this directive are the same "
"understood by the ``Spec.format`` method."
msgstr ""

# c98065600283400398dfea12a92a56b8
#: ../spack/lib/spack/docs/module_file_support.rst:573
msgid "LMod hierarchical module files"
msgstr ""

# fd35d817050b4ee1827ac403380d7f56
#: ../spack/lib/spack/docs/module_file_support.rst:553
msgid ""
"When ``lmod`` is activated Spack will generate a set of hierarchical lua "
"module files that are understood by LMod. The hierarchy will always contain "
"the two layers ``Core`` / ``Compiler`` but can be further extended to any of "
"the virtual dependencies present in Spack. A case that could be useful in "
"practice is for instance:"
msgstr ""

# 58cb68fb1b0a45b68f5d49c8b12cf396
#: ../spack/lib/spack/docs/module_file_support.rst:571
msgid ""
"that will generate a hierarchy in which the ``lapack`` and ``mpi`` layer can "
"be switched independently. This allows a site to build the same libraries or "
"applications against different implementations of ``mpi`` and ``lapack``, "
"and let LMod switch safely from one to the other."
msgstr ""

# ab3082aa878340589c854dc1c9acbf2a
#: ../spack/lib/spack/docs/module_file_support.rst:578
msgid "Deep hierarchies and ``lmod spider``"
msgstr ""

# 5efe0dbc36bb403887ee9ed72330f547
#: ../spack/lib/spack/docs/module_file_support.rst:578
msgid ""
"For hierarchies that are deeper than three layers ``lmod spider`` may have "
"some issues. See `this discussion on the LMod project <https://github.com/"
"TACC/Lmod/issues/114>`_."
msgstr ""

# d69a31a7667d416c9680e53575c8db6c
#: ../spack/lib/spack/docs/module_file_support.rst:583
msgid "Filter out environment modifications"
msgstr ""

# 5983f576dfa346039ed6e7e000ce2322
#: ../spack/lib/spack/docs/module_file_support.rst:585
msgid ""
"Modifications to certain environment variables in module files are there by "
"default, for instance because they are generated by prefix inspections. If "
"you want to prevent modifications to some environment variables, you can do "
"so by using the environment blacklist:"
msgstr ""

# a5478e75e1ba4854aaa0788f1ea39829
#: ../spack/lib/spack/docs/module_file_support.rst:599
msgid ""
"The configuration above will generate dotkit module files that will not "
"contain modifications to either ``CPATH`` or ``LIBRARY_PATH`` and "
"environment module files that instead will contain these modifications."
msgstr ""

# #-#-#-#-#  module_file_support.pot (Spack 0.12)  #-#-#-#-#
# 8e4ea21f099041398e4d7de2c39da07d
# #-#-#-#-#  tutorial_modules.pot (Spack 0.12)  #-#-#-#-#
# a82c2fe5679049cbbba5e7ff94ea9e0f
#: ../spack/lib/spack/docs/module_file_support.rst:608
#: ../spack/lib/spack/docs/tutorial_modules.rst:886
msgid "Autoload dependencies"
msgstr ""

# 2ec41487fcc34c8986a14a428ec52692
#: ../spack/lib/spack/docs/module_file_support.rst:610
msgid ""
"In some cases it can be useful to have module files that automatically load "
"their dependencies.  This may be the case for Python extensions, if not "
"activated using ``spack activate``:"
msgstr ""

# 71f7dc57eeae44ad84ef30a64a170369
#: ../spack/lib/spack/docs/module_file_support.rst:621
msgid ""
"The configuration file above will produce module files that will load their "
"direct dependencies if the package installed depends on ``python``. The "
"allowed values for the ``autoload`` statement are either ``none``, "
"``direct`` or ``all``.  The default is ``none``."
msgstr ""

# 8c5b1a88640245529c2914cf4b1f1301
#: ../spack/lib/spack/docs/module_file_support.rst:631
msgid "Building external software"
msgstr ""

# 0876283cdbf2468abed7c57fc89ed188
#: ../spack/lib/spack/docs/module_file_support.rst:628
msgid ""
"Setting ``autoload`` to ``direct`` for all packages can be useful when "
"building software outside of a Spack installation that depends on artifacts "
"in that installation.  E.g. (adjust ``lmod`` vs ``tcl`` as appropriate):"
msgstr ""

# 6a1d4e1aee6c406488053696a24bc6ac
#: ../spack/lib/spack/docs/module_file_support.rst:644
msgid "TCL prerequisites"
msgstr ""

# e829fc56449c43afb86705e41a7c0b26
#: ../spack/lib/spack/docs/module_file_support.rst:642
msgid ""
"In the ``tcl`` section of the configuration file it is possible to use the "
"``prerequisites`` directive that accepts the same values as ``autoload``. It "
"will produce module files that have a ``prereq`` statement instead of "
"automatically loading other modules."
msgstr ""

# ca298a6dfce84dbfbf14ac1dae287c4c
#: ../spack/lib/spack/docs/module_file_support.rst:649
msgid "Maintaining Module Files"
msgstr ""

# d0c007e0f7be44ce965ee65fb405ce82
#: ../spack/lib/spack/docs/module_file_support.rst:651
msgid ""
"Each type of module file has a command with the same name associated with "
"it. The actions these commands permit are usually associated with the "
"maintenance of a production environment. Here's, for instance, a sample of "
"the features of the ``spack module tcl`` command:"
msgstr ""

# 0167de6bc1ef4bd9b00afab8d99a4797
#: ../spack/lib/spack/docs/module_file_support.rst:662
msgid "Refresh the set of modules"
msgstr ""

# 32fb460d432f453b872f7378268d2c76
#: ../spack/lib/spack/docs/module_file_support.rst:664
msgid ""
"The subcommand that regenerates module files to update their content or "
"their layout is ``refresh``:"
msgstr ""

# fb4dbd5ed0ff4357beb9341850c94adc
#: ../spack/lib/spack/docs/module_file_support.rst:669
msgid ""
"A set of packages can be selected using anonymous specs for the optional "
"``constraint`` positional argument. Optionally the entire tree can be "
"deleted before regeneration if the change in layout is radical."
msgstr ""

# c0f7f951acc4422998be73347d89e0f7
#: ../spack/lib/spack/docs/module_file_support.rst:677
msgid "Delete module files"
msgstr ""

# 170d7b9f0b6c45d1b7b49691ae0547ae
#: ../spack/lib/spack/docs/module_file_support.rst:679
msgid ""
"If instead what you need is just to delete a few module files, then the "
"right subcommand is ``rm``:"
msgstr ""

# e1c4cc6dabea4dddae29002d9718f696
#: ../spack/lib/spack/docs/module_file_support.rst:688
msgid "We care about your module files!"
msgstr ""

# 02003459e1924a37afc7e647ad697c13
#: ../spack/lib/spack/docs/module_file_support.rst:686
msgid ""
"Every modification done on modules that are already existing will ask for a "
"confirmation by default. If the command is used in a script it is possible "
"though to pass the ``-y`` argument, that will skip this safety measure."
msgstr ""

# e5651210b9ac460bac4fb383a1f07c4c
#: ../spack/lib/spack/docs/package_list.rst:10
msgid "Package List"
msgstr "パッケージ一覧"

# 9e9b87e2ae5048c4bfadf0998f01ed81
#: ../spack/lib/spack/docs/package_list.rst:12
msgid ""
"This is a list of things you can install using Spack.  It is automatically "
"generated based on the packages in the latest Spack release."
msgstr ""

# f7c64adca4df4a38b4462882897ff415
#: ../spack/lib/spack/docs/packaging_guide.rst:10
msgid "Packaging Guide"
msgstr ""

# 2a862316cd5445e1bdf02f5a017d7eb8
#: ../spack/lib/spack/docs/packaging_guide.rst:12
msgid ""
"This guide is intended for developers or administrators who want to package "
"software so that Spack can install it.  It assumes that you have at least "
"some familiarity with Python, and that you've read the :ref:`basic usage "
"guide <basic-usage>`, especially the part about :ref:`specs <sec-specs>`."
msgstr ""

# 350099afb3e04350bfa74eb544ae969b
#: ../spack/lib/spack/docs/packaging_guide.rst:18
msgid "There are two key parts of Spack:"
msgstr ""

# 581aa19c53f840a9900e98e8af8b442d
#: ../spack/lib/spack/docs/packaging_guide.rst:21
msgid ""
"**Packages**: Python modules that describe how to build software according "
"to a spec."
msgstr ""

# 9b26fe831cb841339b013b2b050d2aaa
#: ../spack/lib/spack/docs/packaging_guide.rst:24
msgid ""
"Specs allow a user to describe a *particular* build in a way that a package "
"author can understand.  Packages allow the packager to encapsulate the build "
"logic for different versions, compilers, options, platforms, and dependency "
"combinations in one place. Essentially, a package translates a spec into "
"build logic."
msgstr ""

# bba744cd50004a07a55c3a651eb25092
#: ../spack/lib/spack/docs/packaging_guide.rst:30
msgid ""
"Packages in Spack are written in pure Python, so you can do anything in "
"Spack that you can do in Python.  Python was chosen as the implementation "
"language for two reasons.  First, Python is becoming ubiquitous in the "
"scientific software community. Second, it's a modern language and has many "
"powerful features to help make package writing easy."
msgstr ""

# b8183c557d4c4b2caecb1fb47c74de17
#: ../spack/lib/spack/docs/packaging_guide.rst:39
msgid "Creating & editing packages"
msgstr ""

# 811951616b294d4fafcbb12a08042ef7
#: ../spack/lib/spack/docs/packaging_guide.rst:45
msgid "``spack create``"
msgstr ""

# c8168b527bff4f94a8e26871683ba663
#: ../spack/lib/spack/docs/packaging_guide.rst:47
msgid ""
"The ``spack create`` command creates a directory with the package name and "
"generates a ``package.py`` file with a boilerplate package template. If "
"given a URL pointing to a tarball or other software archive, ``spack "
"create`` is smart enough to determine basic information about the package, "
"including its name and build system. In most cases, ``spack create`` plus a "
"few modifications is all you need to get a package working."
msgstr ""

# e7ca44be8f4b46a8a2b1ecff810fec22
#: ../spack/lib/spack/docs/packaging_guide.rst:54
msgid "Here's an example:"
msgstr ""

# 36f664a1948b407698a7807993d02f94
#: ../spack/lib/spack/docs/packaging_guide.rst:60
msgid ""
"Spack examines the tarball URL and tries to figure out the name of the "
"package to be created. If the name contains uppercase letters, these are "
"automatically converted to lowercase. If the name contains underscores or "
"periods, these are automatically converted to dashes."
msgstr ""

# 996d7271aa60466aba0e49db76348825
#: ../spack/lib/spack/docs/packaging_guide.rst:65
msgid ""
"Spack also searches for *additional* versions located in the same directory "
"of the website. Spack prompts you to tell you how many versions it found and "
"asks you how many you would like to download and checksum:"
msgstr ""

# 1d1a059109464e31890a62a5c2411b3a
#: ../spack/lib/spack/docs/packaging_guide.rst:83
msgid ""
"Spack will automatically download the number of tarballs you specify "
"(starting with the most recent) and checksum each of them."
msgstr ""

# 66a1cda58f4441f5b77e7f73e066aafa
#: ../spack/lib/spack/docs/packaging_guide.rst:86
msgid ""
"You do not *have* to download all of the versions up front. You can always "
"choose to download just one tarball initially, and run :ref:`cmd-spack-"
"checksum` later if you need more versions."
msgstr ""

# 5b111277ee75440e9c7b25a979682800
#: ../spack/lib/spack/docs/packaging_guide.rst:90
msgid "Let's say you download 3 tarballs:"
msgstr ""

# 2de0aad42f7f4196b07114f5ca1186a5
#: ../spack/lib/spack/docs/packaging_guide.rst:107
msgid ""
"Spack automatically creates a directory in the appropriate repository, "
"generates a boilerplate template for your package, and opens up the new "
"``package.py`` in your favorite ``$EDITOR``:"
msgstr ""

# b955d45c65d344d89908132a703535d6
#: ../spack/lib/spack/docs/packaging_guide.rst:152
msgid ""
"The tedious stuff (creating the class, checksumming archives) has been done "
"for you. You'll notice that ``spack create`` correctly detected that ``gmp`` "
"uses the Autotools build system. It created a new ``Gmp`` package that "
"subclasses the ``AutotoolsPackage`` base class. This base class provides "
"basic installation methods common to all Autotools packages:"
msgstr ""

# 708257963610400a8138ced1453b4e18
#: ../spack/lib/spack/docs/packaging_guide.rst:166
msgid ""
"For most Autotools packages, this is sufficient. If you need to add "
"additional arguments to the ``./configure`` call, add them via the "
"``configure_args`` function."
msgstr ""

# 54c795d22ce548a79fb44434a509ea65
#: ../spack/lib/spack/docs/packaging_guide.rst:170
msgid ""
"In the generated package, the download ``url`` attribute is already set. All "
"the things you still need to change are marked with ``FIXME`` labels. You "
"can delete the commented instructions between the license and the first "
"import statement after reading them. The rest of the tasks you need to do "
"are as follows:"
msgstr ""

# 8029557da30040f282838230a34cc1d5
#: ../spack/lib/spack/docs/packaging_guide.rst:176
msgid "Add a description."
msgstr ""

# 49a323c055c64a5aafef7c7330a0e285
#: ../spack/lib/spack/docs/packaging_guide.rst:178
msgid ""
"Immediately inside the package class is a *docstring* in triple-quotes (``"
"\"\"\"``).  It is used to generate the description shown when users run "
"``spack info``."
msgstr ""

# 0a4d217d26a143eb92bf6026bc7295cb
#: ../spack/lib/spack/docs/packaging_guide.rst:182
msgid "Change the ``homepage`` to a useful URL."
msgstr ""

# 55d5d8b09aad4897b1889eec3ef8045d
#: ../spack/lib/spack/docs/packaging_guide.rst:184
msgid ""
"The ``homepage`` is displayed when users run ``spack info`` so that they can "
"learn more about your package."
msgstr ""

# a31667deda934107870601674e56ea08
#: ../spack/lib/spack/docs/packaging_guide.rst:187
msgid "Add ``depends_on()`` calls for the package's dependencies."
msgstr ""

# aebafd07857a4a30aee520fcfdfe5858
#: ../spack/lib/spack/docs/packaging_guide.rst:189
msgid ""
"``depends_on`` tells Spack that other packages need to be built and "
"installed before this one. See :ref:`dependencies`."
msgstr ""

# c6bbe4351b0c43e5a2ddf837aff56685
#: ../spack/lib/spack/docs/packaging_guide.rst:192
msgid "Get the installation working."
msgstr ""

# d63340d07db54118a88b50ee3002d11c
#: ../spack/lib/spack/docs/packaging_guide.rst:194
msgid ""
"Your new package may require specific flags during ``configure``. These can "
"be added via ``configure_args``. Specifics will differ depending on the "
"package and its build system. :ref:`Implementing the install method <install-"
"method>` is covered in detail later."
msgstr ""

# f901914ae9e04d2d8049aa89212a503e
#: ../spack/lib/spack/docs/packaging_guide.rst:200
msgid ""
"Passing a URL to ``spack create`` is a convenient and easy way to get a "
"basic package template, but what if your software is licensed and cannot be "
"downloaded from a URL? You can still create a boilerplate ``package.py`` by "
"telling ``spack create`` what name you want to use:"
msgstr ""

# cb95a3b2cad047009988c209c85d32f9
#: ../spack/lib/spack/docs/packaging_guide.rst:209
msgid ""
"This will create a simple ``intel`` package with an ``install()`` method "
"that you can craft to install your package."
msgstr ""

# e16b974437994823a202ccdfc676f053
#: ../spack/lib/spack/docs/packaging_guide.rst:212
msgid ""
"What if ``spack create <url>`` guessed the wrong name or build system? For "
"example, if your package uses the Autotools build system but does not come "
"with a ``configure`` script, Spack won't realize it uses Autotools. You can "
"overwrite the old package with ``--force`` and specify a name with ``--"
"name`` or a build system template to use with ``--template``:"
msgstr ""

# 9c9e2bceb6bd4682b612691290a6320b
#: ../spack/lib/spack/docs/packaging_guide.rst:225
msgid ""
"If you are creating a package that uses the Autotools build system but does "
"not come with a ``configure`` script, you'll need to add an ``autoreconf`` "
"method to your package that explains how to generate the ``configure`` "
"script. You may also need the following dependencies:"
msgstr ""

# fad793ea143540a5bb14a7ae43a63f7c
#: ../spack/lib/spack/docs/packaging_guide.rst:237
msgid ""
"A complete list of available build system templates can be found by running "
"``spack create --help``."
msgstr ""

# a6d5ed67331b41b2a0016ae76631bd72
#: ../spack/lib/spack/docs/packaging_guide.rst:244
msgid "``spack edit``"
msgstr ""

# 3696cad9dd0043e9a7533b6e6b677182
#: ../spack/lib/spack/docs/packaging_guide.rst:246
msgid ""
"One of the easiest ways to learn how to write packages is to look at "
"existing ones.  You can edit a package file by name with the ``spack edit`` "
"command:"
msgstr ""

# a2dd1a09cbbf456ab5e1cea4fe606aeb
#: ../spack/lib/spack/docs/packaging_guide.rst:254
msgid ""
"So, if you used ``spack create`` to create a package, then saved and closed "
"the resulting file, you can get back to it with ``spack edit``. The ``gmp`` "
"package actually lives in ``$SPACK_ROOT/var/spack/repos/builtin/packages/gmp/"
"package.py``, but ``spack edit`` provides a much simpler shortcut and saves "
"you the trouble of typing the full path."
msgstr ""

# 8bc609d693ea4b26ac32c1aab14307e9
#: ../spack/lib/spack/docs/packaging_guide.rst:263
msgid "Naming & directory structure"
msgstr ""

# e5d56d76a6964778bb58b559b06f9d89
#: ../spack/lib/spack/docs/packaging_guide.rst:265
msgid ""
"This section describes how packages need to be named, and where they live in "
"Spack's directory structure.  In general, :ref:`cmd-spack-create` handles "
"creating package files for you, so you can skip most of the details here."
msgstr ""

# 70dd5397ef6247978d3ff1ddf322a2f4
#: ../spack/lib/spack/docs/packaging_guide.rst:272
msgid "``var/spack/repos/builtin/packages``"
msgstr ""

# b1531a826b2e4b5bb40694311b77c354
#: ../spack/lib/spack/docs/packaging_guide.rst:274
msgid ""
"A Spack installation directory is structured like a standard UNIX install "
"prefix (``bin``, ``lib``, ``include``, ``var``, ``opt``, etc.).  Most of the "
"code for Spack lives in ``$SPACK_ROOT/lib/spack``. Packages themselves live "
"in ``$SPACK_ROOT/var/spack/repos/builtin/packages``."
msgstr ""

# 38afc65e6404417ea97c2ce4953a5302
#: ../spack/lib/spack/docs/packaging_guide.rst:279
msgid ""
"If you ``cd`` to that directory, you will see directories for each package:"
msgstr ""

# 356be391b8fa41159700a4c58067bad4
#: ../spack/lib/spack/docs/packaging_guide.rst:286
msgid ""
"Each directory contains a file called ``package.py``, which is where all the "
"python code for the package goes.  For example, the ``libelf`` package lives "
"in:"
msgstr ""

# c94fffd6502e432d836d6ed624029251
#: ../spack/lib/spack/docs/packaging_guide.rst:294
msgid ""
"Alongside the ``package.py`` file, a package may contain extra directories "
"or files (like patches) that it needs to build."
msgstr ""

# caddcc0fb99a4b239a0482071dc58253
#: ../spack/lib/spack/docs/packaging_guide.rst:299
msgid "Package Names"
msgstr ""

# d1b987660f2944dba373d347c499e047
#: ../spack/lib/spack/docs/packaging_guide.rst:301
msgid ""
"Packages are named after the directory containing ``package.py``. So, "
"``libelf``'s ``package.py`` lives in a directory called ``libelf``. The "
"``package.py`` file defines a class called ``Libelf``, which extends Spack's "
"``Package`` class.  For example, here is ``$SPACK_ROOT/var/spack/repos/"
"builtin/packages/libelf/package.py``:"
msgstr ""

# f0a58850c322445d95b214ccc71a26e0
#: ../spack/lib/spack/docs/packaging_guide.rst:322
msgid ""
"The **directory name** (``libelf``) determines the package name that users "
"should provide on the command line. e.g., if you type any of these:"
msgstr ""

# a33d3896384b4e5cad440fc5efe64c63
#: ../spack/lib/spack/docs/packaging_guide.rst:332
msgid ""
"Spack sees the package name in the spec and looks for ``libelf/package.py`` "
"in ``var/spack/repos/builtin/packages``. Likewise, if you run ``spack "
"install py-numpy``, Spack looks for ``py-numpy/package.py``."
msgstr ""

# 38f77e5abb544b1da45f1262b0b6dd64
#: ../spack/lib/spack/docs/packaging_guide.rst:337
msgid ""
"Spack uses the directory name as the package name in order to give packagers "
"more freedom in naming their packages. Package names can contain letters, "
"numbers, and dashes. Using a Python identifier (e.g., a class name or a "
"module name) would make it difficult to support these options.  So, you can "
"name a package ``3proxy`` or ``foo-bar`` and Spack won't care. It just needs "
"to see that name in the packages directory."
msgstr ""

# d417cb2a22d745d1a6f3f1c8ca5e9b42
#: ../spack/lib/spack/docs/packaging_guide.rst:347
msgid "Package class names"
msgstr ""

# 5dfb4d21bf344c17ba6bf40e4582c294
#: ../spack/lib/spack/docs/packaging_guide.rst:349
msgid ""
"Spack loads ``package.py`` files dynamically, and it needs to find a special "
"class name in the file for the load to succeed.  The **class name** "
"(``Libelf`` in our example) is formed by converting words separated by ``-`` "
"in the file name to CamelCase. If the name starts with a number, we prefix "
"the class name with ``_``. Here are some examples:"
msgstr ""

# ede73f7afe23491faf67354344653edb
#: ../spack/lib/spack/docs/packaging_guide.rst:357
msgid "Module Name"
msgstr ""

# f60429c9e3d8420ca31c980fcc85b6bb
#: ../spack/lib/spack/docs/packaging_guide.rst:357
msgid "Class Name"
msgstr ""

# ed6f07880e0a4ae98697b264f1cafc7b
#: ../spack/lib/spack/docs/packaging_guide.rst:359
msgid "``foo-bar``"
msgstr ""

# d1bb1dc53f814027b218deacb201ae40
#: ../spack/lib/spack/docs/packaging_guide.rst:359
msgid "``FooBar``"
msgstr ""

# 395681261f8448db8aa7c54b2128551e
#: ../spack/lib/spack/docs/packaging_guide.rst:360
msgid "``3proxy``"
msgstr ""

# 60e28e6075c940bb8c0531a812f45730
#: ../spack/lib/spack/docs/packaging_guide.rst:360
msgid "``_3proxy``"
msgstr ""

# 171e5c10839c4bf29b14be6d138f45e0
#: ../spack/lib/spack/docs/packaging_guide.rst:363
msgid ""
"In general, you won't have to remember this naming convention because :ref:"
"`cmd-spack-create` and :ref:`cmd-spack-edit` handle the details for you."
msgstr ""

# 5c20190a80f54b029ea81bbf7c58c5c9
#: ../spack/lib/spack/docs/packaging_guide.rst:368
msgid "Trusted Downloads"
msgstr ""

# e6e987bfcd6c4b71bd73c5d36409e7a2
#: ../spack/lib/spack/docs/packaging_guide.rst:370
msgid ""
"Spack verifies that the source code it downloads is not corrupted or "
"compromised; or at least, that it is the same version the author of the "
"Spack package saw when the package was created.  If Spack uses a download "
"method it can verify, we say the download method is *trusted*.  Trust is "
"important for *all downloads*: Spack has no control over the security of the "
"various sites from which it downloads source code, and can never assume that "
"any particular site hasn't been compromised."
msgstr ""

# 2347bee471024fd5b643e3875d031560
#: ../spack/lib/spack/docs/packaging_guide.rst:379
msgid ""
"Trust is established in different ways for different download methods. For "
"the most common download method --- a single-file tarball --- the tarball is "
"checksummed.  Git downloads using ``commit=`` are trusted implicitly, as "
"long as a hash is specified."
msgstr ""

# a67229d755644a30a4f987e7ebb85a2f
#: ../spack/lib/spack/docs/packaging_guide.rst:384
msgid ""
"Spack also provides untrusted download methods: tarball URLs may be supplied "
"without a checksum, or Git downloads may specify a branch or tag instead of "
"a hash.  If the user does not control or trust the source of an untrusted "
"download, it is a security risk.  Unless otherwise specified by the user for "
"special cases, Spack should by default use *only* trusted download methods."
msgstr ""

# 759b65d93ae446e8b2fa5d2d956529c5
#: ../spack/lib/spack/docs/packaging_guide.rst:391
msgid ""
"Unfortunately, Spack does not currently provide that guarantee.  It does "
"provide the following mechanisms for safety:"
msgstr ""

# 8fa75d7e91a440639d642456dbcc2136
#: ../spack/lib/spack/docs/packaging_guide.rst:394
msgid ""
"By default, Spack will only install a tarball package if it has a checksum "
"and that checksum matches.  You can override this with ``spack install --no-"
"checksum``."
msgstr ""

# 8541a2aa58864455ae808fbe4ba18a58
#: ../spack/lib/spack/docs/packaging_guide.rst:398
msgid ""
"Numeric versions are almost always tarball downloads, whereas non-numeric "
"versions not named ``develop`` frequently download untrusted branches or "
"tags from a version control system.  As long as a package has at least one "
"numeric version, and no non-numeric version named ``develop``, Spack will "
"prefer it over any non-numeric versions."
msgstr ""

# 321a09c1ca034ced888f2eeda0a9a133
#: ../spack/lib/spack/docs/packaging_guide.rst:407
msgid "Checksums"
msgstr ""

# 588ed1827d394f3ba4a29db3e5e5f166
#: ../spack/lib/spack/docs/packaging_guide.rst:409
msgid ""
"For tarball downloads, Spack can currently support checksums using the MD5, "
"SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512 algorithms.  It determines the "
"algorithm to use based on the hash length."
msgstr ""

# 02a19e32c98e4eeb97d15b367d9d9aa1
#: ../spack/lib/spack/docs/packaging_guide.rst:415
msgid "Versions and fetching"
msgstr ""

# 123ed82a244d4b2fbdb7e7a869bf76e0
#: ../spack/lib/spack/docs/packaging_guide.rst:417
msgid ""
"The most straightforward way to add new versions to your package is to add a "
"line like this in the package class:"
msgstr ""

# d0f61927aaf345a58bb031cca96f66cd
#: ../spack/lib/spack/docs/packaging_guide.rst:430
msgid "Versions should be listed in descending order, from newest to oldest."
msgstr ""

# 302c315e7a51404da78cba7cb38d3601
#: ../spack/lib/spack/docs/packaging_guide.rst:434
msgid "Date Versions"
msgstr ""

# 896c3039bf424d26b93e22a2344339a7
#: ../spack/lib/spack/docs/packaging_guide.rst:436
msgid ""
"If you wish to use dates as versions, it is best to use the format ``@yyyy-"
"mm-dd``.  This will ensure they sort in the correct order."
msgstr ""

# 97a0d341f4d34249b81f88bd6dc19ace
#: ../spack/lib/spack/docs/packaging_guide.rst:439
msgid ""
"Alternately, you might use a hybrid release-version / date scheme. For "
"example, ``@1.3_2016-08-31`` would mean the version from the ``1.3`` branch, "
"as of August 31, 2016."
msgstr ""

# 6fdd5788e4c941a1abe8b2e9f5fb0beb
#: ../spack/lib/spack/docs/packaging_guide.rst:445
msgid "Version URLs"
msgstr ""

# 5ab6295aec0049d2a4e5a55e6aafa26a
#: ../spack/lib/spack/docs/packaging_guide.rst:447
msgid ""
"By default, each version's URL is extrapolated from the ``url`` field in the "
"package.  For example, Spack is smart enough to download version ``8.2.1`` "
"of the ``Foo`` package above from http://example.com/foo-8.2.1.tar.gz."
msgstr ""

# be0caaf461df4b9aa5e2e88e1db0b74c
#: ../spack/lib/spack/docs/packaging_guide.rst:452
msgid ""
"If the URL is particularly complicated or changes based on the release, you "
"can override the default URL generation algorithm by defining your own "
"``url_for_version()`` function. For example, the download URL for OpenMPI "
"contains the major.minor version in one spot and the major.minor.patch "
"version in another:"
msgstr ""

# 9dd3a8a517bb499cbe9d6fdf5baa6319
#: ../spack/lib/spack/docs/packaging_guide.rst:458
msgid ""
"https://www.open-mpi.org/software/ompi/v2.1/downloads/openmpi-2.1.1.tar.bz2"
msgstr ""

# 08579761027b4a65863eaeaf473e1e9b
#: ../spack/lib/spack/docs/packaging_guide.rst:460
msgid ""
"In order to handle this, you can define a ``url_for_version()`` function "
"like so:"
msgstr ""

# 996798a99a33493e90b82892db2cd8ea
#: ../spack/lib/spack/docs/packaging_guide.rst:466
msgid ""
"With the use of this ``url_for_version()``, Spack knows to download OpenMPI "
"``2.1.1`` from http://www.open-mpi.org/software/ompi/v2.1/downloads/"
"openmpi-2.1.1.tar.bz2 but download OpenMPI ``1.10.7`` from http://www.open-"
"mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.7.tar.bz2."
msgstr ""

# 47b4d8893a2d456ea77b9b1564c3e124
#: ../spack/lib/spack/docs/packaging_guide.rst:470
msgid ""
"You'll notice that OpenMPI's ``url_for_version()`` function makes use of a "
"special ``Version`` function called ``up_to()``. When you call ``version."
"up_to(2)`` on a version like ``1.10.0``, it returns ``1.10``. ``version."
"up_to(1)`` would return ``1``. This can be very useful for packages that "
"place all ``X.Y.*`` versions in a single directory and then places all ``X.Y."
"Z`` versions in a sub-directory."
msgstr ""

# 7d2006c7191f42f697ef870f9a119ef0
#: ../spack/lib/spack/docs/packaging_guide.rst:476
msgid ""
"There are a few ``Version`` properties you should be aware of. We generally "
"prefer numeric versions to be separated by dots for uniformity, but not all "
"tarballs are named that way. For example, ``icu4c`` separates its major and "
"minor versions with underscores, like ``icu4c-57_1-src.tgz``. The value "
"``57_1`` can be obtained with the use of the ``version.underscored`` "
"property. Note that Python properties don't need parentheses. There are "
"other separator properties as well:"
msgstr ""

# 5ea5a8ca55214afdb13609145e370ed5
#: ../spack/lib/spack/docs/packaging_guide.rst:484
msgid "Property"
msgstr ""

# 3ec0b1a9a36546f1bf170ad7b60ea849
#: ../spack/lib/spack/docs/packaging_guide.rst:484
msgid "Result"
msgstr ""

# 59523ece29a048cda9b37e65a0cdffc8
#: ../spack/lib/spack/docs/packaging_guide.rst:486
msgid "version.dotted"
msgstr ""

# 65444b059404449893647bc7ae07fc08
#: ../spack/lib/spack/docs/packaging_guide.rst:486
msgid "1.2.3"
msgstr ""

# 382bb6a9549940378a56f6ba08d69ec3
#: ../spack/lib/spack/docs/packaging_guide.rst:487
msgid "version.dashed"
msgstr ""

# 7c904687d2554de682bf12ae4fd789fd
#: ../spack/lib/spack/docs/packaging_guide.rst:487
msgid "1-2-3"
msgstr ""

# 8b29d89d92424d00adb95c3a615dd918
#: ../spack/lib/spack/docs/packaging_guide.rst:488
msgid "version.underscored"
msgstr ""

# 59dddee2ce11485cba95588515e34b84
#: ../spack/lib/spack/docs/packaging_guide.rst:488
msgid "1_2_3"
msgstr ""

# 4431e6895d2245e98d7b73f22af1cb4e
#: ../spack/lib/spack/docs/packaging_guide.rst:489
msgid "version.joined"
msgstr ""

# 0461a8232d9742dab3ae6be3112828e2
#: ../spack/lib/spack/docs/packaging_guide.rst:489
msgid "123"
msgstr ""

# eac6bb20d4b14c50a18be027d779328e
#: ../spack/lib/spack/docs/packaging_guide.rst:494
msgid ""
"Python properties don't need parentheses. ``version.dashed`` is correct. "
"``version.dashed()`` is incorrect."
msgstr ""

# d21f4ceb57ca4ed983a742c8ad58e785
#: ../spack/lib/spack/docs/packaging_guide.rst:497
msgid ""
"In addition, these version properties can be combined with ``up_to()``. For "
"example:"
msgstr ""

# 7925a9c2490543399b04344fe3b56d36
#: ../spack/lib/spack/docs/packaging_guide.rst:509
msgid ""
"As you can see, order is not important. Just keep in mind that ``up_to()`` "
"and the other version properties return ``Version`` objects, not strings."
msgstr ""

# 8782641f5839455e84aadd9f518d9f76
#: ../spack/lib/spack/docs/packaging_guide.rst:512
msgid ""
"If a URL cannot be derived systematically, or there is a special URL for one "
"of its versions, you can add an explicit URL for a particular version:"
msgstr ""

# f291853ff9ae4f3ab1b7ea21ae289e3e
#: ../spack/lib/spack/docs/packaging_guide.rst:521
msgid ""
"When you supply a custom URL for a version, Spack uses that URL *verbatim* "
"and does not perform extrapolation. The order of precedence of these methods "
"is:"
msgstr ""

# 2aa5b653ed1a4e089f7480b34a4b788f
#: ../spack/lib/spack/docs/packaging_guide.rst:525
msgid "package-level ``url``"
msgstr ""

# 23ac725d19174d1ea9a6fa93342ee401
#: ../spack/lib/spack/docs/packaging_guide.rst:526
msgid "``url_for_version()``"
msgstr ""

# 8727d329dbda438296f57aa597a52563
#: ../spack/lib/spack/docs/packaging_guide.rst:527
msgid "version-specific ``url``"
msgstr ""

# 6e38885f2747461284fcbac4fbf434b2
#: ../spack/lib/spack/docs/packaging_guide.rst:529
msgid ""
"so if your package contains a ``url_for_version()``, it can be overridden by "
"a version-specific ``url``."
msgstr ""

# d6afdc5e5af84c57bc55574648cf1209
#: ../spack/lib/spack/docs/packaging_guide.rst:532
msgid ""
"If your package does not contain a package-level ``url`` or "
"``url_for_version()``, Spack can determine which URL to download from even "
"if only some of the versions specify their own ``url``. Spack will use the "
"nearest URL *before* the requested version. This is useful for packages that "
"have an easy to extrapolate URL, but keep changing their URL format every "
"few releases. With this method, you only need to specify the ``url`` when "
"the URL changes."
msgstr ""

# 5365397d778a4d17b1fe0a5bf01c7f6b
#: ../spack/lib/spack/docs/packaging_guide.rst:541
msgid "Skipping the expand step"
msgstr ""

# 52ff46f63de542988cd4b50b1e03e3a3
#: ../spack/lib/spack/docs/packaging_guide.rst:543
msgid ""
"Spack normally expands archives (e.g. ``*.tar.gz`` and ``*.zip``) "
"automatically after downloading them. If you want to skip this step (e.g., "
"for self-extracting executables and other custom archive types), you can add "
"``expand=False`` to a ``version`` directive."
msgstr ""

# f9f514514b3c4e688badf2161a9337b5
#: ../spack/lib/spack/docs/packaging_guide.rst:553
msgid ""
"When ``expand`` is set to ``False``, Spack sets the current working "
"directory to the directory containing the downloaded archive before it calls "
"your ``install`` method.  Within ``install``, the path to the downloaded "
"archive is available as ``self.stage.archive_file``."
msgstr ""

# 48effc39608e492ea47eb2377e87a701
#: ../spack/lib/spack/docs/packaging_guide.rst:558
msgid ""
"Here is an example snippet for packages distributed as self-extracting "
"archives.  The example sets permissions on the downloaded file to make it "
"executable, then runs it with some arguments."
msgstr ""

# 946762ca0ace4d65967ec05e03c75b79
#: ../spack/lib/spack/docs/packaging_guide.rst:571
msgid "Download caching"
msgstr ""

# c674196504514e30a6704ba9638b6c4e
#: ../spack/lib/spack/docs/packaging_guide.rst:573
msgid ""
"Spack maintains a cache (described :ref:`here <caching>`) which saves files "
"retrieved during package installations to avoid re-downloading in the case "
"that a package is installed with a different specification (but the same "
"version) or reinstalled on account of a change in the hashing scheme."
msgstr ""

# d0f4960836fc405f9f6993ad944fc7be
#: ../spack/lib/spack/docs/packaging_guide.rst:580
msgid "Version comparison"
msgstr ""

# a8b5257e5bf64e26b8e2f48b837cd09e
#: ../spack/lib/spack/docs/packaging_guide.rst:582
msgid ""
"Most Spack versions are numeric, a tuple of integers; for example, "
"``apex@0.1``, ``ferret@6.96`` or ``py-netcdf@1.2.3.1``.  Spack knows how to "
"compare and sort numeric versions."
msgstr ""

# 2a6f263b117c420891f19b01472b74c2
#: ../spack/lib/spack/docs/packaging_guide.rst:586
msgid ""
"Some Spack versions involve slight extensions of numeric syntax; for "
"example, ``py-sphinx-rtd-theme@0.1.10a0``.  In this case, numbers are always "
"considered to be \"newer\" than letters.  This is for consistency with `RPM "
"<https://bugzilla.redhat.com/show_bug.cgi?id=50977>`_."
msgstr ""

# 0a21033a374d49958d46e2d5bfedc444
#: ../spack/lib/spack/docs/packaging_guide.rst:591
msgid ""
"Spack versions may also be arbitrary non-numeric strings; any string here "
"will suffice; for example, ``@develop``, ``@master``, ``@local``. Versions "
"are compared as follows. First, a version string is split into multiple "
"fields based on delimiters such as ``.``, ``-`` etc. Then matching fields "
"are compared using the rules below:"
msgstr ""

# b27d9a6f6a0e4724bed317f7e9428abc
#: ../spack/lib/spack/docs/packaging_guide.rst:597
msgid ""
"The following develop-like strings are greater (newer) than all numbers and "
"are ordered as ``develop > master > head > trunk``."
msgstr ""

# 2d1b8dce5b3f4fbc94ceaac24bfae83a
#: ../spack/lib/spack/docs/packaging_guide.rst:600
msgid ""
"Numbers are all less than the chosen develop-like strings above, and are "
"sorted numerically."
msgstr ""

# 09b2655b5b52488aa9cae32dfb960d0c
#: ../spack/lib/spack/docs/packaging_guide.rst:603
msgid ""
"All other non-numeric versions are less than numeric versions, and are "
"sorted alphabetically."
msgstr ""

# 0e41cbf901054108911e55264ee0e766
#: ../spack/lib/spack/docs/packaging_guide.rst:606
msgid "The logic behind this sort order is two-fold:"
msgstr ""

# 84db533f56ba402484dbcd8674aa7419
#: ../spack/lib/spack/docs/packaging_guide.rst:608
msgid ""
"Non-numeric versions are usually used for special cases while developing or "
"debugging a piece of software.  Keeping most of them less than numeric "
"versions ensures that Spack chooses numeric versions by default whenever "
"possible."
msgstr ""

# eb4ce8026072468b89446bb16ce391b7
#: ../spack/lib/spack/docs/packaging_guide.rst:613
msgid ""
"The most-recent development version of a package will usually be newer than "
"any released numeric versions.  This allows the ``@develop`` version to "
"satisfy dependencies like ``depends_on(abc, when=\"@x.y.z:\")``"
msgstr ""

# ddb3acb20b5c405b83a2752e0f908c72
#: ../spack/lib/spack/docs/packaging_guide.rst:620
msgid "Version selection"
msgstr ""

# 53b058c61e2c4d0e935dfea1ccea04c0
#: ../spack/lib/spack/docs/packaging_guide.rst:622
msgid ""
"When concretizing, many versions might match a user-supplied spec. For "
"example, the spec ``python`` matches all available versions of the package "
"``python``.  Similarly, ``python@3:`` matches all versions of Python3.  "
"Given a set of versions that match a spec, Spack concretization uses the "
"following priorities to decide which one to use:"
msgstr ""

# aaca4679abfa45e0b03ca95fb7537136
#: ../spack/lib/spack/docs/packaging_guide.rst:629
msgid ""
"If the user provided a list of versions in ``packages.yaml``, the first "
"matching version in that list will be used."
msgstr ""

# c8423f2e4e26442380495012dc09f451
#: ../spack/lib/spack/docs/packaging_guide.rst:632
msgid ""
"If one or more versions is specified as ``preferred=True``, in either "
"``packages.yaml`` or ``package.py``, the largest matching version will be "
"used.  (\"Latest\" is defined by the sort order above)."
msgstr ""

# 5f84371a560647a29622e3f677bc6bbd
#: ../spack/lib/spack/docs/packaging_guide.rst:637
msgid ""
"If no preferences in particular are specified in the package or in "
"``packages.yaml``, then the largest matching non-develop version will be "
"used.  By avoiding ``@develop``, this prevents users from accidentally "
"installing a ``@develop`` version."
msgstr ""

# 8019048310814148a99cf4f9158fab6f
#: ../spack/lib/spack/docs/packaging_guide.rst:642
msgid ""
"If all else fails and ``@develop`` is the only matching version, it will be "
"used."
msgstr ""

# ab2fca162b0b4db9af2a80dedf9d3f1e
#: ../spack/lib/spack/docs/packaging_guide.rst:650
msgid "``spack checksum``"
msgstr ""

# 83ab6ab2ead74914af7a95a5dcb4b875
#: ../spack/lib/spack/docs/packaging_guide.rst:652
msgid ""
"If you want to add new versions to a package you've already created, this is "
"automated with the ``spack checksum`` command.  Here's an example for "
"``libelf``:"
msgstr ""

# 35eb9a8970da444dbec5f250ff0d4b61
#: ../spack/lib/spack/docs/packaging_guide.rst:674
msgid ""
"This does the same thing that ``spack create`` does, but it allows you to go "
"back and add new versions easily as you need them (e.g., as they're "
"released).  It fetches the tarballs you ask for and prints out a list of "
"``version`` commands ready to copy/paste into your package file:"
msgstr ""

# b796d46a2db742eea72b6cdae4fed690
#: ../spack/lib/spack/docs/packaging_guide.rst:688
msgid ""
"By default, Spack will search for new tarball downloads by scraping the "
"parent directory of the tarball you gave it.  So, if your tarball is at "
"``http://example.com/downloads/foo-1.0.tar.gz``, Spack will look in ``http://"
"example.com/downloads/`` for links to additional versions. If you need to "
"search another path for download links, you can supply some extra attributes "
"that control how your package finds new versions. See the documentation on :"
"ref:`attribute_list_url` and :ref:`attribute_list_depth`."
msgstr ""

# e6848d16447647f4851fe44180aec096
#: ../spack/lib/spack/docs/packaging_guide.rst:699
msgid ""
"This command assumes that Spack can extrapolate new URLs from an existing "
"URL in the package, and that Spack can find similar URLs on a webpage.  If "
"that's not possible, e.g. if the package's developers don't name their "
"tarballs consistently, you'll need to manually add ``version`` calls "
"yourself."
msgstr ""

# 934c3441dfb84693982fa3a580108b7c
#: ../spack/lib/spack/docs/packaging_guide.rst:705
msgid ""
"For ``spack checksum`` to work, Spack needs to be able to ``import`` your "
"package in Python.  That means it can't have any syntax errors, or the "
"``import`` will fail.  Use this once you've got your package in working "
"order."
msgstr ""

# b4c38c04cd3e4b1095a27039c83ceca2
#: ../spack/lib/spack/docs/packaging_guide.rst:712
msgid "Finding new versions"
msgstr ""

# b6baa4c52c754a97a2efe24fd946d665
#: ../spack/lib/spack/docs/packaging_guide.rst:714
msgid "You've already seen the ``homepage`` and ``url`` package attributes:"
msgstr ""

# c6f2b9562d9644b5b1d5402fd90eecda
#: ../spack/lib/spack/docs/packaging_guide.rst:728
msgid ""
"These are class-level attributes used by Spack to show users information "
"about the package, and to determine where to download its source code."
msgstr ""

# d45860d0fd114029ab5eaa825fac1b87
#: ../spack/lib/spack/docs/packaging_guide.rst:732
msgid ""
"Spack uses the tarball URL to extrapolate where to find other tarballs of "
"the same package (e.g. in :ref:`cmd-spack-checksum`, but this does not "
"always work.  This section covers ways you can tell Spack to find tarballs "
"elsewhere."
msgstr ""

# a79211317cc94b24bdabfb2c8a0b2f86
#: ../spack/lib/spack/docs/packaging_guide.rst:741
msgid "``list_url``"
msgstr ""

# ad64e18290be4d68a851629f4fda58fe
#: ../spack/lib/spack/docs/packaging_guide.rst:743
msgid ""
"When spack tries to find available versions of packages (e.g. with :ref:`cmd-"
"spack-checksum`), it spiders the parent directory of the tarball in the "
"``url`` attribute.  For example, for libelf, the url is:"
msgstr ""

# e5d6c65bcad145dc8ce71591b3cd2e75
#: ../spack/lib/spack/docs/packaging_guide.rst:752
msgid ""
"Here, Spack spiders ``http://www.mr511.de/software/`` to find similar "
"tarball links and ultimately to make a list of available versions of "
"``libelf``."
msgstr ""

# 87764b5cc2524618afa830a0d52cd48e
#: ../spack/lib/spack/docs/packaging_guide.rst:756
msgid ""
"For many packages, the tarball's parent directory may be unlistable, or it "
"may not contain any links to source code archives.  In fact, many times "
"additional package downloads aren't even available in the same directory as "
"the download URL."
msgstr ""

# 7ab96f08bad94dbfb845a5cfe4ae8ea1
#: ../spack/lib/spack/docs/packaging_guide.rst:761
msgid ""
"For these, you can specify a separate ``list_url`` indicating the page to "
"search for tarballs.  For example, ``libdwarf`` has the homepage as the "
"``list_url``, because that is where links to old versions are:"
msgstr ""

# b3f4a04f864f44a3993ea84dfb3c6386
#: ../spack/lib/spack/docs/packaging_guide.rst:777
msgid "``list_depth``"
msgstr ""

# f15630a7df0446809fc7b3024d0c88d7
#: ../spack/lib/spack/docs/packaging_guide.rst:779
msgid ""
"``libdwarf`` and many other packages have a listing of available versions on "
"a single webpage, but not all do.  For example, ``mpich`` has a tarball URL "
"that looks like this:"
msgstr ""

# ed99401548254bdcac5ab7fb5b70209b
#: ../spack/lib/spack/docs/packaging_guide.rst:787
msgid ""
"But its downloads are in many different subdirectories of ``http://www.mpich."
"org/static/downloads/``.  So, we need to add a ``list_url`` *and* a "
"``list_depth`` attribute:"
msgstr ""

# 973662f5ee2f4573ba0be783d458977c
#: ../spack/lib/spack/docs/packaging_guide.rst:800
msgid ""
"By default, Spack only looks at the top-level page available at "
"``list_url``.  ``list_depth = 1`` tells it to follow up to 1 level of links "
"from the top-level page.  Note that here, this implies 1 level of "
"subdirectories, as the ``mpich`` website is structured much like a "
"filesystem.  But ``list_depth`` really refers to link depth when spidering "
"the page."
msgstr ""

# 2cc4bb5537c04777b50e96e05cf4ebf2
#: ../spack/lib/spack/docs/packaging_guide.rst:811
msgid "Fetching from code repositories"
msgstr ""

# 1ef2ca1d73c24498b1d71760fd17289b
#: ../spack/lib/spack/docs/packaging_guide.rst:813
msgid ""
"For some packages, source code is provided in a Version Control System (VCS) "
"repository rather than in a tarball.  Spack can fetch packages from VCS "
"repositories. Currently, Spack supports fetching with `Git <git-fetch_>`_, "
"`Mercurial (hg) <hg-fetch_>`_, `Subversion (svn) <svn-fetch_>`_, and `Go <go-"
"fetch_>`_."
msgstr ""

# b99f542ddba14d57b9edec6bad546d4f
#: ../spack/lib/spack/docs/packaging_guide.rst:819
msgid ""
"To fetch a package from a source repository, Spack needs to know which VCS "
"to use and where to download from. Much like with ``url``, package authors "
"can specify a class-level ``git``, ``hg``, ``svn``, or ``go`` attribute "
"containing the correct download location."
msgstr ""

# 45c95ff602b448379236fabe2f804ea7
#: ../spack/lib/spack/docs/packaging_guide.rst:824
msgid ""
"Many packages developed with Git have both a Git repository as well as "
"release tarballs available for download. Packages can define both a class-"
"level tarball URL and VCS. For example:"
msgstr ""

# b03dc3894fe2435d9213f17d9814b879
#: ../spack/lib/spack/docs/packaging_guide.rst:842
msgid ""
"If a package contains both a ``url`` and ``git`` class-level attribute, "
"Spack decides which to use based on the arguments to the ``version()`` "
"directive. Versions containing a specific branch, tag, or revision are "
"assumed to be for VCS download methods, while versions containing a checksum "
"are assumed to be for URL download methods."
msgstr ""

# 548f3485b16244d2ba2a4024471b2f22
#: ../spack/lib/spack/docs/packaging_guide.rst:848
msgid ""
"Like ``url``, if a specific version downloads from a different repository "
"than the default repo, it can be overridden with a version-specific argument."
msgstr ""

# 747bf237b9654ee29566bc68cd1b28b2
#: ../spack/lib/spack/docs/packaging_guide.rst:853
msgid ""
"In order to reduce ambiguity, each package can only have a single VCS top-"
"level attribute in addition to ``url``. In the rare case that a package uses "
"multiple VCS, a fetch strategy can be specified for each version. For "
"example, the ``rockstar`` package contains:"
msgstr ""

# 1122d7d69dbe44c297f54106753a40f7
#: ../spack/lib/spack/docs/packaging_guide.rst:874
msgid "Git fetching supports the following parameters to ``version``:"
msgstr ""

# 413560a1c02e41a0b8a92490df43c1eb
#: ../spack/lib/spack/docs/packaging_guide.rst:876
msgid ""
"``git``: URL of the git repository, if different than the class-level "
"``git``."
msgstr ""

# d58b4273b23243ed9044446bc43f74d6
#: ../spack/lib/spack/docs/packaging_guide.rst:877
msgid "``branch``: Name of a branch to fetch."
msgstr ""

# b54a319245b74410a14be1ddd8919cea
#: ../spack/lib/spack/docs/packaging_guide.rst:878
msgid "``tag``: Name of a tag to fetch."
msgstr ""

# e25308eedecc4b9d90b6a5b92e3f7802
#: ../spack/lib/spack/docs/packaging_guide.rst:879
msgid "``commit``: SHA hash (or prefix) of a commit to fetch."
msgstr ""

# 2f02406324944e75911623117d5f02f9
#: ../spack/lib/spack/docs/packaging_guide.rst:880
msgid ""
"``submodules``: Also fetch submodules recursively when checking out this "
"repository."
msgstr ""

# 67871b220a9d48d5b654e418a7c1172a
#: ../spack/lib/spack/docs/packaging_guide.rst:882
msgid "Only one of ``tag``, ``branch``, or ``commit`` can be used at a time."
msgstr ""

# 3e312dacc7ef49ba9a05658b0ae6dfa0
# 8a2fcd4de9aa41fab7dd169779f5bb15
#: ../spack/lib/spack/docs/packaging_guide.rst:899
#: ../spack/lib/spack/docs/packaging_guide.rst:998
msgid "Default branch"
msgstr ""

# 6074db1554f84f14acc3d98c0b8a2111
#: ../spack/lib/spack/docs/packaging_guide.rst:885
msgid "To fetch a repository's default branch:"
msgstr ""

# dc3a448fa8d54db1afefa4a0f68b6b65
#: ../spack/lib/spack/docs/packaging_guide.rst:895
msgid ""
"This download method is untrusted, and is not recommended. Aside from HTTPS, "
"there is no way to verify that the repository has not been compromised, and "
"the commit you get when you install the package likely won't be the same "
"commit that was used when the package was first written. Additionally, the "
"default branch may change. It is best to at least specify a branch name."
msgstr ""

# e34f0de7bc5243418233670adcc5a095
#: ../spack/lib/spack/docs/packaging_guide.rst:910
msgid "Branches"
msgstr ""

# 50944fcf46b3452e9f8d8c26320711ec
#: ../spack/lib/spack/docs/packaging_guide.rst:902
msgid "To fetch a particular branch, use the ``branch`` parameter:"
msgstr ""

# a83b96eff84f43d7b0d5cb8c172e96ab
#: ../spack/lib/spack/docs/packaging_guide.rst:908
msgid ""
"This download method is untrusted, and is not recommended. Branches are "
"moving targets, so the commit you get when you install the package likely "
"won't be the same commit that was used when the package was first written."
msgstr ""

# 38586dfbcd2f4fe6bcc2eef5a0b68cfc
#: ../spack/lib/spack/docs/packaging_guide.rst:922
msgid "Tags"
msgstr ""

# e30c5a9edfb9499685df6d3a4021ec92
#: ../spack/lib/spack/docs/packaging_guide.rst:913
msgid "To fetch from a particular tag, use ``tag`` instead:"
msgstr ""

# e2fb2a083a1a409a9d58755d0b2efc6a
#: ../spack/lib/spack/docs/packaging_guide.rst:919
msgid ""
"This download method is untrusted, and is not recommended. Although tags are "
"generally more stable than branches, Git allows tags to be moved. Many "
"developers use tags to denote rolling releases, and may move the tag when a "
"bug is patched."
msgstr ""

# e56d89b938b045539ddacba558cd4866
#: ../spack/lib/spack/docs/packaging_guide.rst:946
msgid "Commits"
msgstr ""

# 9ba34b4e6bde4d8ca58a9d29bba98248
#: ../spack/lib/spack/docs/packaging_guide.rst:925
msgid "Finally, to fetch a particular commit, use ``commit``:"
msgstr ""

# 6020c684e3554590947a5389ffcc9296
#: ../spack/lib/spack/docs/packaging_guide.rst:931
msgid ""
"This doesn't have to be a full hash; you can abbreviate it as you'd expect "
"with git:"
msgstr ""

# 30c8de7501b347b8a45b16954c982cc9
#: ../spack/lib/spack/docs/packaging_guide.rst:938
msgid ""
"This download method *is trusted*.  It is the recommended way to securely "
"download from a Git repository."
msgstr ""

# b51fabd9d9834c1294cdf31629f10a6e
#: ../spack/lib/spack/docs/packaging_guide.rst:941
msgid ""
"It may be useful to provide a saner version for commits like this, e.g. you "
"might use the date as the version, as done above. Or, if you know the commit "
"at which a release was cut, you can use the release version. It's up to the "
"package author to decide what makes the most sense. Although you can use the "
"commit hash as the version number, this is not recommended, as it won't sort "
"properly."
msgstr ""

# 73db087ccff848dd83992fbbfb72f98c
#: ../spack/lib/spack/docs/packaging_guide.rst:956
#: ../spack/lib/spack/docs/spack.build_systems.rst:5
#: ../spack/lib/spack/docs/spack.cmd.common.rst:5
#: ../spack/lib/spack/docs/spack.cmd.modules.rst:5
#: ../spack/lib/spack/docs/spack.cmd.rst:13
#: ../spack/lib/spack/docs/spack.compilers.rst:5
#: ../spack/lib/spack/docs/spack.hooks.rst:5
#: ../spack/lib/spack/docs/spack.modules.rst:5
#: ../spack/lib/spack/docs/spack.operating_systems.rst:5
#: ../spack/lib/spack/docs/spack.platforms.rst:5
#: ../spack/lib/spack/docs/spack.reporters.rst:5
#: ../spack/lib/spack/docs/spack.rst:22
#: ../spack/lib/spack/docs/spack.schema.rst:5
#: ../spack/lib/spack/docs/spack.test.rst:5
#: ../spack/lib/spack/docs/spack.util.imp.rst:5
#: ../spack/lib/spack/docs/spack.util.rst:12
msgid "Submodules"
msgstr ""

# 26dc170102294ecab714263dfed4585b
#: ../spack/lib/spack/docs/packaging_guide.rst:949
msgid ""
"You can supply ``submodules=True`` to cause Spack to fetch submodules "
"recursively along with the repository at fetch time. For more information "
"about git submodules see the manpage of git: ``man git-submodule``."
msgstr ""

# 7a78af9854be4693aa22da67deeffd67
#: ../spack/lib/spack/docs/packaging_guide.rst:962
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.find_list_url:9
msgid "GitHub"
msgstr ""

# 916168ec44b9412695fb54870fabd0ba
#: ../spack/lib/spack/docs/packaging_guide.rst:964
msgid ""
"If a project is hosted on GitHub, *any* valid Git branch, tag, or hash may "
"be downloaded as a tarball.  This is accomplished simply by constructing an "
"appropriate URL.  Spack can checksum any package downloaded this way, "
"thereby producing a trusted download.  For example, the following downloads "
"a particular hash, and then applies a checksum."
msgstr ""

# 9e78159b8d394bde8f304a040cf502a2
#: ../spack/lib/spack/docs/packaging_guide.rst:980
msgid "Mercurial"
msgstr ""

# 7e186005c5744cd6be48511834ea4fcf
#: ../spack/lib/spack/docs/packaging_guide.rst:982
msgid ""
"Fetching with Mercurial works much like `Git <git-fetch>`_, but you use the "
"``hg`` parameter."
msgstr ""

# 832f36ecc47c42239af7e799c550668e
#: ../spack/lib/spack/docs/packaging_guide.rst:986
msgid "Add the ``hg`` attribute with no ``revision`` passed to ``version``:"
msgstr ""

# 705be35808c94095bfe22a772e47c519
#: ../spack/lib/spack/docs/packaging_guide.rst:996
msgid ""
"This download method is untrusted, and is not recommended. As with Git's "
"default fetching strategy, there is no way to verify the integrity of the "
"download."
msgstr ""

# 019e5c3f648a4bcb9a5cfbe6f07600ed
#: ../spack/lib/spack/docs/packaging_guide.rst:1013
msgid "Revisions"
msgstr ""

# 00194af57214435cbd225995d2cf49ed
#: ../spack/lib/spack/docs/packaging_guide.rst:1001
msgid "To fetch a particular revision, use the ``revision`` parameter:"
msgstr ""

# 526d6e4b17c8462c9adb2fd7ca17017a
#: ../spack/lib/spack/docs/packaging_guide.rst:1007
msgid ""
"Unlike ``git``, which has special parameters for different types of "
"revisions, you can use ``revision`` for branches, tags, and commits when you "
"fetch with Mercurial. Like Git, fetching specific branches or tags is an "
"untrusted download method, and is not recommended. The recommended fetch "
"strategy is to specify a particular commit hash as the revision."
msgstr ""

# 125f1b6eb3124db2930afd65deadb769
#: ../spack/lib/spack/docs/packaging_guide.rst:1019
msgid "Subversion"
msgstr ""

# 47fdefc3dd1443b8bd4a640115a67e45
#: ../spack/lib/spack/docs/packaging_guide.rst:1021
msgid "To fetch with subversion, use the ``svn`` and ``revision`` parameters."
msgstr ""

# 80c754cb4cba4c39859288975a0823e3
#: ../spack/lib/spack/docs/packaging_guide.rst:1035
msgid "Fetching the head"
msgstr ""

# dae5ff2ab52c42faaa4ee0260fa3e729
#: ../spack/lib/spack/docs/packaging_guide.rst:1024
msgid "Simply add an ``svn`` parameter to the package:"
msgstr ""

# e0dc9495c1684f94834d179d74cbd0ef
#: ../spack/lib/spack/docs/packaging_guide.rst:1034
msgid ""
"This download method is untrusted, and is not recommended for the same "
"reasons as mentioned above."
msgstr ""

# 17b1611ba8d34eed86c5dafebc5c4310
#: ../spack/lib/spack/docs/packaging_guide.rst:1050
msgid "Fetching a revision"
msgstr ""

# 6d823797088e4900a1001c2d57713858
#: ../spack/lib/spack/docs/packaging_guide.rst:1038
msgid ""
"To fetch a particular revision, add a ``revision`` argument to the version "
"directive:"
msgstr ""

# f0ccf2a6e0de4dc095cae37e40ad041b
#: ../spack/lib/spack/docs/packaging_guide.rst:1045
msgid "This download method is untrusted, and is not recommended."
msgstr ""

# 000835af31f5496ba98e17e80d2b9b73
#: ../spack/lib/spack/docs/packaging_guide.rst:1047
msgid ""
"Unfortunately, Subversion has no commit hashing scheme like Git and "
"Mercurial do, so there is no way to guarantee that the download you get is "
"the same as the download used when the package was created. Use at your own "
"risk."
msgstr ""

# d1f7ee232ad6486cbecf2064b34fc95c
#: ../spack/lib/spack/docs/packaging_guide.rst:1052
msgid ""
"Subversion branches are handled as part of the directory structure, so you "
"can check out a branch or tag by changing the URL. If you want to package "
"multiple branches, simply add a ``svn`` argument to each version directive."
msgstr ""

# 10fb206dd88140c8b83b5670ba5c0021
#: ../spack/lib/spack/docs/packaging_guide.rst:1061
msgid "Go"
msgstr ""

# 17d700d67f044c8cb5d52f08e61cc3fc
#: ../spack/lib/spack/docs/packaging_guide.rst:1063
msgid ""
"Go isn't a VCS, it is a programming language with a builtin command, `go get "
"<https://golang.org/cmd/go/#hdr-"
"Download_and_install_packages_and_dependencies>`_, that fetches packages and "
"their dependencies automatically. It can clone a Git repository, or download "
"from another source location. For example:"
msgstr ""

# ef73cd91fcc54dadadaf31c62b94f276
#: ../spack/lib/spack/docs/packaging_guide.rst:1078
msgid ""
"Go cannot be used to fetch a particular commit or branch, it always "
"downloads the head of the repository. This download method is untrusted, and "
"is not recommended. Use another fetch strategy whenever possible."
msgstr ""

# c4360f26333e448aa589cddeffab717f
#: ../spack/lib/spack/docs/packaging_guide.rst:1080
msgid "and is not recommended. Use another fetch strategy whenever possible."
msgstr ""

# 838b9057cc6048b095bb738e854408ee
#: ../spack/lib/spack/docs/packaging_guide.rst:1086
msgid ""
"Many software packages can be configured to enable optional features, which "
"often come at the expense of additional dependencies or longer build-times. "
"To be flexible enough and support a wide variety of use cases, Spack permits "
"to expose to the end-user the ability to choose which features should be "
"activated in a package at the time it is installed. The mechanism to be "
"employed is the :py:func:`spack.directives.variant` directive."
msgstr ""

# c50412c6f4ae4a3da72289359623c02a
#: ../spack/lib/spack/docs/packaging_guide.rst:1095
msgid "Boolean variants"
msgstr ""

# f5f50bf1ebdc4f73a791936f40c87b0f
#: ../spack/lib/spack/docs/packaging_guide.rst:1097
msgid ""
"In their simplest form variants are boolean options specified at the package "
"level:"
msgstr ""

# b16697d874c945678c81058b46b96318
#: ../spack/lib/spack/docs/packaging_guide.rst:1108
msgid ""
"with a default value and a description of their meaning / use in the "
"package. *Variants can be tested in any context where a spec constraint is "
"expected.* In the example above the ``shared`` variant is tied to the build "
"of shared dynamic libraries. To pass the right option at configure time we "
"can branch depending on its value:"
msgstr ""

# 9a8ee7bc8d364f10afbd4af8c36d74b2
#: ../spack/lib/spack/docs/packaging_guide.rst:1124
msgid ""
"As explained in :ref:`basic-variants` the constraint ``+shared`` means that "
"the boolean variant is set to ``True``, while ``~shared`` means it is set to "
"``False``. Another common example is the optional activation of an extra "
"dependency which requires to use the variant in the ``when`` argument of :py:"
"func:`spack.directives.depends_on`:"
msgstr ""

# 4ac0d990f71941538de69c60bf4a4093
#: ../spack/lib/spack/docs/packaging_guide.rst:1138
msgid ""
"as shown in the snippet above where ``szip`` is modeled to be an optional "
"dependency of ``hdf5``."
msgstr ""

# 91a496c4d87549d5a4c5bf6ee259e296
#: ../spack/lib/spack/docs/packaging_guide.rst:1143
msgid "Multi-valued variants"
msgstr ""

# c32c7621121043f391d0a7f1d707db70
#: ../spack/lib/spack/docs/packaging_guide.rst:1145
msgid ""
"If need be, Spack can go beyond Boolean variants and permit an arbitrary "
"number of allowed values. This might be useful when modeling options that "
"are tightly related to each other. The values in this case are passed to "
"the :py:func:`spack.directives.variant` directive as a tuple:"
msgstr ""

# 252f3ac273804e85a4400ea5fad88c15
#: ../spack/lib/spack/docs/packaging_guide.rst:1160
msgid ""
"In the example above the argument ``multi`` is set to ``False`` to indicate "
"that only one among all the variant values can be active at any time. This "
"constraint is enforced by the parser and an error is emitted if a user "
"specifies two or more values at the same time:"
msgstr ""

# 57c1956bfaea43faaf178cb3adc8f36e
#: ../spack/lib/spack/docs/packaging_guide.rst:1176
msgid ""
"Another useful note is that *Python's* ``None`` *is not allowed as a default "
"value* and therefore it should not be used to denote that no feature was "
"selected. Users should instead select another value, like ``'none'``, and "
"handle it explicitly within the package recipe if need be:"
msgstr ""

# bb646ebe2263458fa065937c7b259b59
#: ../spack/lib/spack/docs/packaging_guide.rst:1186
msgid ""
"In cases where multiple values can be selected at the same time ``multi`` "
"should be set to ``True``:"
msgstr ""

# a76bbb3710394afa9cd92e6681c3ffd2
#: ../spack/lib/spack/docs/packaging_guide.rst:1201
msgid ""
"Within a package recipe a multi-valued variant is tested using a "
"``key=value`` syntax:"
msgstr ""

# 2813df6fb686482fbabacc7ca988a140
#: ../spack/lib/spack/docs/packaging_guide.rst:1210
msgid "Complex validation logic for variant values"
msgstr ""

# a8aab3d6100f400d8588cec943f9d5a5
#: ../spack/lib/spack/docs/packaging_guide.rst:1211
msgid ""
"To cover complex use cases, the :py:func:`spack.directives.variant` "
"directive could accept as the ``values`` argument a full-fledged object "
"which has ``default`` and other arguments of the directive embedded as "
"attributes."
msgstr ""

# 4ac561990333462a9883a4094595aeb1
#: ../spack/lib/spack/docs/packaging_guide.rst:1215
msgid ""
"An example, already implemented in Spack's core, is :py:class:`spack.variant."
"DisjointSetsOfValues`. This class is used to implement a few convenience "
"functions, like :py:func:`spack.variant.any_combination_of`:"
msgstr ""

# 866d5ccc342f46918222fb1ab64038cd
#: ../spack/lib/spack/docs/packaging_guide.rst:1229
msgid ""
"that allows any combination of the specified values, and also allows the "
"user to specify ``'none'`` (as a string) to choose none of them. The objects "
"returned by these functions can be modified at will by chaining method calls "
"to change the default value, customize the error message or other similar "
"operations:"
msgstr ""

# eab1dafe3a73454f978215f678fda04d
#: ../spack/lib/spack/docs/packaging_guide.rst:1252
msgid "Resources (expanding extra tarballs)"
msgstr ""

# e63d5e1536cd44f79ae4f31e7f7795ca
#: ../spack/lib/spack/docs/packaging_guide.rst:1254
msgid ""
"Some packages (most notably compilers) provide optional features if "
"additional resources are expanded within their source tree before building. "
"In Spack it is possible to describe such a need with the ``resource`` "
"directive :"
msgstr ""

# 4e780ad8f26b428a8e7bbece644668b4
#: ../spack/lib/spack/docs/packaging_guide.rst:1267
msgid ""
"Based on the keywords present among the arguments the appropriate "
"``FetchStrategy`` will be used for the resource. The keyword ``destination`` "
"is relative to the source root of the package and should point to where the "
"resource is to be expanded."
msgstr ""

# 1f977166d2e3430ab30c8e7d602cf9bf
#: ../spack/lib/spack/docs/packaging_guide.rst:1275
msgid "Licensed software"
msgstr ""

# 46b4e9679a8c4ae9a70feb0305360153
#: ../spack/lib/spack/docs/packaging_guide.rst:1277
msgid ""
"In order to install licensed software, Spack needs to know a few more "
"details about a package. The following class attributes should be defined."
msgstr ""

# 80f345a89f1d46ad8261058f36dd9529
#: ../spack/lib/spack/docs/packaging_guide.rst:1282
msgid "``license_required``"
msgstr ""

# 33784bc55d8a48418188066393a0341c
#: ../spack/lib/spack/docs/packaging_guide.rst:1284
msgid ""
"Boolean. If set to ``True``, this software requires a license. If set to "
"``False``, all of the following attributes will be ignored. Defaults to "
"``False``."
msgstr ""

# 3aaf08555db840018c71a277c940fc2f
#: ../spack/lib/spack/docs/packaging_guide.rst:1290
msgid "``license_comment``"
msgstr ""

# d09b44a1fef44fdca2870930f006f690
#: ../spack/lib/spack/docs/packaging_guide.rst:1292
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.license_comment:1
msgid ""
"String. Contains the symbol used by the license manager to denote a comment. "
"Defaults to ``#``."
msgstr ""

# b9143933ab2441d5a23dd2c1cd5f9741
#: ../spack/lib/spack/docs/packaging_guide.rst:1297
msgid "``license_files``"
msgstr ""

# 6d31b9241a9b47d6b4181e3962c7cb07
#: ../spack/lib/spack/docs/packaging_guide.rst:1299
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.license_files:1
msgid ""
"List of strings. These are files that the software searches for when looking "
"for a license. All file paths must be relative to the installation "
"directory. More complex packages like Intel may require multiple licenses "
"for individual components. Defaults to the empty list."
msgstr ""

# 7feed870ce974f87bbdd154c5d1fd196
#: ../spack/lib/spack/docs/packaging_guide.rst:1306
msgid "``license_vars``"
msgstr ""

# e159ff91874b47b7b8c0a63b39eb656f
#: ../spack/lib/spack/docs/packaging_guide.rst:1308
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.license_vars:1
msgid ""
"List of strings. Environment variables that can be set to tell the software "
"where to look for a license if it is not in the usual location. Defaults to "
"the empty list."
msgstr ""

# 11ecf55cedf44417a57bd637d094e12a
#: ../spack/lib/spack/docs/packaging_guide.rst:1314
msgid "``license_url``"
msgstr ""

# 7279a61a06dd41acbd610fe31f4f681e
#: ../spack/lib/spack/docs/packaging_guide.rst:1316
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.license_url:1
msgid ""
"String. A URL pointing to license setup instructions for the software. "
"Defaults to the empty string."
msgstr ""

# b73229ef328f416495e8a84c34c4b0d2
#: ../spack/lib/spack/docs/packaging_guide.rst:1319
msgid "For example, let's take a look at the package for the PGI compilers."
msgstr ""

# 2e5f31c5d82847d69f6a935978bc39e4
#: ../spack/lib/spack/docs/packaging_guide.rst:1330
msgid ""
"As you can see, PGI requires a license. Its license manager, FlexNet, uses "
"the ``#`` symbol to denote a comment. It expects the license file to be "
"named ``license.dat`` and to be located directly in the installation prefix. "
"If you would like the installation file to be located elsewhere, simply set "
"``PGROUPD_LICENSE_FILE`` or ``LM_LICENSE_FILE`` after installation. For "
"further instructions on installation and licensing, see the URL provided."
msgstr ""

# ef8b0b4677794144b8cd0323a8d37c92
#: ../spack/lib/spack/docs/packaging_guide.rst:1337
msgid ""
"Let's walk through a sample PGI installation to see exactly what Spack is "
"and isn't capable of. Since PGI does not provide a download URL, it must be "
"downloaded manually. It can either be added to a mirror or located in the "
"current directory when ``spack install pgi`` is run. See :ref:`mirrors` for "
"instructions on setting up a mirror."
msgstr ""

# c3ddaf9318194accbb060e58d47fef3a
#: ../spack/lib/spack/docs/packaging_guide.rst:1343
msgid ""
"After running ``spack install pgi``, the first thing that will happen is "
"Spack will create a global license file located at ``$SPACK_ROOT/etc/spack/"
"licenses/pgi/license.dat``. It will then open up the file using the editor "
"set in ``$EDITOR``, or vi if unset. It will look like this:"
msgstr ""

# 87ae4feb6b754956a5888b88b228dc9a
#: ../spack/lib/spack/docs/packaging_guide.rst:1376
msgid ""
"You can add your license directly to this file, or tell FlexNet to use a "
"license stored on a separate license server. Here is an example that points "
"to a license server called licman1:"
msgstr ""

# 72ac525aa2214bfeb80f77d70fde93b3
#: ../spack/lib/spack/docs/packaging_guide.rst:1385
msgid ""
"If your package requires the license to install, you can reference the "
"location of this global license using ``self.global_license_file``. After "
"installation, symlinks for all of the files given in ``license_files`` will "
"be created, pointing to this global license. If you install a different "
"version or variant of the package, Spack will automatically detect and reuse "
"the already existing global license."
msgstr ""

# d132f805a2f24e749da2df68ecb66ecd
#: ../spack/lib/spack/docs/packaging_guide.rst:1392
msgid ""
"If the software you are trying to package doesn't rely on license files, "
"Spack will print a warning message, letting the user know that they need to "
"set an environment variable or pointing them to installation documentation."
msgstr ""

# #-#-#-#-#  packaging_guide.pot (Spack 0.12)  #-#-#-#-#
# 9db3968b1ee140deb8da13c5dc97b53e
# #-#-#-#-#  workflows.pot (Spack 0.12)  #-#-#-#-#
# 635138dab4f14d51b71ec5d6fb794d85
#: ../spack/lib/spack/docs/packaging_guide.rst:1401
#: ../spack/lib/spack/docs/workflows.rst:1477
msgid "Patches"
msgstr ""

# 34470b9f9ac2469fa35b962ad065bafd
#: ../spack/lib/spack/docs/packaging_guide.rst:1403
msgid ""
"Depending on the host architecture, package version, known bugs, or other "
"issues, you may need to patch your software to get it to build correctly.  "
"Like many other package systems, spack allows you to store patches alongside "
"your package files and apply them to source code after it's downloaded."
msgstr ""

# 4ce931729dfa4ba7a4ee13ca8da87308
#: ../spack/lib/spack/docs/packaging_guide.rst:1411
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives:19
msgid "``patch``"
msgstr ""

# 62d3fdc6966e4dc583a1047e235c8000
#: ../spack/lib/spack/docs/packaging_guide.rst:1413
msgid ""
"You can specify patches in your package file with the ``patch()`` "
"directive.  ``patch`` looks like this:"
msgstr ""

# 2a2529208e2041c1bcc33caacf008fea
#: ../spack/lib/spack/docs/packaging_guide.rst:1422
msgid ""
"The first argument can be either a URL or a filename.  It specifies a patch "
"file that should be applied to your source.  If the patch you supply is a "
"filename, then the patch needs to live within the spack source tree.  For "
"example, the patch above lives in a directory structure like this:"
msgstr ""

# e3efddf6be2e44ce8be60fbe0014875d
#: ../spack/lib/spack/docs/packaging_guide.rst:1435
msgid ""
"If you supply a URL instead of a filename, you need to supply a ``sha256`` "
"checksum, like this:"
msgstr ""

# 4bad515de453467abbbe35c0f58cc54c
#: ../spack/lib/spack/docs/packaging_guide.rst:1443
msgid ""
"Spack includes the hashes of patches in its versioning information, so that "
"the same package with different patches applied will have different hash "
"identifiers.  To ensure that the hashing scheme is consistent, you must use "
"a ``sha256`` checksum for the patch.  Patches will be fetched from their "
"URLs, checked, and applied to your source code.  You can use the ``spack "
"sha256`` command to generate a checksum for a patch file or URL."
msgstr ""

# cfa671d61123423c89835566570c5887
#: ../spack/lib/spack/docs/packaging_guide.rst:1451
msgid ""
"Spack can also handle compressed patches.  If you use these, Spack needs a "
"little more help.  Specifically, it needs *two* checksums: the ``sha256`` of "
"the patch and ``archive_sha256`` for the compressed archive.  "
"``archive_sha256`` helps Spack ensure that the downloaded file is not "
"corrupted or malicious, before running it through a tool like ``tar`` or "
"``zip``.  The ``sha256`` of the patch is still required so that it can be "
"included in specs.  Providing it in the package file ensures that Spack "
"won't have to download and decompress patches it won't end up using at "
"install time.  Both the archive and patch checksum are checked when patch "
"archives are downloaded."
msgstr ""

# 7008d959aad14623909b241ca62576f2
#: ../spack/lib/spack/docs/packaging_guide.rst:1468
msgid "``patch`` keyword arguments are described below."
msgstr ""

# 82391aae9ec54c9e8039be8d2d19286c
#: ../spack/lib/spack/docs/packaging_guide.rst:1472
msgid "``sha256``, ``archive_sha256``"
msgstr ""

# 6949e92035664a6d936e4de59768ac29
#: ../spack/lib/spack/docs/packaging_guide.rst:1474
msgid ""
"Hashes of downloaded patch and compressed archive, respectively.  Only "
"needed for patches fetched from URLs."
msgstr ""

# 73a7c52f790e4460804b8ce4d5685550
#: ../spack/lib/spack/docs/packaging_guide.rst:1479
msgid "``when``"
msgstr ""

# bc7a1568c82c4559b20a50d6651e31e6
#: ../spack/lib/spack/docs/packaging_guide.rst:1481
msgid ""
"If supplied, this is a spec that tells spack when to apply the patch.  If "
"the installed package spec matches this spec, the patch will be applied.  In "
"our example above, the patch is applied when mvapich is at version ``1.9`` "
"or higher."
msgstr ""

# 89227887716140a984372f8af2112de9
#: ../spack/lib/spack/docs/packaging_guide.rst:1488
msgid "``level``"
msgstr ""

# 9ebf7b91f38647038c865bbedb7aac4a
#: ../spack/lib/spack/docs/packaging_guide.rst:1490
msgid ""
"This tells spack how to run the ``patch`` command.  By default, the level is "
"1 and spack runs ``patch -p 1``.  If level is 2, spack will run ``patch -p "
"2``, and so on."
msgstr ""

# 61cc3c41dcbd44a6a12307632e0f456e
#: ../spack/lib/spack/docs/packaging_guide.rst:1494
msgid ""
"A lot of people are confused by level, so here's a primer.  If you look in "
"your patch file, you may see something like this:"
msgstr ""

# b90006d8726540bda084c1a2269c5357
#: ../spack/lib/spack/docs/packaging_guide.rst:1512
msgid ""
"Lines 1-2 show paths with synthetic ``a/`` and ``b/`` prefixes.  These are "
"placeholders for the two ``mvapich2`` source directories that ``diff`` "
"compared when it created the patch file.  This is git's default behavior "
"when creating patch files, but other programs may behave differently."
msgstr ""

# fee9c6a0175249088afc05b5ca673982
#: ../spack/lib/spack/docs/packaging_guide.rst:1518
msgid ""
"``-p1`` strips off the first level of the prefix in both paths, allowing the "
"patch to be applied from the root of an expanded mvapich2 archive.  If you "
"set level to ``2``, it would strip off ``src``, and so on."
msgstr ""

# 71e93ac5c6f84f09acfe18935dc1ea00
#: ../spack/lib/spack/docs/packaging_guide.rst:1523
msgid ""
"It's generally easier to just structure your patch file so that it applies "
"cleanly with ``-p1``, but if you're using a patch you didn't create "
"yourself, ``level`` can be handy."
msgstr ""

# 3f258efb17b243ccb03bb2313e955d16
#: ../spack/lib/spack/docs/packaging_guide.rst:1529
msgid "``working_dir``"
msgstr ""

# 6ff65092f06a4065a79a56dc06279822
#: ../spack/lib/spack/docs/packaging_guide.rst:1531
msgid ""
"This tells spack where to run the ``patch`` command.  By default, the "
"working directory is the source path of the stage (``.``). However, "
"sometimes patches are made with respect to a subdirectory and this is where "
"the working directory comes in handy. Internally, the working directory is "
"given to ``patch`` via the ``-d`` option. Let's take the example patch from "
"above and assume for some reason, it can only be downloaded in the following "
"form:"
msgstr ""

# ced0e1b21b7d4219b219d719f2e23c1e
#: ../spack/lib/spack/docs/packaging_guide.rst:1554
msgid ""
"Hence, the patch needs to applied in the ``src/mpi`` subdirectory, and the "
"``working_dir='src/mpi'`` option would exactly do that."
msgstr ""

# 3bc4601e88c0438e96ea87f33c273783
#: ../spack/lib/spack/docs/packaging_guide.rst:1559
msgid "Patch functions"
msgstr ""

# 24106b3bc1784dee8d373ae028368239
#: ../spack/lib/spack/docs/packaging_guide.rst:1561
msgid ""
"In addition to supplying patch files, you can write a custom function to "
"patch a package's source.  For example, the ``py-pyside`` package contains "
"some custom code for tweaking the way the PySide build handles ``RPATH``:"
msgstr ""

# 4591efc8512b443e818ad44b0a78b30c
#: ../spack/lib/spack/docs/packaging_guide.rst:1572
msgid ""
"A ``patch`` function, if present, will be run after patch files are applied "
"and before ``install()`` is run."
msgstr ""

# 2c513d5c7317429ab492f35f5d7641a8
#: ../spack/lib/spack/docs/packaging_guide.rst:1575
msgid ""
"You could put this logic in ``install()``, but putting it in a patch "
"function gives you some benefits.  First, spack ensures that the ``patch()`` "
"function is run once per code checkout.  That means that if you run install, "
"hit ctrl-C, and run install again, the code in the patch function is only "
"run once.  Also, you can tell Spack to run only the patching part of the "
"build using the :ref:`cmd-spack-patch` command."
msgstr ""

# ebb9f60ba4714dde812513bf3d820209
# c19065aee3594c578e27ff450aeba42d
#: ../spack/lib/spack/docs/packaging_guide.rst:1586
#: ../spack/lib/spack/docs/packaging_guide.rst:1933
msgid "Dependency patching"
msgstr ""

# bbe115d38129483d80ef9cfd4990602c
#: ../spack/lib/spack/docs/packaging_guide.rst:1588
msgid ""
"So far we've covered how the ``patch`` directive can be used by a package to "
"patch *its own* source code. Packages can *also* specify patches to be "
"applied to their dependencies, if they require special modifications.  As "
"with all packages in Spack, a patched dependency library can coexist with "
"other versions of that library.  See the `section on depends_on "
"<dependency_dependency_patching_>`_ for more details."
msgstr ""

# a9803eba93f841a5844ea1acc23e0581
#: ../spack/lib/spack/docs/packaging_guide.rst:1599
msgid "Inspecting patches"
msgstr ""

# 5ba3ac6a0be042d4a8f2cd89d1d82cb7
#: ../spack/lib/spack/docs/packaging_guide.rst:1601
msgid ""
"If you want to better understand the patches that Spack applies to your "
"packages, you can do that using ``spack spec``, ``spack find``, and other "
"query commands.  Let's look at ``m4``.  If you run ``spack spec m4``, you "
"can see the patches that would be applied to ``m4``::"
msgstr ""

# b1af70a86c214d278f9ffd4286c519de
#: ../spack/lib/spack/docs/packaging_guide.rst:1616
msgid ""
"You can also see patches that have been applied to installed packages with "
"``spack find -v``::"
msgstr ""

# 5ee884d56ef944e681cb8d30cb25d233
#: ../spack/lib/spack/docs/packaging_guide.rst:1626
msgid ""
"In both cases above, you can see that the patches' sha256 hashes are stored "
"on the spec as a variant.  As mentioned above, this means that you can have "
"multiple, differently-patched versions of a package installed at once."
msgstr ""

# 7a01ff51e2874639bdfbd3b54738f22a
#: ../spack/lib/spack/docs/packaging_guide.rst:1631
msgid ""
"You can look up a patch by its sha256 hash (or a short version of it) using "
"the ``spack resource show`` command::"
msgstr ""

# b8297787971b4719895831b63c75a30c
#: ../spack/lib/spack/docs/packaging_guide.rst:1639
msgid ""
"``spack resource show`` looks up downloadable resources from package files "
"by hash and prints out information about them.  Above, we see that the "
"``3877ab54`` patch applies to the ``m4`` package.  The output also tells us "
"where to find the patch."
msgstr ""

# 3ddc739e13804b21b40b1fa29a7fa819
#: ../spack/lib/spack/docs/packaging_guide.rst:1644
msgid ""
"Things get more interesting if you want to know about dependency patches. "
"For example, when ``dealii`` is built with ``boost@1.68.0``, it has to patch "
"boost to work correctly.  If you didn't know this, you might wonder where "
"the extra boost patches are coming from::"
msgstr ""

# cdc0897d0b9246ec871133efc4f3b0ae
#: ../spack/lib/spack/docs/packaging_guide.rst:1658
msgid ""
"Here you can see that the patch is applied to ``boost`` by ``dealii``, and "
"that it lives in ``dealii``'s directory in Spack's ``builtin`` package "
"repository."
msgstr ""

# 80c91587e9a64066993ec728ff45fb63
#: ../spack/lib/spack/docs/packaging_guide.rst:1666
msgid "Handling RPATHs"
msgstr ""

# 74b2b5c8347348ecaa4d0abfe79a8c9c
#: ../spack/lib/spack/docs/packaging_guide.rst:1668
msgid ""
"Spack installs each package in a way that ensures that all of its "
"dependencies are found when it runs.  It does this using `RPATHs <http://en."
"wikipedia.org/wiki/Rpath>`_.  An RPATH is a search path, stored in a binary "
"(an executable or library), that tells the dynamic loader where to find its "
"dependencies at runtime. You may be familiar with `LD_LIBRARY_PATH <http://"
"tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html>`_ on Linux or "
"`DYLD_LIBRARY_PATH <https://developer.apple.com/library/mac/documentation/"
"Darwin/Reference/ManPages/man1/dyld.1.html>`_ on Mac OS X.  RPATH is similar "
"to these paths, in that it tells the loader where to find libraries.  Unlike "
"them, it is embedded in the binary and not set in each user's environment."
msgstr ""

# 619c64e0379141caa211059ee624fa7a
#: ../spack/lib/spack/docs/packaging_guide.rst:1681
msgid "RPATHs in Spack are handled in one of three ways:"
msgstr ""

# 3d341155d7a14b54bb6821232db66e52
#: ../spack/lib/spack/docs/packaging_guide.rst:1683
msgid ""
"For most packages, RPATHs are handled automatically using Spack's :ref:"
"`compiler wrappers <compiler-wrappers>`.  These wrappers are set in standard "
"variables like ``CC``, ``CXX``, ``F77``, and ``FC``, so most build systems "
"(autotools and many gmake systems) pick them up and use them."
msgstr ""

# 8ddd904a89f24043b9557ee19e483945
#: ../spack/lib/spack/docs/packaging_guide.rst:1688
msgid ""
"CMake also respects Spack's compiler wrappers, but many CMake builds have "
"logic to overwrite RPATHs when binaries are installed. Spack provides the "
"``std_cmake_args`` variable, which includes parameters necessary for CMake "
"build use the right installation RPATH.  It can be used like this when "
"``cmake`` is invoked:"
msgstr ""

# 257d53c00c2040b48a3fb437d5ab5807
#: ../spack/lib/spack/docs/packaging_guide.rst:1704
msgid ""
"If you need to modify the build to add your own RPATHs, you can use the "
"``self.rpath`` property of your package, which will return a list of all the "
"RPATHs that Spack will use when it links.  You can see this how this is used "
"in the :ref:`PySide example <pyside-patch>` above."
msgstr ""

# cbe5e7a7c7a8482398b95f70f5d0a803
#: ../spack/lib/spack/docs/packaging_guide.rst:1714
msgid "Parallel builds"
msgstr ""

# 16144f53d63f4ce3a815d77d3c3a1633
#: ../spack/lib/spack/docs/packaging_guide.rst:1716
msgid ""
"By default, Spack will invoke ``make()`` with a ``-j <njobs>`` argument, so "
"that builds run in parallel.  It figures out how many jobs to run by "
"determining how many cores are on the host machine. Specifically, it uses "
"the number of CPUs reported by Python's `multiprocessing.cpu_count() <http://"
"docs.python.org/library/multiprocessing.html#multiprocessing.cpu_count>`_."
msgstr ""

# 9e53256c5ef8419888ac9bb078cb5104
#: ../spack/lib/spack/docs/packaging_guide.rst:1723
msgid ""
"If a package does not build properly in parallel, you can override this "
"setting by adding ``parallel = False`` to your package.  For example, "
"OpenSSL's build does not work in parallel, so its package looks like this:"
msgstr ""

# 29ba8f20963b4d0fb929dacf53436bd3
#: ../spack/lib/spack/docs/packaging_guide.rst:1741
msgid ""
"Similarly, you can disable parallel builds only for specific make commands, "
"as ``libdwarf`` does:"
msgstr ""

# 2aad4e703efa4aae8d46972ee233bcd6
#: ../spack/lib/spack/docs/packaging_guide.rst:1761
msgid ""
"The first make will run in parallel here, but the second will not.  If you "
"set ``parallel`` to ``False`` at the package level, then each call to "
"``make()`` will be sequential by default, but packagers can call "
"``make(parallel=True)`` to override it."
msgstr ""

# 17c4beefde064e51b6180c03879d12e4
#: ../spack/lib/spack/docs/packaging_guide.rst:1772
msgid ""
"We've covered how to build a simple package, but what if one package relies "
"on another package to build?  How do you express that in a package file?  "
"And how do you refer to the other package in the build script for your own "
"package?"
msgstr ""

# d20c20490d3f48fb945825eba9254cee
#: ../spack/lib/spack/docs/packaging_guide.rst:1777
msgid ""
"Spack makes this relatively easy.  Let's take a look at the ``libdwarf`` "
"package to see how it's done:"
msgstr ""

# 95b5bddff58e48f99ff334c2899595ba
#: ../spack/lib/spack/docs/packaging_guide.rst:1799
msgid "``depends_on()``"
msgstr ""

# 7e04e685d15548a6a2b45f8205fc41ba
#: ../spack/lib/spack/docs/packaging_guide.rst:1801
msgid ""
"The highlighted ``depends_on('libelf')`` call tells Spack that it needs to "
"build and install the ``libelf`` package before it builds ``libdwarf``.  "
"This means that in your ``install()`` method, you are guaranteed that "
"``libelf`` has been built and installed successfully, so you can rely on it "
"for your libdwarf build."
msgstr ""

# f5643aafa75e434d81b736134ec159a8
#: ../spack/lib/spack/docs/packaging_guide.rst:1809
msgid "Dependency specs"
msgstr ""

# 7edbc122c3ba4e7390bcedf89884470e
#: ../spack/lib/spack/docs/packaging_guide.rst:1811
msgid ""
"``depends_on`` doesn't just take the name of another package. It can take a "
"full spec as well. This means that you can restrict the versions or other "
"configuration options of ``libelf`` that ``libdwarf`` will build with. For "
"example, suppose that in the ``libdwarf`` package you write:"
msgstr ""

# fb11dff73d5b4e9a95e055b7d51787af
#: ../spack/lib/spack/docs/packaging_guide.rst:1820
msgid ""
"Now ``libdwarf`` will require ``libelf`` at *exactly* version ``0.8``. You "
"can also specify a requirement for a particular variant or for specific "
"compiler flags:"
msgstr ""

# 3bec0892546c41079cd05bcfb53f867f
#: ../spack/lib/spack/docs/packaging_guide.rst:1830
msgid ""
"Both users *and* package authors can use the same spec syntax to refer to "
"different package configurations. Users use the spec syntax on the command "
"line to find installed packages or to install packages with particular "
"constraints, and package authors can use specs to describe relationships "
"between packages."
msgstr ""

# 178208925adb45d68d6de96ad9a8bca4
#: ../spack/lib/spack/docs/packaging_guide.rst:1838
msgid "Version ranges"
msgstr ""

# e086b41aef7844b6afda67217db11d2d
#: ../spack/lib/spack/docs/packaging_guide.rst:1840
msgid ""
"Although some packages require a specific version for their dependencies, "
"most can be built with a range of version. For example, if you are writing a "
"package for a legacy Python module that only works with Python 2.4 through "
"2.6, this would look like:"
msgstr ""

# 92e05dd0c6204c14b93e33f3593092ca
#: ../spack/lib/spack/docs/packaging_guide.rst:1849
msgid ""
"Version ranges in Spack are *inclusive*, so ``2.4:2.6`` means any version "
"greater than or equal to ``2.4`` and up to and including ``2.6``. If you "
"want to specify that a package works with any version of Python 3, this "
"would look like:"
msgstr ""

# 5a3206afaee64807984cb8b36a9dc180
#: ../spack/lib/spack/docs/packaging_guide.rst:1858
msgid ""
"Here we leave out the upper bound. If you want to say that a package "
"requires Python 2, you can similarly leave out the lower bound:"
msgstr ""

# ff4ea9779b9a41e684ed64a7f1da5933
#: ../spack/lib/spack/docs/packaging_guide.rst:1865
msgid ""
"Notice that we didn't use ``@:3``. Version ranges are *inclusive*, so "
"``@:3`` means \"up to and including 3\"."
msgstr ""

# d62c76c3251f4a18ad7cdb6a73dccfa6
#: ../spack/lib/spack/docs/packaging_guide.rst:1868
msgid ""
"What if a package can only be built with Python 2.6? You might be inclined "
"to use:"
msgstr ""

# 08d8591ff4f343f0964596d1c6bd02f7
#: ../spack/lib/spack/docs/packaging_guide.rst:1875
msgid ""
"However, this would be wrong. Spack assumes that all version constraints are "
"absolute, so it would try to install Python at exactly ``2.6``. The correct "
"way to specify this would be:"
msgstr ""

# 1ac6e1e687da434e9ec3eb94b18e3b09
#: ../spack/lib/spack/docs/packaging_guide.rst:1883
msgid ""
"A spec can contain multiple version ranges separated by commas. For example, "
"if you need Boost 1.59.0 or newer, but there are known issues with 1.64.0, "
"1.65.0, and 1.66.0, you can say:"
msgstr ""

# 53bc678d01234132952c52982b1a4081
#: ../spack/lib/spack/docs/packaging_guide.rst:1894
msgid "Dependency types"
msgstr ""

# 31473364321a45649077c3aa7b96c1aa
#: ../spack/lib/spack/docs/packaging_guide.rst:1896
msgid ""
"Not all dependencies are created equal, and Spack allows you to specify "
"exactly what kind of a dependency you need. For example:"
msgstr ""

# d27a597548254c67abfd52291871c180
#: ../spack/lib/spack/docs/packaging_guide.rst:1905
msgid "The following dependency types are available:"
msgstr ""

# aaf921ed152d425199101ea35938e271
#: ../spack/lib/spack/docs/packaging_guide.rst:1907
msgid ""
"**\"build\"**: made available during the project's build. The package will "
"be added to ``PATH``, the compiler include paths, and ``PYTHONPATH``. Other "
"projects which depend on this one will not have these modified (building "
"project X doesn't need project Y's build dependencies)."
msgstr ""

# 42d7e5aac97b4ba385b69852f4802e79
#: ../spack/lib/spack/docs/packaging_guide.rst:1911
msgid ""
"**\"link\"**: the project is linked to by the project. The package will be "
"added to the current package's ``rpath``."
msgstr ""

# cbf3e9b3822b46b68084e94d306f87b3
#: ../spack/lib/spack/docs/packaging_guide.rst:1913
msgid ""
"**\"run\"**: the project is used by the project at runtime. The package will "
"be added to ``PATH`` and ``PYTHONPATH``."
msgstr ""

# b7eb08fa12a341f48db421839c4d3ec1
#: ../spack/lib/spack/docs/packaging_guide.rst:1916
msgid ""
"One of the advantages of the ``build`` dependency type is that although the "
"dependency needs to be installed in order for the package to be built, it "
"can be uninstalled without concern afterwards. ``link`` and ``run`` disallow "
"this because uninstalling the dependency would break the package."
msgstr ""

# 88605f05898f4b728b4ac80e9dc18f28
#: ../spack/lib/spack/docs/packaging_guide.rst:1921
msgid ""
"If the dependency type is not specified, Spack uses a default of ``('build', "
"'link')``. This is the common case for compiler languages. Non-compiled "
"packages like Python modules commonly use ``('build', 'run')``. This means "
"that the compiler wrappers don't need to inject the dependency's ``prefix/"
"lib`` directory, but the package needs to be in ``PATH`` and ``PYTHONPATH`` "
"during the build process and later when a user wants to run the package."
msgstr ""

# 3879e64de5a24c46b4186c9ff0bef1f8
#: ../spack/lib/spack/docs/packaging_guide.rst:1935
msgid ""
"Some packages maintain special patches on their dependencies, either to add "
"new features or to fix bugs.  This typically makes a package harder to "
"maintain, and we encourage developers to upstream (contribute back) their "
"changes rather than maintaining patches.  However, in some cases it's not "
"possible to upstream. Maybe the dependency's developers don't accept "
"changes, or maybe they just haven't had time to integrate them."
msgstr ""

# 0555fc600f404f01b94f0ee104d658c4
#: ../spack/lib/spack/docs/packaging_guide.rst:1942
msgid ""
"For times like these, Spack's ``depends_on`` directive can optionally take a "
"patch or list of patches:"
msgstr ""

# 9ab96a5ba59d46b1b142116048ecad73
#: ../spack/lib/spack/docs/packaging_guide.rst:1952
msgid ""
"Here, the ``special-tool`` package requires a special feature in "
"``binutils``, so it provides an extra ``patches=<filename>`` keyword "
"argument.  This is similar to the `patch directive <patching_>`_, with one "
"small difference.  Here, ``special-tool`` is responsible for the patch, so "
"it should live in ``special-tool``'s directory in the package repository, "
"not the ``binutils`` directory."
msgstr ""

# a5d725c33500447aa4d11d2fddce4d98
#: ../spack/lib/spack/docs/packaging_guide.rst:1959
msgid ""
"If you need something more sophisticated than this, you can simply nest a "
"``patch()`` directive inside of ``depends_on``:"
msgstr ""

# ae0656169c0047689ef939512723112f
#: ../spack/lib/spack/docs/packaging_guide.rst:1974
msgid ""
"Note that there are two optional ``when`` conditions here -- one on the "
"``patch`` directive and the other on ``depends_on``.  The condition in the "
"``patch`` directive applies to ``binutils`` (the package being patched), "
"while the condition in ``depends_on`` applies to ``special-tool``.  See "
"`patch directive <patching_>`_ for details on all the arguments the "
"``patch`` directive can take."
msgstr ""

# 6ce9292c5fe1443c9be6c437e9342642
#: ../spack/lib/spack/docs/packaging_guide.rst:1981
msgid ""
"Finally, if you need *multiple* patches on a dependency, you can provide a "
"list for ``patches``, e.g.:"
msgstr ""

# 5e8248a8a65e4a7b87520d30a7760f7e
#: ../spack/lib/spack/docs/packaging_guide.rst:1999
msgid ""
"As with ``patch`` directives, patches are applied in the order they appear "
"in the package file (or in this case, in the list)."
msgstr ""

# 66347c3df9ee47b4b1f5d4cc2aff7c81
#: ../spack/lib/spack/docs/packaging_guide.rst:2004
msgid ""
"You may wonder whether dependency patching will interfere with other "
"packages that depend on ``binutils``.  It won't."
msgstr ""

# eb2d0f0e0ff44980bc7088499115fd84
#: ../spack/lib/spack/docs/packaging_guide.rst:2007
msgid ""
"As described in patching_, Patching a package adds the ``sha256`` of the "
"patch to the package's spec, which means it will have a *different* unique "
"hash than other versions without the patch.  The patched version coexists "
"with unpatched versions, and Spack's support for handling_rpaths_ guarantees "
"that each installation finds the right version. If two packages depend on "
"``binutils`` patched *the same* way, they can both use a single installation "
"of ``binutils``."
msgstr ""

# 381759f084484e8cae9e6088dc5d110a
#: ../spack/lib/spack/docs/packaging_guide.rst:2019
msgid "``setup_dependent_environment()``"
msgstr ""

# 6511df16df704615a507c86faede5f1b
#: ../spack/lib/spack/docs/packaging_guide.rst:2021
msgid ""
"Spack provides a mechanism for dependencies to provide variables that can be "
"used in their dependents' build.  Any package can declare a "
"``setup_dependent_environment()`` function, and this function will be called "
"before the ``install()`` method of any dependent packages. This allows "
"dependencies to set up environment variables and other properties to be used "
"by dependents."
msgstr ""

# 29b0a37928814165bf61818c11b5479d
#: ../spack/lib/spack/docs/packaging_guide.rst:2028
msgid "The function declaration should look like this:"
msgstr ""

# 23545430023f43ce8de695fd66d719ae
#: ../spack/lib/spack/docs/packaging_guide.rst:2034
msgid ""
"Here, the Qt package sets the ``QTDIR`` environment variable so that "
"packages that depend on a particular Qt installation will find it."
msgstr ""

# 4f907685db424096b1029dc9fad9888e
#: ../spack/lib/spack/docs/packaging_guide.rst:2037
msgid "The arguments to this function are:"
msgstr ""

# eb64c13262294142bf90da3bbf6a944c
#: ../spack/lib/spack/docs/packaging_guide.rst:2039
msgid ""
"**spack_env**: List of environment modifications to be applied when the "
"dependent package is built within Spack."
msgstr ""

# 88d87908e93241e1a59428740ed38db9
#: ../spack/lib/spack/docs/packaging_guide.rst:2041
msgid ""
"**run_env**: List of environment modifications to be applied when the "
"dependent package is run outside of Spack. These are added to the resulting "
"module file."
msgstr ""

# 7959aa2e76884ac6b2272edd1c4c92fa
#: ../spack/lib/spack/docs/packaging_guide.rst:2044
msgid ""
"**dependent_spec**: The spec of the dependent package about to be built. "
"This allows the extendee (self) to query the dependent's state. Note that "
"*this* package's spec is available as ``self.spec``."
msgstr ""

# 322264435acb46a28398d39f627fb72e
#: ../spack/lib/spack/docs/packaging_guide.rst:2048
msgid "A good example of using these is in the Python package:"
msgstr ""

# 47e6536f35324e3d94a4b50add141e44
#: ../spack/lib/spack/docs/packaging_guide.rst:2054
msgid ""
"The first thing that happens here is that the ``python`` command is inserted "
"into module scope of the dependent.  This allows most python packages to "
"have a very simple install method, like this:"
msgstr ""

# e98780b7c493439a9a627590b5e69e9c
#: ../spack/lib/spack/docs/packaging_guide.rst:2063
msgid ""
"Python's ``setup_dependent_environment`` method also sets up some other "
"variables, creates a directory, and sets up the ``PYTHONPATH`` so that "
"dependent packages can find their dependencies at build time."
msgstr ""

# 052bf8bc210f473dacadedf4e376c989
#: ../spack/lib/spack/docs/packaging_guide.rst:2071
msgid "Conflicts"
msgstr ""

# 06a57d04603b47ee901f414e08d7ec4d
#: ../spack/lib/spack/docs/packaging_guide.rst:2073
msgid ""
"Sometimes packages have known bugs, or limitations, that would prevent them "
"to build e.g. against other dependencies or with certain compilers. Spack "
"makes it possible to express such constraints with the ``conflicts`` "
"directive."
msgstr ""

# a7a2651c22064654badfff6a9a68de94
#: ../spack/lib/spack/docs/packaging_guide.rst:2077
msgid "Adding the following to a package:"
msgstr ""

# 90569ae2346c4c2580a823a7563ae723
#: ../spack/lib/spack/docs/packaging_guide.rst:2083
msgid ""
"we express the fact that the current package *cannot be built* with the "
"Intel compiler when we are trying to install version \"1.2\". The ``when`` "
"argument can be omitted, in which case the conflict will always be active. "
"Conflicts are always evaluated after the concretization step has been "
"performed, and if any match is found a detailed error message is shown to "
"the user."
msgstr ""

# e637b306cd7f42d99a279278bafeb572
#: ../spack/lib/spack/docs/packaging_guide.rst:2095
msgid ""
"Spack's support for package extensions is documented extensively in :ref:"
"`extensions`.  This section documents how to make your own extendable "
"packages and extensions."
msgstr ""

# 4f523a91a3984e35b63d39301a23e54c
#: ../spack/lib/spack/docs/packaging_guide.rst:2099
msgid ""
"To support extensions, a package needs to set its ``extendable`` property to "
"``True``, e.g.:"
msgstr ""

# 85ff9871771d4da1961160cdf1b177fc
#: ../spack/lib/spack/docs/packaging_guide.rst:2109
msgid ""
"To make a package into an extension, simply add simply add an ``extends`` "
"call in the package definition, and pass it the name of an extendable "
"package:"
msgstr ""

# 9d075e730c7d4d6cb6684d6af2bd2ec0
#: ../spack/lib/spack/docs/packaging_guide.rst:2120
msgid ""
"Now, the ``py-numpy`` package can be used as an argument to ``spack "
"activate``.  When it is activated, all the files in its prefix will be "
"symbolically linked into the prefix of the python package."
msgstr ""

# 0aa6a636ede4445ba563514318ca9387
#: ../spack/lib/spack/docs/packaging_guide.rst:2124
msgid ""
"Some packages produce a Python extension, but are only compatible with "
"Python 3, or with Python 2.  In those cases, a ``depends_on()`` declaration "
"should be made in addition to the ``extends()`` declaration:"
msgstr ""

# 98e27aaec64d4d80b748059da711d578
#: ../spack/lib/spack/docs/packaging_guide.rst:2135
msgid ""
"Many packages produce Python extensions for *some* variants, but not others: "
"they should extend ``python`` only if the appropriate variant(s) are "
"selected.  This may be accomplished with conditional ``extends()`` "
"declarations:"
msgstr ""

# b66f3c0894964b95ac5a4f0d30f059a8
#: ../spack/lib/spack/docs/packaging_guide.rst:2148
msgid ""
"Sometimes, certain files in one package will conflict with those in another, "
"which means they cannot both be activated (symlinked) at the same time.  In "
"this case, you can tell Spack to ignore those files when it does the "
"activation:"
msgstr ""

# ff62210c204e493eb4f51affe68b8ce9
#: ../spack/lib/spack/docs/packaging_guide.rst:2162
msgid ""
"The code above will prevent everything in the ``$prefix/bin/`` directory "
"from being linked in at activation time."
msgstr ""

# 2996aced374b4e4d8b5136854a08afa3
#: ../spack/lib/spack/docs/packaging_guide.rst:2167
msgid ""
"You can call *either* ``depends_on`` or ``extends`` on any one package, but "
"not both.  For example you cannot both ``depends_on('python')`` and "
"``extends(python)`` in the same package.  ``extends`` implies ``depends_on``."
msgstr ""

# 4c97ac0ceeac494ba4960160b38fb210
#: ../spack/lib/spack/docs/packaging_guide.rst:2174
msgid "Views"
msgstr ""

# c54767e7d1144b9ea1116bca0173949e
#: ../spack/lib/spack/docs/packaging_guide.rst:2176
msgid ""
"As covered in :ref:`filesystem-views`, the ``spack view`` command can be "
"used to symlink a number of packages into a merged prefix. The methods of "
"``PackageViewMixin`` can be overridden to customize how packages are added "
"to views. Generally this can be used to create copies of specific files "
"rather than symlinking them when symlinking does not work. For example, "
"``Python`` overrides ``add_files_to_view`` in order to create a copy of the "
"``python`` binary since the real path of the Python executable is used to "
"detect extensions; as a consequence python extension packages (those "
"inheriting from ``PythonPackage``) likewise override ``add_files_to_view`` "
"in order to rewrite shebang lines which point to the Python interpreter."
msgstr ""

# a496a5c5edb043669ba9a24b62d9ff30
#: ../spack/lib/spack/docs/packaging_guide.rst:2189
msgid "Activation & deactivation"
msgstr ""

# 1fa2931e433a4757a7a622646e5981ff
#: ../spack/lib/spack/docs/packaging_guide.rst:2191
msgid ""
"Adding an extension to a view is referred to as an activation. If the view "
"is maintained in the Spack installation prefix of the extendee this is "
"called a global activation. Activations may involve updating some "
"centralized state that is maintained by the extendee package, so there can "
"be additional work for adding extensions compared with non-extension "
"packages."
msgstr ""

# fd487a43b0ec4d7cbee0f187daf3a139
#: ../spack/lib/spack/docs/packaging_guide.rst:2197
msgid ""
"Spack's ``Package`` class has default ``activate`` and ``deactivate`` "
"implementations that handle symbolically linking extensions' prefixes into a "
"specified view. Extendable packages can override these methods to add custom "
"activate/deactivate logic of their own.  For example, the ``activate`` and "
"``deactivate`` methods in the Python class handle symbolic linking of "
"extensions, but they also handle details surrounding Python's ``.pth`` "
"files, and other aspects of Python packaging."
msgstr ""

# 497fb841f10d4c18bf03a4c7c3ca729e
#: ../spack/lib/spack/docs/packaging_guide.rst:2205
msgid ""
"Spack's extensions mechanism is designed to be extensible, so that other "
"packages (like Ruby, R, Perl, etc.)  can provide their own custom extension "
"management logic, as they may not handle modules the same way that Python "
"does."
msgstr ""

# 95dcc488561a44478dbe3a4d4546cc6d
#: ../spack/lib/spack/docs/packaging_guide.rst:2210
msgid "Let's look at Python's activate function:"
msgstr ""

# c0a64325901345fb80ef988c074e714f
#: ../spack/lib/spack/docs/packaging_guide.rst:2216
msgid ""
"This function is called on the *extendee* (Python).  It first calls "
"``activate`` in the superclass, which handles symlinking the extension "
"package's prefix into the specified view.  It then does some special "
"handling of the ``easy-install.pth`` file, part of Python's setuptools."
msgstr ""

# 3a9eeb4cf7914ea79481fc059cffcbc4
#: ../spack/lib/spack/docs/packaging_guide.rst:2222
msgid "Deactivate behaves similarly to activate, but it unlinks files:"
msgstr ""

# 81052fd0bdc742bb99f2f450358cb1e3
#: ../spack/lib/spack/docs/packaging_guide.rst:2228
msgid ""
"Both of these methods call some custom functions in the Python package.  See "
"the source for Spack's Python package for details."
msgstr ""

# d945107696c34a3e921e87e8ef33f254
#: ../spack/lib/spack/docs/packaging_guide.rst:2233
msgid "Activation arguments"
msgstr ""

# 391d31a467fa4212a4116ef8546d013f
#: ../spack/lib/spack/docs/packaging_guide.rst:2235
msgid ""
"You may have noticed that the ``activate`` function defined above takes "
"keyword arguments.  These are the keyword arguments from ``extends()``, and "
"they are passed to both activate and deactivate."
msgstr ""

# b0d93cc822684482b554c2a1d889dd7a
#: ../spack/lib/spack/docs/packaging_guide.rst:2239
msgid ""
"This capability allows an extension to customize its own activation by "
"passing arguments to the extendee.  Extendees can likewise implement custom "
"``activate()`` and ``deactivate()`` functions to suit their needs."
msgstr ""

# 97dea24b06634662a42b3b218f597ec1
#: ../spack/lib/spack/docs/packaging_guide.rst:2244
msgid ""
"The only keyword argument supported by default is the ``ignore`` argument, "
"which can take a regex, list of regexes, or a predicate to determine which "
"files *not* to symlink during activation."
msgstr ""

# 7639a92509ae443a997d59e776a52e16
#: ../spack/lib/spack/docs/packaging_guide.rst:2254
msgid ""
"In some cases, more than one package can satisfy another package's "
"dependency.  One way this can happen is if a package depends on a particular "
"*interface*, but there are multiple *implementations* of the interface, and "
"the package could be built with any of them.  A *very* common interface in "
"HPC is the `Message Passing Interface (MPI) <http://www.mcs.anl.gov/research/"
"projects/mpi/>`_, which is used in many large-scale parallel applications."
msgstr ""

# 1c253fac325f4e2098755dd98f7d0606
#: ../spack/lib/spack/docs/packaging_guide.rst:2262
msgid ""
"MPI has several different implementations (e.g., `MPICH <http://www.mpich."
"org>`_, `OpenMPI <http://www.open-mpi.org>`_, and `MVAPICH <http://mvapich."
"cse.ohio-state.edu>`_) and scientific applications can be built with any one "
"of them.  Complicating matters, MPI does not have a standardized ABI, so a "
"package built with one implementation cannot simply be relinked with another "
"implementation. Many package managers handle interfaces like this by "
"requiring many similar package files, e.g., ``foo``, ``foo-mvapich``, ``foo-"
"mpich``, but Spack avoids this explosion of package files by providing "
"support for *virtual dependencies*."
msgstr ""

# 422ec82ca35b4b9f8a2c6df0e88689de
#: ../spack/lib/spack/docs/packaging_guide.rst:2275
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives:17
msgid "``provides``"
msgstr ""

# 54a188a5aa0847289584600cb1e3b753
#: ../spack/lib/spack/docs/packaging_guide.rst:2277
msgid ""
"In Spack, ``mpi`` is handled as a *virtual package*.  A package like "
"``mpileaks`` can depend on it just like any other package, by supplying a "
"``depends_on`` call in the package definition.  For example:"
msgstr ""

# cc339e4e17e74cfe84492f019edd89e3
#: ../spack/lib/spack/docs/packaging_guide.rst:2295
msgid ""
"Here, ``callpath`` and ``adept-utils`` are concrete packages, but there is "
"no actual package file for ``mpi``, so we say it is a *virtual* package.  "
"The syntax of ``depends_on``, is the same for both.  If we look inside the "
"package file of an MPI implementation, say MPICH, we'll see something like "
"this:"
msgstr ""

# fb26b7921add470eb95eb81ccbd24d22
#: ../spack/lib/spack/docs/packaging_guide.rst:2307
msgid ""
"The ``provides(\"mpi\")`` call tells Spack that the ``mpich`` package can be "
"used to satisfy the dependency of any package that ``depends_on('mpi')``."
msgstr ""

# 4804893f013e457993dd7244fbeee3fd
#: ../spack/lib/spack/docs/packaging_guide.rst:2313
msgid "Versioned Interfaces"
msgstr ""

# b0bb6cf13d9c4e6c8b574b5eef5d28c8
#: ../spack/lib/spack/docs/packaging_guide.rst:2315
msgid ""
"Just as you can pass a spec to ``depends_on``, so can you pass a spec to "
"``provides`` to add constraints.  This allows Spack to support the notion of "
"*versioned interfaces*.  The MPI standard has gone through many revisions, "
"each with new functions added, and each revision of the standard has a "
"version number.  Some packages may require a recent implementation that "
"supports MPI-3 functions, but some MPI versions may only provide up to "
"MPI-2.  Others may need MPI 2.1 or higher.  You can indicate this by adding "
"a version constraint to the spec passed to ``provides``:"
msgstr ""

# 7a51604297c648b78560cb56f6cc98c4
#: ../spack/lib/spack/docs/packaging_guide.rst:2329
msgid ""
"Suppose that the above ``provides`` call is in the ``mpich2`` package. This "
"says that ``mpich2`` provides MPI support *up to* version 2, but if a "
"package ``depends_on(\"mpi@3\")``, then Spack will *not* build that package "
"with ``mpich2``."
msgstr ""

# 7234e7a92eb3415da430786ebec35c9d
#: ../spack/lib/spack/docs/packaging_guide.rst:2336
msgid "``provides when``"
msgstr ""

# dda76d29c1954fb7a0faa22899e617b4
#: ../spack/lib/spack/docs/packaging_guide.rst:2338
msgid ""
"The same package may provide different versions of an interface depending on "
"*its* version.  Above, we simplified the ``provides`` call in ``mpich`` to "
"make the explanation easier.  In reality, this is how ``mpich`` calls "
"``provides``:"
msgstr ""

# b6fc14d9aa1f45e48fd6481073be90a0
#: ../spack/lib/spack/docs/packaging_guide.rst:2348
msgid ""
"The ``when`` argument to ``provides`` allows you to specify optional "
"constraints on the *providing* package, or the *provider*.  The provider "
"only provides the declared virtual spec when *it* matches the constraints in "
"the when clause.  Here, when ``mpich`` is at version 3 or higher, it "
"provides MPI up to version 3.  When ``mpich`` is at version 1 or higher, it "
"provides the MPI virtual package at version 1."
msgstr ""

# 6618a69e96e14381acff843aaa40a15d
#: ../spack/lib/spack/docs/packaging_guide.rst:2356
msgid ""
"The ``when`` qualifier ensures that Spack selects a suitably high version of "
"``mpich`` to satisfy some other package that ``depends_on`` a particular "
"version of MPI.  It will also prevent a user from building with too low a "
"version of ``mpich``.  For example, suppose the package ``foo`` declares "
"this:"
msgstr ""

# ef84faec2ff04e2a8253f68bc26f7ffc
#: ../spack/lib/spack/docs/packaging_guide.rst:2368
msgid "Suppose a user invokes ``spack install`` like this:"
msgstr ""

# 38d721d19a4848f2b1d951c1a2b9e137
#: ../spack/lib/spack/docs/packaging_guide.rst:2374
msgid ""
"Spack will fail with a constraint violation, because the version of MPICH "
"requested is too low for the ``mpi`` requirement in ``foo``."
msgstr ""

# 21ada58dcb7449eabee729a9484bedfd
#: ../spack/lib/spack/docs/packaging_guide.rst:2381
msgid "Abstract & concrete specs"
msgstr ""

# 9faf6641a2b24bc7a0d5e64e583a95d3
#: ../spack/lib/spack/docs/packaging_guide.rst:2383
msgid ""
"Now that we've seen how spec constraints can be specified :ref:`on the "
"command line <sec-specs>` and within package definitions, we can talk about "
"how Spack puts all of this information together.  When you run this:"
msgstr ""

# eddf3d6bf8d444e2b269937ed2040349
#: ../spack/lib/spack/docs/packaging_guide.rst:2392
msgid ""
"Spack parses the command line and builds a spec from the description. The "
"spec says that ``mpileaks`` should be built with the ``callpath`` library at "
"1.0 and with the debug option enabled, and with ``libelf`` version 0.8.11.  "
"Spack will also look at the ``depends_on`` calls in all of these packages, "
"and it will build a spec from that.  The specs from the command line and the "
"specs built from package descriptions are then combined, and the constraints "
"are checked against each other to make sure they're satisfiable."
msgstr ""

# 35602927a2194abfbca87b752727ddec
#: ../spack/lib/spack/docs/packaging_guide.rst:2401
msgid ""
"What we have after this is done is called an *abstract spec*.  An abstract "
"spec is partially specified.  In other words, it could describe more than "
"one build of a package.  Spack does this to make things easier on the user: "
"they should only have to specify as much of the package spec as they care "
"about.  Here's an example partial spec DAG, based on the constraints above:"
msgstr ""

# 716e606eb2bd451f8627eaf4a37d9c03
#: ../spack/lib/spack/docs/packaging_guide.rst:2427
msgid ""
"This diagram shows a spec DAG output as a tree, where successive levels of "
"indentation represent a depends-on relationship.  In the above DAG, we can "
"see some packages annotated with their constraints, and some packages with "
"no annotations at all.  When there are no annotations, it means the user "
"doesn't care what configuration of that package is built, just so long as it "
"works."
msgstr ""

# 59055a87aa3e4c498a8ef57d74bb0729
#: ../spack/lib/spack/docs/packaging_guide.rst:2436
msgid "Concretization"
msgstr ""

# a2705f09ca424e46b89d7d4332701960
#: ../spack/lib/spack/docs/packaging_guide.rst:2438
msgid ""
"An abstract spec is useful for the user, but you can't install an abstract "
"spec.  Spack has to take the abstract spec and \"fill in\" the remaining "
"unspecified parts in order to install.  This process is called "
"**concretization**.  Concretization happens in between the time the user "
"runs ``spack install`` and the time the ``install()`` method is called.  The "
"concretized version of the spec above might look like this:"
msgstr ""

# f41c48e21bad46a18dc8f339db5a3fe2
#: ../spack/lib/spack/docs/packaging_guide.rst:2465
msgid ""
"Here, all versions, compilers, and platforms are filled in, and there is a "
"single version (no version ranges) for each package.  All decisions about "
"configuration have been made, and only after this point will Spack call the "
"``install()`` method for your package."
msgstr ""

# c71722798b364e88a55337340c7b8478
#: ../spack/lib/spack/docs/packaging_guide.rst:2470
msgid ""
"Concretization in Spack is based on certain selection policies that tell "
"Spack how to select, e.g., a version, when one is not specified explicitly.  "
"Concretization policies are discussed in more detail in :ref:"
"`configuration`.  Sites using Spack can customize them to match the "
"preferences of their own users."
msgstr ""

# e4cc1c8cd62e4e07958c99c3433807fa
#: ../spack/lib/spack/docs/packaging_guide.rst:2480
msgid "``spack spec``"
msgstr ""

# 785404615b0047b6b72bd4ba3cf75812
#: ../spack/lib/spack/docs/packaging_guide.rst:2482
msgid ""
"For an arbitrary spec, you can see the result of concretization by running "
"``spack spec``.  For example:"
msgstr ""

# e4187137e2fe46f18e925f06e2b882a4
#: ../spack/lib/spack/docs/packaging_guide.rst:2496
msgid ""
"This is useful when you want to know exactly what Spack will do when you ask "
"for a particular spec."
msgstr ""

# 6932cb1a8d784085b2ffea8f1df051a8
#: ../spack/lib/spack/docs/packaging_guide.rst:2503
msgid "``Concretization Policies``"
msgstr ""

# 461b24345fc042c28c226db9f79430db
#: ../spack/lib/spack/docs/packaging_guide.rst:2505
msgid ""
"A user may have certain preferences for how packages should be concretized "
"on their system.  For example, one user may prefer packages built with "
"OpenMPI and the Intel compiler.  Another user may prefer packages be built "
"with MVAPICH and GCC."
msgstr ""

# 39777751795d46e1883335446060c820
#: ../spack/lib/spack/docs/packaging_guide.rst:2510
msgid "See the :ref:`concretization-preferences` section for more details."
msgstr ""

# 69e96b9019874488ad44fbbed2016c49
#: ../spack/lib/spack/docs/packaging_guide.rst:2516
msgid "Conflicting Specs"
msgstr ""

# dee83ae07d334115892ed82586b5c98c
#: ../spack/lib/spack/docs/packaging_guide.rst:2518
msgid ""
"Suppose a user needs to install package C, which depends on packages A and "
"B.  Package A builds a library with a Python2 extension, and package B "
"builds a library with a Python3 extension.  Packages A and B cannot be "
"loaded together in the same Python runtime:"
msgstr ""

# a74ce87f86d34226bfbd28f4b187436c
#: ../spack/lib/spack/docs/packaging_guide.rst:2539
msgid ""
"Package C needs to use the libraries from packages A and B, but does not "
"need either of the Python extensions.  In this case, package C should simply "
"depend on the ``~python`` variant of A and B:"
msgstr ""

# b7bcb4798ea84bb1ab0de02ebd19da08
#: ../spack/lib/spack/docs/packaging_guide.rst:2549
msgid ""
"This may require that A or B be built twice, if the user wishes to use the "
"Python extensions provided by them: once for ``+python`` and once for "
"``~python``.  Other than using a little extra disk space, that solution has "
"no serious problems."
msgstr ""

# 135239fbbb0a47ad8d355540c3ec4266
#: ../spack/lib/spack/docs/packaging_guide.rst:2558
msgid "Implementing the installation procedure"
msgstr ""

# ba6fddfa33cb40ea80b032eefd9e702f
#: ../spack/lib/spack/docs/packaging_guide.rst:2560
msgid ""
"The last element of a package is its **installation procedure**.  This is "
"where the real work of installation happens, and it's the main part of the "
"package you'll need to customize for each piece of software."
msgstr ""

# a54a6ce349ed4fee8414b373ff89e2af
#: ../spack/lib/spack/docs/packaging_guide.rst:2564
msgid ""
"Defining an installation procedure means overriding a set of methods or "
"attributes that will be called at some point during the installation of the "
"package. The package base class, usually specialized for a given build "
"system, determines the actual set of entities available for overriding. The "
"classes that are currently provided by Spack are:"
msgstr ""

# 635359c4cbdc44f2898471819206f674
#: ../spack/lib/spack/docs/packaging_guide.rst:2571
msgid "**Base Class**"
msgstr ""

# b77a146bedf64f3596d381802e181d6f
#: ../spack/lib/spack/docs/packaging_guide.rst:2571
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:16
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: spack.build_systems.cmake.CMakePackage:17
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: spack.build_systems.makefile.MakefilePackage:15
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: spack.build_systems.meson.MesonPackage:17
msgid "**Purpose**"
msgstr ""

# 2daf24bcfb91486f9ac3aef2eb5a1af7
#: ../spack/lib/spack/docs/packaging_guide.rst:2573
msgid ":py:class:`.Package`"
msgstr ""

# 1fad1c9edb434c20bc3c9f79bc72f8ae
#: ../spack/lib/spack/docs/packaging_guide.rst:2573
msgid "General base class not specialized for any build system"
msgstr ""

# 1ff8b7a03cc24071ab4fca5feb65bfa3
#: ../spack/lib/spack/docs/packaging_guide.rst:2576
msgid ":py:class:`.MakefilePackage`"
msgstr ""

# f4a7f850ac61454cbf51c55c015f5136
#: ../spack/lib/spack/docs/packaging_guide.rst:2576
msgid "Specialized class for packages built invoking hand-written Makefiles"
msgstr ""

# 70848d2f3b0149f79ad825207886985d
#: ../spack/lib/spack/docs/packaging_guide.rst:2580
msgid ":py:class:`.AutotoolsPackage`"
msgstr ""

# e97f39028409435a9ee0cda00ce459a8
#: ../spack/lib/spack/docs/packaging_guide.rst:2580
msgid "Specialized class for packages built using GNU Autotools"
msgstr ""

# 346f3700966a431c8c0039eea64aeefa
#: ../spack/lib/spack/docs/packaging_guide.rst:2583
msgid ":py:class:`.CMakePackage`"
msgstr ""

# 04ddd95211f34b4883ee7642c24c7494
#: ../spack/lib/spack/docs/packaging_guide.rst:2583
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage:1
msgid "Specialized class for packages built using CMake"
msgstr ""

# 549dee8a4c1f493ebed03f69df0d3deb
#: ../spack/lib/spack/docs/packaging_guide.rst:2586
msgid ":py:class:`.CudaPackage`"
msgstr ""

# ec3113b7baf14dfa8cd7340400ffe1ab
#: ../spack/lib/spack/docs/packaging_guide.rst:2586
msgid ""
"A helper class for packages that use CUDA. It is intended to be used in "
"combination with others"
msgstr ""

# 50c1c25466bd476f88c32901ef91e2f1
#: ../spack/lib/spack/docs/packaging_guide.rst:2590
msgid ":py:class:`.QMakePackage`"
msgstr ""

# 48dfa8d51e524bc2a4fc0a0958129be8
#: ../spack/lib/spack/docs/packaging_guide.rst:2590
msgid "Specialized class for packages build using QMake"
msgstr ""

# 313752fe4c434fee90b4593b52fa450a
#: ../spack/lib/spack/docs/packaging_guide.rst:2593
msgid ":py:class:`.SConsPackage`"
msgstr ""

# 2ae74f49ae474f749e1bcafa6221b96d
#: ../spack/lib/spack/docs/packaging_guide.rst:2593
msgid "Specialized class for packages built using SCons"
msgstr ""

# 9cd103b1d9704560870902b76189bdc8
#: ../spack/lib/spack/docs/packaging_guide.rst:2596
msgid ":py:class:`.WafPackage`"
msgstr ""

# 184a746c3f1442498e23c8bd01af8dc5
#: ../spack/lib/spack/docs/packaging_guide.rst:2596
msgid "Specialized class for packages built using Waf"
msgstr ""

# 4a0642f5ee6b4ab1acc7ad69ded52a05
#: ../spack/lib/spack/docs/packaging_guide.rst:2599
msgid ":py:class:`.RPackage`"
msgstr ""

# f5d13f0cf8d240a3b01cd360b4ffb858
#: ../spack/lib/spack/docs/packaging_guide.rst:2599
msgid "Specialized class for :py:class:`.R` extensions"
msgstr ""

# ec4d7be4bbe54b2baa7092488ed84e90
#: ../spack/lib/spack/docs/packaging_guide.rst:2602
msgid ":py:class:`.OctavePackage`"
msgstr ""

# 9295a5d0936e429fa98b775b6d933796
#: ../spack/lib/spack/docs/packaging_guide.rst:2602
msgid "Specialized class for :py:class:`.Octave` packages"
msgstr ""

# 35ac3b08085c4577afd3452761accf17
#: ../spack/lib/spack/docs/packaging_guide.rst:2605
msgid ":py:class:`.PythonPackage`"
msgstr ""

# 6ca8516eab4045db862540bc35cc2e52
#: ../spack/lib/spack/docs/packaging_guide.rst:2605
msgid "Specialized class for :py:class:`.Python` extensions"
msgstr ""

# 5826513164734435803b11f5699a8b44
#: ../spack/lib/spack/docs/packaging_guide.rst:2608
msgid ":py:class:`.PerlPackage`"
msgstr ""

# 81abcc049a3846ccadb36327004d53fb
#: ../spack/lib/spack/docs/packaging_guide.rst:2608
msgid "Specialized class for :py:class:`.Perl` extensions"
msgstr ""

# a9518545bcc94aeeb83a9786443d00b2
#: ../spack/lib/spack/docs/packaging_guide.rst:2611
msgid ":py:class:`.IntelPackage`"
msgstr ""

# 107deddb7d6741c1801ffa7ae54dd3ee
#: ../spack/lib/spack/docs/packaging_guide.rst:2611
msgid "Specialized class for licensed Intel software"
msgstr ""

# 46b287740ca9499db0fa68dd88dcd2f4
#: ../spack/lib/spack/docs/packaging_guide.rst:2622
msgid "Choice of the appropriate base class for a package"
msgstr ""

# 00ce0ab47236455a929c9ccebb364f75
#: ../spack/lib/spack/docs/packaging_guide.rst:2618
msgid ""
"In most cases packagers don't have to worry about the selection of the right "
"base class for a package, as ``spack create`` will make the appropriate "
"choice on their behalf. In those rare cases where manual intervention is "
"needed we need to stress that a package base class depends on the *build "
"system* being used, not the language of the package. For example, a Python "
"extension installed with CMake would ``extends('python')`` and subclass "
"from :py:class:`.CMakePackage`."
msgstr ""

# 6cc70c98a31e4ed4a2a218e51ff00916
#: ../spack/lib/spack/docs/packaging_guide.rst:2627
msgid "Installation pipeline"
msgstr ""

# 4c8ff75a41e3409a89c4f7b8a0c506ad
#: ../spack/lib/spack/docs/packaging_guide.rst:2629
msgid "When a user runs ``spack install``, Spack:"
msgstr ""

# 22d6f2085a4e46f18b3149a1a4ba6dd2
#: ../spack/lib/spack/docs/packaging_guide.rst:2631
msgid "Fetches an archive for the correct version of the software."
msgstr ""

# b967024b8b3142b4b535cc9089a966ce
#: ../spack/lib/spack/docs/packaging_guide.rst:2632
msgid "Expands the archive."
msgstr ""

# 71ac0817c02c46a297fa96f8a6949da2
#: ../spack/lib/spack/docs/packaging_guide.rst:2633
msgid ""
"Sets the current working directory to the root directory of the expanded "
"archive."
msgstr ""

# ef8271c29a76490fb50cfec171fab02d
#: ../spack/lib/spack/docs/packaging_guide.rst:2635
msgid ""
"Then, depending on the base class of the package under consideration, it "
"will execute a certain number of **phases** that reflect the way a package "
"of that type is usually built. The name and order in which the phases will "
"be executed can be obtained either reading the API docs at :py:mod:`~.spack."
"build_systems`, or using the ``spack info`` command:"
msgstr ""

# e7fa047ccce44416b447943a3a470cf3
#: ../spack/lib/spack/docs/packaging_guide.rst:2664
msgid ""
"Typically, phases have default implementations that fit most of the common "
"cases:"
msgstr ""

# 069ab7c91b0b407ab1ca4018fdef3733
#: ../spack/lib/spack/docs/packaging_guide.rst:2670
msgid ""
"It is thus just sufficient for a packager to override a few build system "
"specific helper methods or attributes to provide, for instance, configure "
"arguments:"
msgstr ""

# 9003866a17f8417a9c4327d6af891397
#: ../spack/lib/spack/docs/packaging_guide.rst:2679
msgid ""
"Each specific build system has a list of attributes that can be overridden "
"to fine-tune the installation of a package without overriding an entire "
"phase. To have more information on them the place to go is the API docs of "
"the :py:mod:`~.spack.build_systems` module."
msgstr ""

# c34012bd156a4556a35203e93290b00a
#: ../spack/lib/spack/docs/packaging_guide.rst:2686
msgid "Overriding an entire phase"
msgstr ""

# 0e14046b25454a8183fbd40510da811c
#: ../spack/lib/spack/docs/packaging_guide.rst:2688
msgid ""
"In extreme cases it may be necessary to override an entire phase. Regardless "
"of the build system, the signature is the same. For example, the signature "
"for the install phase is:"
msgstr ""

# ccf308bf0b534950980a88421f92d018
#: ../spack/lib/spack/docs/packaging_guide.rst:2702
msgid "``self``"
msgstr ""

# e4b06297eee9497da046c6709833b66e
#: ../spack/lib/spack/docs/packaging_guide.rst:2699
msgid ""
"For those not used to Python instance methods, this is the package itself.  "
"In this case it's an instance of ``Foo``, which extends ``Package``.  For "
"API docs on Package objects, see :py:class:`Package <spack.package.Package>`."
msgstr ""

# 682e242d068043c58b55e3f6d37b2611
#: ../spack/lib/spack/docs/packaging_guide.rst:2707
msgid "``spec``"
msgstr ""

# b11b08a76b5e469aad1521ff5e84caf9
#: ../spack/lib/spack/docs/packaging_guide.rst:2705
msgid ""
"This is the concrete spec object created by Spack from an abstract spec "
"supplied by the user.  It describes what should be installed.  It will be of "
"type :py:class:`Spec <spack.spec.Spec>`."
msgstr ""

# 9196ea69f28f4f1a93b62ee2a8777c70
#: ../spack/lib/spack/docs/packaging_guide.rst:2712
msgid "``prefix``"
msgstr ""

# cf26144120864d368bce11d80622baf2
#: ../spack/lib/spack/docs/packaging_guide.rst:2710
msgid ""
"This is the path that your install method should copy build targets into.  "
"It acts like a string, but it's actually its own special type, :py:class:"
"`Prefix <spack.util.prefix.Prefix>`."
msgstr ""

# 2c5aac19a0f74bb5b1365aaaf8aa8a09
#: ../spack/lib/spack/docs/packaging_guide.rst:2714
msgid ""
"The arguments ``spec`` and ``prefix`` are passed only for convenience, as "
"they always correspond to ``self.spec`` and ``self.spec.prefix`` "
"respectively."
msgstr ""

# bc8e402b51614148ad5f0c4ad9b8edb5
#: ../spack/lib/spack/docs/packaging_guide.rst:2717
msgid ""
"As mentioned in :ref:`install-environment`, you will usually not need to "
"refer to dependencies explicitly in your package file, as the compiler "
"wrappers take care of most of the heavy lifting here.  There will be times, "
"though, when you need to refer to the install locations of dependencies, or "
"when you need to do something different depending on the version, compiler, "
"dependencies, etc. that your package is built with.  These parameters give "
"you access to this type of information."
msgstr ""

# f44a65816d08419e8c3a709b79ef8a57
#: ../spack/lib/spack/docs/packaging_guide.rst:2728
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.set_build_environment_variables:8
msgid "The build environment"
msgstr ""

# 97d470652b1d4e9aa0987c0dfa079c11
#: ../spack/lib/spack/docs/packaging_guide.rst:2730
msgid ""
"In general, you should not have to do much differently in your install "
"method than you would when installing a package on the command line. In "
"fact, you may need to do *less* than you would on the command line."
msgstr ""

# 4146617b70394ec6aa8aeb628f114805
#: ../spack/lib/spack/docs/packaging_guide.rst:2734
msgid ""
"Spack tries to set environment variables and modify compiler calls so that "
"it *appears* to the build system that you're building with a standard system "
"install of everything.  Obviously that's not going to cover *all* build "
"systems, but it should make it easy to port packages to Spack if they use a "
"standard build system.  Usually with autotools or cmake, building and "
"installing is easy.  With builds that use custom Makefiles, you may need to "
"add logic to modify the makefiles."
msgstr ""

# 1f508420d6fa4c7c9fd84dbab4e01a27
#: ../spack/lib/spack/docs/packaging_guide.rst:2742
msgid ""
"The remainder of the section covers the way Spack's build environment works."
msgstr ""

# 8183ea94ff5b4d7b906567c8e047dcad
#: ../spack/lib/spack/docs/packaging_guide.rst:2747
msgid "Forking ``install()``"
msgstr ""

# 3319545719d24105a78537922e90aea1
#: ../spack/lib/spack/docs/packaging_guide.rst:2749
msgid ""
"To give packagers free reign over their install environment, Spack forks a "
"new process each time it invokes a package's ``install()`` method. This "
"allows packages to have a sandboxed build environment, without impacting the "
"environments ofother jobs that the main Spack process runs. Packages are "
"free to change the environment or to modify Spack internals, because each "
"``install()`` call has its own dedicated process."
msgstr ""

# 52ea0abcf84a4e6f8544095ea95e517f
#: ../spack/lib/spack/docs/packaging_guide.rst:2760
msgid ""
"Spack sets a number of standard environment variables that serve two "
"purposes:"
msgstr ""

# db4d63bda61c436e9960f09e2a935e71
#: ../spack/lib/spack/docs/packaging_guide.rst:2763
msgid "Make build systems use Spack's compiler wrappers for their builds."
msgstr ""

# 042be9d28950445e85aa379d0d6d9ae9
#: ../spack/lib/spack/docs/packaging_guide.rst:2764
msgid "Allow build systems to find dependencies more easily"
msgstr ""

# e39828eb0be94334b59d55a5948c359f
#: ../spack/lib/spack/docs/packaging_guide.rst:2766
msgid "The Compiler environment variables that Spack sets are:"
msgstr ""

# 21114019b5ac458882fd4d2d9a91104f
#: ../spack/lib/spack/docs/packaging_guide.rst:2769
msgid "Variable"
msgstr ""

# e30fdcaa15cf4f3e9df777ffb16c612f
#: ../spack/lib/spack/docs/packaging_guide.rst:2769
msgid "Purpose"
msgstr ""

# 5302a46f298043938b8fddfcd55a2554
#: ../spack/lib/spack/docs/packaging_guide.rst:2771
msgid "``CC``"
msgstr ""

# e4e24612bfbc4d5ba70d2cfa6f3cab13
#: ../spack/lib/spack/docs/packaging_guide.rst:2771
msgid "C compiler"
msgstr ""

# ebf3bd7414ec4f4a9746a4fa6f337857
#: ../spack/lib/spack/docs/packaging_guide.rst:2772
msgid "``CXX``"
msgstr ""

# 3e379bb2be0a4feaa6cc65cf3fae892d
#: ../spack/lib/spack/docs/packaging_guide.rst:2772
msgid "C++ compiler"
msgstr ""

# 88585a3d8f754746ad968915b6e81a61
#: ../spack/lib/spack/docs/packaging_guide.rst:2773
msgid "``F77``"
msgstr ""

# d58a2921a5fd4f5187cff500acf1e504
#: ../spack/lib/spack/docs/packaging_guide.rst:2773
msgid "Fortran 77 compiler"
msgstr ""

# b0bcb6f535ac470d8ce96128c346223e
#: ../spack/lib/spack/docs/packaging_guide.rst:2774
msgid "``FC``"
msgstr ""

# 7db1e4bc408149f79c6d29a5ee5be139
#: ../spack/lib/spack/docs/packaging_guide.rst:2774
msgid "Fortran 90 and above compiler"
msgstr ""

# 1ef0ebdef9ea458598fa1eb9c431c668
#: ../spack/lib/spack/docs/packaging_guide.rst:2777
msgid ""
"Spack sets these variables so that they point to *compiler wrappers*. These "
"are covered in :ref:`their own section <compiler-wrappers>` below."
msgstr ""

# 4ea046e0a2694d3eb2b4082720ce5e21
#: ../spack/lib/spack/docs/packaging_guide.rst:2781
msgid ""
"All of these are standard variables respected by most build systems. If your "
"project uses ``Autotools`` or ``CMake``, then it should pick them up "
"automatically when you run ``configure`` or ``cmake`` in the ``install()`` "
"function.  Many traditional builds using GNU Make and BSD make also respect "
"these variables, so they may work with these systems."
msgstr ""

# 7f55eea2fb5844c197012dbf92a6fc6f
#: ../spack/lib/spack/docs/packaging_guide.rst:2788
msgid ""
"If your build system does *not* automatically pick these variables up from "
"the environment, then you can simply pass them on the command line or use a "
"patch as part of your build process to get the correct compilers into the "
"project's build system.  There are also some file editing commands you can "
"use -- these are described later in the `section on file manipulation <file-"
"manipulation_>`_."
msgstr ""

# eaa0e454e13a47e983c160b02079cab2
#: ../spack/lib/spack/docs/packaging_guide.rst:2795
msgid ""
"In addition to the compiler variables, these variables are set before "
"entering ``install()`` so that packages can locate dependencies easily:"
msgstr ""

# d56fc0e8af4546c7aabc23a0dfffb9cd
#: ../spack/lib/spack/docs/packaging_guide.rst:2800
msgid "``PATH``"
msgstr ""

# 59ab40bc7cf940069cd17ba88aaad8ac
#: ../spack/lib/spack/docs/packaging_guide.rst:2800
msgid "Set to point to ``/bin`` directories of dependencies"
msgstr ""

# 319b78b245664aa9810207ef44643e13
#: ../spack/lib/spack/docs/packaging_guide.rst:2801
msgid "``CMAKE_PREFIX_PATH``"
msgstr ""

# 60ae7004f5e0445abac6ba8cb15b682b
#: ../spack/lib/spack/docs/packaging_guide.rst:2801
msgid "Path to dependency prefixes for CMake"
msgstr ""

# da9f09e3d372462bb6a403314b7da771
#: ../spack/lib/spack/docs/packaging_guide.rst:2802
msgid "``PKG_CONFIG_PATH``"
msgstr ""

# da2768f505944531b0f5b73a32539dbc
#: ../spack/lib/spack/docs/packaging_guide.rst:2802
msgid "Path to any pkgconfig directories for dependencies"
msgstr ""

# 1178e79d4f0d41b3af79581854058936
#: ../spack/lib/spack/docs/packaging_guide.rst:2803
msgid "``PYTHONPATH``"
msgstr ""

# 3c20dee4a70f420c9098677b2380d64e
#: ../spack/lib/spack/docs/packaging_guide.rst:2803
msgid "Path to site-packages dir of any python dependencies"
msgstr ""

# d371ddd20e134a4fa3268f753feb0deb
#: ../spack/lib/spack/docs/packaging_guide.rst:2806
msgid ""
"``PATH`` is set up to point to dependencies ``/bin`` directories so that you "
"can use tools installed by dependency packages at build time. For example, ``"
"$MPICH_ROOT/bin/mpicc`` is frequently used by dependencies of ``mpich``."
msgstr ""

# 3323fda23533429c9ed7c18bbe3fab21
#: ../spack/lib/spack/docs/packaging_guide.rst:2811
msgid ""
"``CMAKE_PREFIX_PATH`` contains a colon-separated list of prefixes where "
"``cmake`` will search for dependency libraries and headers. This causes all "
"standard CMake find commands to look in the paths of your dependencies, so "
"you *do not* have to manually specify arguments like ``-DDEPENDENCY_DIR=/"
"path/to/dependency`` to ``cmake``.  More on this is `in the CMake "
"documentation <http://www.cmake.org/cmake/help/v3.0/variable/"
"CMAKE_PREFIX_PATH.html>`_."
msgstr ""

# cd6ca405d74441b6bbdcca08fed147c8
#: ../spack/lib/spack/docs/packaging_guide.rst:2818
msgid ""
"``PKG_CONFIG_PATH`` is for packages that attempt to discover dependencies "
"using the GNU ``pkg-config`` tool.  It is similar to ``CMAKE_PREFIX_PATH`` "
"in that it allows a build to automatically discover its dependencies."
msgstr ""

# c3df84ca60ce429ea88534b31bc43a99
#: ../spack/lib/spack/docs/packaging_guide.rst:2823
msgid ""
"If you want to see the environment that a package will build with, or if you "
"want to run commands in that environment to test them out, you can use the :"
"ref:`cmd-spack-env` command, documented below."
msgstr ""

# dd60e9feec274517bcf009c634ff6f85
#: ../spack/lib/spack/docs/packaging_guide.rst:2830
msgid "Failing the build"
msgstr ""

# a47b5fee408e4b65acf9c17510bf9365
#: ../spack/lib/spack/docs/packaging_guide.rst:2832
msgid ""
"Sometimes you don't want a package to successfully install unless some "
"condition is true.  You can explicitly cause the build to fail from "
"``install()`` by raising an ``InstallError``, for example:"
msgstr ""

# 0352aa37911f4b63a2f5b07fc55ab773
#: ../spack/lib/spack/docs/packaging_guide.rst:2845
msgid "Shell command functions"
msgstr ""

# 079161f1636c4bfbb68540705620f318
#: ../spack/lib/spack/docs/packaging_guide.rst:2847
msgid "Recall the install method from ``libelf``:"
msgstr ""

# 55381d740ddc44529eda5a1309913cb0
#: ../spack/lib/spack/docs/packaging_guide.rst:2853
msgid ""
"Normally in Python, you'd have to write something like this in order to "
"execute shell commands:"
msgstr ""

# 36a54b76d7f64bbfab337644fcdfa685
#: ../spack/lib/spack/docs/packaging_guide.rst:2861
msgid ""
"We've tried to make this a bit easier by providing callable wrapper objects "
"for some shell commands.  By default, ``configure``, ``cmake``, and ``make`` "
"wrappers are are provided, so you can call them more naturally in your "
"package files."
msgstr ""

# dcf5424e191942c5ac92b6a76747dfee
#: ../spack/lib/spack/docs/packaging_guide.rst:2866
msgid "If you need other commands, you can use ``which`` to get them:"
msgstr ""

# c935310feca043f1bb12f032c74d6b8f
#: ../spack/lib/spack/docs/packaging_guide.rst:2873
msgid "The ``which`` function will search the ``PATH`` for the application."
msgstr ""

# 980ed7f8fb644d3c81fea65043fdaaca
#: ../spack/lib/spack/docs/packaging_guide.rst:2875
msgid ""
"Callable wrappers also allow spack to provide some special features. For "
"example, in Spack, ``make`` is parallel by default, and Spack figures out "
"the number of cores on your machine and passes an appropriate value for ``-"
"j<numjobs>`` when it calls ``make`` (see the ``parallel`` `package attribute "
"<attribute_parallel>`).  In a package file, you can supply a keyword "
"argument, ``parallel=False``, to the ``make`` wrapper to disable parallel "
"make.  In the ``libelf`` package, this allows us to avoid race conditions in "
"the library's build system."
msgstr ""

# 9d71dd884e0e463b9cd117951161ee31
#: ../spack/lib/spack/docs/packaging_guide.rst:2887
msgid "Compiler flags"
msgstr ""

# a1823691ee644c69909c508b5369eae7
#: ../spack/lib/spack/docs/packaging_guide.rst:2889
msgid ""
"Compiler flags set by the user through the Spec object can be passed to the "
"build in one of three ways. By default, the build environment injects these "
"flags directly into the compiler commands using Spack's compiler wrappers. "
"In cases where the build system requires knowledge of the compiler flags, "
"they can be registered with the build system by alternatively passing them "
"through environment variables or as build system arguments. The flag_handler "
"method can be used to change this behavior."
msgstr ""

# fdabe6737f2c4ce493f6a9001dbe4448
#: ../spack/lib/spack/docs/packaging_guide.rst:2898
msgid ""
"Packages can override the flag_handler method with one of three built-in "
"flag_handlers. The built-in flag_handlers are named ``inject_flags``, "
"``env_flags``, and ``build_system_flags``. The ``inject_flags`` method is "
"the default. The ``env_flags`` method puts all of the flags into the "
"environment variables that ``make`` uses as implicit variables ('CFLAGS', "
"'CXXFLAGS', etc.). The ``build_system_flags`` method adds the flags as "
"arguments to the invocation of ``configure`` or ``cmake``, respectively."
msgstr ""

# e07e3d941f7e4c34b572177d7d42d15a
#: ../spack/lib/spack/docs/packaging_guide.rst:2910
msgid ""
"Passing compiler flags using build system arguments is only supported for "
"CMake and Autotools packages. Individual packages may also differ in whether "
"they properly respect these arguments."
msgstr ""

# b94879eaab2a4fdf8a9ce82f185c547f
#: ../spack/lib/spack/docs/packaging_guide.rst:2914
msgid ""
"Individual packages may also define their own ``flag_handler`` methods. The "
"``flag_handler`` method takes the package instance (``self``), the name of "
"the flag, and a list of the values of the flag. It will be called on each of "
"the six compiler flags supported in Spack. It should return a triple of "
"``(injf, envf, bsf)`` where ``injf`` is a list of flags to inject via the "
"Spack compiler wrappers, ``envf`` is a list of flags to set in the "
"appropriate environment variables, and ``bsf`` is a list of flags to pass to "
"the build system as arguments."
msgstr ""

# 5456b5d0edb34435a25c874d3bbe0728
#: ../spack/lib/spack/docs/packaging_guide.rst:2926
msgid ""
"Passing a non-empty list of flags to ``bsf`` for a build system that does "
"not support build system arguments will result in an error."
msgstr ""

# ac4e19a953cf436c9ba5d89b9dcbb438
#: ../spack/lib/spack/docs/packaging_guide.rst:2930
msgid "Here are the definitions of the three built-in flag handlers:"
msgstr ""

# 1038d3bc8a0b434a9d6f72391a6efe93
#: ../spack/lib/spack/docs/packaging_guide.rst:2945
msgid ""
"Returning ``[]`` and ``None`` are equivalent in a ``flag_handler`` method."
msgstr ""

# 36d10c9b975d4b679665b5b2b377f538
#: ../spack/lib/spack/docs/packaging_guide.rst:2948
msgid ""
"Packages can override the default behavior either by specifying one of the "
"built-in flag handlers,"
msgstr ""

# c70e79df210f4a59b0116df444b88de9
#: ../spack/lib/spack/docs/packaging_guide.rst:2955
msgid ""
"or by implementing the flag_handler method. Suppose for a package ``Foo`` we "
"need to pass ``cflags``, ``cxxflags``, and ``cppflags`` through the "
"environment, the rest of the flags through compiler wrapper injection, and "
"we need to add ``-lbar`` to ``ldlibs``. The following flag handler method "
"accomplishes that."
msgstr ""

# 7b31209994ef4a409e31d7f51a9bbb6e
#: ../spack/lib/spack/docs/packaging_guide.rst:2970
msgid ""
"Because these methods can pass values through environment variables, it is "
"important not to override these variables unnecessarily (E.g. setting "
"``env['CFLAGS']``) in other package methods when using non-default flag "
"handlers. In the ``setup_environment`` and ``setup_dependent_environment`` "
"methods, use the ``append_flags`` method of the ``EnvironmentModifications`` "
"class to append values to a list of flags whenever the flag handler is "
"``env_flags``. If the package passes flags through the environment or the "
"build system manually (in the install method, for example), we recommend "
"using the default flag handler, or removing manual references and "
"implementing a custom flag handler method that adds the desired flags to "
"export as environment variables or pass to the build system. Manual flag "
"passing is likely to interfere with the ``env_flags`` and "
"``build_system_flags`` methods."
msgstr ""

# f2fa3fffa56c42439ace01e20137ce4d
#: ../spack/lib/spack/docs/packaging_guide.rst:2985
msgid ""
"In rare circumstances such as compiling and running small unit tests, a "
"package developer may need to know what are the appropriate compiler flags "
"to enable features like ``OpenMP``, ``c++11``, ``c++14`` and alike. To that "
"end the compiler classes in ``spack`` implement the following "
"**properties**: ``openmp_flag``, ``cxx98_flag``, ``cxx11_flag``, "
"``cxx14_flag``, and ``cxx17_flag``, which can be accessed in a package by "
"``self.compiler.cxx11_flag`` and alike. Note that the implementation is such "
"that if a given compiler version does not support this feature, an error "
"will be produced. Therefore package developers can also use these properties "
"to assert that a compiler supports the requested feature. This is handy when "
"a package supports additional variants like"
msgstr ""

# 985be4c27a444af29d40fc51d809eb05
#: ../spack/lib/spack/docs/packaging_guide.rst:3005
msgid "Blas, Lapack and ScaLapack libraries"
msgstr ""

# 866150a0bb234359a7044cfbf5682804
#: ../spack/lib/spack/docs/packaging_guide.rst:3007
msgid ""
"Multiple packages provide implementations of ``Blas``, ``Lapack`` and "
"``ScaLapack`` routines.  The names of the resulting static and/or shared "
"libraries differ from package to package. In order to make the ``install()`` "
"method independent of the choice of ``Blas`` implementation, each package "
"which provides it implements ``@property def blas_libs(self):`` to return an "
"object of `LibraryList <http://spack.readthedocs.io/en/latest/llnl.util."
"html#llnl.util.filesystem.LibraryList>`_ type which simplifies usage of a "
"set of libraries. The same applies to packages which provide ``Lapack`` and "
"``ScaLapack``. Package developers are requested to use this interface. "
"Common usage cases are:"
msgstr ""

# f4b0344081ce4329bccf78950a9002d8
#: ../spack/lib/spack/docs/packaging_guide.rst:3018
msgid "Space separated list of full paths"
msgstr ""

# 76861a5fb4f44db396e99cd389194141
#: ../spack/lib/spack/docs/packaging_guide.rst:3027
msgid "Names of libraries and directories which contain them"
msgstr ""

# 411db2bc26834429928c0023d6952b1f
#: ../spack/lib/spack/docs/packaging_guide.rst:3037
msgid "Search and link flags"
msgstr ""

# 930958a0d55b4738929e644392f55446
#: ../spack/lib/spack/docs/packaging_guide.rst:3047
msgid ""
"For more information, see documentation of `LibraryList <http://spack."
"readthedocs.io/en/latest/llnl.util.html#llnl.util.filesystem.LibraryList>`_ "
"class."
msgstr ""

# 5b03df70ae3f439d8f5efd85ea136927
#: ../spack/lib/spack/docs/packaging_guide.rst:3056
msgid "Prefix objects"
msgstr ""

# 7f2e25605ca44141a42d7f1c4107984a
#: ../spack/lib/spack/docs/packaging_guide.rst:3058
msgid ""
"Spack passes the ``prefix`` parameter to the install method so that you can "
"pass it to ``configure``, ``cmake``, or some other installer, e.g.:"
msgstr ""

# 769516c64efa45ed932c0bc3e148ee3a
#: ../spack/lib/spack/docs/packaging_guide.rst:3066
msgid ""
"For the most part, prefix objects behave exactly like strings.  For packages "
"that do not have their own install target, or for those that implement it "
"poorly (like ``libdwarf``), you may need to manually copy things into "
"particular directories under the prefix.  For this, you can refer to "
"standard subdirectories without having to construct paths yourself, e.g.:"
msgstr ""

# 8fb36e6875dc48c6b1351a8c23190eaf
#: ../spack/lib/spack/docs/packaging_guide.rst:3086
msgid ""
"Attributes of this object are created on the fly when you request them, so "
"any of the following will work:"
msgstr ""

# 91e4b679b7d545809f0dcedde65e6a7f
#: ../spack/lib/spack/docs/packaging_guide.rst:3090
msgid "Prefix Attribute"
msgstr ""

# 232dc78e015e4faa9f4f6b9449fb0225
#: ../spack/lib/spack/docs/packaging_guide.rst:3090
msgid "Location"
msgstr ""

# 57c0e72434d249ae8f5b4bc158eb394f
#: ../spack/lib/spack/docs/packaging_guide.rst:3092
msgid "``prefix.bin``"
msgstr ""

# 6a628837497940cab1f33cb6f92ef4fd
#: ../spack/lib/spack/docs/packaging_guide.rst:3092
msgid "``$prefix/bin``"
msgstr ""

# 579075b146884b2094951b564d3e39e7
#: ../spack/lib/spack/docs/packaging_guide.rst:3093
msgid "``prefix.lib64``"
msgstr ""

# 49bf924e8573434bbced1ae914d9bf39
#: ../spack/lib/spack/docs/packaging_guide.rst:3093
msgid "``$prefix/lib64``"
msgstr ""

# 2c550b77639342dc9f5eca440b384227
#: ../spack/lib/spack/docs/packaging_guide.rst:3094
msgid "``prefix.share.man``"
msgstr ""

# 9045a484600244879d6016658483b5e4
#: ../spack/lib/spack/docs/packaging_guide.rst:3094
msgid "``$prefix/share/man``"
msgstr ""

# f79c326c19204cd2a830c628df3db7d9
#: ../spack/lib/spack/docs/packaging_guide.rst:3095
msgid "``prefix.foo.bar.baz``"
msgstr ""

# ee54abc4b17e4f8daf7e49421b307128
#: ../spack/lib/spack/docs/packaging_guide.rst:3095
msgid "``$prefix/foo/bar/baz``"
msgstr ""

# d65a14def96642768a49a8b0370a35f4
#: ../spack/lib/spack/docs/packaging_guide.rst:3098
msgid ""
"Of course, this only works if your file or directory is a valid Python "
"variable name. If your file or directory contains dashes or dots, use "
"``join`` instead:"
msgstr ""

# 9406d359a23441c7920b12d9b91f77bf
#: ../spack/lib/spack/docs/packaging_guide.rst:3113
msgid ""
"When ``install`` is called, most parts of the build process are set up for "
"you.  The correct version's tarball has been downloaded and expanded.  "
"Environment variables like ``CC`` and ``CXX`` are set to point to the "
"correct compiler and version.  An install prefix has already been selected "
"and passed in as ``prefix``.  In most cases this is all you need to get "
"``configure``, ``cmake``, or another install working correctly."
msgstr ""

# b7aaa06b5c6d4e91b2adec77891f2ab7
#: ../spack/lib/spack/docs/packaging_guide.rst:3121
msgid ""
"There will be times when you need to know more about the build "
"configuration.  For example, some software requires that you pass special "
"parameters to ``configure``, like ``--with-libelf=/path/to/libelf`` or ``--"
"with-mpich``.  You might also need to supply special compiler flags "
"depending on the compiler.  All of this information is available in the spec."
msgstr ""

# 49a45f1de9024987b0e2d639d39c607b
#: ../spack/lib/spack/docs/packaging_guide.rst:3130
msgid "Testing spec constraints"
msgstr ""

# cabc5428de334b4a9d50dc0b371911fe
#: ../spack/lib/spack/docs/packaging_guide.rst:3132
msgid ""
"You can test whether your spec is configured a certain way by using the "
"``satisfies`` method.  For example, if you want to check whether the "
"package's version is in a particular range, you can use specs to do that, e."
"g.:"
msgstr ""

# 56c9e94dfe5b492bbcb37bbcfd16ddba
#: ../spack/lib/spack/docs/packaging_guide.rst:3148
msgid "This works for compilers, too:"
msgstr ""

# c203b487292649e9ab0cf3d97c65e946
#: ../spack/lib/spack/docs/packaging_guide.rst:3157
msgid "Or for combinations of spec constraints:"
msgstr ""

# 3df353a356ed47d496a6f14d47c7ccf1
#: ../spack/lib/spack/docs/packaging_guide.rst:3164
msgid "You can also do similar satisfaction tests for dependencies:"
msgstr ""

# bb5d3a936d744dd2aa799f8b12624def
#: ../spack/lib/spack/docs/packaging_guide.rst:3171
msgid ""
"This could allow you to easily work around a bug in a particular dependency "
"version."
msgstr ""

# b1aa071b639742cb80db1fb07ccd1afd
#: ../spack/lib/spack/docs/packaging_guide.rst:3174
msgid ""
"You can use ``satisfies()`` to test for particular dependencies, e.g. ``foo."
"satisfies('^openmpi@1.2')`` or ``foo.satisfies('^mpich')``, or you can use "
"Python's built-in ``in`` operator:"
msgstr ""

# 29155f207d264c2cadee57a5b46816a8
#: ../spack/lib/spack/docs/packaging_guide.rst:3183
msgid ""
"This is useful for virtual dependencies, as you can easily see what "
"implementation was selected for this build:"
msgstr ""

# 1adbeef6886748758813e4fc6aa0a0f3
#: ../spack/lib/spack/docs/packaging_guide.rst:3195
msgid ""
"It's also a bit more concise than satisfies.  The difference between the two "
"functions is that ``satisfies()`` tests whether spec constraints overlap at "
"all, while ``in`` tests whether a spec or any of its dependencies satisfy "
"the provided spec."
msgstr ""

# 98e89713b6ed47ea8997d2f0ad9960c8
#: ../spack/lib/spack/docs/packaging_guide.rst:3202
msgid "Accessing Dependencies"
msgstr ""

# e63b7b4768084641b03cb114b825483a
#: ../spack/lib/spack/docs/packaging_guide.rst:3204
msgid ""
"You may need to get at some file or binary that's in the installation prefix "
"of one of your dependencies. You can do that by sub-scripting the spec:"
msgstr ""

# 90d36a8b21d14b74a34091c226fdee89
#: ../spack/lib/spack/docs/packaging_guide.rst:3212
msgid ""
"The value in the brackets needs to be some package name, and spec needs to "
"depend on that package, or the operation will fail.  For example, the above "
"code will fail if the ``spec`` doesn't depend on ``mpi``.  The value "
"returned is itself just another ``Spec`` object, so you can do all the same "
"things you would do with the package's own spec:"
msgstr ""

# 125e21b28d494d67ab120557034647fd
#: ../spack/lib/spack/docs/packaging_guide.rst:3228
msgid "Multimethods and ``@when``"
msgstr ""

# 9c71f9a00fc341cfad7e5d5e3a34caa0
#: ../spack/lib/spack/docs/packaging_guide.rst:3230
msgid ""
"Spack allows you to make multiple versions of instance functions in "
"packages, based on whether the package's spec satisfies particular criteria."
msgstr ""

# 41a5e7a227604f90a105d83e2e4f6509
#: ../spack/lib/spack/docs/packaging_guide.rst:3234
msgid ""
"The ``@when`` annotation lets packages declare multiple versions of methods "
"like ``install()`` that depend on the package's spec.  For example:"
msgstr ""

# 5de1cbeee682438cb79d3ba64bf3440f
#: ../spack/lib/spack/docs/packaging_guide.rst:3256
msgid ""
"In the above code there are three versions of ``install()``, two of which "
"are specialized for particular platforms.  The version that is called "
"depends on the architecture of the package spec."
msgstr ""

# 6532fbd566754666afc51c1c5517a46e
#: ../spack/lib/spack/docs/packaging_guide.rst:3260
msgid ""
"Note that this works for methods other than install, as well.  So, if you "
"only have part of the install that is platform specific, you could do "
"something more like this:"
msgstr ""

# 1dbc95ea347a485592fbd0155c19a39d
#: ../spack/lib/spack/docs/packaging_guide.rst:3286
msgid ""
"You can write multiple ``@when`` specs that satisfy the package's spec, for "
"example:"
msgstr ""

# cb3ee18047224ca0a904d255f86d37d1
#: ../spack/lib/spack/docs/packaging_guide.rst:3314
msgid ""
"In situations like this, the first matching spec, in declaration order will "
"be called.  As before, if no ``@when`` spec matches, the default method (the "
"one without the ``@when`` decorator) will be called."
msgstr ""

# 665f67ae8cdf49f8bcef70da3a102a1d
#: ../spack/lib/spack/docs/packaging_guide.rst:3320
msgid ""
"The default version of decorated methods must **always** come first.  "
"Otherwise it will override all of the platform-specific versions.  There's "
"not much we can do to get around this because of the way decorators work."
msgstr ""

# 035795012de84acc87c7aeb623b52ef2
#: ../spack/lib/spack/docs/packaging_guide.rst:3331
msgid ""
"As mentioned, ``CC``, ``CXX``, ``F77``, and ``FC`` are set to point to "
"Spack's compiler wrappers.  These are simply called ``cc``, ``c++``, "
"``f77``, and ``f90``, and they live in ``$SPACK_ROOT/lib/spack/env``."
msgstr ""

# d745c364364749419a668b00d041f5ce
#: ../spack/lib/spack/docs/packaging_guide.rst:3335
msgid ""
"``$SPACK_ROOT/lib/spack/env`` is added first in the ``PATH`` environment "
"variable when ``install()`` runs so that system compilers are not picked up "
"instead."
msgstr ""

# a77a9815e3554f3d8956b45d4b98066a
#: ../spack/lib/spack/docs/packaging_guide.rst:3339
msgid ""
"All of these compiler wrappers point to a single compiler wrapper script "
"that figures out which *real* compiler it should be building with.  This "
"comes either from spec `concretization <abstract-and-concrete>`_ or from a "
"user explicitly asking for a particular compiler using, e.g., ``%intel`` on "
"the command line."
msgstr ""

# f9d0695d08654c8ebae05115a8b1175d
#: ../spack/lib/spack/docs/packaging_guide.rst:3345
msgid ""
"In addition to invoking the right compiler, the compiler wrappers add flags "
"to the compile line so that dependencies can be easily found. These flags "
"are added for each dependency, if they exist:"
msgstr ""

# 719ac3b36754473ba7edcdc68fc5834a
#: ../spack/lib/spack/docs/packaging_guide.rst:3349
msgid ""
"Compile-time library search paths * ``-L$dep_prefix/lib`` * ``-L$dep_prefix/"
"lib64``"
msgstr ""

# 4554aefba69641fa920970fb3e2e8669
#: ../spack/lib/spack/docs/packaging_guide.rst:3353
msgid ""
"Runtime library search paths (RPATHs) * ``$rpath_flag$dep_prefix/lib`` * ``"
"$rpath_flag$dep_prefix/lib64``"
msgstr ""

# c48ac2434fbf4ea589600dfd6b3db76a
#: ../spack/lib/spack/docs/packaging_guide.rst:3357
msgid "Include search paths * ``-I$dep_prefix/include``"
msgstr ""

# 16e634eac6d346a5b7e9d7453e8407dc
#: ../spack/lib/spack/docs/packaging_guide.rst:3360
msgid ""
"An example of this would be the ``libdwarf`` build, which has one "
"dependency: ``libelf``.  Every call to ``cc`` in the ``libdwarf`` build will "
"have ``-I$LIBELF_PREFIX/include``, ``-L$LIBELF_PREFIX/lib``, and ``"
"$rpath_flag$LIBELF_PREFIX/lib`` inserted on the command line.  This is done "
"transparently to the project's build system, which will just think it's "
"using a system where ``libelf`` is readily available.  Because of this, you "
"**do not** have to insert extra ``-I``, ``-L``, etc. on the command line."
msgstr ""

# dc07379c084a486b9771ab3e3a534104
#: ../spack/lib/spack/docs/packaging_guide.rst:3369
msgid ""
"Another useful consequence of this is that you often do *not* have to add "
"extra parameters on the ``configure`` line to get autotools to find "
"dependencies.  The ``libdwarf`` install method just calls configure like "
"this:"
msgstr ""

# af3b34cf980042a194496f7414c559ca
#: ../spack/lib/spack/docs/packaging_guide.rst:3378
msgid ""
"Because of the ``-L`` and ``-I`` arguments, configure will successfully find "
"``libdwarf.h`` and ``libdwarf.so``, without the packager having to provide "
"``--with-libdwarf=/path/to/libdwarf`` on the command line."
msgstr ""

# cb217af20b5542b597a14a2df3930db6
#: ../spack/lib/spack/docs/packaging_guide.rst:3385
msgid ""
"For most compilers, ``$rpath_flag`` is ``-Wl,-rpath,``. However, NAG passes "
"its flags to GCC instead of passing them directly to the linker. Therefore, "
"its ``$rpath_flag`` is doubly wrapped: ``-Wl,-Wl,,-rpath,``. ``$rpath_flag`` "
"can be overriden on a compiler specific basis in ``lib/spack/spack/compilers/"
"$compiler.py``."
msgstr ""

# 007307cf84dc4d2ca2a04e69a4a4407b
#: ../spack/lib/spack/docs/packaging_guide.rst:3391
msgid ""
"The compiler wrappers also pass the compiler flags specified by the user "
"from the command line (``cflags``, ``cxxflags``, ``fflags``, ``cppflags``, "
"``ldflags``, and/or ``ldlibs``). They do not override the canonical "
"autotools flags with the same names (but in ALL-CAPS) that may be passed "
"into the build by particularly challenging package scripts."
msgstr ""

# be9a6858888f44fba313a7505c51bba0
#: ../spack/lib/spack/docs/packaging_guide.rst:3399
msgid "MPI support in Spack"
msgstr ""

# 37245aa27d5548bf9801986a25e453a2
#: ../spack/lib/spack/docs/packaging_guide.rst:3401
msgid ""
"It is common for high performance computing software/packages to use the "
"Message Passing Interface ( ``MPI``).  As a result of conretization, a given "
"package can be built using different implementations of MPI such as "
"``Openmpi``, ``MPICH`` or ``IntelMPI``.  That is, when your package declares "
"that it ``depends_on('mpi')``, it can be built with any of these ``mpi`` "
"implementations. In some scenarios, to configure a package, one has to "
"provide it with appropriate MPI compiler wrappers such as ``mpicc``, ``mpic+"
"+``.  However different implementations of ``MPI`` may have different names "
"for those wrappers."
msgstr ""

# fd3b790fa3a14761827373af589d2066
#: ../spack/lib/spack/docs/packaging_guide.rst:3411
msgid ""
"Spack provides an idiomatic way to use MPI compilers in your package.  To "
"use MPI wrappers to compile your whole build, do this in your ``install()`` "
"method:"
msgstr ""

# fb6b01de03b84656ba7ef1ecd66995d1
#: ../spack/lib/spack/docs/packaging_guide.rst:3422
msgid "That's all.  A longer explanation of why this works is below."
msgstr ""

# 0dee4b5a587849e1a5ebf9a20aa21690
#: ../spack/lib/spack/docs/packaging_guide.rst:3424
msgid ""
"We don't try to force any particular build method on packagers.  The "
"decision to use MPI wrappers depends on the way the package is written, on "
"common practice, and on \"what works\".  Loosely, There are three types of "
"MPI builds:"
msgstr ""

# f101abaef32d4273bb9625195c018d54
#: ../spack/lib/spack/docs/packaging_guide.rst:3429
msgid ""
"Some build systems work well without the wrappers and can treat MPI as an "
"external library, where the person doing the build has to supply includes/"
"libs/etc.  This is fairly uncommon."
msgstr ""

# ceab2eb6da8b4f65a246f016b11a1022
#: ../spack/lib/spack/docs/packaging_guide.rst:3433
msgid ""
"Others really want the wrappers and assume you're using an MPI \"compiler\" "
"– i.e., they have no mechanism to add MPI includes/libraries/etc."
msgstr ""

# d62d72862817442c9895fdd39b6297bf
#: ../spack/lib/spack/docs/packaging_guide.rst:3437
msgid ""
"CMake's ``FindMPI`` needs the compiler wrappers, but it uses them to extract "
"``–I`` / ``-L`` / ``-D`` arguments, then treats MPI like a regular library."
msgstr ""

# e937295a10a74b5d82018334a2d134ac
#: ../spack/lib/spack/docs/packaging_guide.rst:3441
msgid ""
"Note that some CMake builds fall into case 2 because they either don't know "
"about or don't like CMake's ``FindMPI`` support – they just assume an MPI "
"compiler. Also, some autotools builds fall into case 3 (e.g. `here is an "
"autotools version of CMake's FindMPI <https://github.com/tgamblin/libra/blob/"
"master/m4/lx_find_mpi.m4>`_)."
msgstr ""

# 638ce73a45ed4bd8b5df6b934ef6fcf7
#: ../spack/lib/spack/docs/packaging_guide.rst:3447
msgid ""
"Given all of this, we leave the use of the wrappers up to the packager. "
"Spack will support all three ways of building MPI packages."
msgstr ""

# 21aee24751c342fbb37ae2adbcefe4e0
#: ../spack/lib/spack/docs/packaging_guide.rst:3452
msgid "Packaging Conventions"
msgstr ""

# 8c3b5792176b4ecc83c8f12568e0495a
#: ../spack/lib/spack/docs/packaging_guide.rst:3454
msgid ""
"As mentioned above, in the ``install()`` method, ``CC``, ``CXX``, ``F77``, "
"and ``FC`` point to Spack's wrappers around the chosen compiler. Spack's "
"wrappers are not the MPI compiler wrappers, though they do automatically add "
"``–I``, ``–L``, and ``–Wl,-rpath`` args for dependencies in a similar way.  "
"The MPI wrappers are a bit different in that they also add ``-l`` arguments "
"for the MPI libraries, and some add special ``-D`` arguments to trigger "
"build options in MPI programs."
msgstr ""

# 9ffab31b7e14473fb4c9634219c8d2b3
#: ../spack/lib/spack/docs/packaging_guide.rst:3462
msgid ""
"For case 1 above, you generally don't need to do more than patch your "
"Makefile or add configure args as you normally would."
msgstr ""

# 0846caec5d03433ca3b0ab4dab92e9e9
#: ../spack/lib/spack/docs/packaging_guide.rst:3465
msgid ""
"For case 3, you don't need to do much of anything, as Spack puts the MPI "
"compiler wrappers in the PATH, and the build will find them and interrogate "
"them."
msgstr ""

# 5d855fe7973e4d798c82287a73f4bfcb
#: ../spack/lib/spack/docs/packaging_guide.rst:3469
msgid ""
"For case 2, things are a bit more complicated, as you'll need to tell the "
"build to use the MPI compiler wrappers instead of Spack's compiler "
"wrappers.  All it takes some lines like this:"
msgstr ""

# 1f635c6eb6a14b6dadffa38b6fa74e91
#: ../spack/lib/spack/docs/packaging_guide.rst:3480
msgid ""
"Or, if you pass CC, CXX, etc. directly to your build with, e.g., `--with-"
"cc=<path>`, you'll want to substitute `spec['mpi'].mpicc` in there instead, "
"e.g.:"
msgstr ""

# 5badd7cac8da4a259fd5fd8b8369e73c
#: ../spack/lib/spack/docs/packaging_guide.rst:3489
msgid ""
"Now, you may think that doing this will lose the includes, library paths, "
"and RPATHs that Spack's compiler wrapper get you, but we've actually set "
"things up so that the MPI compiler wrappers use Spack's compiler wrappers "
"when run from within Spack. So using the MPI wrappers should really be as "
"simple as the code above."
msgstr ""

# fd4ad87c251c47febe9e9434b1d0fe4b
#: ../spack/lib/spack/docs/packaging_guide.rst:3497
msgid "``spec['mpi']``"
msgstr ""

# 5ea5a5f184e24143b5c359a019438213
#: ../spack/lib/spack/docs/packaging_guide.rst:3499
msgid "Ok, so how does all this work?"
msgstr ""

# a53fdf12641b4a4082c80d2658f37f1b
#: ../spack/lib/spack/docs/packaging_guide.rst:3501
msgid ""
"If your package has a virtual dependency like ``mpi``, then referring to "
"``spec['mpi']`` within ``install()`` will get you the concrete ``mpi`` "
"implementation in your dependency DAG.  That is a spec object just like the "
"one passed to install, only the MPI implementations all set some additional "
"properties on it to help you out.  E.g., in mvapich2, you'll find this:"
msgstr ""

# 344cc928bdc74a0f8d1f5381e33dfcb5
#: ../spack/lib/spack/docs/packaging_guide.rst:3511
msgid ""
"That code allows the mvapich2 package to associate an ``mpicc`` property "
"with the ``mvapich2`` node in the DAG, so that dependents can access it. "
"``openmpi`` and ``mpich`` do similar things.  So, no matter what MPI you're "
"using, spec['mpi'].mpicc gets you the location of the MPI compilers. This "
"allows us to have a fairly simple polymorphic interface for information "
"about virtual dependencies like MPI."
msgstr ""

# 80287338b8624e3eb689c9400d76609f
#: ../spack/lib/spack/docs/packaging_guide.rst:3520
msgid "Wrapping wrappers"
msgstr ""

# 5463233fe1c543888a6adc02a587be60
#: ../spack/lib/spack/docs/packaging_guide.rst:3522
msgid ""
"Spack likes to use its own compiler wrappers to make it easy to add "
"``RPATHs`` to builds, and to try hard to ensure that your builds use the "
"right dependencies.  This doesn't play nicely by default with MPI, so we "
"have to do a couple tricks."
msgstr ""

# 4ee3e1a0f4414ef6baf103e048bc3e99
#: ../spack/lib/spack/docs/packaging_guide.rst:3527
msgid ""
"If we build MPI with Spack's wrappers, mpicc and friends will be installed "
"with hard-coded paths to Spack's wrappers, and using them from outside of "
"Spack will fail because they only work within Spack. To fix this, we patch "
"mpicc and friends to use the regular compilers.  Look at the "
"filter_compilers method in mpich, openmpi, or mvapich2 for details."
msgstr ""

# 7e11b5a2013a49c6bf002f40c8f9f1cc
#: ../spack/lib/spack/docs/packaging_guide.rst:3534
msgid ""
"We still want to use the Spack compiler wrappers when Spack is calling "
"mpicc. Luckily, wrappers in all mainstream MPI implementations provide "
"environment variables that allow us to dynamically set the compiler to be "
"used by mpicc, mpicxx, etc. Denis pasted some code from this below – Spack's "
"build environment sets ``MPICC``, ``MPICXX``, etc. for mpich derivatives and "
"``OMPI_CC``, ``OMPI_CXX``, etc. for OpenMPI. This makes the MPI compiler "
"wrappers use the Spack compiler wrappers so that your dependencies still get "
"proper RPATHs even if you use the MPI wrappers."
msgstr ""

# cdbedcd935764586a549c98e6a8d1f11
#: ../spack/lib/spack/docs/packaging_guide.rst:3547
msgid "MPI on Cray machines"
msgstr ""

# b6bb8cf0936f463993fe30718eae6c53
#: ../spack/lib/spack/docs/packaging_guide.rst:3549
msgid ""
"The Cray programming environment notably uses ITS OWN compiler wrappers, "
"which function like MPI wrappers.  On Cray systems, the ``CC``, ``cc``, and "
"``ftn`` wrappers ARE the MPI compiler wrappers, and it's assumed that you'll "
"use them for all of your builds.  So on Cray we don't bother with ``mpicc``, "
"``mpicxx``, etc, Spack MPI implementations set ``spec['mpi'].mpicc`` to "
"point to Spack's wrappers, which wrap the Cray wrappers, which wrap the "
"regular compilers and include MPI flags.  That may seem complicated, but for "
"packagers, that means the same code for using MPI wrappers will work, even "
"on even on a Cray:"
msgstr ""

# a6a9a0df4cca45dba74ccfb2e565d705
#: ../spack/lib/spack/docs/packaging_guide.rst:3563
msgid "This is because on Cray, ``spec['mpi'].mpicc`` is just ``spack_cc``."
msgstr ""

# cb4e6f8b82e14df698fc6b7eaa382daf
#: ../spack/lib/spack/docs/packaging_guide.rst:3569
msgid "Checking an installation"
msgstr ""

# dc4f3cd9ac4948ca944b2bda9c48e781
#: ../spack/lib/spack/docs/packaging_guide.rst:3571
msgid ""
"By default, Spack assumes that a build has failed if nothing is written to "
"the install prefix, and that it has succeeded if anything (a file, a "
"directory, etc.)  is written to the install prefix after ``install()`` "
"completes."
msgstr ""

# bf07c8d170f745a8849e00bc51f06d99
#: ../spack/lib/spack/docs/packaging_guide.rst:3576
msgid "Consider a simple autotools build like this:"
msgstr ""

# e8c341bcf91e4b2db2453354679b252f
#: ../spack/lib/spack/docs/packaging_guide.rst:3585
msgid ""
"If you are using using standard autotools or CMake, ``configure`` and "
"``make`` will not write anything to the install prefix.  Only ``make "
"install`` writes the files, and only once the build is already complete."
msgstr ""

# 97a206a8f86847a4b7cdd7083aa47137
#: ../spack/lib/spack/docs/packaging_guide.rst:3592
msgid "``sanity_check_is_file`` and ``sanity_check_is_dir``"
msgstr ""

# 7a460512ff3e4e38bfe50cf9edb15644
#: ../spack/lib/spack/docs/packaging_guide.rst:3594
msgid ""
"Unfortunately, many builds of scientific software modify the install prefix "
"*before* ``make install``. Builds like this can falsely report that they "
"were successfully installed if an error occurs before the install is "
"complete but after files have been written to the ``prefix``."
msgstr ""

# 75cce255f9ce4145ae7b5122c8624d98
#: ../spack/lib/spack/docs/packaging_guide.rst:3600
msgid ""
"You can optionally specify *sanity checks* to deal with this problem. Add "
"properties like this to your package:"
msgstr ""

# 539d418414b44379a215300f4584512f
#: ../spack/lib/spack/docs/packaging_guide.rst:3616
msgid ""
"Now, after ``install()`` runs, Spack will check whether ``$prefix/include/"
"libelf.h`` exists and is a file, and whether ``$prefix/lib`` exists and is a "
"directory.  If the checks fail, then the build will fail and the install "
"prefix will be removed.  If they succeed, Spack considers the build "
"successful and keeps the prefix in place."
msgstr ""

# 8eed8c4e2ead4083be345ca735b118a8
#: ../spack/lib/spack/docs/packaging_guide.rst:3625
msgid "Build-time tests"
msgstr ""

# 2c87d970dc484f58b1fb275de0e9d1b3
#: ../spack/lib/spack/docs/packaging_guide.rst:3627
msgid ""
"Sometimes packages finish to build \"correctly\" and issues with their run-"
"time behavior are discovered only at a later stage, maybe after a full "
"software stack relying on them has already been built. To avoid situations "
"of that kind it's possible to write build-time tests that will be executed "
"only if the option ``--run-tests`` of ``spack install`` has been activated."
msgstr ""

# a3a75319b0e4475a86ec090fa35bc358
#: ../spack/lib/spack/docs/packaging_guide.rst:3633
msgid ""
"The proper way to write these tests is relying on two decorators that come "
"with any base class listed in :ref:`installation_procedure`."
msgstr ""

# f2c8a0e388644c8487802e625cceece4
#: ../spack/lib/spack/docs/packaging_guide.rst:3644
msgid ""
"The first decorator ``run_after('build')`` schedules this function to be "
"invoked after the ``build`` phase has been executed, while the second one "
"makes the invocation  conditional on the fact that ``self.run_tests == "
"True``. It is also possible to schedule a function to be invoked *before* a "
"given phase using the ``run_before`` decorator."
msgstr ""

# 3a1f797f62924b208b13351934f77a5c
#: ../spack/lib/spack/docs/packaging_guide.rst:3652
msgid "Default implementations for build-time tests"
msgstr ""

# 4453b3c2c117403ba1f648337c30db64
#: ../spack/lib/spack/docs/packaging_guide.rst:3654
msgid ""
"Packages that are built using specific build systems may already have a "
"default implementation for build-time tests. For instance :py:class:`~."
"AutotoolsPackage` based packages will try to invoke ``make test`` and ``make "
"check`` if Spack is asked to run tests. More information on each class is "
"available in the the :py:mod:`~.spack.build_systems` documentation."
msgstr ""

# 529e218926ac44a2a89a595db22593b0
#: ../spack/lib/spack/docs/packaging_guide.rst:3663
msgid ""
"The API for adding tests is not yet considered stable and may change "
"drastically in future releases."
msgstr ""

# b8d15757f34c4ebda7611ee231dc2f94
#: ../spack/lib/spack/docs/packaging_guide.rst:3669
msgid "File manipulation functions"
msgstr ""

# 9caf9266b1bf459997fbe22573aa552f
#: ../spack/lib/spack/docs/packaging_guide.rst:3671
msgid ""
"Many builds are not perfect. If a build lacks an install target, or if it "
"does not use systems like CMake or autotools, which have standard ways of "
"setting compilers and options, you may need to edit files or install some "
"files yourself to get them working with Spack."
msgstr ""

# 0d2a2f8e62784d638a4e7a0566434896
#: ../spack/lib/spack/docs/packaging_guide.rst:3676
msgid ""
"You can do this with standard Python code, and Python has rich libraries "
"with functions for file manipulation and filtering.  Spack also provides a "
"number of convenience functions of its own to make your life even easier.  "
"These functions are described in this section."
msgstr ""

# 8a626bd397fc4ad99ce18b4a6e0d4f49
#: ../spack/lib/spack/docs/packaging_guide.rst:3681
msgid "All of the functions in this section can be included by simply running:"
msgstr ""

# 04f394cb300240229e1cf83055cd5a60
#: ../spack/lib/spack/docs/packaging_guide.rst:3688
msgid ""
"This is already part of the boilerplate for packages created with ``spack "
"create``."
msgstr ""

# 3d8383d59845446e8223b66027c57a07
#: ../spack/lib/spack/docs/packaging_guide.rst:3693
msgid "Filtering functions"
msgstr ""

# 5424b810110a4d62a26010254c60b0f8
#: ../spack/lib/spack/docs/packaging_guide.rst:3731
msgid ""
":py:func:`filter_file(regex, repl, *filenames, **kwargs) <spack.filter_file>`"
msgstr ""

# b9c0a8a7d8544d9885c90602364a9b41
#: ../spack/lib/spack/docs/packaging_guide.rst:3696
msgid ""
"Works like ``sed`` but with Python regular expression syntax.  Takes a "
"regular expression, a replacement, and a set of files.  ``repl`` can be a "
"raw string or a callable function.  If it is a raw string, it can contain ``"
"\\1``, ``\\2``, etc. to refer to capture groups in the regular expression.  "
"If it is a callable, it is passed the Python ``MatchObject`` and should "
"return a suitable replacement string for the particular match."
msgstr ""

# f0cfdf50d47b4729bc35392b49a7ed06
#: ../spack/lib/spack/docs/packaging_guide.rst:3704
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_package:10
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_package:10
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: spack.util.environment.inspect_path:16
msgid "Examples:"
msgstr ""

# 9e8f87796b5b421da1e08e1b2a2bccc1
#: ../spack/lib/spack/docs/packaging_guide.rst:3706
msgid "Filtering a Makefile to force it to use Spack's compiler wrappers:"
msgstr ""

# 7826107190194000a4fed2b6ba2fc30e
#: ../spack/lib/spack/docs/packaging_guide.rst:3715
msgid ""
"Replacing ``#!/usr/bin/perl`` with ``#!/usr/bin/env perl`` in ``bib2xhtml``:"
msgstr ""

# 8738ceff78c8415484a2f546b3305cd2
#: ../spack/lib/spack/docs/packaging_guide.rst:3722
msgid ""
"Switching the compilers used by ``mpich``'s MPI wrapper scripts from ``cc``, "
"etc. to the compilers used by the Spack build:"
msgstr ""

# 23a7d77aaf07447ebe50953718687452
#: ../spack/lib/spack/docs/packaging_guide.rst:3749
msgid ""
":py:func:`change_sed_delimiter(old_delim, new_delim, *filenames) <spack."
"change_sed_delim>`"
msgstr ""

# 7242c7f1d3c949318dab942f03a5dc86
#: ../spack/lib/spack/docs/packaging_guide.rst:3734
msgid ""
"Some packages, like TAU, have a build system that can't install into "
"directories with, e.g. '@' in the name, because they use hard-coded ``sed`` "
"commands in their build."
msgstr ""

# 34861104b4dc4a47b35f92e54ecbc9a2
#: ../spack/lib/spack/docs/packaging_guide.rst:3738
msgid ""
"``change_sed_delimiter`` finds all ``sed`` search/replace commands and "
"change the delimiter.  e.g., if the file contains commands that look like "
"``s///``, you can use this to change them to ``s@@@``."
msgstr ""

# d972d7addcca41f28fbe43b9329c0f6b
#: ../spack/lib/spack/docs/packaging_guide.rst:3743
msgid "Example of changing ``s///`` to ``s@@@`` in TAU:"
msgstr ""

# d0f61bb19fd34ec68388e1fda394cdec
#: ../spack/lib/spack/docs/packaging_guide.rst:3753
msgid "File functions"
msgstr ""

# 9d528f1986b647c19b67570de628941e
#: ../spack/lib/spack/docs/packaging_guide.rst:3756
msgid ":py:func:`ancestor(dir, n=1) <spack.ancestor>`"
msgstr ""

# 4f5e1a5e08fc4a508f59ec193b486354
#: ../spack/lib/spack/docs/packaging_guide.rst:3756
msgid "Get the n\\ :sup:`th` ancestor of the directory ``dir``."
msgstr ""

# 2e86dd1800f34c198bdc48f61725d1d5
#: ../spack/lib/spack/docs/packaging_guide.rst:3760
msgid ":py:func:`can_access(path) <spack.can_access>`"
msgstr ""

# ca0ed3ca5b3d411e8f0b2fbdc557ff73
#: ../spack/lib/spack/docs/packaging_guide.rst:3759
msgid ""
"True if we can read and write to the file at ``path``.  Same as native "
"python ``os.access(file_name, os.R_OK|os.W_OK)``."
msgstr ""

# 5abffe9cdfe642798105e8fd1afc1d88
#: ../spack/lib/spack/docs/packaging_guide.rst:3768
msgid ":py:func:`install(src, dest) <spack.install>`"
msgstr ""

# dc6ef2ebfbb8406b939780ec2e87d7c7
#: ../spack/lib/spack/docs/packaging_guide.rst:3763
msgid ""
"Install a file to a particular location.  For example, install a header into "
"the ``include`` directory under the install ``prefix``:"
msgstr ""

# 9be5eb807b4b4fcfabafcca5c28e1001
#: ../spack/lib/spack/docs/packaging_guide.rst:3771
msgid ":py:func:`join_path(*paths) <spack.join_path>`"
msgstr ""

# 80452a61fa274f20856952387385a2c4
#: ../spack/lib/spack/docs/packaging_guide.rst:3771
msgid ""
"An alias for ``os.path.join``. This joins paths using the OS path separator."
msgstr ""

# 68e7543cc439407d854bbab736a14f04
#: ../spack/lib/spack/docs/packaging_guide.rst:3775
msgid ":py:func:`mkdirp(*paths) <spack.mkdirp>`"
msgstr ""

# eb4eb09f6c654f0ea9b7f5b46f81b6ce
#: ../spack/lib/spack/docs/packaging_guide.rst:3774
msgid ""
"Create each of the directories in ``paths``, creating any parent directories "
"if they do not exist."
msgstr ""

# 03ccded78f8c45e68693279fa66a81f8
#: ../spack/lib/spack/docs/packaging_guide.rst:3817
msgid ":py:func:`working_dir(dirname, kwargs) <spack.working_dir>`"
msgstr ""

# aea46dfeaa3f4f2e8aa1ec1f51c35774
#: ../spack/lib/spack/docs/packaging_guide.rst:3778
msgid ""
"This is a Python `Context Manager <https://docs.python.org/2/library/"
"contextlib.html>`_ that makes it easier to work with subdirectories in "
"builds.  You use this with the Python ``with`` statement to change into a "
"working directory, and when the with block is done, you change back to the "
"original directory.  Think of it as a safe ``pushd`` / ``popd`` combination, "
"where ``popd`` is guaranteed to be called at the end, even if exceptions are "
"thrown."
msgstr ""

# b4997b336fb149e887ec25ccc1a8a3c8
#: ../spack/lib/spack/docs/packaging_guide.rst:3787
msgid "Example usage:"
msgstr ""

# 9f51fa42ea984291bba132cad88ddf7d
#: ../spack/lib/spack/docs/packaging_guide.rst:3789
msgid ""
"The ``libdwarf`` build first runs ``configure`` and ``make`` in a "
"subdirectory called ``libdwarf``.  It then implements the installation code "
"itself.  This is natural with ``working_dir``:"
msgstr ""

# 19d93608600a4b2ca903f2f76fff433e
#: ../spack/lib/spack/docs/packaging_guide.rst:3800
msgid ""
"Many CMake builds require that you build \"out of source\", that is, in a "
"subdirectory.  You can handle creating and ``cd``'ing to the subdirectory "
"like the LLVM package does:"
msgstr ""

# 7f0f5652d4f142e8a505b65abdd67312
#: ../spack/lib/spack/docs/packaging_guide.rst:3816
msgid ""
"The ``create=True`` keyword argument causes the command to create the "
"directory if it does not exist."
msgstr ""

# 849628b07bbc4742a422ce9a5b012abe
#: ../spack/lib/spack/docs/packaging_guide.rst:3820
msgid ":py:func:`touch(path) <spack.touch>`"
msgstr ""

# b4b26f5a3c654c3c84c10577a0d32fe1
#: ../spack/lib/spack/docs/packaging_guide.rst:3820
msgid "Create an empty file at ``path``."
msgstr ""

# b1a736119fa24be696acacfc3b92d6df
#: ../spack/lib/spack/docs/packaging_guide.rst:3826
msgid "Style guidelines for packages"
msgstr ""

# a1a1160e344a44b9b559b0012ad98b35
#: ../spack/lib/spack/docs/packaging_guide.rst:3828
msgid ""
"The following guidelines are provided, in the interests of making Spack "
"packages work in a consistent manner:"
msgstr ""

# ee6886cab4384b13bceaec93fe35b7ae
#: ../spack/lib/spack/docs/packaging_guide.rst:3833
msgid "Variant Names"
msgstr ""

# 5a778edb877c4c8ba03072994c660148
#: ../spack/lib/spack/docs/packaging_guide.rst:3835
msgid ""
"Spack packages with variants similar to already-existing Spack packages "
"should use the same name for their variants.  Standard variant names are:"
msgstr ""

# 7adc93c910144589bc04120895a3f963
#: ../spack/lib/spack/docs/packaging_guide.rst:3840
msgid "Name"
msgstr ""

# b28f775877654486a07b3fc511223eba
#: ../spack/lib/spack/docs/packaging_guide.rst:3840
msgid "Default"
msgstr ""

# 6276d4dc29c645a9b704fb91fa85a6ba
#: ../spack/lib/spack/docs/packaging_guide.rst:3842
msgid "shared"
msgstr ""

# 32fab2bfb0a044feac2105fa46ae7531
# ae26bba9e4744a58acbe56294af330db
# 4183e2a191e246eb864a4c70fa2bf1e8
#: ../spack/lib/spack/docs/packaging_guide.rst:3842
#: ../spack/lib/spack/docs/packaging_guide.rst:3843
#: ../spack/lib/spack/docs/packaging_guide.rst:3844
msgid "True"
msgstr ""

# 7425b53c33ea458592f464362524f0e3
#: ../spack/lib/spack/docs/packaging_guide.rst:3842
msgid "Build shared libraries"
msgstr ""

# b00d7a5b4ca845f4b38806e5945db240
#: ../spack/lib/spack/docs/packaging_guide.rst:3843
msgid "static"
msgstr ""

# 0ee503bd1fb04455ba65bd8811fa119b
#: ../spack/lib/spack/docs/packaging_guide.rst:3843
msgid "Build static libraries"
msgstr ""

# 356f7a71bf714b52adc5a849a29d2adf
#: ../spack/lib/spack/docs/packaging_guide.rst:3844
msgid "mpi"
msgstr ""

# 17a43a4f773543ef8659355ba021c516
#: ../spack/lib/spack/docs/packaging_guide.rst:3844
msgid "Use MPI"
msgstr ""

# 67747a084f0a47529d2c42d1efcc977c
#: ../spack/lib/spack/docs/packaging_guide.rst:3845
msgid "python"
msgstr ""

# 11ef0f7f58ea4052bad3f885c1ae1724
#: ../spack/lib/spack/docs/packaging_guide.rst:3845
msgid "False"
msgstr ""

# ad38f03c620d4ef8b8576563b2d48edd
#: ../spack/lib/spack/docs/packaging_guide.rst:3845
msgid "Build Python extension"
msgstr ""

# e045d1f82c2a4aa2a5ae1d6af426ca22
#: ../spack/lib/spack/docs/packaging_guide.rst:3848
msgid ""
"If specified in this table, the corresponding default should be used when "
"declaring a variant."
msgstr ""

# e7578fe507c541969285828f41634769
#: ../spack/lib/spack/docs/packaging_guide.rst:3853
msgid "Version Lists"
msgstr ""

# 8725448f31af4b0ca892d9ad9cc1ef32
#: ../spack/lib/spack/docs/packaging_guide.rst:3855
msgid "Spack packages should list supported versions with the newest first."
msgstr ""

# 4630879db8e14e76bef8e4c30b246d4d
#: ../spack/lib/spack/docs/packaging_guide.rst:3859
msgid "Packaging workflow commands"
msgstr ""

# 25a95e0c8303488c98f27f93e4a01e37
#: ../spack/lib/spack/docs/packaging_guide.rst:3861
msgid ""
"When you are building packages, you will likely not get things completely "
"right the first time."
msgstr ""

# c3ac5a1e6d1342f7a87f633ac8603123
#: ../spack/lib/spack/docs/packaging_guide.rst:3864
msgid ""
"The ``spack install`` command performs a number of tasks before it finally "
"installs each package.  It downloads an archive, expands it in a temporary "
"directory, and only then gives control to the package's ``install()`` "
"method.  If the build doesn't go as planned, you may want to clean up the "
"temporary directory, or if the package isn't downloading properly, you might "
"want to run *only* the ``fetch`` stage of the build."
msgstr ""

# 725a9ee1fb934c5b97985489e6b48463
#: ../spack/lib/spack/docs/packaging_guide.rst:3872
msgid "A typical package workflow might look like this:"
msgstr ""

# 1b6ac8d06b494deca0860c2895d9867b
#: ../spack/lib/spack/docs/packaging_guide.rst:3884
msgid ""
"Below are some commands that will allow you some finer-grained control over "
"the install process."
msgstr ""

# 5422bb1989564f5ba4291a2c5f51efa8
#: ../spack/lib/spack/docs/packaging_guide.rst:3891
msgid "``spack fetch``"
msgstr ""

# 55dad5dba43b494b9aeda126eb32f4ee
#: ../spack/lib/spack/docs/packaging_guide.rst:3893
msgid ""
"The first step of ``spack install``.  Takes a spec and determines the "
"correct download URL to use for the requested package version, then "
"downloads the archive, checks it against an MD5 checksum, and stores it in a "
"staging directory if the check was successful.  The staging directory will "
"be located under ``$SPACK_HOME/var/spack``."
msgstr ""

# 001ff0a423104e489304aebc0f49daa2
#: ../spack/lib/spack/docs/packaging_guide.rst:3899
msgid ""
"When run after the archive has already been downloaded, ``spack fetch`` is "
"idempotent and will not download the archive again."
msgstr ""

# fa84ba9515fd4589ae758fff259d3839
#: ../spack/lib/spack/docs/packaging_guide.rst:3906
msgid "``spack stage``"
msgstr ""

# 813f9b674a404a3c8c4c9899070259d8
#: ../spack/lib/spack/docs/packaging_guide.rst:3908
msgid ""
"The second step in ``spack install`` after ``spack fetch``.  Expands the "
"downloaded archive in its temporary directory, where it will be built by "
"``spack install``.  Similar to ``fetch``, if the archive has already been "
"expanded,  ``stage`` is idempotent."
msgstr ""

# 272468ec9dd74f27af18a097461c933d
#: ../spack/lib/spack/docs/packaging_guide.rst:3917
msgid "``spack patch``"
msgstr ""

# 3e0948e67ee642a69f65bd545f2c5c32
#: ../spack/lib/spack/docs/packaging_guide.rst:3919
msgid ""
"After staging, Spack applies patches to downloaded packages, if any have "
"been specified in the package file.  This command will run the install "
"process through the fetch, stage, and patch phases.  Spack keeps track of "
"whether patches have already been applied and skips this step if they have "
"been.  If Spack discovers that patches didn't apply cleanly on some previous "
"run, then it will restage the entire package before patching."
msgstr ""

# 0377a3a45fc04ec6bc624a2c5194ca1b
#: ../spack/lib/spack/docs/packaging_guide.rst:3931
msgid "``spack restage``"
msgstr ""

# 5b0ae7d4a763499daf5a3ebcf3ec766c
#: ../spack/lib/spack/docs/packaging_guide.rst:3933
msgid "Restores the source code to pristine state, as it was before building."
msgstr ""

# 7c79d88295a1489a8a32b68037a18b20
#: ../spack/lib/spack/docs/packaging_guide.rst:3935
msgid "Does this in one of two ways:"
msgstr ""

# 25f4224f7a264be992cd7616e27e8eb6
#: ../spack/lib/spack/docs/packaging_guide.rst:3937
msgid ""
"If the source was fetched as a tarball, deletes the entire build directory "
"and re-expands the tarball."
msgstr ""

# 0bebb2811a2d42be9847791a2f8841a7
#: ../spack/lib/spack/docs/packaging_guide.rst:3940
msgid ""
"If the source was checked out from a repository, this deletes the build "
"directory and checks it out again."
msgstr ""

# 8aeb6e1aa7304184af80db18aa9aabd6
#: ../spack/lib/spack/docs/packaging_guide.rst:3947
msgid "``spack clean``"
msgstr ""

# b2083bc2a11f42a0acaa48beb3d9e726
#: ../spack/lib/spack/docs/packaging_guide.rst:3949
msgid ""
"Cleans up all of Spack's temporary and cached files.  This can be used to "
"recover disk space if temporary files from interrupted or failed installs "
"accumulate in the staging area."
msgstr ""

# 05b2db4e5e7e439da3743cf4b70f17f5
#: ../spack/lib/spack/docs/packaging_guide.rst:3953
msgid ""
"When called with ``--stage`` or without arguments this removes all staged "
"files."
msgstr ""

# 2458d814e83e495a906c5c8037b0df69
#: ../spack/lib/spack/docs/packaging_guide.rst:3956
msgid ""
"When called with ``--downloads`` this will clear all resources :ref:`cached "
"<caching>` during installs."
msgstr ""

# e666225f2c094de0b35bd76b063f8e92
#: ../spack/lib/spack/docs/packaging_guide.rst:3959
msgid ""
"When called with ``--user-cache`` this will remove caches in the user home "
"directory, including cached virtual indices."
msgstr ""

# acd12df7fc454c68b3b4bc9026ada807
#: ../spack/lib/spack/docs/packaging_guide.rst:3962
msgid "To remove all of the above, the command can be called with ``--all``."
msgstr ""

# e8fe1de835fa4939b2c844b9992fb319
#: ../spack/lib/spack/docs/packaging_guide.rst:3964
msgid ""
"When called with positional arguments, cleans up temporary files only for a "
"particular package. If ``fetch``, ``stage``, or ``install`` are run again "
"after this, Spack's build process will start from scratch."
msgstr ""

# e6f471f9957a4b579ebf329e889e9bb7
#: ../spack/lib/spack/docs/packaging_guide.rst:3971
msgid "Keeping the stage directory on success"
msgstr ""

# 34a674ef9ae641a6932f60873e236730
#: ../spack/lib/spack/docs/packaging_guide.rst:3973
msgid ""
"By default, ``spack install`` will delete the staging area once a package "
"has been successfully built and installed.  Use ``--keep-stage`` to leave "
"the build directory intact:"
msgstr ""

# b3e6ffc9927b45fa923a28735d3e685c
#: ../spack/lib/spack/docs/packaging_guide.rst:3981
msgid ""
"This allows you to inspect the build directory and potentially debug the "
"build.  You can use ``clean`` later to get rid of the unwanted temporary "
"files."
msgstr ""

# 050aec4efd6d411a8ac216bb1355e404
#: ../spack/lib/spack/docs/packaging_guide.rst:3987
msgid "Keeping the install prefix on failure"
msgstr ""

# 18ca885572c444a1bdb3f1a2e9309fff
#: ../spack/lib/spack/docs/packaging_guide.rst:3989
msgid ""
"By default, ``spack install`` will delete any partially constructed install "
"prefix if anything fails during ``install()``.  If you want to keep the "
"prefix anyway (e.g. to diagnose a bug), you can use ``--keep-prefix``:"
msgstr ""

# 32ca1164c8824766984564ee271781ad
#: ../spack/lib/spack/docs/packaging_guide.rst:3998
msgid ""
"Note that this may confuse Spack into thinking that the package has been "
"installed properly, so you may need to use ``spack uninstall --force`` to "
"get rid of the install prefix before you build again:"
msgstr ""

# fa4592c8195f4e9ea878b96d0f19d50b
#: ../spack/lib/spack/docs/packaging_guide.rst:4008
msgid "Graphing dependencies"
msgstr ""

# 4874e678a1c3484aa3075e14b435b6ef
#: ../spack/lib/spack/docs/packaging_guide.rst:4014
msgid "``spack graph``"
msgstr ""

# e1d9ac8021c64dedbb6113275516f9c6
#: ../spack/lib/spack/docs/packaging_guide.rst:4016
msgid ""
"Spack provides the ``spack graph`` command for graphing dependencies. The "
"command by default generates an ASCII rendering of a spec's dependency "
"graph.  For example:"
msgstr ""

# 5f2ae9a8579b43768017261853d3aef0
#: ../spack/lib/spack/docs/packaging_guide.rst:4022
msgid ""
"At the top is the root package in the DAG, with dependency edges emerging "
"from it.  On a color terminal, the edges are colored by which dependency "
"they lead to."
msgstr ""

# b77715368f1a47b3bb4bb1db7e2ffdc8
#: ../spack/lib/spack/docs/packaging_guide.rst:4028
msgid ""
"The ``deptype`` argument tells Spack what types of dependencies to graph. By "
"default it includes link and run dependencies but not build dependencies.  "
"Supplying ``--deptype=link`` will show only link dependencies.  The default "
"is ``--deptype=all``, which is equivalent to ``--deptype=build,link,run,"
"test``.  Options for ``deptype`` include:"
msgstr ""

# b75414e05bf34da6b679f344999828c8
#: ../spack/lib/spack/docs/packaging_guide.rst:4034
msgid ""
"Any combination of ``build``, ``link``, ``run``, and ``test`` separated by "
"commas."
msgstr ""

# 49157ea6043e43b1bb85d958300fa7b8
#: ../spack/lib/spack/docs/packaging_guide.rst:4036
msgid "``all`` for all types of dependencies."
msgstr ""

# 9724e465c32e4831a6de0d2ea8e4964d
#: ../spack/lib/spack/docs/packaging_guide.rst:4038
msgid ""
"You can also use ``spack graph`` to generate graphs in the widely used `Dot "
"<http://www.graphviz.org/doc/info/lang.html>`_ format.  For example:"
msgstr ""

# 39bbce939c0d4ff9bfd96e5f3135d0f7
#: ../spack/lib/spack/docs/packaging_guide.rst:4043
msgid ""
"This graph can be provided as input to other graphing tools, such as those "
"in `Graphviz <http://www.graphviz.org>`_.  If you have graphviz installed, "
"you can write straight to PDF like this:"
msgstr ""

# f2435e5903c945138912cd0247a7e2fc
#: ../spack/lib/spack/docs/packaging_guide.rst:4055
msgid "Interactive shell support"
msgstr ""

# 7b8ff69165d84192b41e87eaeb873142
#: ../spack/lib/spack/docs/packaging_guide.rst:4057
msgid ""
"Spack provides some limited shell support to make life easier for "
"packagers.  You can enable these commands by sourcing a setup file in the "
"``share/spack`` directory.  For ``bash`` or ``ksh``, run:"
msgstr ""

# dfa8b4a99a7346cfb4598fcadef3ed5f
#: ../spack/lib/spack/docs/packaging_guide.rst:4066
msgid "For ``csh`` and ``tcsh`` run:"
msgstr ""

# 1832b93fc03a4b4aaa66828d4e8cca72
#: ../spack/lib/spack/docs/packaging_guide.rst:4073
msgid "``spack cd`` will then be available."
msgstr ""

# ef8fe26c09f449b4ae1dee3ad166f895
#: ../spack/lib/spack/docs/packaging_guide.rst:4079
msgid "``spack cd``"
msgstr ""

# 42b277c1845448888fba22d408851560
#: ../spack/lib/spack/docs/packaging_guide.rst:4081
msgid ""
"``spack cd`` allows you to quickly cd to pertinent directories in Spack. "
"Suppose you've staged a package but you want to modify it before you build "
"it:"
msgstr ""

# 15f6887899d648c8957513e0343a129f
#: ../spack/lib/spack/docs/packaging_guide.rst:4096
msgid ""
"``spack cd`` here changed the current working directory to the directory "
"containing the expanded ``libelf`` source code.  There are a number of other "
"places you can cd to in the spack directory hierarchy:"
msgstr ""

# 65242e13c2a043b9a6c91e26cfa84ddf
#: ../spack/lib/spack/docs/packaging_guide.rst:4102
msgid ""
"Some of these change directory into package-specific locations (stage "
"directory, install directory, package directory) and others change to core "
"spack locations.  For example, ``spack cd --module-dir`` will take you to "
"the main python source directory of your spack install."
msgstr ""

# 9e9f0955bd96401f92432d93fb7501a7
#: ../spack/lib/spack/docs/packaging_guide.rst:4111
msgid "``spack env``"
msgstr ""

# 93ce8967163641f0bd43e679e13dc23d
#: ../spack/lib/spack/docs/packaging_guide.rst:4113
msgid ""
"``spack env`` functions much like the standard unix ``env`` command, but it "
"takes a spec as an argument.  You can use it to see the environment "
"variables that will be set when a particular build runs, for example:"
msgstr ""

# 09ac8f4c55a44e74b7ee3fef20803726
#: ../spack/lib/spack/docs/packaging_guide.rst:4122
msgid ""
"This will display the entire environment that will be set when the "
"``mpileaks@1.1%intel`` build runs."
msgstr ""

# 7943193638494fa6af3be4912b044a94
#: ../spack/lib/spack/docs/packaging_guide.rst:4125
msgid ""
"To run commands in a package's build environment, you can simply provide "
"them after the spec argument to ``spack env``:"
msgstr ""

# 296b2810d35b468f9c3c50f16b0307e2
#: ../spack/lib/spack/docs/packaging_guide.rst:4133
msgid ""
"This will cd to the build directory and then run ``configure`` in the "
"package's build environment."
msgstr ""

# 4310b3a360a742a8bf4a7ad421b713b7
#: ../spack/lib/spack/docs/packaging_guide.rst:4140
msgid "``spack location``"
msgstr ""

# 9f387b7e49c042e29ca90508c4b22c80
#: ../spack/lib/spack/docs/packaging_guide.rst:4142
msgid ""
"``spack location`` is the same as ``spack cd`` but it does not require shell "
"support.  It simply prints out the path you ask for, rather than cd'ing to "
"it.  In bash, this:"
msgstr ""

# 093e16ab18e149048550f52031015d9b
#: ../spack/lib/spack/docs/packaging_guide.rst:4150
msgid "is the same as:"
msgstr ""

# b844a8cba586446bbd805e2fc2a02528
#: ../spack/lib/spack/docs/packaging_guide.rst:4156
msgid ""
"``spack location`` is intended for use in scripts or makefiles that need to "
"know where packages are installed.  e.g., in a makefile you might write:"
msgstr ""

# b5da90f4fa954dc681ca22296f1f4dd4
#: ../spack/lib/spack/docs/packaging_guide.rst:4168
msgid "Build System Configuration Support"
msgstr ""

# a2d84c9230eb487aa77524e4886829bf
#: ../spack/lib/spack/docs/packaging_guide.rst:4170
msgid ""
"Imagine a developer creating a CMake or Autotools-based project in a local "
"directory, which depends on libraries A-Z.  Once Spack has installed those "
"dependencies, one would like to run ``cmake`` with appropriate command line "
"and environment so CMake can find them.  The ``spack setup`` command does "
"this conveniently, producing a CMake configuration that is essentially the "
"same as how Spack *would have* configured the project.  This can be "
"demonstrated with a usage example:"
msgstr ""

# 30efb526aa8145fd81e3ebbd0fe5fab8
#: ../spack/lib/spack/docs/packaging_guide.rst:4188
msgid "Notes:"
msgstr ""

# 194a5302831246d183eda00c7df141af
#: ../spack/lib/spack/docs/packaging_guide.rst:4190
msgid ""
"Spack must have ``myproject/package.py`` in its repository for this to work."
msgstr ""

# 35800dfc404e4b41889d3bba59eaaf8b
#: ../spack/lib/spack/docs/packaging_guide.rst:4192
msgid ""
"``spack setup`` produces the executable script ``spconfig.py`` in the local "
"directory, and also creates the module file for the package.  ``spconfig."
"py`` is normally run from the user's out-of-source build directory."
msgstr ""

# 5d2fa120117d4571808043df05afba3f
#: ../spack/lib/spack/docs/packaging_guide.rst:4196
msgid ""
"The version number given to ``spack setup`` is arbitrary, just like ``spack "
"diy``.  ``myproject/package.py`` does not need to have any valid "
"downloadable versions listed (typical when a project is new)."
msgstr ""

# db910b4a1efb4f9fba8b85c3c23e4d06
#: ../spack/lib/spack/docs/packaging_guide.rst:4200
msgid ""
"spconfig.py produces a CMake configuration that *does not* use the Spack "
"wrappers.  Any resulting binaries *will not* use RPATH, unless the user has "
"enabled it.  This is recommended for development purposes, not production."
msgstr ""

# e4ad1535091e4042adff88ba764efc53
#: ../spack/lib/spack/docs/packaging_guide.rst:4204
msgid ""
"``spconfig.py`` is human readable, and can serve as a developer reference of "
"what dependencies are being used."
msgstr ""

# ffbd04a6726149e990c8d98f060a8b48
#: ../spack/lib/spack/docs/packaging_guide.rst:4206
msgid ""
"``make install`` installs the package into the Spack repository, where it "
"may be used by other Spack packages."
msgstr ""

# d1756f6de32f46e5b99f0d42e24908ad
#: ../spack/lib/spack/docs/packaging_guide.rst:4208
msgid ""
"CMake-generated makefiles re-run CMake in some circumstances.  Use of "
"``spconfig.py`` breaks this behavior, requiring the developer to manually re-"
"run ``spconfig.py`` when a ``CMakeLists.txt`` file has changed."
msgstr ""

# ec80c859077f4a648e95b52a373181f3
#: ../spack/lib/spack/docs/packaging_guide.rst:4217
msgid ""
"In order to enable ``spack setup`` functionality, the author of ``myproject/"
"package.py`` must subclass from ``CMakePackage`` instead of the standard "
"``Package`` superclass.  Because CMake is standardized, the packager does "
"not need to tell Spack how to run ``cmake; make; make install``.  Instead "
"the packager only needs to create (optional) methods ``configure_args()`` "
"and ``configure_env()``, which provide the arguments (as a list) and extra "
"environment variables (as a dict) to provide to the ``cmake`` command.  "
"Usually, these will translate variant flags into CMake definitions.  For "
"example:"
msgstr ""

# ed6e259221ff4395ba5b5683229b0a46
#: ../spack/lib/spack/docs/packaging_guide.rst:4239
msgid ""
"If needed, a packager may also override methods defined in ``StagedPackage`` "
"(see below)."
msgstr ""

# adac42e85c0e43719417d7a0225e35a7
#: ../spack/lib/spack/docs/packaging_guide.rst:4244
msgid "StagedPackage"
msgstr ""

# 137677354e764fe3869de4eaa886cc74
#: ../spack/lib/spack/docs/packaging_guide.rst:4246
msgid ""
"``CMakePackage`` is implemented by subclassing the ``StagedPackage`` "
"superclass, which breaks down the standard ``Package.install()`` method into "
"several sub-stages: ``setup``, ``configure``, ``build`` and ``install``.  "
"Details:"
msgstr ""

# 8c43742064ee441d9ff8798c9cf92079
#: ../spack/lib/spack/docs/packaging_guide.rst:4251
msgid ""
"Instead of implementing the standard ``install()`` method, package authors "
"implement the methods for the sub-stages ``install_setup()``, "
"``install_configure()``, ``install_build()``, and ``install_install()``."
msgstr ""

# e97807ae236b4ba39e764f78e5e5a2af
#: ../spack/lib/spack/docs/packaging_guide.rst:4256
msgid ""
"The ``spack install`` command runs the sub-stages ``configure``, ``build`` "
"and ``install`` in order.  (The ``setup`` stage is not run by default; see "
"below)."
msgstr ""

# 33f11b0b98fb4b2683f044e1d9dc6553
#: ../spack/lib/spack/docs/packaging_guide.rst:4259
msgid ""
"The ``spack setup`` command runs the sub-stages ``setup`` and a dummy "
"install (to create the module file)."
msgstr ""

# 750c0938b1b84f1084d39291b8428108
#: ../spack/lib/spack/docs/packaging_guide.rst:4261
msgid ""
"The sub-stage install methods take no arguments (other than ``self``).  The "
"arguments ``spec`` and ``prefix`` to the standard ``install()`` method may "
"be accessed via ``self.spec`` and ``self.prefix``."
msgstr ""

# 8fd2e818d06d47ebb7a4059acf64badb
#: ../spack/lib/spack/docs/packaging_guide.rst:4268
msgid "GNU Autotools"
msgstr ""

# 0e84030b488342148d670f8e1c44b566
#: ../spack/lib/spack/docs/packaging_guide.rst:4270
msgid ""
"The ``setup`` functionality is currently only available for CMake-based "
"packages.  Extending this functionality to GNU Autotools-based packages "
"would be easy (and should be done by a developer who actively uses "
"Autotools).  Packages that use non-standard build systems can gain ``setup`` "
"functionality by subclassing ``StagedPackage`` directly."
msgstr ""

# 6c2adf019c044223abc4bf24a4f51df5
#: ../spack/lib/spack/docs/repositories.rst:10
msgid "Package Repositories"
msgstr "パッケージレポジトリ"

# 7acb5da9e0874a4a991e12e73f6f8476
#: ../spack/lib/spack/docs/repositories.rst:12
msgid ""
"Spack comes with over 1,000 built-in package recipes in ``var/spack/repos/"
"builtin/``.  This is a **package repository** -- a directory that Spack "
"searches when it needs to find a package by name. You may need to maintain "
"packages for restricted, proprietary or experimental software separately "
"from the built-in repository. Spack allows you to configure local "
"repositories using either the ``repos.yaml`` or the ``spack repo`` command."
msgstr ""

# 479bf22ec10f4099bd2b63edcc59fdd9
#: ../spack/lib/spack/docs/repositories.rst:20
msgid "A package repository a directory structured like this::"
msgstr ""

# 59cdbaae67c94773b3ccd8adeef548ee
#: ../spack/lib/spack/docs/repositories.rst:34
msgid ""
"The top-level ``repo.yaml`` file contains configuration metadata for the "
"repository, and the ``packages`` directory contains subdirectories for each "
"package in the repository.  Each package directory contains a ``package.py`` "
"file and any patches or other files needed to build the package."
msgstr ""

# 3130af868aa64bdd812ca14b41d8292a
#: ../spack/lib/spack/docs/repositories.rst:40
msgid "Package repositories allow you to:"
msgstr ""

# 4c1e3cb7def44f09be6565e258d1f0cb
#: ../spack/lib/spack/docs/repositories.rst:42
msgid "Maintain your own packages separately from Spack;"
msgstr ""

# d4ddb2a4eb1d482692be70821273bc6d
#: ../spack/lib/spack/docs/repositories.rst:44
msgid ""
"Share your packages (e.g., by hosting them in a shared file system), without "
"committing them to the built-in Spack package repository; and"
msgstr ""

# 5db452222b2741f183ed8a334c09882a
#: ../spack/lib/spack/docs/repositories.rst:47
msgid "Override built-in Spack packages with your own implementation."
msgstr ""

# 0b60148c2f424461bf8a6ab5aa539ee4
#: ../spack/lib/spack/docs/repositories.rst:49
msgid ""
"Packages in a separate repository can also *depend on* built-in Spack "
"packages.  So, you can leverage existing recipes without re-implementing "
"them in your own repository."
msgstr ""

# d6c9897b3e4741a695b5d7913d0285a0
#: ../spack/lib/spack/docs/repositories.rst:55
msgid "``repos.yaml``"
msgstr ""

# cbcbc3f0d6a24f3eb892eb2b6d71bc08
#: ../spack/lib/spack/docs/repositories.rst:57
msgid ""
"Spack uses the ``repos.yaml`` file in ``~/.spack`` (and :ref:`elsewhere "
"<configuration>`) to find repositories. Note that the ``repos.yaml`` "
"configuration file is distinct from the ``repo.yaml`` file in each "
"repository.  For more on the YAML format, and on how configuration file "
"precedence works in Spack, see :ref:`configuration <configuration>`."
msgstr ""

# 6806e3d861f346a1bb4f8ebfebf360ff
#: ../spack/lib/spack/docs/repositories.rst:63
msgid "The default ``etc/spack/defaults/repos.yaml`` file looks like this:"
msgstr ""

# 8c6fc4965f8b47fc921a0d62ca4a6846
#: ../spack/lib/spack/docs/repositories.rst:70
msgid ""
"The file starts with ``repos:`` and contains a single ordered list of paths "
"to repositories. Each path is on a separate line starting with ``-``.  You "
"can add a repository by inserting another path into the list:"
msgstr ""

# d46ba6872dc646f39342940f214c1266
#: ../spack/lib/spack/docs/repositories.rst:80
msgid ""
"When Spack interprets a spec, e.g., ``mpich`` in ``spack install mpich``, it "
"searches these repositories in order (first to last) to resolve each package "
"name.  In this example, Spack will look for the following packages and use "
"the first valid file:"
msgstr ""

# a366d0959eba4b429ac0a5a93466e37f
#: ../spack/lib/spack/docs/repositories.rst:85
msgid "``/opt/local-repo/packages/mpich/package.py``"
msgstr ""

# fec99f7a6b444b37aea5e1ee7e2806cc
#: ../spack/lib/spack/docs/repositories.rst:86
msgid "``$spack/var/spack/repos/builtin/packages/mpich/package.py``"
msgstr ""

# e5d23c1ab687483080bf42ee303def3b
#: ../spack/lib/spack/docs/repositories.rst:90
msgid ""
"Currently, Spack can only use repositories in the file system. We plan to "
"eventually support URLs in ``repos.yaml``, so that you can easily point to "
"remote package repositories, but that is not yet implemented."
msgstr ""

# 61f771fa666a4cf5829e2840e499e096
#: ../spack/lib/spack/docs/repositories.rst:96
msgid "Namespaces"
msgstr ""

# 79dc8a8186124ac890faf05fda5318b8
#: ../spack/lib/spack/docs/repositories.rst:98
msgid ""
"Every repository in Spack has an associated **namespace** defined in its top-"
"level ``repo.yaml`` file.  If you look at ``var/spack/repos/builtin/repo."
"yaml`` in the built-in repository, you'll see that its namespace is "
"``builtin``:"
msgstr ""

# 0fd09c1be65d41ab96cb66a64dc051b0
#: ../spack/lib/spack/docs/repositories.rst:109
msgid ""
"Spack records the repository namespace of each installed package.  For "
"example, if you install the ``mpich`` package from the ``builtin`` repo, "
"Spack records its fully qualified name as ``builtin.mpich``.  This "
"accomplishes two things:"
msgstr ""

# 55f42dedc920499f874e10f154bb02e8
#: ../spack/lib/spack/docs/repositories.rst:114
msgid ""
"You can have packages with the same name from different namespaces installed "
"at once."
msgstr ""

# e0dc5373b18b4361bedfe00539e34460
#: ../spack/lib/spack/docs/repositories.rst:117
msgid ""
"You can easily determine which repository a package came from after it is "
"installed (more :ref:`below <namespace-example>`)."
msgstr ""

# c25b9cf802854c7fb4dac825ee5ec3ef
#: ../spack/lib/spack/docs/repositories.rst:122
msgid ""
"It may seem redundant for a repository to have both a namespace and a path, "
"but repository *paths* may change over time, or, as mentioned above, a "
"locally hosted repository path may eventually be hosted at some remote URL."
msgstr ""

# e35997cb9c7d41aab0eb8ecf5f2a7c9a
#: ../spack/lib/spack/docs/repositories.rst:127
msgid ""
"Namespaces are designed to allow *package authors* to associate a unique "
"identifier with their packages, so that the package can be identified even "
"if the repository moves. This is why the namespace is determined by the "
"``repo.yaml`` file in the repository rather than the local ``repos.yaml`` "
"configuration: the *repository maintainer* sets the name."
msgstr ""

# d8610ee66fdc4fc49c9cf97d574f01be
#: ../spack/lib/spack/docs/repositories.rst:136
msgid "Uniqueness"
msgstr ""

# 8e00c54e07d94a3d8564d08d9a0b9dc7
#: ../spack/lib/spack/docs/repositories.rst:138
msgid ""
"You should choose a namespace that uniquely identifies your package "
"repository.  For example, if you make a repository for packages written by "
"your organization, you could use your organization's name.  You can also "
"nest namespaces using periods, so you could identify a repository by a sub-"
"organization.  For example, LLNL might use a namespace for its internal "
"repositories like ``llnl``. Packages from the Physical & Life Sciences "
"directorate (PLS) might use the ``llnl.pls`` namespace, and packages created "
"by the Computation directorate might use ``llnl.comp``."
msgstr ""

# 11063d132c264528b65ee4da3762225b
#: ../spack/lib/spack/docs/repositories.rst:147
msgid ""
"Spack cannot ensure that every repository is named uniquely, but it will "
"prevent you from registering two repositories with the same namespace at the "
"same time.  If you try to add a repository that has the same name as an "
"existing one, e.g., ``builtin``, Spack will print a warning message."
msgstr ""

# dbe859a7979b4540af6efec4a6185f16
#: ../spack/lib/spack/docs/repositories.rst:156
msgid "Namespace example"
msgstr ""

# 6f8b1e16a72c40b1af23558e13a4cb53
#: ../spack/lib/spack/docs/repositories.rst:158
msgid ""
"Suppose that LLNL maintains its own version of ``mpich``, separate from "
"Spack's built-in ``mpich`` package, and suppose you've installed both LLNL's "
"and Spack's ``mpich`` packages.  If you just use ``spack find``, you won't "
"see a difference between these two packages:"
msgstr ""

# 7386e299138d4a53bcd4546e9ed4430c
#: ../spack/lib/spack/docs/repositories.rst:170
msgid ""
"However, if you use ``spack find -N``, Spack will display the packages with "
"their namespaces:"
msgstr ""

# a3c2ec4ee09a441f857526506a0e1ad8
#: ../spack/lib/spack/docs/repositories.rst:180
msgid ""
"Now you know which one is LLNL's special version, and which one is the built-"
"in Spack package.  As you might guess, packages that are identical except "
"for their namespace will still have different hashes:"
msgstr ""

# 092130c8ac45418b8d56837707e6ad03
#: ../spack/lib/spack/docs/repositories.rst:191
msgid ""
"All Spack commands that take a package :ref:`spec <sec-specs>` can also "
"accept a fully qualified spec with a namespace.  This means you can use the "
"namespace to be more specific when designating, e.g., which package you want "
"to uninstall:"
msgstr ""

# 302e39c5f68f4bc7ab5564db92d91c9b
#: ../spack/lib/spack/docs/repositories.rst:202
msgid "Overriding built-in packages"
msgstr ""

# cb9d9c3b8c8043b69a40c69a57165c41
#: ../spack/lib/spack/docs/repositories.rst:204
msgid ""
"Spack's search semantics mean that you can make your own implementation of a "
"built-in Spack package (like ``mpich``), put it in a repository, and use it "
"to override the built-in package.  As long as the repository containing your "
"``mpich`` is earlier any other in ``repos.yaml``, any built-in package that "
"depends on ``mpich`` will be use the one in your repository."
msgstr ""

# 44d4a2ad9d6c4cc3844848c393cd2505
#: ../spack/lib/spack/docs/repositories.rst:211
msgid ""
"Suppose you have three repositories: the builtin Spack repo (``builtin``), a "
"shared repo for your institution (e.g., ``llnl``), and a repo containing "
"your own prototype packages (``proto``).  Suppose they contain packages as "
"follows:"
msgstr ""

# 3248ec593f84474898b16a27ecf6988c
#: ../spack/lib/spack/docs/repositories.rst:217
msgid "Namespace"
msgstr ""

# e87ae6ec220c4eb1b5ec24c5523019e0
#: ../spack/lib/spack/docs/repositories.rst:217
msgid "Path to repo"
msgstr ""

# cbd3256dbbb848ff970870a073f065fa
#: ../spack/lib/spack/docs/repositories.rst:217
msgid "Packages"
msgstr ""

# c83c32dc37f14771b50f44cf2b9fe26c
#: ../spack/lib/spack/docs/repositories.rst:219
msgid "``proto``"
msgstr ""

# a69c6f21a9ca45d4a708f4bb47a865f1
#: ../spack/lib/spack/docs/repositories.rst:219
msgid "``~/proto``"
msgstr ""

# cd3dac4d6d8d4e50889e61beacac5351
#: ../spack/lib/spack/docs/repositories.rst:219
msgid "``mpich``"
msgstr ""

# d012e3ab46cb4ac2810e96ad02c616ff
#: ../spack/lib/spack/docs/repositories.rst:221
msgid "``llnl``"
msgstr ""

# 839bf3bb398542ffa0d5dd949dde99d2
#: ../spack/lib/spack/docs/repositories.rst:221
msgid "``/usr/local/llnl``"
msgstr ""

# 9d4922cd836a49f182dd4bea3625547b
#: ../spack/lib/spack/docs/repositories.rst:221
msgid "``hdf5``"
msgstr ""

# 43a448524cf74ed8922598de4a01f1c4
#: ../spack/lib/spack/docs/repositories.rst:223
msgid "``builtin``"
msgstr ""

# c934f3959b3c4a35ad70536d2cdae838
#: ../spack/lib/spack/docs/repositories.rst:223
msgid "``$spack/var/spack/repos/builtin``"
msgstr ""

# 344165b2a17d467b8d78f3feaec43fd4
#: ../spack/lib/spack/docs/repositories.rst:223
msgid "``mpich``, ``hdf5``, others"
msgstr ""

# 34da02ce0af74c64954c6caa05f36c8d
#: ../spack/lib/spack/docs/repositories.rst:226
msgid ""
"Suppose that ``hdf5`` depends on ``mpich``.  You can override the built-in "
"``hdf5`` by adding the ``llnl`` repo to ``repos.yaml``:"
msgstr ""

# 8ca92733c6834200ad4c8a938cccb0f6
#: ../spack/lib/spack/docs/repositories.rst:235
msgid "``spack install hdf5`` will install ``llnl.hdf5 ^builtin.mpich``."
msgstr ""

# 0a31485dd00f48e690a3919d9d64e4ea
#: ../spack/lib/spack/docs/repositories.rst:237
msgid "If, instead, ``repos.yaml`` looks like this:"
msgstr ""

# 58b1842680a945b0a49165fac5e9d7c4
#: ../spack/lib/spack/docs/repositories.rst:246
msgid "``spack install hdf5`` will install ``llnl.hdf5 ^proto.mpich``."
msgstr ""

# bc038b442f034941b3a782ad7380dcde
#: ../spack/lib/spack/docs/repositories.rst:248
msgid ""
"Any unqualified package name will be resolved by searching ``repos.yaml`` "
"from the first entry to the last.  You can force a particular repository's "
"package by using a fully qualified name.  For example, if your ``repos."
"yaml`` is as above, and you want ``builtin.mpich`` instead of ``proto."
"mpich``, you can write::"
msgstr ""

# bfd4f36827df4a7994b2c38726212156
#: ../spack/lib/spack/docs/repositories.rst:256
msgid "which will install ``llnl.hdf5 ^builtin.mpich``."
msgstr ""

# c0ad205cc6044d35a1417e81fd9935f9
#: ../spack/lib/spack/docs/repositories.rst:258
msgid "Similarly, you can force the ``builtin.hdf5`` like this::"
msgstr ""

# 9059c06823144028b770ae04ede0fe7a
#: ../spack/lib/spack/docs/repositories.rst:262
msgid ""
"This will not search ``repos.yaml`` at all, as the ``builtin`` repo is "
"specified in both cases.  It will install ``builtin.hdf5 ^builtin.mpich``."
msgstr ""

# a61f9cc36ed54959a17f09c9a1d37ecd
#: ../spack/lib/spack/docs/repositories.rst:266
msgid ""
"If you want to see which repositories will be used in a build *before* you "
"install it, you can use ``spack spec -N``:"
msgstr ""

# 5b055ed4153e40bc89bd6fe5b5486375
#: ../spack/lib/spack/docs/repositories.rst:296
msgid ""
"You *can* use a fully qualified package name in a ``depends_on`` directive "
"in a ``package.py`` file, like so::"
msgstr ""

# e2f390ac04a343faaaf5af847bd514b4
#: ../spack/lib/spack/docs/repositories.rst:301
msgid ""
"This is *not* recommended, as it makes it very difficult for multiple repos "
"to be composed and shared.  A ``package.py`` like this will fail if the "
"``proto`` repository is not registered in ``repos.yaml``."
msgstr ""

# 23021804773c4786bcf43159c28c6c01
#: ../spack/lib/spack/docs/repositories.rst:310
msgid "``spack repo``"
msgstr ""

# f36285f42b164456a1269a5cd2c36bdd
#: ../spack/lib/spack/docs/repositories.rst:312
msgid ""
"Spack's :ref:`configuration system <configuration>` allows repository "
"settings to come from ``repos.yaml`` files in many locations.  If you want "
"to see the repositories registered as a result of all configuration files, "
"use ``spack repo list``."
msgstr ""

# 2f8bd65bccd64daa8ba1f5e2336c674a
#: ../spack/lib/spack/docs/repositories.rst:319
msgid "``spack repo list``"
msgstr ""

# 5754660cd954414d981ef860fcacdedb
#: ../spack/lib/spack/docs/repositories.rst:328
msgid ""
"Each repository is listed with its associated namespace.  To get the raw, "
"merged YAML from all configuration files, use ``spack config get repos``:"
msgstr ""

# e9ec909f00c44e3bbc256827bcd3a394
#: ../spack/lib/spack/docs/repositories.rst:338
msgid ""
"mNote that, unlike ``spack repo list``, this does not include the namespace, "
"which is read from each repo's ``repo.yaml``."
msgstr ""

# c6335ac83b0b44f8b1adc41f0eff9aa2
#: ../spack/lib/spack/docs/repositories.rst:343
msgid "``spack repo create``"
msgstr ""

# ad6a1f50e62d410aafda80f9f3a861cf
#: ../spack/lib/spack/docs/repositories.rst:345
msgid ""
"To make your own repository, you don't need to construct a directory "
"yourself; you can use the ``spack repo create`` command."
msgstr ""

# cbaba568aa98460eafcda829a1f5b233
#: ../spack/lib/spack/docs/repositories.rst:362
msgid ""
"By default, the namespace of a new repo matches its directory's name. You "
"can supply a custom namespace with a second argument, e.g.:"
msgstr ""

# 380cebac13fe458d9b2719ae6369b700
#: ../spack/lib/spack/docs/repositories.rst:378
msgid "``spack repo add``"
msgstr ""

# d22315a9bf1b4a20a91272fb778d4fcc
#: ../spack/lib/spack/docs/repositories.rst:380
msgid ""
"Once your repository is created, you can register it with Spack with ``spack "
"repo add``:"
msgstr ""

# 50e3dd4fa5f64133985ad1a5abe49809
#: ../spack/lib/spack/docs/repositories.rst:393
msgid "This simply adds the repo to your ``repos.yaml`` file."
msgstr ""

# 9787fd08ea794e0897994836a3de1e3e
#: ../spack/lib/spack/docs/repositories.rst:395
msgid ""
"Once a repository is registered like this, you should be able to see its "
"packages' names in the output of ``spack list``, and you should be able to "
"build them using ``spack install <name>`` as you would with any built-in "
"package."
msgstr ""

# 00cfc8655b4f4957b4213d9276fe909f
#: ../spack/lib/spack/docs/repositories.rst:402
msgid "``spack repo remove``"
msgstr ""

# 195bf96711f34b4fbdc0f74c09fab94e
#: ../spack/lib/spack/docs/repositories.rst:404
msgid ""
"You can remove an already-registered repository with ``spack repo rm``. This "
"will work whether you pass the repository's namespace *or* its path."
msgstr ""

# fd49c7f3c8ef4a33b4dc14bea533c581
#: ../spack/lib/spack/docs/repositories.rst:408
msgid "By namespace:"
msgstr ""

# 59f3e5c8284f4fcca77cb250fcdc968d
#: ../spack/lib/spack/docs/repositories.rst:419
msgid "By path:"
msgstr ""

# a283e51eefcc47dfbc119e05dafbc38e
#: ../spack/lib/spack/docs/repositories.rst:432
msgid "Repo namespaces and Python"
msgstr ""

# 6da84894be2e43268440a75e095bb212
#: ../spack/lib/spack/docs/repositories.rst:434
msgid ""
"You may have noticed that namespace notation for repositories is similar to "
"the notation for namespaces in Python.  As it turns out, you *can* treat "
"Spack repositories like Python packages; this is how they are implemented."
msgstr ""

# f22a334684d8428da4a8fd9755cf60ff
#: ../spack/lib/spack/docs/repositories.rst:439
msgid ""
"You could, for example, extend a ``builtin`` package in your own repository:"
msgstr ""

# 09db3dc7c469408cb8fba2a2b0295265
#: ../spack/lib/spack/docs/repositories.rst:449
msgid ""
"Spack repo namespaces are actually Python namespaces tacked on under ``spack."
"pkg``.  The search semantics of ``repos.yaml`` are actually implemented "
"using Python's built-in `sys.path <https://docs.python.org/2/library/sys."
"html#sys.path>`_ search.  The :py:mod:`spack.repo` module implements a "
"custom `Python importer <https://docs.python.org/2/library/imp.html>`_."
msgstr ""

# 207842eb28cb49238e471ba622c36123
#: ../spack/lib/spack/docs/repositories.rst:458
msgid ""
"The mechanism for extending packages is not yet extensively tested, and "
"extending packages across repositories imposes inter-repo dependencies, "
"which may be hard to manage.  Use this feature at your own risk, but let us "
"know if you have a use case for it."
msgstr ""

#: ../spack/lib/spack/docs/spack.build_systems.rst:2
msgid "spack.build\\_systems package"
msgstr ""

#: ../spack/lib/spack/docs/spack.build_systems.rst:8
msgid "spack.build\\_systems.aspell\\_dict module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/aspell_dict.py:docstring
#: of spack.build_systems.aspell_dict.AspellDictPackage:1
msgid "Bases: :class:`spack.build_systems.autotools.AutotoolsPackage`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/aspell_dict.py:docstring
#: of spack.build_systems.aspell_dict.AspellDictPackage:1
msgid "Specialized class for building aspell dictionairies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/aspell_dict.py:docstring
#: of spack.build_systems.aspell_dict.AspellDictPackage.configure:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: spack.build_systems.autotools.AutotoolsPackage.configure:1
msgid ""
"Runs configure with the arguments specified in :py:meth:`~.AutotoolsPackage."
"configure_args` and an appropriately set prefix."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/aspell_dict.py:docstring
#: of spack.build_systems.aspell_dict.AspellDictPackage.view_destination:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageViewMixin.view_destination:1
msgid ""
"The target root directory: each file is added relative to this directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/aspell_dict.py:docstring
#: of spack.build_systems.aspell_dict.AspellDictPackage.view_source:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageViewMixin.view_source:1
msgid ""
"The source root directory that will be added to the view: files are added "
"such that their path relative to the view destination matches their path "
"relative to the view source."
msgstr ""

#: ../spack/lib/spack/docs/spack.build_systems.rst:16
msgid "spack.build\\_systems.autotools module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: spack.build_systems.cmake.CMakePackage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cuda.py:docstring
#: spack.build_systems.cuda.CudaPackage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: spack.build_systems.intel.IntelPackage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: spack.build_systems.makefile.MakefilePackage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: spack.build_systems.meson.MesonPackage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/octave.py:docstring
#: spack.build_systems.octave.OctavePackage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: spack.build_systems.perl.PerlPackage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: spack.build_systems.python.PythonPackage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: spack.build_systems.qmake.QMakePackage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/r.py:docstring
#: spack.build_systems.r.RPackage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: spack.build_systems.scons.SConsPackage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: spack.build_systems.waf.WafPackage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.Package:1
msgid "Bases: :class:`spack.package.PackageBase`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:1
msgid "Specialized class for packages built using GNU Autotools."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:3
msgid "This class provides four phases that can be overridden:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:5
msgid ":py:meth:`~.AutotoolsPackage.autoreconf`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:6
msgid ":py:meth:`~.AutotoolsPackage.configure`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:7
msgid ":py:meth:`~.AutotoolsPackage.build`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:8
msgid ":py:meth:`~.AutotoolsPackage.install`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:10
msgid ""
"They all have sensible defaults and for many packages the only thing "
"necessary will be to override the helper method :py:meth:`~.AutotoolsPackage."
"configure_args`. For a finer tuning you may also override:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:16
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: spack.build_systems.cmake.CMakePackage:17
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: spack.build_systems.makefile.MakefilePackage:15
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: spack.build_systems.meson.MesonPackage:17
msgid "**Method**"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:18
msgid ":py:attr:`~.AutotoolsPackage.build_targets`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:18
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: spack.build_systems.makefile.MakefilePackage:17
msgid "Specify ``make`` targets for the build phase"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:22
msgid ":py:attr:`~.AutotoolsPackage.install_targets`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:22
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: spack.build_systems.makefile.MakefilePackage:21
msgid "Specify ``make`` targets for the install phase"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:26
msgid ":py:meth:`~.AutotoolsPackage.check`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage:26
msgid "Run  build time tests if required"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.archive_files:1
msgid "Files to archive for packages based on autotools"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.autoreconf:1
msgid "Not needed usually, configure should be already there"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.autoreconf_extra_args:1
msgid ""
"Options to be passed to autoreconf when using the default implementation"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.build:1
msgid ""
"Makes the build targets specified by :py:attr:``~.AutotoolsPackage."
"build_targets``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.build_directory:1
msgid "Override to provide another place to build the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.build_system_class:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: spack.build_systems.cmake.CMakePackage.build_system_class:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: spack.build_systems.intel.IntelPackage.build_system_class:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: spack.build_systems.makefile.MakefilePackage.build_system_class:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: spack.build_systems.meson.MesonPackage.build_system_class:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: spack.build_systems.perl.PerlPackage.build_system_class:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: spack.build_systems.qmake.QMakePackage.build_system_class:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/r.py:docstring
#: spack.build_systems.r.RPackage.build_system_class:1
msgid ""
"This attribute is used in UI queries that need to know the build system base "
"class"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.build_targets:1
msgid ""
"Targets for ``make`` during the :py:meth:`~.AutotoolsPackage.build` phase"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of
#: spack.build_systems.autotools.AutotoolsPackage.build_time_test_callbacks:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: spack.build_systems.makefile.MakefilePackage.build_time_test_callbacks:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: spack.build_systems.perl.PerlPackage.build_time_test_callbacks:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: spack.build_systems.python.PythonPackage.build_time_test_callbacks:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: spack.build_systems.qmake.QMakePackage.build_time_test_callbacks:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: spack.build_systems.scons.SConsPackage.build_time_test_callbacks:1
msgid "Callback names for build-time test"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.check:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: spack.build_systems.makefile.MakefilePackage.check:1
msgid ""
"Searches the Makefile for targets ``test`` and ``check`` and runs them if "
"found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.configure_args:1
msgid ""
"Produces a list containing all the arguments that must be passed to "
"configure, except ``--prefix`` which will be pre-pended to the list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.configure_args:0
#: spack.build_systems.autotools.AutotoolsPackage.configure_directory:0
#: spack.build_systems.autotools.AutotoolsPackage.enable_or_disable:0
#: spack.build_systems.autotools.AutotoolsPackage.with_or_without:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: spack.build_systems.cmake.CMakePackage.build_directory:0
#: spack.build_systems.cmake.CMakePackage.cmake_args:0
#: spack.build_systems.cmake.CMakePackage.root_cmakelists_dir:0
#: spack.build_systems.cmake.CMakePackage.std_cmake_args:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: spack.build_systems.makefile.MakefilePackage.build_directory:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: spack.build_systems.meson.MesonPackage.build_directory:0
#: spack.build_systems.meson.MesonPackage.meson_args:0
#: spack.build_systems.meson.MesonPackage.root_mesonlists_dir:0
#: spack.build_systems.meson.MesonPackage.std_meson_args:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: spack.build_systems.perl.PerlPackage.configure_args:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: spack.cmd.buildcache.find_matching_specs:0
#: spack.cmd.buildcache.match_downloaded_specs:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: spack.cmd.create.get_build_system:0 spack.cmd.create.get_name:0
#: spack.cmd.create.get_repository:0 spack.cmd.create.get_url:0
#: spack.cmd.create.get_versions:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/list.py:docstring
#: spack.cmd.list.filter_by_name:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: spack.cmd.uninstall.dependent_environments:0
#: spack.cmd.uninstall.find_matching_specs:0
#: spack.cmd.uninstall.inactive_dependent_environments:0
#: spack.cmd.uninstall.installed_dependents:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring
#: spack.cmd.url.name_parsed_correctly:0 spack.cmd.url.remove_separators:0
#: spack.cmd.url.url_list_parsing:0 spack.cmd.url.version_parsed_correctly:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: spack.modules.common.dependencies:0
#: spack.modules.common.merge_config_rules:0 spack.modules.common.root_path:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: spack.modules.lmod.LmodFileLayout.token_to_path:0
#: spack.modules.lmod.guess_core_compilers:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: spack.build_environment.get_std_cmake_args:0
#: spack.build_environment.get_std_meson_args:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: spack.concretize.concretize_specs_together:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: spack.environment.Environment.add:0 spack.environment.activate:0
#: spack.environment.deactivate:0 spack.environment.find_environment:0
#: spack.environment.get_env:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: spack.extensions.extension_name:0 spack.extensions.load_command_extension:0
#: spack.extensions.path_for_extension:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: spack.fetch_strategy.CacheURLFetchStrategy.fetch:0
#: spack.fetch_strategy.FetchStrategy.cachable:0
#: spack.fetch_strategy.FetchStrategy.fetch:0
#: spack.fetch_strategy.GitFetchStrategy.cachable:0
#: spack.fetch_strategy.GitFetchStrategy.fetch:0
#: spack.fetch_strategy.GoFetchStrategy.fetch:0
#: spack.fetch_strategy.HgFetchStrategy.cachable:0
#: spack.fetch_strategy.HgFetchStrategy.fetch:0
#: spack.fetch_strategy.SvnFetchStrategy.cachable:0
#: spack.fetch_strategy.SvnFetchStrategy.fetch:0
#: spack.fetch_strategy.URLFetchStrategy.cachable:0
#: spack.fetch_strategy.URLFetchStrategy.fetch:0
#: spack.fetch_strategy.from_kwargs:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.all_urls:0
#: spack.package.PackageBase.check_for_unfinished_installation:0
#: spack.package.PackageBase.fetch_remote_versions:0
#: spack.package.PackageBase.installed:0
#: spack.package.PackageBase.unit_test_check:0
#: spack.package.PackageBase.version_urls:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring
#: spack.relocate.file_is_relocatable:0 spack.relocate.is_binary:0
#: spack.relocate.is_relocatable:0 spack.relocate.mime_type:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring
#: spack.repo.Indexer.needs_update:0 spack.repo.PatchIndexer.needs_update:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring
#: spack.spec.Spec.copy:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring
#: spack.url.find_list_url:0 spack.url.parse_name:0
#: spack.url.parse_name_and_version:0 spack.url.parse_name_offset:0
#: spack.url.parse_version:0 spack.url.parse_version_offset:0
#: spack.url.strip_name_suffixes:0 spack.url.strip_version_suffixes:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring
#: spack.variant.AbstractVariant.compatible:0
#: spack.variant.AbstractVariant.constrain:0
#: spack.variant.AbstractVariant.copy:0
#: spack.variant.AbstractVariant.satisfies:0
#: spack.variant.AbstractVariant.value:0
#: spack.variant.AbstractVariant.yaml_entry:0
#: spack.variant.MultiValuedVariant.satisfies:0
#: spack.variant.SingleValuedVariant.compatible:0
#: spack.variant.SingleValuedVariant.constrain:0
#: spack.variant.SingleValuedVariant.satisfies:0
#: spack.variant.SingleValuedVariant.yaml_entry:0
#: spack.variant.Variant.allowed_values:0 spack.variant.Variant.make_default:0
#: spack.variant.Variant.make_variant:0 spack.variant.VariantMap.concrete:0
#: spack.variant.VariantMap.constrain:0 spack.variant.VariantMap.copy:0
#: spack.variant.VariantMap.satisfies:0 spack.variant.any_combination_of:0
#: spack.variant.auto_or_any_combination_of:0 spack.variant.disjoint_sets:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring
#: spack.version.Version.dashed:0 spack.version.Version.dotted:0
#: spack.version.Version.joined:0 spack.version.Version.underscored:0
#: spack.version.Version.up_to:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/imp_importer.py:docstring
#: spack.util.imp.imp_importer.load_source:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/importlib_importer.py:docstring
#: spack.util.imp.importlib_importer.load_source:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: spack.util.environment.EnvironmentModifications.from_sourcing_file:0
#: spack.util.environment.EnvironmentModifications.group_by_name:0
#: spack.util.environment.concatenate_paths:0
#: spack.util.environment.filter_environment_blacklist:0
#: spack.util.environment.inspect_path:0
#: spack.util.environment.is_system_path:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: spack.util.executable.Executable.command:0
#: spack.util.executable.Executable.name:0
#: spack.util.executable.Executable.path:0 spack.util.executable.which:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: spack.util.log_parse.parse_log_events:0
#: spack.util.log_parse.make_log_context:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: spack.util.naming.simplify_name:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/pattern.py:docstring
#: spack.util.pattern.composite:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/prefix.py:docstring
#: spack.util.prefix.Prefix.join:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/string.py:docstring
#: spack.util.string.plural:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring
#: spack.util.web.get_checksums_for_versions:0
msgid "Returns"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.configure_args:4
msgid "list of arguments for configure"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.configure_directory:1
msgid "Returns the directory where 'configure' resides."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.configure_directory:3
msgid "directory where to find configure"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.enable_or_disable:1
msgid ""
"Same as :py:meth:`~.AutotoolsPackage.with_or_without` but substitute "
"``with`` with ``enable`` and ``without`` with ``disable``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.enable_or_disable:0
#: spack.build_systems.autotools.AutotoolsPackage.with_or_without:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: spack.build_systems.intel.IntelPackage.mpi_setup_dependent_environment:0
#: spack.build_systems.intel.IntelPackage.normalize_path:0
#: spack.build_systems.intel.IntelPackage.normalize_suite_dir:0
#: spack.build_systems.intel.IntelPackage.setup_dependent_environment:0
#: spack.build_systems.intel.IntelPackage.setup_dependent_package:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/common/arguments.py:docstring
#: spack.cmd.common.arguments.add_common_arguments:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: spack.cmd.buildcache.find_matching_specs:0
#: spack.cmd.buildcache.match_downloaded_specs:0 spack.cmd.buildcache.preview:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: spack.cmd.create.get_build_system:0 spack.cmd.create.get_name:0
#: spack.cmd.create.get_repository:0 spack.cmd.create.get_url:0
#: spack.cmd.create.get_versions:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/dependents.py:docstring
#: spack.cmd.dependents.get_dependents:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/edit.py:docstring
#: spack.cmd.edit.edit_package:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/list.py:docstring
#: spack.cmd.list.filter_by_name:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: spack.cmd.release_jobs.stage_spec_jobs:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: spack.cmd.uninstall.dependent_environments:0
#: spack.cmd.uninstall.do_uninstall:0 spack.cmd.uninstall.find_matching_specs:0
#: spack.cmd.uninstall.inactive_dependent_environments:0
#: spack.cmd.uninstall.installed_dependents:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring
#: spack.cmd.url.name_parsed_correctly:0 spack.cmd.url.print_name_and_version:0
#: spack.cmd.url.remove_separators:0 spack.cmd.url.url_list_parsing:0
#: spack.cmd.url.version_parsed_correctly:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: spack.cmd.disambiguate_spec:0 spack.cmd.display_specs:0
#: spack.cmd.get_command:0 spack.cmd.get_module:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/__init__.py:docstring
#: spack.compilers.add_compilers_to_config:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: spack.modules.common.BaseModuleFileWriter.write:0
#: spack.modules.common.dependencies:0
#: spack.modules.common.merge_config_rules:0 spack.modules.common.root_path:0
#: spack.modules.common.update_dictionary_extending_lists:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: spack.modules.lmod.LmodFileLayout.token_to_path:0
#: spack.modules.lmod.guess_core_compilers:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: spack.binary_distribution.check_specs_against_mirrors:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: spack.build_environment.fork:0 spack.build_environment.get_package_context:0
#: spack.build_environment.get_std_cmake_args:0
#: spack.build_environment.get_std_meson_args:0
#: spack.build_environment.load_external_modules:0
#: spack.build_environment.set_build_environment_variables:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: spack.concretize.concretize_specs_together:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring
#: spack.config.override:0 spack.config.validate:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring
#: spack.database.InstallRecord:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring
#: spack.dependency.canonical_deptype:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: spack.directives.conflicts:0 spack.directives.depends_on:0
#: spack.directives.patch:0 spack.directives.variant:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: spack.environment.Environment.concretize:0 spack.environment.activate:0
#: spack.environment.deactivate:0 spack.environment.find_environment:0
#: spack.environment.get_env:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: spack.extensions.extension_name:0 spack.extensions.get_module:0
#: spack.extensions.load_command_extension:0
#: spack.extensions.path_for_extension:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: spack.fetch_strategy.from_kwargs:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring
#: spack.main.SpackArgumentParser.format_help_sections:0 spack.main.main:0
#: spack.main.print_setup_info:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring
#: spack.mirror.create:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring
#: spack.mixins.filter_compiler_wrappers:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.check_for_unfinished_installation:0
#: spack.package.PackageBase.do_install:0
#: spack.package.PackageBase.possible_dependencies:0
#: spack.package.PackageBase.setup_dependent_environment:0
#: spack.package.PackageBase.setup_dependent_package:0
#: spack.package.PackageBase.setup_environment:0
#: spack.package.on_package_attributes:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring
#: spack.patch.FilePatch:0 spack.patch.Patch:0 spack.patch.Patch.apply:0
#: spack.patch.Patch.fetch:0 spack.patch.PatchCache.patch_for_package:0
#: spack.patch.UrlPatch:0 spack.patch.UrlPatch.fetch:0
#: spack.patch.apply_patch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring
#: spack.relocate.file_is_relocatable:0 spack.relocate.is_binary:0
#: spack.relocate.is_relocatable:0 spack.relocate.mime_type:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring
#: spack.repo.RepoIndex.add_indexer:0 spack.repo.RepoPath:0
#: spack.repo.RepoPath.get_repo:0 spack.repo.TagIndex.update_package:0
#: spack.repo.additional_repository:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring
#: spack.report.collect_info:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring
#: spack.spec.Spec.concretize:0 spack.spec.Spec.copy:0 spack.spec.Spec.format:0
#: spack.spec.Spec.from_literal:0 spack.spec.Spec.old_format:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring
#: spack.store.Store:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring
#: spack.url.color_url:0 spack.url.find_list_url:0 spack.url.parse_name:0
#: spack.url.parse_name_and_version:0 spack.url.parse_name_offset:0
#: spack.url.parse_version:0 spack.url.parse_version_offset:0
#: spack.url.strip_name_suffixes:0 spack.url.strip_version_suffixes:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring
#: spack.variant.AbstractVariant.compatible:0
#: spack.variant.AbstractVariant.constrain:0
#: spack.variant.AbstractVariant.satisfies:0
#: spack.variant.DisjointSetsOfValues:0
#: spack.variant.MultiValuedVariant.satisfies:0
#: spack.variant.SingleValuedVariant.compatible:0
#: spack.variant.SingleValuedVariant.constrain:0
#: spack.variant.SingleValuedVariant.satisfies:0
#: spack.variant.Variant.make_variant:0
#: spack.variant.Variant.validate_or_raise:0
#: spack.variant.VariantMap.constrain:0 spack.variant.VariantMap.satisfies:0
#: spack.variant.VariantMap.substitute:0 spack.variant.any_combination_of:0
#: spack.variant.auto_or_any_combination_of:0 spack.variant.disjoint_sets:0
#: spack.variant.implicit_variant_conversion:0
#: spack.variant.substitute_abstract_variants:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/python_version.py:docstring
#: spack.test.python_version.pyfiles:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/url_parse.py:docstring
#: spack.test.url_parse.test_url_parse_offset:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/imp_importer.py:docstring
#: spack.util.imp.imp_importer.load_source:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/importlib_importer.py:docstring
#: spack.util.imp.importlib_importer.load_source:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/editor.py:docstring
#: spack.util.editor.editor:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: spack.util.environment.EnvironmentModifications.append_flags:0
#: spack.util.environment.EnvironmentModifications.append_path:0
#: spack.util.environment.EnvironmentModifications.deprioritize_system_paths:0
#: spack.util.environment.EnvironmentModifications.from_sourcing_file:0
#: spack.util.environment.EnvironmentModifications.prepend_path:0
#: spack.util.environment.EnvironmentModifications.prune_duplicate_paths:0
#: spack.util.environment.EnvironmentModifications.remove_path:0
#: spack.util.environment.EnvironmentModifications.set:0
#: spack.util.environment.EnvironmentModifications.set_path:0
#: spack.util.environment.EnvironmentModifications.unset:0
#: spack.util.environment.concatenate_paths:0
#: spack.util.environment.filter_environment_blacklist:0
#: spack.util.environment.inspect_path:0
#: spack.util.environment.is_system_path:0
#: spack.util.environment.preserve_environment:0
#: spack.util.environment.validate:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: spack.util.executable.Executable.add_default_env:0
#: spack.util.executable.which:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: spack.util.log_parse.parse_log_events:0
#: spack.util.log_parse.make_log_context:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: spack.util.naming.simplify_name:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/pattern.py:docstring
#: spack.util.pattern.composite:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/prefix.py:docstring
#: spack.util.prefix.Prefix.join:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/string.py:docstring
#: spack.util.string.plural:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring
#: spack.util.web.find_versions_of_archive:0
#: spack.util.web.get_checksums_for_versions:0
msgid "Parameters"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.enable_or_disable:4
#: spack.build_systems.autotools.AutotoolsPackage.with_or_without:14
msgid "name of a valid multi-valued variant"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.enable_or_disable:6
msgid ""
"if present accepts a single value and returns the parameter to be used "
"leading to an entry of the type ``--enable-{name}={parameter}``  The special "
"value 'prefix' can also be assigned and will return ``spec[name].prefix`` as "
"activation parameter."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.enable_or_disable:6
msgid ""
"if present accepts a single value and returns the parameter to be used "
"leading to an entry of the type ``--enable-{name}={parameter}``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.enable_or_disable:10
#: spack.build_systems.autotools.AutotoolsPackage.with_or_without:20
msgid ""
"The special value 'prefix' can also be assigned and will return ``spec[name]."
"prefix`` as activation parameter."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.enable_or_disable:14
#: spack.build_systems.autotools.AutotoolsPackage.with_or_without:24
msgid "list of arguments to configure"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of
#: spack.build_systems.autotools.AutotoolsPackage.flags_to_build_system_args:1
msgid ""
"Produces a list of all command line arguments to pass specified compiler "
"flags to configure."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.force_autoreconf:1
msgid "Set to true to force the autoreconf step even if configure is present"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.install:1
msgid ""
"Makes the install targets specified by :py:attr:``~.AutotoolsPackage."
"install_targets``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.install_targets:1
msgid ""
"Targets for ``make`` during the :py:meth:`~.AutotoolsPackage.install` phase"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of
#: spack.build_systems.autotools.AutotoolsPackage.install_time_test_callbacks:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: spack.build_systems.makefile.MakefilePackage.install_time_test_callbacks:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: spack.build_systems.python.PythonPackage.install_time_test_callbacks:1
msgid "Callback names for install-time test"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.installcheck:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: spack.build_systems.makefile.MakefilePackage.installcheck:1
msgid ""
"Searches the Makefile for an ``installcheck`` target and runs it if found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.patch_config_guess:1
msgid "Whether or not to update ``config.guess`` on old architectures"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.phases:1
msgid "Phases of a GNU Autotools package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.set_configure_or_die:1
msgid ""
"Checks the presence of a ``configure`` file after the autoreconf phase. If "
"it is found sets a module attribute appropriately, otherwise raises an error."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.set_configure_or_die:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: spack.build_systems.perl.PerlPackage.configure:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: spack.modules.lmod.LmodConfiguration.core_compilers:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: spack.directives.variant:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: spack.fetch_strategy.from_kwargs:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring
#: spack.mirror.suggest_archive_basename:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring
#: spack.relocate.file_is_relocatable:0 spack.relocate.is_relocatable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring
#: spack.report.collect_info:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring
#: spack.url.parse_name:0 spack.url.parse_name_and_version:0
#: spack.url.parse_name_offset:0 spack.url.parse_version:0
#: spack.url.parse_version_offset:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring
#: spack.variant.Variant.validate_or_raise:0
msgid "Raises"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.set_configure_or_die:5
msgid ""
"if a configure script is not found in :py:meth:`~AutotoolsPackage."
"configure_directory`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.with_or_without:1
msgid ""
"Inspects a variant and returns the arguments that activate or deactivate the "
"selected feature(s) for the configure options."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.with_or_without:4
msgid ""
"This function works on all type of variants. For bool-valued variants it "
"will return by default ``--with-{name}`` or ``--without-{name}``. For other "
"kinds of variants it will cycle over the allowed values and return either "
"``--with-{value}`` or ``--without-{value}``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.with_or_without:9
msgid ""
"If activation_value is given, then for each possible value of the variant, "
"the option ``--with-{value}=activation_value(value)`` or ``--without-{value}"
"`` will be added depending on whether or not ``variant=value`` is in the "
"spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.with_or_without:16
msgid ""
"callable that accepts a single value and returns the parameter to be used "
"leading to an entry of the type ``--with-{name}={parameter}``.  The special "
"value 'prefix' can also be assigned and will return ``spec[name].prefix`` as "
"activation parameter."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/autotools.py:docstring
#: of spack.build_systems.autotools.AutotoolsPackage.with_or_without:16
msgid ""
"callable that accepts a single value and returns the parameter to be used "
"leading to an entry of the type ``--with-{name}={parameter}``."
msgstr ""

#: ../spack/lib/spack/docs/spack.build_systems.rst:24
msgid "spack.build\\_systems.cmake module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: spack.build_systems.makefile.MakefilePackage:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: spack.build_systems.meson.MesonPackage:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: spack.build_systems.qmake.QMakePackage:6
msgid "This class provides three phases that can be overridden:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage:8
msgid ":py:meth:`~.CMakePackage.cmake`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage:9
msgid ":py:meth:`~.CMakePackage.build`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage:10
msgid ":py:meth:`~.CMakePackage.install`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage:12
msgid ""
"They all have sensible defaults and for many packages the only thing "
"necessary will be to override :py:meth:`~.CMakePackage.cmake_args`. For a "
"finer tuning you may also override:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage:19
msgid ":py:meth:`~.CMakePackage.root_cmakelists_dir`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage:19
msgid "Location of the root CMakeLists.txt"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage:22
msgid ":py:meth:`~.CMakePackage.build_directory`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage:22
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: spack.build_systems.meson.MesonPackage:22
msgid "Directory where to build the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage:27
msgid ""
"The generator used by CMake can be specified by providing the generator "
"attribute. Per https://cmake.org/cmake/help/git-master/manual/cmake-"
"generators.7.html, the format is: [<secondary-generator> "
"- ]<primary_generator>. The full list of primary and secondary generators "
"supported by CMake may be found in the documentation for the version of "
"CMake used; however, at this time Spack supports only the primary generators "
"\"Unix Makefiles\" and \"Ninja.\" Spack's CMake support is agnostic with "
"respect to primary generators. Spack will generate a runtime error if the "
"generator string does not follow the prescribed format, or if the primary "
"generator is not supported."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.archive_files:1
msgid "Files to archive for packages based on CMake"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.build:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: spack.build_systems.meson.MesonPackage.build:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: spack.build_systems.qmake.QMakePackage.build:1
msgid "Make the build targets"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.build_directory:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: spack.build_systems.meson.MesonPackage.build_directory:1
msgid "Returns the directory to use when building the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.build_directory:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: spack.build_systems.meson.MesonPackage.build_directory:3
msgid "directory where to build the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.check:1
msgid ""
"Searches the CMake-generated Makefile for the target ``test`` and runs it if "
"found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.cmake:1
msgid "Runs ``cmake`` in the build directory"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.cmake_args:1
msgid ""
"Produces a list containing all the arguments that must be passed to cmake, "
"except:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.cmake_args:4
msgid "CMAKE_INSTALL_PREFIX"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.cmake_args:7
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: spack.build_systems.meson.MesonPackage.meson_args:9
msgid "which will be set automatically."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.cmake_args:9
msgid "list of arguments for cmake"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.flags_to_build_system_args:1
msgid ""
"Produces a list of all command line arguments to pass the specified compiler "
"flags to cmake. Note CMAKE does not have a cppflags option, so cppflags will "
"be added to cflags, cxxflags, and fflags to mimic the behavior in other "
"tools."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.generator:1
msgid "The build system generator to use."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.generator:3
msgid ""
"See ``cmake --help`` for a list of valid generators. Currently, \"Unix "
"Makefiles\" and \"Ninja\" are the only generators that Spack supports. "
"Defaults to \"Unix Makefiles\"."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.generator:7
msgid ""
"See https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html for "
"more information."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.install:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: spack.build_systems.meson.MesonPackage.install:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: spack.build_systems.qmake.QMakePackage.install:1
msgid "Make the install targets"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.phases:1
msgid "Phases of a CMake package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.root_cmakelists_dir:1
msgid "The relative path to the directory containing CMakeLists.txt"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.root_cmakelists_dir:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: spack.build_systems.meson.MesonPackage.root_mesonlists_dir:3
msgid ""
"This path is relative to the root of the extracted tarball, not to the "
"``build_directory``. Defaults to the current directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.root_cmakelists_dir:6
msgid "directory containing CMakeLists.txt"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.std_cmake_args:1
msgid ""
"Standard cmake arguments provided as a property for convenience of package "
"writers"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cmake.py:docstring
#: of spack.build_systems.cmake.CMakePackage.std_cmake_args:4
msgid "standard cmake arguments"
msgstr ""

#: ../spack/lib/spack/docs/spack.build_systems.rst:32
msgid "spack.build\\_systems.cuda module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/cuda.py:docstring
#: of spack.build_systems.cuda.CudaPackage:1
msgid ""
"Auxiliary class which contains CUDA variant, dependencies and conflicts and "
"is meant to unify and facilitate its usage."
msgstr ""

#: ../spack/lib/spack/docs/spack.build_systems.rst:40
msgid "spack.build\\_systems.intel module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage:1
msgid "Specialized class for licensed Intel software."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage:3
msgid "This class provides two phases that can be overridden:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage:5
msgid ":py:meth:`~.IntelPackage.configure`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage:6
msgid ":py:meth:`~.IntelPackage.install`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage:8
msgid ""
"They both have sensible defaults and for many packages the only thing "
"necessary will be to override setup_environment to set the appropriate "
"environment variables."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.component_lib_dir:1
msgid ""
"Provide directory suitable for find_libraries() and "
"SPACK_COMPILER_EXTRA_RPATHS."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.configure:1
msgid "Generates the silent.cfg file to pass to installer.sh."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.configure:3
msgid "See https://software.intel.com/en-us/articles/configuration-file-format"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.file_to_source:1
msgid ""
"Full path of file to source for initializing an Intel package. A client "
"package could override as follows: `    @property` `    def "
"file_to_source(self):` `        return self.normalize_path(\"apsvars.sh\", "
"\"vtune_amplifier\")`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.global_license_file:1
msgid "Returns the path where a Spack-global license file should be stored."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.global_license_file:3
msgid ""
"All Intel software shares the same license, so we store it in a common "
"'intel' directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.install:1
msgid ""
"Runs Intel's install.sh installation script. Afterwards, save the installer "
"config and logs to <prefix>/.spack"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.intel64_int_suffix:1
msgid ""
"Provide the suffix for Intel library names to match a client application's "
"desired int size, conveyed by the active spec variant. The possible suffixes "
"and their meanings are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.intel64_int_suffix:5
msgid ""
"``ilp64``  all of int, long, and pointer are 64 bit, `` lp64``  only long "
"and pointer are 64 bit; int will be 32bit."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.license_comment:1
msgid "Comment symbol used in the license.lic file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.license_files:1
msgid "Built-in mutable sequence."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.license_files:3
msgid ""
"If no argument is given, the constructor creates a new empty list. The "
"argument must be an iterable if specified."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.license_required:1
msgid "bool(x) -> bool"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.license_required:3
msgid ""
"Returns True when the argument x is true, False otherwise. The builtins True "
"and False are the only two instances of the class bool. The class bool is a "
"subclass of the class int, and cannot be subclassed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.license_url:1
msgid "URL providing information on how to acquire a license key"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.license_vars:1
msgid "Environment variables that Intel searches for a license file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.mpi_compiler_wrappers:1
msgid "Return paths to compiler wrappers as a dict of env-like names"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.mpi_setup_dependent_environment:1
msgid ""
"Unified back-end for setup_dependent_environment() of Intel packages that "
"provide 'mpi'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.mpi_setup_dependent_environment:4
msgid "same as in setup_dependent_environment()."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.mpi_setup_dependent_environment:6
msgid ""
"Conveys spack_cc, spack_cxx, etc., from the scope of dependent packages; "
"constructed in caller."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.normalize_path:1
msgid ""
"Returns the absolute or relative path to a component or file under a "
"component suite directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.normalize_path:4
msgid ""
"Intel's product names, scope, and directory layout changed over the years.  "
"This function provides a unified interface to their directory names."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.normalize_path:8
msgid "a component name like 'mkl', or 'mpi', or a deeper relative path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.normalize_path:11
msgid ""
"_Unversioned_ name of the expected parent directory of component_path.  When "
"absent or `None`, an appropriate default will be used.  A present but empty "
"string `\"\"` requests that `component_path` refer to `self.prefix` "
"directly.  Typical values: `compilers_and_libraries`, `composer_xe`, "
"`parallel_studio_xe`.  Also supported: `advisor`, `inspector`, `vtune`. The "
"actual directory name for these suites varies by release year. The name will "
"be corrected as needed for use in the return value."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.normalize_path:11
msgid ""
"_Unversioned_ name of the expected parent directory of component_path.  When "
"absent or `None`, an appropriate default will be used.  A present but empty "
"string `\"\"` requests that `component_path` refer to `self.prefix` directly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.normalize_path:17
msgid ""
"Typical values: `compilers_and_libraries`, `composer_xe`, "
"`parallel_studio_xe`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.normalize_path:20
msgid ""
"Also supported: `advisor`, `inspector`, `vtune`. The actual directory name "
"for these suites varies by release year. The name will be corrected as "
"needed for use in the return value."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.normalize_path:24
msgid ""
"When True, return path relative to self.prefix, otherwise, return an "
"absolute path (the default)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.normalize_suite_dir:1
msgid ""
"Returns the version-specific and absolute path to the directory of an Intel "
"product or a suite of product components."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.normalize_suite_dir:4
msgid ""
"Name of the product directory, without numeric version.  - Examples::      "
"composer_xe, parallel_studio_xe, compilers_and_libraries  The following will "
"work as well, even though they are not directly targets for Spack "
"installation::      advisor_xe, inspector_xe, vtune_amplifier_xe,     "
"performance_snapshots (new name for vtune as of 2018)  These are single-"
"component products without subordinate components and are normally made "
"available to users by a toplevel psxevars.sh or equivalent file to source "
"(and thus by the modulefiles that Spack produces)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.normalize_suite_dir:4
msgid "Name of the product directory, without numeric version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.normalize_suite_dir:6
msgid "Examples::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.normalize_suite_dir:10
msgid ""
"The following will work as well, even though they are not directly targets "
"for Spack installation::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.normalize_suite_dir:16
msgid ""
"These are single-component products without subordinate components and are "
"normally made available to users by a toplevel psxevars.sh or equivalent "
"file to source (and thus by the modulefiles that Spack produces)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.normalize_suite_dir:21
msgid ""
"Suffix glob patterns (most specific first) expected to qualify "
"suite_dir_name to its fully version-specific install directory (as opposed "
"to a compatibility directory or symlink)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.openmp_libs:1
msgid "Supply LibraryList for linking OpenMP"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.phases:1
msgid "Phases of an Intel package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_environment:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_environment:1
msgid "Set up the environment of packages that depend on this one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_environment:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_environment:3
msgid ""
"This is similar to ``setup_environment``, but it is used to modify the "
"compile and runtime environments of packages that *depend* on this one. This "
"gives packages like Python and others that follow the extension model a way "
"to implement common environment or compile-time settings for dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_environment:9
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_environment:9
msgid ""
"This is useful if there are some common steps to installing all extensions "
"for a certain package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_environment:12
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_environment:12
#: spack.package.PackageBase.setup_environment:16
msgid "Example:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_environment:14
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_environment:14
msgid ""
"Installing python modules generally requires ``PYTHONPATH`` to point to the "
"``lib/pythonX.Y/site-packages`` directory in the module's install prefix. "
"This method could be used to set that variable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_environment:18
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_environment:18
msgid ""
"List of environment modifications to be applied when the dependent package "
"is built within Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_environment:22
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_environment:22
msgid ""
"List of environment modifications to be applied when the dependent package "
"is run outside of Spack. These are added to the resulting module file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_environment:27
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_environment:27
msgid ""
"The spec of the dependent package about to be built. This allows the "
"extendee (self) to query the dependent's state. Note that *this* package's "
"spec is available as ``self.spec``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_package:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_package:1
msgid "Set up Python module-scope variables for dependent packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_package:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_package:3
msgid "Called before the install() method of dependents."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_package:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_package:5
msgid ""
"Default implementation does nothing, but this can be overridden by an "
"extendable package to set up the module of its extensions. This is useful if "
"there are some common steps to installing all extensions for a certain "
"package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_package:12
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_package:12
msgid ""
"Extensions often need to invoke the ``python`` interpreter from the Python "
"installation being extended. This routine can put a ``python()`` Executable "
"object in the module scope for the extension package to simplify extension "
"installs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_package:17
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_package:17
msgid ""
"MPI compilers could set some variables in the dependent's scope that point "
"to ``mpicc``, ``mpicxx``, etc., allowing them to be called by common name "
"regardless of which MPI is used."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_package:21
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_package:21
msgid ""
"BLAS/LAPACK implementations can set some variables indicating the path to "
"their libraries, since these paths differ by BLAS/LAPACK implementation."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_package:25
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_package:25
msgid ""
"The Python ``module`` object of the dependent package. Packages can use this "
"to set module-scope variables for the dependent to use."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_dependent_package:29
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_dependent_package:29
msgid ""
"The spec of the dependent package about to be built. This allows the "
"extendee (self) to query the dependent's state.  Note that *this* package's "
"spec is available as ``self.spec``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_environment:1
msgid "Adds environment variables to the generated module file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.setup_environment:3
msgid "These environment variables come from running:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.tbb_libs:1
msgid "Supply LibraryList for linking TBB"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.IntelPackage.version_yearlike:1
msgid ""
"Return the version in a unified style, suitable for Version class "
"conditionals."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.debug_print:1
msgid ""
"Prints a message (usu. a variable) and the callers' names for a couple of "
"stack frames."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/intel.py:docstring
#: of spack.build_systems.intel.raise_lib_error:1
msgid ""
"Bails out with an error message. Shows args after the first as one per line, "
"tab-indented, useful for long paths to line up and stand out."
msgstr ""

#: ../spack/lib/spack/docs/spack.build_systems.rst:48
msgid "spack.build\\_systems.makefile module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage:1
msgid "Specialized class for packages that are built using editable Makefiles"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage:5
msgid ":py:meth:`~.MakefilePackage.edit`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage:6
msgid ":py:meth:`~.MakefilePackage.build`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage:7
msgid ":py:meth:`~.MakefilePackage.install`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage:9
msgid ""
"It is usually necessary to override the :py:meth:`~.MakefilePackage.edit` "
"phase, while :py:meth:`~.MakefilePackage.build` and :py:meth:`~."
"MakefilePackage.install` have sensible defaults. For a finer tuning you may "
"override:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage:17
msgid ":py:attr:`~.MakefilePackage.build_targets`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage:21
msgid ":py:attr:`~.MakefilePackage.install_targets`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage:25
msgid ":py:meth:`~.MakefilePackage.build_directory`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage:25
msgid "Directory where the Makefile is located"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage.build:1
msgid ""
"Calls make, passing :py:attr:`~.MakefilePackage.build_targets` as targets."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage.build_directory:1
msgid "Returns the directory containing the main Makefile"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage.build_directory:3
msgid "build directory"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage.build_targets:1
msgid ""
"Targets for ``make`` during the :py:meth:`~.MakefilePackage.build` phase"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage.edit:1
msgid "Edits the Makefile before calling make. This phase cannot be defaulted."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage.install:1
msgid ""
"Calls make, passing :py:attr:`~.MakefilePackage.install_targets` as targets."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage.install_targets:1
msgid ""
"Targets for ``make`` during the :py:meth:`~.MakefilePackage.install` phase"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/makefile.py:docstring
#: of spack.build_systems.makefile.MakefilePackage.phases:1
msgid "Phases of a package that is built with an hand-written Makefile"
msgstr ""

#: ../spack/lib/spack/docs/spack.build_systems.rst:56
msgid "spack.build\\_systems.meson module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage:1
msgid "Specialized class for packages built using Meson"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage:3
msgid ""
"For more information on the Meson build system, see: https://mesonbuild.com/"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage:8
msgid ":py:meth:`~.MesonPackage.meson`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage:9
msgid ":py:meth:`~.MesonPackage.build`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage:10
msgid ":py:meth:`~.MesonPackage.install`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage:12
msgid ""
"They all have sensible defaults and for many packages the only thing "
"necessary will be to override :py:meth:`~.MesonPackage.meson_args`. For a "
"finer tuning you may also override:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage:19
msgid ":py:meth:`~.MesonPackage.root_mesonlists_dir`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage:19
msgid "Location of the root MesonLists.txt"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage:22
msgid ":py:meth:`~.MesonPackage.build_directory`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage.archive_files:1
msgid "Files to archive for packages based on Meson"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage.check:1
msgid ""
"Searches the Meson-generated file for the target ``test`` and runs it if "
"found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage.flags_to_build_system_args:1
msgid ""
"Produces a list of all command line arguments to pass the specified compiler "
"flags to meson."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage.meson:1
msgid "Runs ``meson`` in the build directory"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage.meson_args:1
msgid ""
"Produces a list containing all the arguments that must be passed to meson, "
"except:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage.meson_args:4
msgid "``--prefix``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage.meson_args:5
msgid "``--libdir``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage.meson_args:6
msgid "``--buildtype``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage.meson_args:7
msgid "``--strip``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage.meson_args:11
msgid "list of arguments for meson"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage.phases:1
msgid "Phases of a Meson package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage.root_mesonlists_dir:1
msgid "The relative path to the directory containing meson.build"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage.root_mesonlists_dir:6
msgid "directory containing meson.build"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage.std_meson_args:1
msgid ""
"Standard meson arguments provided as a property for convenience of package "
"writers"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/meson.py:docstring
#: of spack.build_systems.meson.MesonPackage.std_meson_args:4
msgid "standard meson arguments"
msgstr ""

#: ../spack/lib/spack/docs/spack.build_systems.rst:64
msgid "spack.build\\_systems.octave module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/octave.py:docstring
#: of spack.build_systems.octave.OctavePackage:1
msgid ""
"Specialized class for Octave packages. See https://www.gnu.org/software/"
"octave/doc/v4.2.0/Installing-and-Removing-Packages.html for more information."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/octave.py:docstring
#: of spack.build_systems.octave.OctavePackage:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: spack.build_systems.python.PythonPackage:4
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: spack.build_systems.scons.SConsPackage:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: spack.build_systems.waf.WafPackage:4
msgid "This class provides the following phases that can be overridden:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/octave.py:docstring
#: of spack.build_systems.octave.OctavePackage:7
msgid ":py:meth:`~.OctavePackage.install`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/octave.py:docstring
#: of spack.build_systems.octave.OctavePackage.install:1
msgid "Install the package from the archive file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/octave.py:docstring
#: of spack.build_systems.octave.OctavePackage.setup_environment:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.setup_environment:1
msgid "Set up the compile and runtime environments for a package."
msgstr ""

#: ../spack/lib/spack/docs/spack.build_systems.rst:72
msgid "spack.build\\_systems.perl module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage:1
msgid "Specialized class for packages that are built using Perl."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage:3
msgid "This class provides four phases that can be overridden if required:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage:5
msgid ":py:meth:`~.PerlPackage.configure`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage:6
msgid ":py:meth:`~.PerlPackage.build`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage:7
msgid ":py:meth:`~.PerlPackage.check`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage:8
msgid ":py:meth:`~.PerlPackage.install`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage:12
msgid "The default methods use, in order of preference:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage:11
msgid "Makefile.PL,"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage:12
msgid "Build.PL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage:14
msgid ""
"Some packages may need to override :py:meth:`~.PerlPackage.configure_args`, "
"which produces a list of arguments for :py:meth:`~.PerlPackage.configure`. "
"Arguments should not include the installation base directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage.build:1
msgid "Builds a Perl package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage.check:1
msgid "Runs built-in tests of a Perl package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage.configure:1
msgid ""
"Runs Makefile.PL or Build.PL with arguments consisting of an appropriate "
"installation base directory followed by the list returned by :py:meth:`~."
"PerlPackage.configure_args`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage.configure:5
msgid "if neither Makefile.PL or Build.PL exist"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage.configure_args:1
msgid ""
"Produces a list containing the arguments that must be passed to :py:meth:`~."
"PerlPackage.configure`. Arguments should not include the installation base "
"directory, which is prepended automatically."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage.configure_args:5
msgid "list of arguments for Makefile.PL or Build.PL"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage.install:1
msgid "Installs a Perl package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/perl.py:docstring
#: of spack.build_systems.perl.PerlPackage.phases:1
msgid "Phases of a Perl package"
msgstr ""

#: ../spack/lib/spack/docs/spack.build_systems.rst:80
msgid "spack.build\\_systems.python module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:1
msgid ""
"Specialized class for packages that are built using Python setup.py files"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: spack.build_systems.waf.WafPackage:7
msgid "build"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:7
msgid "build_py"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:8
msgid "build_ext"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:9
msgid "build_clib"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:10
msgid "build_scripts"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:11
msgid "clean"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:12
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: spack.build_systems.waf.WafPackage:8
msgid "install"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:13
msgid "install_lib"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:14
msgid "install_headers"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:15
msgid "install_scripts"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:16
msgid "install_data"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:17
msgid "sdist"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:18
msgid "register"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:19
msgid "bdist"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:20
msgid "bdist_dumb"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:21
msgid "bdist_rpm"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:22
msgid "bdist_wininst"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:23
msgid "upload"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:24
msgid "check"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:26
msgid "These are all standard setup.py commands and can be found by running:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:32
msgid ""
"By default, only the 'build' and 'install' phases are run, but if you need "
"to run more phases, simply modify your ``phases`` list like so:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:39
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: spack.build_systems.waf.WafPackage:16
msgid "Each phase provides a function <phase> that runs:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:45
msgid ""
"Each phase also has a <phase_args> function that can pass arguments to this "
"call. All of these functions are empty except for the ``install_args`` "
"function, which passes ``--prefix=/path/to/installation/directory``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage:49
msgid ""
"If you need to run a phase which is not a standard setup.py command, you'll "
"need to define a function for it like so:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.add_files_to_view:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageViewMixin.add_files_to_view:1
msgid ""
"Given a map of package files to destination paths in the view, add the files "
"to the view. By default this adds all files. Alternative implementations may "
"skip some files, for example if other packages linked into the view already "
"include the file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.bdist:1
msgid "Create a built (binary) distribution."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.bdist_args:1
msgid "Arguments to pass to bdist."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.bdist_dumb:1
msgid "Create a \"dumb\" built distribution."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.bdist_dumb_args:1
msgid "Arguments to pass to bdist_dumb."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.bdist_rpm:1
msgid "Create an RPM distribution."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.bdist_rpm_args:1
msgid "Arguments to pass to bdist_rpm."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.bdist_wininst:1
msgid "Create an executable installer for MS Windows."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.bdist_wininst_args:1
msgid "Arguments to pass to bdist_wininst."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.build:1
msgid "Build everything needed to install."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.build_args:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: spack.build_systems.scons.SConsPackage.build_args:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: spack.build_systems.waf.WafPackage.build_args:1
msgid "Arguments to pass to build."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.build_clib:1
msgid "Build C/C++ libraries used by Python extensions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.build_clib_args:1
msgid "Arguments to pass to build_clib."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.build_directory:1
msgid "The directory containing the ``setup.py`` file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.build_ext:1
msgid "Build C/C++ extensions (compile/link to build directory)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.build_ext_args:1
msgid "Arguments to pass to build_ext."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.build_py:1
msgid "\"Build\" pure Python modules (copy to build directory)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.build_py_args:1
msgid "Arguments to pass to build_py."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.build_scripts:1
msgid "\"Build\" scripts (copy and fixup #! line)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.check:1
msgid "Perform some checks on the package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.check_args:1
msgid "Arguments to pass to check."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.clean:1
msgid "Clean up temporary files from 'build' command."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.clean_args:1
msgid "Arguments to pass to clean."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.import_module_test:1
msgid "Attempts to import the module that was just installed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.import_module_test:3
msgid ""
"This test is only run if the package overrides :py:attr:`import_modules` "
"with a list of module names."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.install:1
msgid "Install everything from build directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.install_args:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: spack.build_systems.scons.SConsPackage.install_args:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: spack.build_systems.waf.WafPackage.install_args:1
msgid "Arguments to pass to install."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.install_data:1
msgid "Install data files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.install_data_args:1
msgid "Arguments to pass to install_data."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.install_headers:1
msgid "Install C/C++ header files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.install_headers_args:1
msgid "Arguments to pass to install_headers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.install_lib:1
msgid "Install all Python modules (extensions and pure Python)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.install_lib_args:1
msgid "Arguments to pass to install_lib."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.install_scripts:1
msgid "Install scripts (Python or otherwise)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.install_scripts_args:1
msgid "Arguments to pass to install_scripts."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.register:1
msgid "Register the distribution with the Python package index."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.register_args:1
msgid "Arguments to pass to register."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.remove_files_from_view:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageViewMixin.remove_files_from_view:1
msgid ""
"Given a map of package files to files currently linked in the view, remove "
"the files from the view. The default implementation removes all files. "
"Alternative implementations may not remove all files. For example if two "
"packages include the same file, it should only be removed when both packages "
"are removed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.sdist:1
msgid "Create a source distribution (tarball, zip file, etc.)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.sdist_args:1
msgid "Arguments to pass to sdist."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.setup_file:1
msgid "Returns the name of the setup file to use."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.test:1
msgid "Run unit tests after in-place build."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.test:3
msgid "These tests are only run if the package actually has a 'test' command."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.test_args:1
msgid "Arguments to pass to test."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.upload:1
msgid "Upload binary package to PyPI."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.upload_args:1
msgid "Arguments to pass to upload."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/python.py:docstring
#: of spack.build_systems.python.PythonPackage.view_file_conflicts:1
msgid ""
"Report all file conflicts, excepting special cases for python. Specifically, "
"this does not report errors for duplicate __init__.py files for packages in "
"the same namespace."
msgstr ""

#: ../spack/lib/spack/docs/spack.build_systems.rst:88
msgid "spack.build\\_systems.qmake module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: of spack.build_systems.qmake.QMakePackage:1
msgid "Specialized class for packages built using qmake."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: of spack.build_systems.qmake.QMakePackage:3
msgid ""
"For more information on the qmake build system, see: http://doc.qt.io/qt-5/"
"qmake-manual.html"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: of spack.build_systems.qmake.QMakePackage:8
msgid ":py:meth:`~.QMakePackage.qmake`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: of spack.build_systems.qmake.QMakePackage:9
msgid ":py:meth:`~.QMakePackage.build`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: of spack.build_systems.qmake.QMakePackage:10
msgid ":py:meth:`~.QMakePackage.install`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: of spack.build_systems.qmake.QMakePackage:12
msgid ""
"They all have sensible defaults and for many packages the only thing "
"necessary will be to override :py:meth:`~.QMakePackage.qmake_args`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: of spack.build_systems.qmake.QMakePackage.check:1
msgid "Searches the Makefile for a ``check:`` target and runs it if found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: of spack.build_systems.qmake.QMakePackage.phases:1
msgid "Phases of a qmake package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: of spack.build_systems.qmake.QMakePackage.qmake:1
msgid "Run ``qmake`` to configure the project and generate a Makefile."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/qmake.py:docstring
#: of spack.build_systems.qmake.QMakePackage.qmake_args:1
msgid ""
"Produces a list containing all the arguments that must be passed to qmake"
msgstr ""

#: ../spack/lib/spack/docs/spack.build_systems.rst:96
msgid "spack.build\\_systems.r module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/r.py:docstring
#: of spack.build_systems.r.RPackage:1
msgid "Specialized class for packages that are built using R."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/r.py:docstring
#: of spack.build_systems.r.RPackage:3
msgid ""
"For more information on the R build system, see: https://stat.ethz.ch/R-"
"manual/R-devel/library/utils/html/INSTALL.html"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/r.py:docstring
#: of spack.build_systems.r.RPackage:6
msgid "This class provides a single phase that can be overridden:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/r.py:docstring
#: of spack.build_systems.r.RPackage:8
msgid ":py:meth:`~.RPackage.install`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/r.py:docstring
#: of spack.build_systems.r.RPackage:10
msgid ""
"It has sensible defaults, and for many packages the only thing necessary "
"will be to add dependencies"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/r.py:docstring
#: of spack.build_systems.r.RPackage.configure_args:1
msgid "Arguments to pass to install via ``--configure-args``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/r.py:docstring
#: of spack.build_systems.r.RPackage.configure_vars:1
msgid "Arguments to pass to install via ``--configure-vars``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/r.py:docstring
#: of spack.build_systems.r.RPackage.install:1
msgid "Installs an R package."
msgstr ""

#: ../spack/lib/spack/docs/spack.build_systems.rst:104
msgid "spack.build\\_systems.scons module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: of spack.build_systems.scons.SConsPackage:1
msgid "Specialized class for packages built using SCons."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: of spack.build_systems.scons.SConsPackage:3
msgid "See http://scons.org/documentation.html for more information."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: of spack.build_systems.scons.SConsPackage:7
msgid ":py:meth:`~.SConsPackage.build`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: of spack.build_systems.scons.SConsPackage:8
msgid ":py:meth:`~.SConsPackage.install`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: of spack.build_systems.scons.SConsPackage:10
msgid ""
"Packages that use SCons as a build system are less uniform than packages "
"that use other build systems. Developers can add custom subcommands or "
"variables that control the build. You will likely need to override :py:meth:"
"`~.SConsPackage.build_args` to pass the appropriate variables."
msgstr ""

# 37232671161840f1ae54c6b4bde00d4e
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: of spack.build_systems.scons.SConsPackage.build:1
msgid "Build the package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: of spack.build_systems.scons.SConsPackage.build_system_class:1
msgid ""
"To be used in UI queries that require to know which build-system class we "
"are using"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: of spack.build_systems.scons.SConsPackage.install:1
msgid "Install the package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: of spack.build_systems.scons.SConsPackage.phases:1
msgid "Phases of a SCons package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: of spack.build_systems.scons.SConsPackage.test:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: spack.build_systems.waf.WafPackage.test:1
msgid "Run unit tests after build."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/scons.py:docstring
#: of spack.build_systems.scons.SConsPackage.test:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: spack.build_systems.waf.WafPackage.installtest:3
#: spack.build_systems.waf.WafPackage.test:3
msgid ""
"By default, does nothing. Override this if you want to add package-specific "
"tests."
msgstr ""

#: ../spack/lib/spack/docs/spack.build_systems.rst:112
msgid "spack.build\\_systems.waf module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: of spack.build_systems.waf.WafPackage:1
msgid ""
"Specialized class for packages that are built using the Waf build system. "
"See https://waf.io/book/ for more information."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: of spack.build_systems.waf.WafPackage:6
msgid "configure"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: of spack.build_systems.waf.WafPackage:10
msgid "These are all standard Waf commands and can be found by running:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: of spack.build_systems.waf.WafPackage:22
msgid ""
"where <jobs> is the number of parallel jobs to build with. Each phase also "
"has a <phase_args> function that can pass arguments to this call. All of "
"these functions are empty except for the ``configure_args`` function, which "
"passes ``--prefix=/path/to/installation/prefix``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: of spack.build_systems.waf.WafPackage.build:1
msgid "Executes the build."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: of spack.build_systems.waf.WafPackage.build_directory:1
msgid "The directory containing the ``waf`` file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: of spack.build_systems.waf.WafPackage.configure:1
msgid "Configures the project."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: of spack.build_systems.waf.WafPackage.configure_args:1
msgid "Arguments to pass to configure."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: of spack.build_systems.waf.WafPackage.install:1
msgid "Installs the targets on the system."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: of spack.build_systems.waf.WafPackage.installtest:1
msgid "Run unit tests after install."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: of spack.build_systems.waf.WafPackage.python:1
msgid "The python ``Executable``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_systems/waf.py:docstring
#: of spack.build_systems.waf.WafPackage.waf:1
msgid "Runs the waf ``Executable``."
msgstr ""

# 0ea2e707182f4512beeafb5de6fbf1b2
# 930ea0318c7a4601823c6a72cc32f601
#: ../spack/lib/spack/docs/spack.build_systems.rst:121
#: ../spack/lib/spack/docs/spack.cmd.common.rst:17
#: ../spack/lib/spack/docs/spack.cmd.modules.rst:33
#: ../spack/lib/spack/docs/spack.cmd.rst:545
#: ../spack/lib/spack/docs/spack.compilers.rst:89
#: ../spack/lib/spack/docs/spack.hooks.rst:57
#: ../spack/lib/spack/docs/spack.modules.rst:41
#: ../spack/lib/spack/docs/spack.operating_systems.rst:49
#: ../spack/lib/spack/docs/spack.platforms.rst:49
#: ../spack/lib/spack/docs/spack.reporters.rst:25
#: ../spack/lib/spack/docs/spack.rst:370
#: ../spack/lib/spack/docs/spack.schema.rst:113
#: ../spack/lib/spack/docs/spack.test.rst:449
#: ../spack/lib/spack/docs/spack.util.imp.rst:25
#: ../spack/lib/spack/docs/spack.util.rst:176
msgid "Module contents"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.common.rst:2
msgid "spack.cmd.common package"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.common.rst:8
msgid "spack.cmd.common.arguments module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/common/arguments.py:docstring
#: of spack.cmd.common.arguments.add_common_arguments:1
msgid "Extend a parser with extra arguments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/common/arguments.py:docstring
#: of spack.cmd.common.arguments.add_common_arguments:3
msgid "parser to be extended"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/common/arguments.py:docstring
#: of spack.cmd.common.arguments.add_common_arguments:4
msgid "arguments to be added to the parser"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/common/__init__.py:docstring
#: of spack.cmd.common.print_module_placeholder_help:1
msgid "For use by commands to tell user how to activate shell support."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.modules.rst:2
msgid "spack.cmd.modules package"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.modules.rst:8
msgid "spack.cmd.modules.dotkit module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.modules.rst:16
msgid "spack.cmd.modules.lmod module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/modules/lmod.py:docstring
#: of spack.cmd.modules.lmod.setdefault:1
msgid "Set the default module file, when multiple are present"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.modules.rst:24
msgid "spack.cmd.modules.tcl module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/modules/__init__.py:docstring
#: of spack.cmd.modules:1
msgid "Implementation details of the ``spack module`` command."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/modules/__init__.py:docstring
#: of spack.cmd.modules.MultipleSpecsMatch:1 spack.cmd.modules.NoSpecMatches:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: spack.binary_distribution.NoOverwriteException:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring
#: spack.error.SpackError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring
#: spack.main.SpackCommandError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring
#: spack.util.web.HTMLParseError:1
msgid "Bases: :class:`Exception`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/modules/__init__.py:docstring
#: of spack.cmd.modules.MultipleSpecsMatch:1
msgid ""
"Raised when multiple specs match a constraint, in a context where this is "
"not allowed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/modules/__init__.py:docstring
#: of spack.cmd.modules.NoSpecMatches:1
msgid ""
"Raised when no spec matches a constraint, in a context where this is not "
"allowed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/modules/__init__.py:docstring
#: of spack.cmd.modules.callbacks:1
msgid ""
"Dictionary populated with the list of sub-commands. Each sub-command must be "
"callable and accept 3 arguments:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/modules/__init__.py:docstring
#: of spack.cmd.modules.callbacks:4
msgid "module_type: the type of module it refers to"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/modules/__init__.py:docstring
#: of spack.cmd.modules.callbacks:5
msgid "specs : the list of specs to be processed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/modules/__init__.py:docstring
#: of spack.cmd.modules.callbacks:6
msgid "args : namespace containing the parsed command line arguments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/modules/__init__.py:docstring
#: of spack.cmd.modules.find:1
msgid ""
"Returns the module file \"use\" name if there's a single match. Raises error "
"messages otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/modules/__init__.py:docstring
#: of spack.cmd.modules.loads:1
msgid "Prompt the list of modules associated with a list of specs"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/modules/__init__.py:docstring
#: of spack.cmd.modules.one_spec_or_raise:1
msgid ""
"Ensures exactly one spec has been selected, or raises the appropriate "
"exception."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/modules/__init__.py:docstring
#: of spack.cmd.modules.refresh:1
msgid ""
"Regenerates the module files for every spec in specs and every module type "
"in module types."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/modules/__init__.py:docstring
#: of spack.cmd.modules.rm:1
msgid ""
"Deletes the module files associated with every spec in specs, for every "
"module type in module types."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:2
msgid "spack.cmd package"
msgstr ""

# e5651210b9ac460bac4fb383a1f07c4c
#: ../spack/lib/spack/docs/spack.cmd.rst:5 ../spack/lib/spack/docs/spack.rst:5
#: ../spack/lib/spack/docs/spack.util.rst:5
msgid "Subpackages"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:16
msgid "spack.cmd.activate module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:24
msgid "spack.cmd.add module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:32
msgid "spack.cmd.arch module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:40
msgid "spack.cmd.blame module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:48
msgid "spack.cmd.bootstrap module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:56
msgid "spack.cmd.build module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:64
msgid "spack.cmd.build\\_env module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:72
msgid "spack.cmd.buildcache module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.check_binaries:1
msgid ""
"Check specs (either a single spec from --spec, or else the full set of "
"release specs) against remote binary mirror(s) to see if any need to be "
"rebuilt.  This command uses the process exit code to indicate its result, "
"specifically, if the exit code is non-zero, then at least one of the "
"indicated specs needs to be rebuilt."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.createtarball:1
msgid "create a binary package from an existing install"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.find_matching_specs:2
#: spack.cmd.buildcache.match_downloaded_specs:2
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: spack.cmd.uninstall.find_matching_specs:2
msgid "Returns a list of specs matching the not necessarily"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.find_matching_specs:2
#: spack.cmd.buildcache.match_downloaded_specs:2
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: spack.cmd.uninstall.find_matching_specs:2
msgid "concretized specs given from cli"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.find_matching_specs:4
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: spack.cmd.uninstall.find_matching_specs:6
msgid "list of specs to be matched against installed packages"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.find_matching_specs:5
#: spack.cmd.buildcache.match_downloaded_specs:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: spack.cmd.uninstall.find_matching_specs:8
msgid "if True multiple matches are admitted"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.find_matching_specs:7
#: spack.cmd.buildcache.match_downloaded_specs:7
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: spack.cmd.uninstall.find_matching_specs:11
msgid "list of specs"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.get_buildcache_name:1
msgid "Get name (prefix) of buildcache entries for this spec"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.get_tarball:1
msgid ""
"Download buildcache entry from a remote mirror to local folder.  This "
"command uses the process exit code to indicate its result, specifically, a "
"non-zero exit code indicates that the command failed to download at least "
"one of the required buildcache components.  Normally, just the tarball and ."
"spec.yaml files are required, but if the --require-cdashid argument was "
"provided, then a .cdashid file is also required."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.getkeys:1
msgid "get public keys available on mirrors"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.installtarball:1
msgid "install from a binary package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.listspecs:1
msgid "list binary packages available from mirrors"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.match_downloaded_specs:4
msgid "list of specs to be matched against buildcaches on mirror"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.preview:1
msgid ""
"Print a status tree of the selected specs that shows which nodes are "
"relocatable and which might not be."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.preview:4
msgid "command line arguments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/buildcache.py:docstring
#: of spack.cmd.buildcache.save_spec_yamls:1
msgid ""
"Get full spec for dependencies, relative to root spec, and write them to "
"files in the specified output directory.  Uses exit code to signal success "
"or failure.  An exit code of zero means the command was likely successful.  "
"If any errors or exceptions are encountered, or if expected command-line "
"arguments are not provided, then the exit code will be non-zero."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:80
msgid "spack.cmd.cd module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/cd.py:docstring of
#: spack.cmd.cd.setup_parser:1
msgid ""
"This is for decoration -- spack cd is used through spack's shell support.  "
"This allows spack cd to print a descriptive help message when called with -h."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:88
msgid "spack.cmd.checksum module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:96
msgid "spack.cmd.clean module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/clean.py:docstring
#: of spack.cmd.clean.AllClean:1
msgid "Bases: :class:`argparse.Action`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/clean.py:docstring
#: of spack.cmd.clean.AllClean:1
msgid "Activates flags -s -d -m and -p simultaneously"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:104
msgid "spack.cmd.clone module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:112
msgid "spack.cmd.commands module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/commands.py:docstring
#: of spack.cmd.commands.SpackArgparseRstWriter:1
msgid "Bases: :class:`llnl.util.argparsewriter.ArgparseRstWriter`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/commands.py:docstring
#: of spack.cmd.commands.SpackArgparseRstWriter:1
msgid "RST writer tailored for spack documentation."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/commands.py:docstring
#: of spack.cmd.commands.SubcommandWriter:1
msgid "Bases: :class:`llnl.util.argparsewriter.ArgparseWriter`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/commands.py:docstring
#: of spack.cmd.commands.formatter:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/list.py:docstring
#: spack.cmd.list.formatter:1
msgid "Decorator used to register formatters"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/commands.py:docstring
#: of spack.cmd.commands.formatters:1
msgid "list of command formatters"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:120
msgid "spack.cmd.compiler module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/compiler.py:docstring
#: of spack.cmd.compiler.compiler_find:1
msgid ""
"Search either $PATH or a list of paths OR MODULES for compilers and add them "
"to Spack's configuration."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/compiler.py:docstring
#: of spack.cmd.compiler.compiler_info:1
msgid "Print info about all compilers matching a spec."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:128
msgid "spack.cmd.compilers module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:136
msgid "spack.cmd.concretize module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:144
msgid "spack.cmd.config module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/config.py:docstring
#: of spack.cmd.config.config_blame:1
msgid "Print out line-by-line blame of merged YAML."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/config.py:docstring
#: of spack.cmd.config.config_edit:1
msgid "Edit the configuration file for a specific scope and config section."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/config.py:docstring
#: of spack.cmd.config.config_edit:3
msgid ""
"With no arguments and an active environment, edit the spack.yaml for the "
"active environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/config.py:docstring
#: of spack.cmd.config.config_get:1
msgid "Dump merged YAML configuration for a specific section."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/config.py:docstring
#: of spack.cmd.config.config_get:3
msgid ""
"With no arguments and an active environment, print the contents of the "
"environment's manifest file (spack.yaml)."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:152
msgid "spack.cmd.configure module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:160
msgid "spack.cmd.create module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.AutoreconfPackageTemplate:1
#: spack.cmd.create.AutotoolsPackageTemplate:1
#: spack.cmd.create.BazelPackageTemplate:1
#: spack.cmd.create.CMakePackageTemplate:1
#: spack.cmd.create.IntelPackageTemplate:1
#: spack.cmd.create.MakefilePackageTemplate:1
#: spack.cmd.create.MesonPackageTemplate:1
#: spack.cmd.create.OctavePackageTemplate:1
#: spack.cmd.create.PerlmakePackageTemplate:1
#: spack.cmd.create.PythonPackageTemplate:1
#: spack.cmd.create.QMakePackageTemplate:1 spack.cmd.create.RPackageTemplate:1
#: spack.cmd.create.SconsPackageTemplate:1
#: spack.cmd.create.WafPackageTemplate:1
msgid "Bases: :class:`spack.cmd.create.PackageTemplate`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.AutoreconfPackageTemplate:1
msgid ""
"Provides appropriate overrides for Autotools-based packages that *do not* "
"come with a ``configure`` script"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.AutotoolsPackageTemplate:1
msgid ""
"Provides appropriate overrides for Autotools-based packages that *do* come "
"with a ``configure`` script"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.BazelPackageTemplate:1
msgid "Provides appropriate overrides for Bazel-based packages"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.BuildSystemGuesser:1 spack.cmd.create.PackageTemplate:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/env.py:docstring
#: spack.cmd.env.ViewAction:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/info.py:docstring
#: spack.cmd.info.VariantFormatter:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/license.py:docstring
#: spack.cmd.license.LicenseError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/__init__.py:docstring
#: spack.hooks.HookRunner:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: spack.modules.common.BaseConfiguration:1
#: spack.modules.common.BaseFileLayout:1
#: spack.modules.common.BaseModuleFileWriter:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/abi.py:docstring
#: spack.abi.ABI:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: spack.architecture.Arch:1 spack.architecture.OperatingSystem:1
#: spack.architecture.Platform:1 spack.architecture.Target:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/caches.py:docstring
#: spack.caches.MirrorCache:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compiler.py:docstring
#: spack.compiler.Compiler:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: spack.concretize.Concretizer:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring
#: spack.config.ConfigScope:1 spack.config.Configuration:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring
#: spack.database.Database:1 spack.database.ForbiddenLock:1
#: spack.database.InstallRecord:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring
#: spack.dependency.Dependency:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: spack.directory_layout.DirectoryLayout:1
#: spack.directory_layout.ExtensionsLayout:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: spack.environment.Environment:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: spack.fetch_strategy.FetchStrategy:1 spack.fetch_strategy.FsCache:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: spack.filesystem_view.FilesystemView:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring
#: spack.graph.AsciiGraph:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring
#: spack.main.SpackCommand:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: spack.multimethod.SpecMultiMethod:1 spack.multimethod.when:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.InstallPhase:1 spack.package.PackageViewMixin:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: spack.package_prefs.PackagePrefs:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring
#: spack.parse.Lexer:1 spack.parse.Parser:1 spack.parse.Token:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring
#: spack.patch.Patch:1 spack.patch.PatchCache:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: spack.provider_index.ProviderIndex:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring
#: spack.repo.Indexer:1 spack.repo.Repo:1 spack.repo.RepoIndex:1
#: spack.repo.RepoPath:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring
#: spack.report.collect_info:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/reporter.py:docstring
#: spack.reporter.Reporter:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/resource.py:docstring
#: spack.resource.Resource:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring
#: spack.spec.Spec:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec_set.py:docstring
#: spack.spec_set.CombinatorialSpecSet:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring
#: spack.stage.DIYStage:1 spack.stage.Stage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring
#: spack.store.Store:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring
#: spack.tengine.Context:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring
#: spack.variant.AbstractVariant:1 spack.variant.Variant:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring
#: spack.version.Version:1 spack.version.VersionRange:1
#: spack.version.VersionList:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/build_systems.py:docstring
#: spack.test.build_systems.TestAutotoolsPackage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize.py:docstring
#: spack.test.concretize.TestConcretize:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize_preferences.py:docstring
#: spack.test.concretize_preferences.TestConcretizePreferences:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: spack.test.conftest.MockLayout:1 spack.test.conftest.MockPackage:1
#: spack.test.conftest.MockPackageMultiRepo:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/flag_handlers.py:docstring
#: spack.test.flag_handlers.TestFlagHandlers:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/install.py:docstring
#: spack.test.install.MockStage:1 spack.test.install.RemovePrefixChecker:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/packages.py:docstring
#: spack.test.packages.TestPackage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/sbang.py:docstring
#: spack.test.sbang.ScriptDirectory:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: spack.test.spec_dag.TestSpecDag:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_semantics.py:docstring
#: spack.test.spec_semantics.TestSpecSematics:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_syntax.py:docstring
#: spack.test.spec_syntax.TestSpecSyntax:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/stage.py:docstring
#: spack.test.stage.TestStage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/tengine.py:docstring
#: spack.test.tengine.TestContext:1 spack.test.tengine.TestTengineEnvironment:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/variant.py:docstring
#: spack.test.variant.TestBoolValuedVariant:1
#: spack.test.variant.TestMultiValuedVariant:1
#: spack.test.variant.TestSingleValuedVariant:1
#: spack.test.variant.TestVariant:1 spack.test.variant.TestVariantMapTest:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/crypto.py:docstring
#: spack.util.crypto.Checker:1 spack.util.crypto.DeprecatedHash:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: spack.util.environment.EnvironmentModifications:1
#: spack.util.environment.NameModifier:1
#: spack.util.environment.NameValueModifier:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: spack.util.executable.Executable:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: spack.util.file_cache.FileCache:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/gpg.py:docstring
#: spack.util.gpg.Gpg:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: spack.util.naming.NamespaceTrie:1 spack.util.naming.NamespaceTrie.Element:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/pattern.py:docstring
#: spack.util.pattern.Bunch:1
msgid "Bases: :class:`object`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.BuildSystemGuesser:1
msgid ""
"An instance of BuildSystemGuesser provides a callable object to be used "
"during ``spack create``. By passing this object to ``spack checksum``, we "
"can take a peek at the fetched tarball and discern the build system it uses"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.CMakePackageTemplate:1
msgid "Provides appropriate overrides for CMake-based packages"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.IntelPackageTemplate:1
msgid "Provides appropriate overrides for licensed Intel software"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.MakefilePackageTemplate:1
msgid "Provides appropriate overrides for Makefile packages"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.MesonPackageTemplate:1
msgid "Provides appropriate overrides for meson-based packages"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.OctavePackageTemplate:1
msgid "Provides appropriate overrides for octave packages"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.PackageTemplate:1
msgid "Provides the default values to be used for the package file template"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.PackageTemplate.write:1
msgid "Writes the new package file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.PerlbuildPackageTemplate:1
msgid "Bases: :class:`spack.cmd.create.PerlmakePackageTemplate`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.PerlbuildPackageTemplate:1
msgid ""
"Provides appropriate overrides for Perl extensions that come with a Build.PL "
"instead of a Makefile.PL"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.PerlmakePackageTemplate:1
msgid ""
"Provides appropriate overrides for Perl extensions that come with a Makefile."
"PL"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.PythonPackageTemplate:1
msgid "Provides appropriate overrides for python extensions"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.QMakePackageTemplate:1
msgid "Provides appropriate overrides for QMake-based packages"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.RPackageTemplate:1
msgid "Provides appropriate overrides for R extensions"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.SconsPackageTemplate:1
msgid "Provides appropriate overrides for SCons-based packages"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.WafPackageTemplate:1
msgid "Provides appropriate override for Waf-based packages"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_build_system:1
msgid "Determine the build system template."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_build_system:3
msgid ""
"If a template is specified, always use that. Otherwise, if a URL is "
"provided, download the tarball and peek inside to guess what build system it "
"uses. Otherwise, use a generic template by default."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_build_system:7 spack.cmd.create.get_name:6
#: spack.cmd.create.get_repository:4 spack.cmd.create.get_url:5
#: spack.cmd.create.get_versions:7
msgid "The arguments given to ``spack create``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_build_system:9
msgid ""
"The first_stage_function given to ``spack checksum`` which records the build "
"system it detects"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_build_system:13
msgid "The name of the build system template to use"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_build_system:0 spack.cmd.create.get_name:0
#: spack.cmd.create.get_repository:0 spack.cmd.create.get_url:0
#: spack.cmd.create.get_versions:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: spack.cmd.uninstall.dependent_environments:0
#: spack.cmd.uninstall.inactive_dependent_environments:0
#: spack.cmd.uninstall.installed_dependents:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring
#: spack.cmd.url.name_parsed_correctly:0 spack.cmd.url.remove_separators:0
#: spack.cmd.url.url_list_parsing:0 spack.cmd.url.version_parsed_correctly:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: spack.modules.common.merge_config_rules:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: spack.modules.lmod.LmodFileLayout.token_to_path:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: spack.build_environment.get_std_cmake_args:0
#: spack.build_environment.get_std_meson_args:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: spack.environment.Environment.add:0 spack.environment.activate:0
#: spack.environment.deactivate:0 spack.environment.find_environment:0
#: spack.environment.get_env:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: spack.fetch_strategy.CacheURLFetchStrategy.fetch:0
#: spack.fetch_strategy.FetchStrategy.cachable:0
#: spack.fetch_strategy.FetchStrategy.fetch:0
#: spack.fetch_strategy.GitFetchStrategy.cachable:0
#: spack.fetch_strategy.GitFetchStrategy.fetch:0
#: spack.fetch_strategy.GoFetchStrategy.fetch:0
#: spack.fetch_strategy.HgFetchStrategy.cachable:0
#: spack.fetch_strategy.HgFetchStrategy.fetch:0
#: spack.fetch_strategy.SvnFetchStrategy.cachable:0
#: spack.fetch_strategy.SvnFetchStrategy.fetch:0
#: spack.fetch_strategy.URLFetchStrategy.cachable:0
#: spack.fetch_strategy.URLFetchStrategy.fetch:0
#: spack.fetch_strategy.from_kwargs:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.all_urls:0
#: spack.package.PackageBase.fetch_remote_versions:0
#: spack.package.PackageBase.unit_test_check:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring
#: spack.repo.Indexer.needs_update:0 spack.repo.PatchIndexer.needs_update:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring
#: spack.url.find_list_url:0 spack.url.parse_name:0
#: spack.url.parse_name_and_version:0 spack.url.parse_name_offset:0
#: spack.url.parse_version:0 spack.url.parse_version_offset:0
#: spack.url.strip_name_suffixes:0 spack.url.strip_version_suffixes:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring
#: spack.variant.AbstractVariant.compatible:0
#: spack.variant.AbstractVariant.constrain:0
#: spack.variant.AbstractVariant.copy:0
#: spack.variant.AbstractVariant.satisfies:0
#: spack.variant.AbstractVariant.value:0
#: spack.variant.AbstractVariant.yaml_entry:0
#: spack.variant.MultiValuedVariant.satisfies:0
#: spack.variant.SingleValuedVariant.compatible:0
#: spack.variant.SingleValuedVariant.constrain:0
#: spack.variant.SingleValuedVariant.satisfies:0
#: spack.variant.SingleValuedVariant.yaml_entry:0
#: spack.variant.Variant.allowed_values:0 spack.variant.Variant.make_default:0
#: spack.variant.Variant.make_variant:0 spack.variant.VariantMap.concrete:0
#: spack.variant.VariantMap.constrain:0 spack.variant.VariantMap.copy:0
#: spack.variant.VariantMap.satisfies:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring
#: spack.version.Version.dashed:0 spack.version.Version.dotted:0
#: spack.version.Version.joined:0 spack.version.Version.underscored:0
#: spack.version.Version.up_to:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/imp_importer.py:docstring
#: spack.util.imp.imp_importer.load_source:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/importlib_importer.py:docstring
#: spack.util.imp.importlib_importer.load_source:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: spack.util.environment.EnvironmentModifications.from_sourcing_file:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: spack.util.executable.Executable.command:0
#: spack.util.executable.Executable.name:0
#: spack.util.executable.Executable.path:0 spack.util.executable.which:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: spack.util.log_parse.parse_log_events:0
#: spack.util.log_parse.make_log_context:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: spack.util.naming.simplify_name:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/prefix.py:docstring
#: spack.util.prefix.Prefix.join:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/string.py:docstring
#: spack.util.string.plural:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring
#: spack.util.web.get_checksums_for_versions:0
msgid "Return type"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_name:1
msgid "Get the name of the package based on the supplied arguments."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_name:3
msgid ""
"If a name was provided, always use that. Otherwise, if a URL was provided, "
"extract the name from that. Otherwise, use a default."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_name:10 spack.cmd.create.get_versions:9
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/edit.py:docstring
#: spack.cmd.edit.edit_package:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring
#: spack.url.parse_name:8
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring
#: spack.util.web.get_checksums_for_versions:10
msgid "The name of the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_repository:1
msgid ""
"Returns a Repo object that will allow us to determine the path where the new "
"package file should be created."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_repository:6
msgid "The name of the package to create"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_repository:9
msgid "A Repo object capable of determining the path to the package file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_url:1
msgid "Get the URL to use."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_url:3
msgid "Use a default URL if none is provided."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_url:8
msgid "The URL of the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_versions:1
msgid "Returns a list of versions and hashes for a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_versions:3
msgid "Also returns a BuildSystemGuesser object."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_versions:5
msgid "Returns default values if no URL is provided."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_versions:12
msgid "Versions and hashes, and a     BuildSystemGuesser object"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_versions:14
msgid "Versions and hashes, and a"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/create.py:docstring
#: of spack.cmd.create.get_versions:15
msgid "BuildSystemGuesser object"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:168
msgid "spack.cmd.deactivate module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:176
msgid "spack.cmd.debug module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:184
msgid "spack.cmd.dependencies module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:192
msgid "spack.cmd.dependents module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/dependents.py:docstring
#: of spack.cmd.dependents.get_dependents:1
msgid "Get all dependents for a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/dependents.py:docstring
#: of spack.cmd.dependents.get_dependents:3
msgid "name of the package whose dependents should be returned"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/dependents.py:docstring
#: of spack.cmd.dependents.get_dependents:5
msgid "dictionary of dependents, from inverted_dependencies()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/dependents.py:docstring
#: of spack.cmd.dependents.get_dependents:7
msgid "return transitive dependents when True"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/dependents.py:docstring
#: of spack.cmd.dependents.inverted_dependencies:1
msgid ""
"Iterate through all packages and return a dictionary mapping package names "
"to possible dependnecies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/dependents.py:docstring
#: of spack.cmd.dependents.inverted_dependencies:4
msgid ""
"Virtual packages are included as sources, so that you can query dependents "
"of, e.g., `mpi`, but virtuals are not included as actual dependents."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:200
msgid "spack.cmd.diy module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:208
msgid "spack.cmd.docs module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:216
msgid "spack.cmd.edit module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/edit.py:docstring of
#: spack.cmd.edit.edit_package:1
msgid "Opens the requested package file in your favorite $EDITOR."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/edit.py:docstring of
#: spack.cmd.edit.edit_package:5
msgid "The path to the repository containing this package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/edit.py:docstring of
#: spack.cmd.edit.edit_package:7
msgid "A valid namespace registered with Spack"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:224
msgid "spack.cmd.env module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/env.py:docstring of
#: spack.cmd.env.env:1
msgid "Look for a function called environment_<name> and call it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/env.py:docstring of
#: spack.cmd.env.env_activate_setup_parser:1
msgid "set the current environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/env.py:docstring of
#: spack.cmd.env.env_create_setup_parser:1
msgid "create a new environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/env.py:docstring of
#: spack.cmd.env.env_deactivate_setup_parser:1
msgid "deactivate any active environment in the shell"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/env.py:docstring of
#: spack.cmd.env.env_list_setup_parser:1
msgid "list available environments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/env.py:docstring of
#: spack.cmd.env.env_loads_setup_parser:1
msgid "list modules for an installed environment '(see spack module loads)'"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/env.py:docstring of
#: spack.cmd.env.env_remove:1
msgid "Remove a *named* environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/env.py:docstring of
#: spack.cmd.env.env_remove:3
msgid ""
"This removes an environment managed by Spack. Directory environments and "
"`spack.yaml` files embedded in repositories should be removed manually."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/env.py:docstring of
#: spack.cmd.env.env_remove_setup_parser:1
msgid "remove an existing environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/env.py:docstring of
#: spack.cmd.env.env_status_setup_parser:1
msgid "print whether there is an active environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/env.py:docstring of
#: spack.cmd.env.env_view_setup_parser:1
msgid "manage a view associated with the environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/env.py:docstring of
#: spack.cmd.env.subcommand_functions:1
msgid "Dictionary mapping subcommand names and aliases to functions"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/env.py:docstring of
#: spack.cmd.env.subcommands:1
msgid "List of subcommands of `spack env`"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:232
msgid "spack.cmd.extensions module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:240
msgid "spack.cmd.fetch module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:248
msgid "spack.cmd.find module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/find.py:docstring of
#: spack.cmd.find.setup_env:1
msgid "Create a function for decorating specs when in an environment."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:256
msgid "spack.cmd.flake8 module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/flake8.py:docstring
#: of spack.cmd.flake8.add_pattern_exemptions:1
msgid "Add a flake8 exemption to a line."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/flake8.py:docstring
#: of spack.cmd.flake8.changed_files:1
msgid "Get list of changed files in the Spack repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/flake8.py:docstring
#: of spack.cmd.flake8.exclude_directories:1
msgid "List of directories to exclude from checks."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/flake8.py:docstring
#: of spack.cmd.flake8.filter_file:1
msgid "Filter a single file through all the patterns in pattern_exemptions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/flake8.py:docstring
#: of spack.cmd.flake8.is_package:1
msgid "Whether flake8 should consider a file as a core file or a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/flake8.py:docstring
#: of spack.cmd.flake8.is_package:3
msgid ""
"We run flake8 with different exceptions for the core and for packages, since "
"we allow `from spack import *` and poking globals into packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/flake8.py:docstring
#: of spack.cmd.flake8.pattern_exemptions:8
msgid "This is a dict that maps:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/flake8.py:docstring
#: of spack.cmd.flake8.pattern_exemptions:8
msgid "filename pattern ->"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/flake8.py:docstring
#: of spack.cmd.flake8.pattern_exemptions:8
msgid "flake8 exemption code ->"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/flake8.py:docstring
#: of spack.cmd.flake8.pattern_exemptions:8
msgid "list of patterns, for which matching lines should have codes applied."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/flake8.py:docstring
#: of spack.cmd.flake8.pattern_exemptions:10
msgid ""
"For each file, if the filename pattern matches, we'll add per-line "
"exemptions if any patterns in the sub-dict match."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:264
msgid "spack.cmd.gpg module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/gpg.py:docstring of
#: spack.cmd.gpg.gpg_create:1
msgid "create a new key"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/gpg.py:docstring of
#: spack.cmd.gpg.gpg_export:1
msgid "export a secret key"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/gpg.py:docstring of
#: spack.cmd.gpg.gpg_init:1
msgid "add the default keys to the keyring"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/gpg.py:docstring of
#: spack.cmd.gpg.gpg_list:1
msgid "list keys available in the keyring"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/gpg.py:docstring of
#: spack.cmd.gpg.gpg_sign:1
msgid "sign a package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/gpg.py:docstring of
#: spack.cmd.gpg.gpg_trust:1
msgid "add a key to the keyring"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/gpg.py:docstring of
#: spack.cmd.gpg.gpg_untrust:1
msgid "remove a key from the keyring"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/gpg.py:docstring of
#: spack.cmd.gpg.gpg_verify:1
msgid "verify a signed package"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:272
msgid "spack.cmd.graph module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:280
msgid "spack.cmd.help module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:288
msgid "spack.cmd.info module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/info.py:docstring of
#: spack.cmd.info.padder:1
msgid "Return a function to pad elements of a list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/info.py:docstring of
#: spack.cmd.info.print_text_info:1
msgid "Print out a plain text description of a package."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:296
msgid "spack.cmd.install module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/install.py:docstring
#: of spack.cmd.install.default_log_file:1
msgid ""
"Computes the default filename for the log file and creates the corresponding "
"directory if not present"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/install.py:docstring
#: of spack.cmd.install.install_spec:1
msgid "Do the actual installation."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/install.py:docstring
#: of spack.cmd.install.update_kwargs_from_args:1
msgid ""
"Parse cli arguments and construct a dictionary that will be passed to "
"Package.do_install API"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:304
msgid "spack.cmd.license module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/license.py:docstring
#: of spack.cmd.license.apache2_mit_spdx:1
msgid "Spack's license identifier"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/license.py:docstring
#: of spack.cmd.license.git:1
msgid "need the git command to check new files"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/license.py:docstring
#: of spack.cmd.license.lgpl_exceptions:1
msgid ""
"licensed files that can have LGPL language in them so far, just this command "
"-- so it can find LGPL things elsewhere"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/license.py:docstring
#: of spack.cmd.license.license_lines:1
msgid ""
"SPDX license id must appear in the first <license_lines> lines of a file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/license.py:docstring
#: of spack.cmd.license.licensed_files:1
msgid "regular expressions for licensed files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/license.py:docstring
#: of spack.cmd.license.list_files:1
msgid "list files in spack that should have license headers"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/license.py:docstring
#: of spack.cmd.license.verify:1
msgid "verify that files in spack have the right license header"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:312
msgid "spack.cmd.list module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/list.py:docstring of
#: spack.cmd.list.filter_by_name:1
msgid "Filters the sequence of packages according to user prescriptions"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/list.py:docstring of
#: spack.cmd.list.filter_by_name:3
msgid "sequence of packages"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/list.py:docstring of
#: spack.cmd.list.filter_by_name:4
msgid "parsed command line arguments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/list.py:docstring of
#: spack.cmd.list.filter_by_name:6
msgid "filtered and sorted list of packages"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/list.py:docstring of
#: spack.cmd.list.github_url:1
msgid "Link to a package file on github."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/list.py:docstring of
#: spack.cmd.list.html:1
msgid "Print out information on all packages in Sphinx HTML."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/list.py:docstring of
#: spack.cmd.list.html:3
msgid ""
"This is intended to be inlined directly into Sphinx documentation. We write "
"HTML instead of RST for speed; generating RST from *all* packages causes the "
"Sphinx build to take forever. Including this as raw HTML is much faster."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/list.py:docstring of
#: spack.cmd.list.rows_for_ncols:1
msgid "Print out rows in a table with ncols of elts laid out vertically."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/list.py:docstring of
#: spack.cmd.list.rst:1
msgid "Print out information on all packages in restructured text."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/list.py:docstring of
#: spack.cmd.list.rst_table:1
msgid "Print out a RST-style table."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:320
msgid "spack.cmd.load module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/load.py:docstring of
#: spack.cmd.load.setup_parser:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/unload.py:docstring
#: spack.cmd.unload.setup_parser:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/unuse.py:docstring
#: spack.cmd.unuse.setup_parser:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/use.py:docstring
#: spack.cmd.use.setup_parser:1
msgid ""
"Parser is only constructed so that this prints a nice help message with -h."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:328
msgid "spack.cmd.location module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:336
msgid "spack.cmd.log\\_parse module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:344
msgid "spack.cmd.mirror module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/mirror.py:docstring
#: of spack.cmd.mirror.mirror_add:1
msgid "Add a mirror to Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/mirror.py:docstring
#: of spack.cmd.mirror.mirror_create:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring
#: spack.mirror.create:1
msgid ""
"Create a directory to be used as a spack mirror, and fill it with package "
"archives."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/mirror.py:docstring
#: of spack.cmd.mirror.mirror_list:1
msgid "Print out available mirrors to the console."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/mirror.py:docstring
#: of spack.cmd.mirror.mirror_remove:1
msgid "Remove a mirror by name."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:352
msgid "spack.cmd.module module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:360
msgid "spack.cmd.patch module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:368
msgid "spack.cmd.pkg module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/pkg.py:docstring of
#: spack.cmd.pkg.pkg_add:1
msgid "Add a package to the git stage."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/pkg.py:docstring of
#: spack.cmd.pkg.pkg_added:1
msgid "Show packages added since a commit."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/pkg.py:docstring of
#: spack.cmd.pkg.pkg_diff:1
msgid "Compare packages available in two different git revisions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/pkg.py:docstring of
#: spack.cmd.pkg.pkg_list:1
msgid "List packages associated with a particular spack git revision."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/pkg.py:docstring of
#: spack.cmd.pkg.pkg_removed:1
msgid "Show packages removed since a commit."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:376
msgid "spack.cmd.providers module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:384
msgid "spack.cmd.pydoc module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:392
msgid "spack.cmd.python module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:400
msgid "spack.cmd.reindex module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:408
msgid "spack.cmd.release\\_jobs module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: of spack.cmd.release_jobs.compute_spec_deps:1
msgid ""
"Computes all the dependencies for the spec(s) and generates a JSON object "
"which provides both a list of unique spec names as well as a comprehensive "
"list of all the edges in the dependency graph.  For example, given a single "
"spec like 'readline@7.0', this function generates the following JSON object:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: of spack.cmd.release_jobs.compute_spec_deps:51
msgid ""
"The object can be optionally written out to some stream.  This is useful, "
"for example, when we need to concretize and generate the dependencies of a "
"spec in a specific docker container."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: of spack.cmd.release_jobs.stage_spec_jobs:5
msgid "Take a set of release specs along with a dictionary describing the"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: of spack.cmd.release_jobs.stage_spec_jobs:2
msgid ""
"available docker containers and what compilers they have, and generate a "
"list of \"stages\", where the jobs in any stage are dependent only on jobs "
"in previous stages.  This allows us to maximize build parallelism within the "
"gitlab-ci framework."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: of spack.cmd.release_jobs.stage_spec_jobs:7
msgid "Iterable containing all the specs to build."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: of spack.cmd.release_jobs.stage_spec_jobs:10
msgid ""
"Describes the docker containers available to use for concretizing specs (and "
"also for the gitlab runners to use for building packages).  The schema can "
"be found at \"lib/spack/spack/schema/os_container_mapping.py\""
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: of spack.cmd.release_jobs.stage_spec_jobs:15
msgid ""
"If provided, this indicates not to use the containers for concretizing the "
"release specs, but rather just assume the current system is in the "
"\"containers\" dictionary.  A SpackError will be raised if the current "
"system is not in that dictionary."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: of spack.cmd.release_jobs.stage_spec_jobs:35
msgid ""
"Returns: A tuple of information objects describing the specs, dependencies"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: of spack.cmd.release_jobs.stage_spec_jobs:23
msgid "and stages:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: of spack.cmd.release_jobs.stage_spec_jobs:28
msgid "spec_labels: A dictionary mapping the spec labels which are made of"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: of spack.cmd.release_jobs.stage_spec_jobs:26
msgid ""
"(pkg-name/hash-prefix), to objects containing \"rootSpec\" and \"spec\" "
"keys.  The root spec is the spec of which this spec is a dependency and the "
"spec is the formatted spec string for this spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: of spack.cmd.release_jobs.stage_spec_jobs:32
msgid "deps: A dictionary where the keys should also have appeared as keys in"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: of spack.cmd.release_jobs.stage_spec_jobs:31
msgid ""
"the spec_labels dictionary, and the values are the set of dependencies for "
"that spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: of spack.cmd.release_jobs.stage_spec_jobs:35
msgid "stages: An ordered list of sets, each of which contains all the jobs to"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/release_jobs.py:docstring
#: of spack.cmd.release_jobs.stage_spec_jobs:35
msgid ""
"built in that stage.  The jobs are expressed in the same format as the keys "
"in the spec_labels and deps objects."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:416
msgid "spack.cmd.remove module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:424
msgid "spack.cmd.repo module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/repo.py:docstring of
#: spack.cmd.repo.repo_add:1
msgid "Add a package source to Spack's configuration."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/repo.py:docstring of
#: spack.cmd.repo.repo_create:1
msgid "Create a new package repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/repo.py:docstring of
#: spack.cmd.repo.repo_list:1
msgid "Show registered repositories and their namespaces."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/repo.py:docstring of
#: spack.cmd.repo.repo_remove:1
msgid "Remove a repository from Spack's configuration."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:432
msgid "spack.cmd.resource module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/resource.py:docstring
#: of spack.cmd.resource.resource_list:1
msgid "list all resources known to spack (currently just patches)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/resource.py:docstring
#: of spack.cmd.resource.resource_show:1
msgid "show a resource, identified by its checksum"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:440
msgid "spack.cmd.restage module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:448
msgid "spack.cmd.setup module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:456
msgid "spack.cmd.spec module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:464
msgid "spack.cmd.stage module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:472
msgid "spack.cmd.test module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/test.py:docstring of
#: spack.cmd.test.do_list:1
msgid "Print a lists of tests than what pytest offers."
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:480
msgid "spack.cmd.uninstall module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: of spack.cmd.uninstall.dependent_environments:1
msgid "Map each spec to environments that depend on it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: of spack.cmd.uninstall.dependent_environments:3
#: spack.cmd.uninstall.installed_dependents:3
msgid "list of Specs"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: of spack.cmd.uninstall.dependent_environments:6
#: spack.cmd.uninstall.inactive_dependent_environments:7
msgid "mapping from spec to lists of dependent Environments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: of spack.cmd.uninstall.do_uninstall:1
msgid "Uninstalls all the specs in a list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: of spack.cmd.uninstall.do_uninstall:3
#: spack.cmd.uninstall.find_matching_specs:4
msgid "active environment, or ``None`` if there is not one"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: of spack.cmd.uninstall.do_uninstall:5
msgid "list of specs to be uninstalled"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: of spack.cmd.uninstall.do_uninstall:7
msgid "force uninstallation (boolean)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: of spack.cmd.uninstall.inactive_dependent_environments:1
msgid "Strip the active environment from a dependent map."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: of spack.cmd.uninstall.inactive_dependent_environments:3
msgid ""
"Take the output of ``dependent_environment()`` and remove the active "
"environment from all mappings.  Remove any specs in the map that now have no "
"dependent environments.  Return the result."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: of spack.cmd.uninstall.inactive_dependent_environments:9
msgid "mapping from spec to lists of *inactive* dependent Environments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: of spack.cmd.uninstall.installed_dependents:1
msgid "Map each spec to a list of its installed dependents."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: of spack.cmd.uninstall.installed_dependents:5
msgid "the active environment, or None"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: of spack.cmd.uninstall.installed_dependents:8
msgid ""
"two mappings: one from specs to their dependent     environments in the "
"active environment (or global scope if     there is no environment), and one "
"from specs to their     dependents in *inactive* environments (empty if "
"there is no     environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: of spack.cmd.uninstall.installed_dependents:13
msgid "two mappings: one from specs to their dependent"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/uninstall.py:docstring
#: of spack.cmd.uninstall.installed_dependents:11
msgid ""
"environments in the active environment (or global scope if there is no "
"environment), and one from specs to their dependents in *inactive* "
"environments (empty if there is no environment"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:488
msgid "spack.cmd.unload module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:496
msgid "spack.cmd.unuse module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:504
msgid "spack.cmd.upload\\_s3 module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/upload_s3.py:docstring
#: of spack.cmd.upload_s3.update_index:1
msgid "Update the index of an s3 buildcache"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/upload_s3.py:docstring
#: of spack.cmd.upload_s3.upload_spec:1
msgid "Upload a spec to s3 bucket"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:512
msgid "spack.cmd.url module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.name_parsed_correctly:1
msgid "Determine if the name of a package was correctly parsed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.name_parsed_correctly:3 spack.cmd.url.url_list_parsing:10
#: spack.cmd.url.version_parsed_correctly:3
msgid "The Spack package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.name_parsed_correctly:5
msgid "The name that was extracted from the URL"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.name_parsed_correctly:8
#: spack.cmd.url.version_parsed_correctly:8
msgid "True if the name was correctly parsed, else False"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.print_name_and_version:1
msgid ""
"Prints a URL. Underlines the detected name with dashes and the detected "
"version with tildes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.print_name_and_version:4
msgid "The url to parse"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.remove_separators:1
msgid "Removes separator characters ('.', '_', and '-') from a version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.remove_separators:3
msgid ""
"A version like 1.2.3 may be displayed as 1_2_3 in the URL. Make sure 1.2.3, "
"1-2-3, 1_2_3, and 123 are considered equal. Unfortunately, this also means "
"that 1.23 and 12.3 are equal."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.remove_separators:7
msgid "A version"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.remove_separators:10
msgid "The version with all separator characters removed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.url_list_parsing:1
msgid "Helper function for :func:`url_list`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.url_list_parsing:3
msgid "The arguments given to ``spack url list``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.url_list_parsing:5
msgid "List of URLs that have already been added"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.url_list_parsing:7
msgid "A URL to potentially add to ``urls`` depending on ``args``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.url_list_parsing:13
msgid "The updated set of ``urls``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.version_parsed_correctly:1
msgid "Determine if the version of a package was correctly parsed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/url.py:docstring of
#: spack.cmd.url.version_parsed_correctly:5
msgid "The version that was extracted from the URL"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:520
msgid "spack.cmd.use module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:528
msgid "spack.cmd.versions module"
msgstr ""

#: ../spack/lib/spack/docs/spack.cmd.rst:536
msgid "spack.cmd.view module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/view.py:docstring of
#: spack.cmd.view:1
msgid "Produce a \"view\" of a Spack DAG."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/view.py:docstring of
#: spack.cmd.view:3
msgid ""
"A \"view\" is file hierarchy representing the union of a number of Spack-"
"installed package file hierarchies.  The union is formed from:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/view.py:docstring of
#: spack.cmd.view:6
msgid "specs resolved from the package names given by the user (the seeds)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/view.py:docstring of
#: spack.cmd.view:8
msgid "all dependencies of the seeds unless user specifies `--no-dependencies`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/view.py:docstring of
#: spack.cmd.view:10
msgid ""
"less any specs with names matching the regular expressions given by `--"
"exclude`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/view.py:docstring of
#: spack.cmd.view:13
msgid ""
"The `view` can be built and tore down via a number of methods (the \"actions"
"\"):"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/view.py:docstring of
#: spack.cmd.view:15
msgid ""
"symlink :: a file system view which is a directory hierarchy that is the "
"union of the hierarchies of the installed packages in the DAG where "
"installed files are referenced via symlinks."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/view.py:docstring of
#: spack.cmd.view:19
msgid "hardlink :: like the symlink view but hardlinks are used."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/view.py:docstring of
#: spack.cmd.view:21
msgid ""
"statlink :: a view producing a status report of a symlink or hardlink view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/view.py:docstring of
#: spack.cmd.view:24
msgid ""
"The file system view concept is imspired by Nix, implemented by brett."
"viren@gmail.com ca 2016."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/view.py:docstring of
#: spack.cmd.view:27
msgid ""
"All operations on views are performed via proxy objects such as "
"YamlFilesystemView."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/view.py:docstring of
#: spack.cmd.view.disambiguate_in_view:1
msgid ""
"When dealing with querying actions (remove/status) we only need to "
"disambiguate among specs in the view"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/view.py:docstring of
#: spack.cmd.view.view:1
msgid "Produce a view of a set of packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.all_commands:1
msgid "Get a sorted list of all spack commands."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.all_commands:3
msgid ""
"This will list the lib/spack/spack/cmd directory and find the commands there "
"to construct the list.  It does not actually import the python files -- just "
"gets the names."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.cmd_name:1
msgid "Convert module name (with ``_``) to command name (with ``-``)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.disambiguate_spec:1
msgid "Given a spec, figure out which installed package it refers to."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.disambiguate_spec:3
msgid "a spec to disambiguate"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.disambiguate_spec:5
msgid ""
"a spack environment, if one is active, or None if no environment is active"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:1
msgid "Display human readable specs with customizable formatting."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:3
msgid ""
"Prints the supplied specs to the screen, formatted according to the "
"arguments provided."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:6
msgid ""
"Specs are grouped by architecture and compiler, and columnized if possible.  "
"There are three possible \"modes\":"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:9
msgid "``short`` (default): short specs with name and version, columnized"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:10
msgid "``paths``: Two columns: one for specs, one for paths"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:11
msgid "``deps``: Dependency-tree style, like ``spack spec``; can get long"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:13
msgid ""
"Options can add more information to the default display. Options can be "
"provided either as keyword arguments or as an argparse namespace. Keyword "
"arguments take precedence over settings in the argparse namespace."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:18
msgid "the specs to display"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:20
msgid "namespace containing formatting arguments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: spack.directives.patch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring
#: spack.mirror.create:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring
#: spack.spec.Spec.format:0 spack.spec.Spec.old_format:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: spack.util.environment.EnvironmentModifications.from_sourcing_file:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: spack.util.executable.which:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring
#: spack.util.web.find_versions_of_archive:0
msgid "Keyword Arguments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:24
msgid "Either 'short', 'paths', or 'deps'"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:26
msgid "Display short hashes with specs"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:28
msgid "Display full hashes with specs (supersedes ``long``)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:30
msgid "Print namespaces along with names"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:32
msgid "Show compiler flags with specs"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:34
msgid "Show variants with specs"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:36
msgid "indent each line this much"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:38
msgid "dictionary mappng specs to decorators"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:40
msgid "called at start of arch/compiler sections"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.display_specs:42
msgid "show headers even when arch/compiler aren't defined"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.elide_list:1
msgid ""
"Takes a long list and limits it to a smaller number of elements, replacing "
"intervening elements with '...'.  For example::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.elide_list:6
msgid "gives::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.extant_file:1
msgid "Argparse type for files that exist."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.get_command:1
msgid "Imports the command's function from a module and returns it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.get_command:3 spack.cmd.get_module:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: spack.extensions.get_module:4
msgid ""
"name of the command for which to get a module (contains ``-``, not ``_``)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.get_module:1
msgid "Imports the module for a particular command name and returns it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.parse_specs:1
msgid ""
"Convenience function for parsing arguments from specs.  Handles common "
"exceptions and dies if there are errors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.python_name:1
msgid "Convert ``-`` to ``_`` in command name, to make a valid identifier."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.remove_options:1
msgid "Remove some options from a parser."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/cmd/__init__.py:docstring
#: of spack.cmd.spack_is_git_repo:1
msgid "Ensure that this instance of Spack is a git clone."
msgstr ""

#: ../spack/lib/spack/docs/spack.compilers.rst:2
msgid "spack.compilers package"
msgstr ""

#: ../spack/lib/spack/docs/spack.compilers.rst:8
msgid "spack.compilers.arm module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/arm.py:docstring
#: of spack.compilers.arm.Arm:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/cce.py:docstring
#: spack.compilers.cce.Cce:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/clang.py:docstring
#: spack.compilers.clang.Clang:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/fj.py:docstring
#: spack.compilers.fj.Fj:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/gcc.py:docstring
#: spack.compilers.gcc.Gcc:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/intel.py:docstring
#: spack.compilers.intel.Intel:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/nag.py:docstring
#: spack.compilers.nag.Nag:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/pgi.py:docstring
#: spack.compilers.pgi.Pgi:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/xl.py:docstring
#: spack.compilers.xl.Xl:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/compilers.py:docstring
#: spack.test.compilers.MockCompiler:1
msgid "Bases: :class:`spack.compiler.Compiler`"
msgstr ""

#: ../spack/lib/spack/docs/spack.compilers.rst:16
msgid "spack.compilers.cce module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/cce.py:docstring
#: of spack.compilers.cce.Cce:1
msgid "Cray compiler environment compiler."
msgstr ""

#: ../spack/lib/spack/docs/spack.compilers.rst:24
msgid "spack.compilers.clang module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/clang.py:docstring
#: of spack.compilers.clang.Clang.default_version:1
msgid ""
"The ``--version`` option works for clang compilers. On most platforms, "
"output looks like this::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/clang.py:docstring
#: of spack.compilers.clang.Clang.default_version:8
msgid "On macOS, it looks like this::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/clang.py:docstring
#: of spack.compilers.clang.Clang.extract_version_from_output:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compiler.py:docstring
#: spack.compiler.Compiler.extract_version_from_output:1
msgid "Extracts the version from compiler's output."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/clang.py:docstring
#: of spack.compilers.clang.Clang.setup_custom_environment:1
msgid "Set the DEVELOPER_DIR environment for the Xcode toolchain."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/clang.py:docstring
#: of spack.compilers.clang.Clang.setup_custom_environment:3
msgid ""
"On macOS, not all buildsystems support querying CC and CXX for the compilers "
"to use and instead query the Xcode toolchain for what compiler to run. This "
"side-steps the spack wrappers. In order to inject spack into this setup, we "
"need to copy (a subset of) Xcode.app and replace the compiler executables "
"with symlinks to the spack wrapper. Currently, the stage is used to store "
"the Xcode.app copies. We then set the 'DEVELOPER_DIR' environment variables "
"to cause the xcrun and related tools to use this Xcode.app."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/clang.py:docstring
#: of spack.compilers.clang.f77_mapping:1
msgid "compiler symlink mappings for mixed f77 compilers"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/clang.py:docstring
#: of spack.compilers.clang.fc_mapping:1
msgid "compiler symlink mappings for mixed f90/fc compilers"
msgstr ""

#: ../spack/lib/spack/docs/spack.compilers.rst:32
msgid "spack.compilers.fj module"
msgstr ""

#: ../spack/lib/spack/docs/spack.compilers.rst:40
msgid "spack.compilers.gcc module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/gcc.py:docstring
#: of spack.compilers.gcc.Gcc.default_version:1
msgid ""
"Older versions of gcc use the ``-dumpversion`` option. Output looks like "
"this::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/gcc.py:docstring
#: of spack.compilers.gcc.Gcc.default_version:6
#: spack.compilers.gcc.Gcc.fc_version:11
msgid ""
"In GCC 7, this option was changed to only return the major version of the "
"compiler::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/gcc.py:docstring
#: of spack.compilers.gcc.Gcc.default_version:11
#: spack.compilers.gcc.Gcc.fc_version:16
msgid ""
"A new ``-dumpfullversion`` option was added that gives us what we want::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/gcc.py:docstring
#: of spack.compilers.gcc.Gcc.fc_version:1
msgid ""
"Older versions of gfortran use the ``-dumpversion`` option. Output looks "
"like this::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/gcc.py:docstring
#: of spack.compilers.gcc.Gcc.fc_version:7
msgid "or::"
msgstr ""

#: ../spack/lib/spack/docs/spack.compilers.rst:48
msgid "spack.compilers.intel module"
msgstr ""

#: ../spack/lib/spack/docs/spack.compilers.rst:56
msgid "spack.compilers.nag module"
msgstr ""

#: ../spack/lib/spack/docs/spack.compilers.rst:64
msgid "spack.compilers.pgi module"
msgstr ""

#: ../spack/lib/spack/docs/spack.compilers.rst:72
msgid "spack.compilers.xl module"
msgstr ""

#: ../spack/lib/spack/docs/spack.compilers.rst:80
msgid "spack.compilers.xl\\_r module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/xl_r.py:docstring
#: of spack.compilers.xl_r.XlR:1
msgid "Bases: :class:`spack.compilers.xl.Xl`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/__init__.py:docstring
#: of spack.compilers:1
msgid ""
"This module contains functions related to finding compilers on the system "
"and configuring Spack to use multiple compilers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/__init__.py:docstring
#: of spack.compilers.CompilerDuplicateError:1
#: spack.compilers.CompilerSpecInsufficientlySpecificError:1
#: spack.compilers.InvalidCompilerConfigurationError:1
#: spack.compilers.NoCompilerForSpecError:1 spack.compilers.NoCompilersError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/permissions_setters.py:docstring
#: spack.hooks.permissions_setters.InvalidPermissionsError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: spack.modules.common.ModulesError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: spack.architecture.NoPlatformError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: spack.binary_distribution.NewLayoutException:1
#: spack.binary_distribution.NoChecksumException:1
#: spack.binary_distribution.NoGpgException:1
#: spack.binary_distribution.NoKeyException:1
#: spack.binary_distribution.NoVerifyException:1
#: spack.binary_distribution.PickKeyException:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: spack.build_environment.InstallError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: spack.concretize.InsufficientArchitectureInfoError:1
#: spack.concretize.NoBuildError:1 spack.concretize.NoCompilersForArchError:1
#: spack.concretize.NoValidVersionError:1
#: spack.concretize.UnavailableCompilerVersionError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring
#: spack.config.ConfigError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring
#: spack.database.CorruptDatabaseError:1 spack.database.ForbiddenLockError:1
#: spack.database.InvalidDatabaseVersionError:1
#: spack.database.MissingDependenciesError:1
#: spack.database.NonConcreteSpecAddError:1
#: spack.database.UpstreamDatabaseLockingError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: spack.directory_layout.DirectoryLayoutError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: spack.environment.SpackEnvironmentError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring
#: spack.error.NoHeadersError:1 spack.error.NoLibrariesError:1
#: spack.error.SpecError:1 spack.error.UnsupportedPlatformError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: spack.fetch_strategy.FetchError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring
#: spack.mirror.MirrorError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: spack.multimethod.MultiMethodError:1 spack.multimethod.NoSuchMethodError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.DependencyConflictError:1 spack.package.FetchError:1
#: spack.package.InstallError:1 spack.package.PackageError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: spack.package_prefs.VirtualInPackagesYAMLError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring
#: spack.parse.ParseError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring
#: spack.patch.NoSuchPatchError:1 spack.patch.PatchDirectiveError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: spack.provider_index.ProviderIndexError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring
#: spack.relocate.InstallRootStringException:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring
#: spack.repo.RepoError:1 spack.spec.SpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring
#: spack.stage.StageError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring
#: spack.url.UrlParseError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/install.py:docstring
#: spack.test.install.MockInstallError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: spack.util.executable.ProcessError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: spack.util.file_cache.CacheError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/package_hash.py:docstring
#: spack.util.package_hash.PackageHashError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/spack_json.py:docstring
#: spack.util.spack_json.SpackJSONError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/spack_yaml.py:docstring
#: spack.util.spack_yaml.SpackYAMLError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring
#: spack.util.web.SpackWebError:1
msgid "Bases: :class:`spack.error.SpackError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/__init__.py:docstring
#: of spack.compilers.add_compilers_to_config:1
msgid "Add compilers to the config for the specified architecture."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/__init__.py:docstring
#: of spack.compilers.add_compilers_to_config:3
msgid "a list of Compiler objects."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/__init__.py:docstring
#: of spack.compilers.add_compilers_to_config:4
msgid "configuration scope to modify."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/__init__.py:docstring
#: of spack.compilers.all_compilers_config:1
msgid ""
"Return a set of specs for all the compiler versions currently available to "
"build with.  These are instances of CompilerSpec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/__init__.py:docstring
#: of spack.compilers.all_os_classes:1
msgid ""
"Return the list of classes for all operating systems available on this "
"platform"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/__init__.py:docstring
#: of spack.compilers.class_for_compiler_name:1
msgid "Given a compiler module name, get the corresponding Compiler class."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/__init__.py:docstring
#: of spack.compilers.find_compilers:1
msgid ""
"Return a list of compilers found in the supplied paths. This invokes the "
"find_compilers() method for each operating system associated with the host "
"platform, and appends the compilers detected to a list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/__init__.py:docstring
#: of spack.compilers.get_compiler_config:1
msgid "Return the compiler configuration for the specified architecture."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/__init__.py:docstring
#: of spack.compilers.pkg_spec_for_compiler:1
msgid "Return the spec of the package that provides the compiler."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/__init__.py:docstring
#: of spack.compilers.supported_compilers:1
msgid "Return a set of names of compilers supported by Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compilers/__init__.py:docstring
#: of spack.compilers.supported_compilers:3
msgid ""
"See available_compilers() to get a list of all the available versions of "
"supported compilers."
msgstr ""

#: ../spack/lib/spack/docs/spack.hooks.rst:2
msgid "spack.hooks package"
msgstr ""

#: ../spack/lib/spack/docs/spack.hooks.rst:8
msgid "spack.hooks.extensions module"
msgstr ""

#: ../spack/lib/spack/docs/spack.hooks.rst:16
msgid "spack.hooks.licensing module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/licensing.py:docstring
#: of spack.hooks.licensing.post_install:1
msgid ""
"This hook symlinks local licenses to the global license for licensed "
"software."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/licensing.py:docstring
#: of spack.hooks.licensing.pre_install:1
msgid "This hook handles global license setup for licensed software."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/licensing.py:docstring
#: of spack.hooks.licensing.set_up_license:1
msgid "Prompt the user, letting them know that a license is required."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/licensing.py:docstring
#: of spack.hooks.licensing.set_up_license:3
msgid ""
"For packages that rely on license files, a global license file is created "
"and opened for editing."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/licensing.py:docstring
#: of spack.hooks.licensing.set_up_license:6
msgid ""
"For packages that rely on environment variables to point to a license, a "
"warning message is printed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/licensing.py:docstring
#: of spack.hooks.licensing.set_up_license:9
msgid ""
"For all other packages, documentation on how to set up a license is printed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/licensing.py:docstring
#: of spack.hooks.licensing.symlink_license:1
msgid "Create local symlinks that point to the global license file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/licensing.py:docstring
#: of spack.hooks.licensing.write_license_file:1
msgid "Writes empty license file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/licensing.py:docstring
#: of spack.hooks.licensing.write_license_file:3
msgid ""
"Comments give suggestions on alternative methods of installing a license."
msgstr ""

#: ../spack/lib/spack/docs/spack.hooks.rst:24
msgid "spack.hooks.module\\_file\\_generation module"
msgstr ""

#: ../spack/lib/spack/docs/spack.hooks.rst:32
msgid "spack.hooks.permissions\\_setters module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/permissions_setters.py:docstring
#: of spack.hooks.permissions_setters.InvalidPermissionsError:1
msgid "Error class for invalid permission setters"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/permissions_setters.py:docstring
#: of spack.hooks.permissions_setters.forall_files:1
msgid "Apply function to all files in directory, with file as first arg."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/permissions_setters.py:docstring
#: of spack.hooks.permissions_setters.forall_files:3
msgid "Does not apply to the root dir. Does not apply to links"
msgstr ""

#: ../spack/lib/spack/docs/spack.hooks.rst:40
msgid "spack.hooks.sbang module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/sbang.py:docstring
#: of spack.hooks.sbang.filter_shebang:1
msgid "Adds a second shebang line, using sbang, at the beginning of a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/sbang.py:docstring
#: of spack.hooks.sbang.post_install:1
msgid ""
"This hook edits scripts so that they call /bin/bash $spack_prefix/bin/sbang "
"instead of something longer than the shebang limit."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/sbang.py:docstring
#: of spack.hooks.sbang.shebang_too_long:1
msgid "Detects whether a file has a shebang line that is too long."
msgstr ""

#: ../spack/lib/spack/docs/spack.hooks.rst:48
msgid "spack.hooks.yaml\\_version\\_check module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/yaml_version_check.py:docstring
#: of spack.hooks.yaml_version_check:1
msgid ""
"Yaml Version Check is a module for ensuring that config file formats are "
"compatible with the current version of Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/__init__.py:docstring
#: of spack.hooks:1
msgid ""
"This package contains modules with hooks for various stages in the Spack "
"install process.  You can add modules here and they'll be executed by "
"package at various times during the package lifecycle."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/__init__.py:docstring
#: of spack.hooks:5
msgid ""
"Each hook is just a function that takes a package as a parameter. Hooks are "
"not executed in any particular order."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/__init__.py:docstring
#: of spack.hooks:8
msgid "Currently the following hooks are supported:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/__init__.py:docstring
#: of spack.hooks:10
msgid "pre_run()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/__init__.py:docstring
#: of spack.hooks:11
msgid "pre_install(spec)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/__init__.py:docstring
#: of spack.hooks:12
msgid "post_install(spec)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/__init__.py:docstring
#: of spack.hooks:13
msgid "pre_uninstall(spec)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/__init__.py:docstring
#: of spack.hooks:14
msgid "post_uninstall(spec)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/hooks/__init__.py:docstring
#: of spack.hooks:16
msgid ""
"This can be used to implement support for things like module systems (e.g. "
"modules, dotkit, etc.) or to add other custom features."
msgstr ""

#: ../spack/lib/spack/docs/spack.modules.rst:2
msgid "spack.modules package"
msgstr ""

#: ../spack/lib/spack/docs/spack.modules.rst:8
msgid "spack.modules.common module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common:1
msgid ""
"Here we consolidate the logic for creating an abstract description of the "
"information that module systems need."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common:4
msgid "This information maps **a single spec** to:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common:6
msgid "a unique module filename"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common:7
msgid "the module file content"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common:9
msgid "and is divided among four classes:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common:11
msgid ""
"a configuration class that provides a convenient interface to query details "
"about the configuration for the spec under consideration."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common:14
msgid ""
"a layout class that provides the information associated with module file "
"names and directories"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common:17
msgid ""
"a context class that provides the dictionary used by the template engine to "
"generate the module file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common:20
msgid ""
"a writer that collects and uses the information above to either write or "
"remove the module file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common:23
msgid ""
"Each of the four classes needs to be sub-classed when implementing a new "
"module type."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseConfiguration:1
msgid ""
"Manipulates the information needed to generate a module file to make "
"querying easier. It needs to be sub-classed for specific module types."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseConfiguration.blacklisted:1
msgid "Returns True if the module has been blacklisted, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseConfiguration.env:1
msgid "List of environment modifications that should be done in the module."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseConfiguration.environment_blacklist:1
msgid "List of variables that should be left unmodified."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseConfiguration.hash:1
msgid "Hash tag for the module or None"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseConfiguration.literals_to_load:1
msgid "List of literal modules to be loaded."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseConfiguration.naming_scheme:1
msgid "Naming scheme suitable for non-hierarchical layouts"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseConfiguration.specs_to_load:1
msgid "List of specs that should be loaded in the module file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseConfiguration.specs_to_prereq:1
msgid "List of specs that should be prerequisite of the module file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseConfiguration.suffixes:1
msgid "List of suffixes that should be appended to the module file name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseConfiguration.template:1
msgid ""
"Returns the name of the template to use for the module file or None if not "
"specified in the configuration."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseConfiguration.verbose:1
msgid "Returns True if the module file needs to be verbose, False otherwise"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseContext:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/tengine.py:docstring
#: spack.test.tengine.TestContext.A:1 spack.test.tengine.TestContext.B:1
msgid "Bases: :class:`spack.tengine.Context`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseContext:1
msgid "Provides the base context needed for template rendering."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseContext:3
msgid ""
"This class needs to be sub-classed for specific module types. The following "
"attributes need to be implemented:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseContext:6
msgid "fields"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseContext.autoload:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: spack.modules.tcl.TclContext.prerequisites:1
msgid "List of modules that needs to be loaded automatically."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseContext.environment_modifications:1
msgid "List of environment modifications to be processed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseContext.verbose:1
msgid "Verbosity level."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseFileLayout:1
msgid ""
"Provides information on the layout of module files. Needs to be sub-classed "
"for specific module types."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseFileLayout.dirname:1
msgid "Root folder for module files of this type."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseFileLayout.extension:1
msgid "This needs to be redefined"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseFileLayout.filename:1
msgid "Name of the module file for the current spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseFileLayout.spec:1
msgid "Spec under consideration"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseFileLayout.use_name:1
msgid ""
"Returns the 'use' name of the module i.e. the name you have to type to "
"console to use it. This implementation fits the needs of most non-"
"hierarchical layouts."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseModuleFileWriter.remove:1
msgid "Deletes the module file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseModuleFileWriter.write:1
msgid "Writes the module file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.BaseModuleFileWriter.write:3
msgid ""
"if True it is fine to overwrite an already existing file. If False the "
"operation is skipped an we print a warning to the user."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.DefaultTemplateNotDefined:1
msgid ""
"Bases: :class:`AttributeError`, :class:`spack.modules.common.ModulesError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.DefaultTemplateNotDefined:1
msgid ""
"Raised if the attribute 'default_template' has not been specified in the "
"derived classes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.ModuleIndexEntry:1
msgid "Bases: :class:`tuple`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.ModuleIndexEntry.path:1
msgid "Alias for field number 0"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.ModuleIndexEntry.use_name:1
msgid "Alias for field number 1"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.ModulesError:1
msgid "Base error for modules."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.ModulesTemplateNotFoundError:1
msgid ""
"Bases: :class:`spack.modules.common.ModulesError`, :class:`RuntimeError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.ModulesTemplateNotFoundError:1
msgid "Raised if the template for a module file was not found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.configuration:1
msgid "config section for this file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.dependencies:1
msgid ""
"Returns the list of dependent specs for a given spec, according to the "
"request passed as parameter."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.dependencies:4
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring
#: spack.relocate.is_relocatable:3
msgid "spec to be analyzed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.dependencies:5
msgid "either 'none', 'direct' or 'all'"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.dependencies:7
msgid ""
"list of dependencies  The return list will be empty if request is 'none', "
"will contain the direct dependencies if request is 'direct', or the entire "
"DAG if request is 'all'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.dependencies:7
msgid "list of dependencies"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.dependencies:9
msgid ""
"The return list will be empty if request is 'none', will contain the direct "
"dependencies if request is 'direct', or the entire DAG if request is 'all'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.merge_config_rules:1
msgid ""
"Parses the module specific part of a configuration and returns a dictionary "
"containing the actions to be performed on the spec passed as an argument."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.merge_config_rules:5
msgid ""
"module specific configuration (e.g. entries under the top-level 'tcl' key)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.merge_config_rules:7
msgid "spec for which we need to generate a module file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.merge_config_rules:9
msgid "actions to be taken on the spec passed as an argument"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.prefix_inspections:1
msgid "Inspections that needs to be done on spec prefixes"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.root_path:1
msgid "Returns the root folder for module file installation."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.root_path:3
msgid "name of the module system t be used (e.g. 'tcl')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.root_path:5
msgid "root folder for module file installation"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.roots:1
msgid "Root folders where the various module files should be written"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.update_dictionary_extending_lists:1
msgid "Updates a dictionary, but extends lists instead of overriding them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.update_dictionary_extending_lists:3
msgid "dictionary to be updated"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/common.py:docstring
#: of spack.modules.common.update_dictionary_extending_lists:4
msgid "update to be applied"
msgstr ""

#: ../spack/lib/spack/docs/spack.modules.rst:16
msgid "spack.modules.dotkit module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit:1
msgid ""
"This module implements the classes necessary to generate dotkit modules."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.DotkitConfiguration:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: spack.modules.lmod.LmodConfiguration:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: spack.modules.tcl.TclConfiguration:1
msgid "Bases: :class:`spack.modules.common.BaseConfiguration`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.DotkitConfiguration:1
msgid "Configuration class for dotkit module files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.DotkitContext:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: spack.modules.lmod.LmodContext:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: spack.modules.tcl.TclContext:1
msgid "Bases: :class:`spack.modules.common.BaseContext`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.DotkitContext:1
msgid "Context class for dotkit module files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.DotkitFileLayout:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: spack.modules.lmod.LmodFileLayout:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: spack.modules.tcl.TclFileLayout:1
msgid "Bases: :class:`spack.modules.common.BaseFileLayout`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.DotkitFileLayout:1
msgid "File layout for dotkit module files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.DotkitFileLayout.extension:1
msgid "file extension of dotkit module files"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.DotkitModulefileWriter:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: spack.modules.lmod.LmodModulefileWriter:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: spack.modules.tcl.TclModulefileWriter:1
#: spack.modules.DotkitModulefileWriter:1 spack.modules.TclModulefileWriter:1
#: spack.modules.LmodModulefileWriter:1
msgid "Bases: :class:`spack.modules.common.BaseModuleFileWriter`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.DotkitModulefileWriter:1
#: spack.modules.DotkitModulefileWriter:1
msgid "Writer class for dotkit module files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.configuration:1
msgid "Dotkit specific part of the configuration"
msgstr ""

# cd3b01fdb54c49d5907f5cfd0fdb4303
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.configuration_registry:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: spack.modules.lmod.configuration_registry:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: spack.modules.tcl.configuration_registry:1
msgid "configuration}"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.configuration_registry:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: spack.modules.lmod.configuration_registry:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: spack.modules.tcl.configuration_registry:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: spack.fetch_strategy.HgFetchStrategy.hg:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring
#: spack.package.PackageBase.fullname:0
msgid "type"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.configuration_registry:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: spack.modules.lmod.configuration_registry:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: spack.modules.tcl.configuration_registry:3
msgid "Caches the configuration {spec_hash"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.make_configuration:1
msgid "Returns the dotkit configuration for spec"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.make_context:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: spack.modules.lmod.make_context:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: spack.modules.tcl.make_context:1
msgid "Returns the context information for spec"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/dotkit.py:docstring
#: of spack.modules.dotkit.make_layout:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: spack.modules.lmod.make_layout:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: spack.modules.tcl.make_layout:1
msgid "Returns the layout information for spec"
msgstr ""

#: ../spack/lib/spack/docs/spack.modules.rst:24
msgid "spack.modules.lmod module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.CoreCompilersNotFoundError:1
msgid "Bases: :class:`spack.error.SpackError`, :class:`KeyError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.CoreCompilersNotFoundError:1
msgid ""
"Error raised if the key 'core_compilers' has not been specified in the "
"configuration file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodConfiguration:1
msgid "Configuration class for lmod module files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodConfiguration.available:1
msgid "Returns a dictionary of the services that are currently available."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodConfiguration.core_compilers:1
msgid "Returns the list of \"Core\" compilers"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodConfiguration.core_compilers:3
msgid ""
"if the key was not     specified in the configuration file or the "
"sequence     is empty"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodConfiguration.hierarchy_tokens:1
msgid ""
"Returns the list of tokens that are part of the modulefile hierarchy. "
"'compiler' is always present."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodConfiguration.missing:1
msgid "Returns the list of tokens that are not available."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodConfiguration.provides:1
msgid ""
"Returns a dictionary mapping all the services provided by this spec to the "
"spec itself."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodConfiguration.requires:1
msgid ""
"Returns a dictionary mapping all the requirements of this spec to the actual "
"provider. 'compiler' is always present among the requirements."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodContext:1
msgid "Context class for lmod module files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodContext.conditionally_unlocked_paths:1
msgid ""
"Returns the list of paths that are unlocked conditionally. Each item in the "
"list is a tuple with the structure (condition, path)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodContext.has_conditional_modifications:1
msgid ""
"True if this module modifies MODULEPATH conditionally to the presence of "
"other services in the environment, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodContext.has_modulepath_modifications:1
msgid "True if this module modifies MODULEPATH, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodContext.missing:1
msgid "Returns a list of missing services."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodContext.name_part:1
msgid "Name of this provider."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodContext.provides:1
msgid "Returns the dictionary of provided services."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodContext.unlocked_paths:1
msgid "Returns the list of paths that are unlocked unconditionally."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodContext.version_part:1
msgid "Version of this provider."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodFileLayout:1
msgid "File layout for lmod module files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodFileLayout.arch_dirname:1
msgid "Returns the root folder for THIS architecture"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodFileLayout.available_path_parts:1
msgid ""
"List of path parts that are currently available. Needed to construct the "
"file name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodFileLayout.extension:1
msgid "file extension of lua module files"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodFileLayout.filename:1
msgid "Returns the filename for the current module file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodFileLayout.token_to_path:1
msgid "Transforms a hierarchy token into the corresponding path part."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodFileLayout.token_to_path:3
msgid "name of the service in the hierarchy"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodFileLayout.token_to_path:5
msgid "actual provider of the service"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodFileLayout.token_to_path:7
msgid "part of the path associated with the service"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodFileLayout.unlocked_paths:1
msgid "Returns a dictionary mapping conditions to a list of unlocked paths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodFileLayout.unlocked_paths:4
msgid ""
"The paths that are unconditionally unlocked are under the key 'None'. The "
"other keys represent the list of services you need loaded to unlock the "
"corresponding paths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodFileLayout.use_name:1
msgid ""
"Returns the 'use' name of the module i.e. the name you have to type to "
"console to use it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.LmodModulefileWriter:1
#: spack.modules.LmodModulefileWriter:1
msgid "Writer class for lmod module files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.NonVirtualInHierarchyError:1
msgid "Bases: :class:`spack.error.SpackError`, :class:`TypeError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.NonVirtualInHierarchyError:1
msgid ""
"Error raised if non-virtual specs are used as hierarchy tokens in the lmod "
"section of 'modules.yaml'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.configuration:1
msgid "lmod specific part of the configuration"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.guess_core_compilers:1
msgid "Guesses the list of core compilers installed in the system."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.guess_core_compilers:3
msgid ""
"if True writes the core compilers to the modules.yaml configuration file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.guess_core_compilers:7
msgid "List of core compilers, if found, or None"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/lmod.py:docstring
#: of spack.modules.lmod.make_configuration:1
msgid "Returns the lmod configuration for spec"
msgstr ""

#: ../spack/lib/spack/docs/spack.modules.rst:32
msgid "spack.modules.tcl module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: of spack.modules.tcl:1
msgid ""
"This module implements the classes necessary to generate TCL non-"
"hierarchical modules."
msgstr ""

# cd3b01fdb54c49d5907f5cfd0fdb4303
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: of spack.modules.tcl.TclConfiguration:1
msgid "Configuration class for tcl module files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: of spack.modules.tcl.TclConfiguration.conflicts:1
msgid "Conflicts for this module file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: of spack.modules.tcl.TclContext:1
msgid "Context class for tcl module files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: of spack.modules.tcl.TclContext.conflicts:1
msgid "List of conflicts for the tcl module file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: of spack.modules.tcl.TclFileLayout:1
msgid "File layout for tcl module files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: of spack.modules.tcl.TclModulefileWriter:1
#: spack.modules.TclModulefileWriter:1
msgid "Writer class for tcl module files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: of spack.modules.tcl.configuration:1
msgid "TCL specific part of the configuration"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/tcl.py:docstring
#: of spack.modules.tcl.make_configuration:1
msgid "Returns the tcl configuration for spec"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/modules/__init__.py:docstring
#: of spack.modules:1
msgid ""
"This package contains code for creating environment modules, which can "
"include dotkits, TCL non-hierarchical modules, LUA hierarchical modules, and "
"others."
msgstr ""

#: ../spack/lib/spack/docs/spack.operating_systems.rst:2
msgid "spack.operating\\_systems package"
msgstr ""

#: ../spack/lib/spack/docs/spack.operating_systems.rst:8
msgid "spack.operating\\_systems.cnk module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/operating_systems/cnk.py:docstring
#: of spack.operating_systems.cnk.Cnk:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/operating_systems/cnl.py:docstring
#: spack.operating_systems.cnl.Cnl:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/operating_systems/linux_distro.py:docstring
#: spack.operating_systems.linux_distro.LinuxDistro:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/operating_systems/mac_os.py:docstring
#: spack.operating_systems.mac_os.MacOs:1
msgid "Bases: :class:`spack.architecture.OperatingSystem`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/operating_systems/cnk.py:docstring
#: of spack.operating_systems.cnk.Cnk:1
msgid ""
"Compute Node Kernel (CNK) is the node level operating system for the IBM "
"Blue Gene series of supercomputers. The compute nodes of the Blue Gene "
"family of supercomputers run CNK, a lightweight kernel that runs on each "
"node and supports one application running for one user on that node."
msgstr ""

#: ../spack/lib/spack/docs/spack.operating_systems.rst:16
msgid "spack.operating\\_systems.cnl module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/operating_systems/cnl.py:docstring
#: of spack.operating_systems.cnl.Cnl:1
msgid ""
"Compute Node Linux (CNL) is the operating system used for the Cray XC series "
"super computers. It is a very stripped down version of GNU/Linux. Any "
"compilers found through this operating system will be used with modules. If "
"updated, user must make sure that version and name are updated to indicate "
"that OS has been upgraded (or downgraded)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/operating_systems/cnl.py:docstring
#: of spack.operating_systems.cnl.Cnl.find_compiler:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: spack.architecture.OperatingSystem.find_compiler:1
msgid ""
"Try to find the given type of compiler in the user's environment. For each "
"set of compilers found, this returns compiler objects with the cc, cxx, f77, "
"fc paths and the version filled in."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/operating_systems/cnl.py:docstring
#: of spack.operating_systems.cnl.Cnl.find_compiler:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: spack.architecture.OperatingSystem.find_compiler:6
msgid ""
"This will search for compilers with the names in cc_names, cxx_names, etc. "
"and it will group them if they have common prefixes, suffixes, and "
"versions.  e.g., gcc-mp-4.7 would be grouped with g++-mp-4.7 and gfortran-"
"mp-4.7."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/operating_systems/cnl.py:docstring
#: of spack.operating_systems.cnl.Cnl.find_compilers:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: spack.architecture.OperatingSystem.find_compilers:1
msgid ""
"Return a list of compilers found in the supplied paths. This invokes the "
"find() method for each Compiler class, and appends the compilers detected to "
"a list."
msgstr ""

#: ../spack/lib/spack/docs/spack.operating_systems.rst:24
msgid "spack.operating\\_systems.cray\\_frontend module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/operating_systems/cray_frontend.py:docstring
#: of spack.operating_systems.cray_frontend.CrayFrontend:1
msgid "Bases: :class:`spack.operating_systems.linux_distro.LinuxDistro`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/operating_systems/cray_frontend.py:docstring
#: of spack.operating_systems.cray_frontend.CrayFrontend:1
msgid ""
"Represents OS that runs on login and service nodes of the Cray platform. It "
"acts as a regular Linux without Cray-specific modules and compiler wrappers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/operating_systems/cray_frontend.py:docstring
#: of spack.operating_systems.cray_frontend.CrayFrontend.find_compilers:1
msgid ""
"Calls the overridden method but prevents it from detecting Cray compiler "
"wrappers to avoid possible false detections. The detected compilers come "
"into play only if a user decides to work with the Cray's frontend OS as if "
"it was a regular Linux environment."
msgstr ""

#: ../spack/lib/spack/docs/spack.operating_systems.rst:32
msgid "spack.operating\\_systems.linux\\_distro module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/operating_systems/linux_distro.py:docstring
#: of spack.operating_systems.linux_distro.LinuxDistro:1
msgid ""
"This class will represent the autodetected operating system for a Linux "
"System. Since there are many different flavors of Linux, this class will "
"attempt to encompass them all through autodetection using the python module "
"platform and the method platform.dist()"
msgstr ""

#: ../spack/lib/spack/docs/spack.operating_systems.rst:40
msgid "spack.operating\\_systems.mac\\_os module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/operating_systems/mac_os.py:docstring
#: of spack.operating_systems.mac_os.MacOs:1
msgid ""
"This class represents the macOS operating system. This will be auto detected "
"using the python platform.mac_ver. The macOS platform will be represented "
"using the major version operating system name, i.e el capitan, yosemite..."
"etc."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/operating_systems/mac_os.py:docstring
#: of spack.operating_systems.mac_os.macos_version:1
msgid "temporary workaround to return a macOS version as a Version object"
msgstr ""

#: ../spack/lib/spack/docs/spack.platforms.rst:2
msgid "spack.platforms package"
msgstr ""

#: ../spack/lib/spack/docs/spack.platforms.rst:8
msgid "spack.platforms.bgq module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/platforms/bgq.py:docstring
#: of spack.platforms.bgq.Bgq:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/platforms/cray.py:docstring
#: spack.platforms.cray.Cray:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/platforms/darwin.py:docstring
#: spack.platforms.darwin.Darwin:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/platforms/linux.py:docstring
#: spack.platforms.linux.Linux:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/platforms/test.py:docstring
#: spack.platforms.test.Test:1
msgid "Bases: :class:`spack.architecture.Platform`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/platforms/bgq.py:docstring
#: of spack.platforms.bgq.Bgq.detect:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/platforms/cray.py:docstring
#: spack.platforms.cray.Cray.detect:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/platforms/darwin.py:docstring
#: spack.platforms.darwin.Darwin.detect:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/platforms/linux.py:docstring
#: spack.platforms.linux.Linux.detect:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/platforms/test.py:docstring
#: spack.platforms.test.Test.detect:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: spack.architecture.Platform.detect:1
msgid ""
"Subclass is responsible for implementing this method. Returns True if the "
"Platform class detects that it is the current platform and False if it's not."
msgstr ""

#: ../spack/lib/spack/docs/spack.platforms.rst:16
msgid "spack.platforms.cray module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/platforms/cray.py:docstring
#: of spack.platforms.cray.Cray.setup_platform_environment:1
msgid ""
"Change the linker to default dynamic to be more similar to linux/standard "
"linker behavior"
msgstr ""

#: ../spack/lib/spack/docs/spack.platforms.rst:24
msgid "spack.platforms.darwin module"
msgstr ""

#: ../spack/lib/spack/docs/spack.platforms.rst:32
msgid "spack.platforms.linux module"
msgstr ""

#: ../spack/lib/spack/docs/spack.platforms.rst:40
msgid "spack.platforms.test module"
msgstr ""

#: ../spack/lib/spack/docs/spack.reporters.rst:2
msgid "spack.reporters package"
msgstr ""

#: ../spack/lib/spack/docs/spack.reporters.rst:8
msgid "spack.reporters.cdash module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/reporters/cdash.py:docstring
#: of spack.reporters.cdash.CDash:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/reporters/junit.py:docstring
#: spack.reporters.junit.JUnit:1
msgid "Bases: :class:`spack.reporter.Reporter`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/reporters/cdash.py:docstring
#: of spack.reporters.cdash.CDash:1
msgid "Generate reports of spec installations for CDash."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/reporters/cdash.py:docstring
#: of spack.reporters.cdash.CDash:3
msgid ""
"To use this reporter, pass the ``--cdash-upload-url`` argument to ``spack "
"install``::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/reporters/cdash.py:docstring
#: of spack.reporters.cdash.CDash:9
msgid ""
"In this example, results will be uploaded to the *Spack* project on the "
"CDash instance hosted at https://mydomain.com/cdash."
msgstr ""

#: ../spack/lib/spack/docs/spack.reporters.rst:16
msgid "spack.reporters.junit module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/reporters/junit.py:docstring
#: of spack.reporters.junit.JUnit:1
msgid "Generate reports of spec installations for JUnit."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:2
msgid "spack package"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:25
msgid "spack.abi module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/abi.py:docstring of
#: spack.abi.ABI:1
msgid ""
"This class provides methods to test ABI compatibility between specs. The "
"current implementation is rather rough and could be improved."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/abi.py:docstring of
#: spack.abi.ABI.architecture_compatible:1
msgid "Return true if parent and child have ABI compatible targets."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/abi.py:docstring of
#: spack.abi.ABI.compatible:1
msgid "Returns true iff a parent and child spec are ABI compatible"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/abi.py:docstring of
#: spack.abi.ABI.compiler_compatible:1
msgid "Return true if compilers for parent and child are ABI compatible."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:33
msgid "spack.architecture module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture:1
msgid ""
"This module contains all the elements that are required to create an "
"architecture object. These include, the target processor, the operating "
"system, and the architecture platform (i.e. cray, darwin, linux, bgq, etc) "
"classes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture:5
msgid ""
"On a multiple architecture machine, the architecture spec field can be set "
"to build a package against any target and operating system that is present "
"on the platform. On Cray platforms or any other architecture that has "
"different front and back end environments, the operating system will "
"determine the method of compiler detection."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture:14
msgid "There are two different types of compiler detection:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture:13
msgid "Through the $PATH env variable (front-end detection)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture:14
msgid "Through the tcl module system. (back-end detection)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture:16
msgid ""
"Depending on which operating system is specified, the compiler will be "
"detected using one of those methods."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture:19
msgid ""
"For platforms such as linux and darwin, the operating system is autodetected "
"and the target is set to be x86_64."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture:22
msgid "The command line syntax for specifying an architecture is as follows:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture:24
msgid "target=<Target name> os=<OperatingSystem name>"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture:26
msgid ""
"If the user wishes to use the defaults, either target or os can be left out "
"of the command line and Spack will concretize using the default. These "
"defaults are set in the 'platforms/' directory which contains the different "
"subclasses for platforms. If the machine has multiple architectures, the "
"user can also enter front-end, or fe or back-end or be. These settings will "
"concretize to their respective front-end and back-end targets and operating "
"systems. Additional platforms can be added by creating a subclass of "
"Platform and adding it inside the platform directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture:35
msgid ""
"Platforms are an abstract class that are extended by subclasses. If the user "
"wants to add a new type of platform (such as cray_xe), they can create a "
"subclass and set all the class attributes such as priority, front_target, "
"back_target, front_os, back_os. Platforms also contain a priority class "
"attribute. A lower number signifies higher priority. These numbers are "
"arbitrarily set and can be changed though often there isn't much need unless "
"a new platform is added and the user wants that to be detected first."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture:43
msgid ""
"Targets are created inside the platform subclasses. Most architecture (like "
"linux, and darwin) will have only one target (x86_64) but in the case of "
"Cray machines, there is both a frontend and backend processor. The user can "
"specify which targets are present on front-end and back-end architecture"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture:48
msgid ""
"Depending on the platform, operating systems are either auto-detected or are "
"set. The user can set the front-end and back-end operating setting by the "
"class attributes front_os and back_os. The operating system as described "
"earlier, will be responsible for compiler detection."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.Arch:1
msgid "Architecture is now a class to help with setting attributes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.Arch:3
msgid "TODO: refactor so that we don't need this class."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.OperatingSystem:1
msgid ""
"Operating System will be like a class similar to platform extended by "
"subclasses for the specifics. Operating System will contain the compiler "
"finding logic. Instead of calling two separate methods to find compilers we "
"call find_compilers method for each operating system"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.Platform:1
msgid ""
"Abstract class that each type of Platform will subclass. Will return a "
"instance of it once it is returned."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.Platform.add_operating_system:1
msgid ""
"Add the operating_system class object into the platform.operating_sys "
"dictionary"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.Platform.add_target:1
msgid ""
"Used by the platform specific subclass to list available targets. Raises an "
"error if the platform specifies a name that is reserved by spack as an alias."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.Platform.setup_platform_environment:1
msgid ""
"Subclass can override this method if it requires any platform-specific build "
"environment modifications."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.Platform.target:1
msgid ""
"This is a getter method for the target dictionary that handles defaulting "
"based on the values provided by default, front-end, and back-end. This can "
"be overwritten by a subclass for which we want to provide further aliasing "
"options."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.Target:1
msgid ""
"Target is the processor of the host machine. The host machine may have "
"different front-end and back-end targets, especially if it is a Cray "
"machine. The target will have a name and also the module_name (e.g craype-"
"compiler). Targets will also recognize which platform they came from using "
"the set_platform method. Targets will have compiler finding strategies"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.arch_for_spec:1
msgid "Transforms the given architecture spec into an architecture objct."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.get_platform:1
msgid "Returns a platform object that corresponds to the given name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.platform:1
msgid "Detects the platform for this machine."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.platform:3
msgid ""
"Gather a list of all available subclasses of platforms. Sorts the list "
"according to their priority looking. Priority is an arbitrarily set number. "
"Detects platform either using uname or a file path (/opt/cray...)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.sys_type:1
msgid "Print out the \"default\" platform-os-target tuple for this machine."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.sys_type:3
msgid ""
"On machines with only one target OS/target, prints out the platform-os-"
"target for the frontend.  For machines with a frontend and a backend, prints "
"the default backend."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.sys_type:7
msgid ""
"TODO: replace with use of more explicit methods to get *all* the backends, "
"as client code should really be aware of cross-compiled architectures."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring
#: of spack.architecture.verify_platform:1
msgid ""
"Determines whether or not the platform with the given name is supported in "
"Spack.  For more information, see the 'spack.platforms' submodule."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:41
msgid "spack.binary\\_distribution module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.NewLayoutException:1
msgid "Raised if directory layout is different from buildcache."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.NoChecksumException:1
msgid "Raised if file fails checksum verification."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.NoGpgException:1
msgid "Raised when gpg2 is not in PATH"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.NoKeyException:1
msgid "Raised when gpg has no default key added."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.NoOverwriteException:1
msgid "Raised when a file exists and must be overwritten."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.NoVerifyException:1
msgid "Raised if file fails signature verification."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.PickKeyException:1
msgid "Raised when multiple keys can be used to sign."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.build_tarball:1
msgid ""
"Build a tarball from given spec and put it into the directory structure used "
"at the mirror (following <tarball_directory_name>)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.buildinfo_file_name:1
msgid "Filename of the binary package meta-data file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.check_specs_against_mirrors:1
msgid ""
"Check all the given specs against buildcaches on the given mirrors and "
"determine if any of the specs need to be rebuilt.  Reasons for needing to "
"rebuild include binary cache for spec isn't present on a mirror, or it is "
"present but the full_hash has changed since last time spec was built."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.check_specs_against_mirrors:6
msgid "Mirrors to check against"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.check_specs_against_mirrors:8
msgid "Specs to check against mirrors"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.check_specs_against_mirrors:10
msgid ""
"Path to output file to be written.  If provided, mirrors with missing or out-"
"of-date specs will be formatted as a JSON object and written to this file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.check_specs_against_mirrors:14
msgid ""
"Treat any errors encountered while checking specs as a signal to rebuild "
"package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.check_specs_against_mirrors:18
msgid "Returns: 1 if any spec was out-of-date on any mirror, 0 otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.download_tarball:1
msgid ""
"Download binary tarball for given package into stage area Return True if "
"successful"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.extract_tarball:1
msgid "extract binary tarball for given package into install area"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.get_keys:1
msgid "Get pgp public keys available on mirror"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.get_specs:1
msgid "Get spec.yaml's for build caches available on mirror"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.make_package_placeholder:1
msgid "Change paths in binaries to placeholder paths"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.make_package_relative:1
msgid ""
"Change paths in binaries to relative paths. Change absolute symlinks to "
"relative symlinks."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.read_buildinfo_file:1
msgid "Read buildinfo file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.relocate_package:1
msgid "Relocate the given package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.tarball_directory_name:1
msgid ""
"Return name of the tarball directory according to the convention <os>-"
"<architecture>/<compiler>/<package>-<version>/"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.tarball_name:1
msgid ""
"Return the name of the tarfile according to the convention <os>-"
"<architecture>-<package>-<dag_hash><ext>"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.tarball_path_name:1
msgid ""
"Return the full path+name for a given spec according to the convention "
"<tarball_directory_name>/<tarball_name>"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring
#: of spack.binary_distribution.write_buildinfo_file:1
msgid "Create a cache file containing information required for the relocation"
msgstr ""

# 3a8d6f12cb9f4c20814ced54e413d7b2
#: ../spack/lib/spack/docs/spack.rst:49
msgid "spack.build\\_environment module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment:1
msgid ""
"This module contains all routines related to setting up the package build "
"environment.  All of this is set up by package.py just before install() is "
"called."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment:5
msgid "There are two parts to the build environment:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment:7
msgid "Python build environment (i.e. install() method)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment:9
msgid ""
"This is how things are set up when install() is called.  Spack takes "
"advantage of each package being in its own module by adding a bunch of "
"command-like functions (like configure(), make(), etc.) in the package's "
"module scope.  Ths allows package writers to call them all directly in "
"Package.install() without writing 'self.' everywhere.  No, this isn't "
"Pythonic.  Yes, it makes the code more readable and more like the shell "
"script from which someone is likely porting."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment:18
msgid "Build execution environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment:20
msgid ""
"This is the set of environment variables, like PATH, CC, CXX, etc. that "
"control the build.  There are also a number of environment variables used to "
"pass information (like RPATHs and other information about dependencies) to "
"Spack's compiler wrappers. All of these env vars are also set up here."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment:26
msgid ""
"Skimming this module is a nice way to get acquainted with the types of calls "
"you can make from within the install() function."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.ChildError:1
msgid "Bases: :class:`spack.build_environment.InstallError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.ChildError:2
msgid "Special exception class for wrapping exceptions from child processes"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.ChildError:2
msgid "in Spack's build environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.ChildError:4
msgid "The main features of a ChildError are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.ChildError:6
msgid ""
"They're serializable, so when a child build fails, we can send one of these "
"to the parent and let the parent report what happened."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.ChildError:9
msgid ""
"They have a ``traceback`` field containing a traceback generated on the "
"child immediately after failure.  Spack will print this on failure in lieu "
"of trying to run sys.excepthook on the parent process, so users will see the "
"correct stack trace from a child."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.ChildError:14
msgid ""
"They also contain context, which shows context in the Package implementation "
"where the error happened.  This helps people debug Python code in their "
"packages.  To get it, Spack searches the stack trace for the deepest frame "
"where ``self`` is in scope and is an instance of PackageBase.  This will "
"generally find a useful spot in the ``package.py`` file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.ChildError:21
msgid "The long_message of a ChildError displays one of two things:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.ChildError:23
msgid ""
"If the original error was a ProcessError, indicating a command died during "
"the build, we'll show context from the build log."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.ChildError:26
msgid ""
"If the original error was any other type of error, we'll show context from "
"the Python code."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.ChildError:29
msgid ""
"SpackError handles displaying the special traceback if we're in debug mode "
"with spack -d."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.InstallError:1
msgid "Raised by packages when a package fails to install."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.InstallError:3
msgid ""
"Any subclass of InstallError will be annotated by Spack wtih a ``pkg`` "
"attribute on failure, which the caller can use to get the package for which "
"the exception was raised."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.MakeExecutable:1
msgid "Bases: :class:`spack.util.executable.Executable`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.MakeExecutable:1
msgid ""
"Special callable executable object for make so the user can specify "
"parallelism options on a per-invocation basis.  Specifying 'parallel' to the "
"call will override whatever the package's global setting is, so you can "
"either default to true or false and override particular calls. Specifying "
"'jobs_env' to a particular call will name an environment variable which will "
"be set to the parallelism level (without affecting the normal invocation "
"with -j)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.MakeExecutable:10
msgid ""
"Note that if the SPACK_NO_PARALLEL_MAKE env var is set it overrides "
"everything."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.fork:1
msgid "Fork a child process to do part of a spack build."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.fork:3
msgid "package whose environment we should set up the forked process for."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.fork:6
msgid "argless function to run in the child process."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.fork:9
msgid "If True, do NOT clean the environment before building."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.fork:12
msgid "If True, skip package setup b/c it's not a real build"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.fork:15
msgid "Usage::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.fork:21
msgid ""
"Forked processes are run with the build environment set up by spack."
"build_environment.  This allows package authors to have full control over "
"the environment, etc. without affecting other builds that might be executed "
"in the same spack call."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.fork:26
msgid ""
"If something goes wrong, the child process catches the error and passes it "
"to the parent wrapped in a ChildError.  The parent is expected to handle (or "
"re-raise) the ChildError."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.get_package_context:1
msgid "Return some context for an error message when the build fails."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.get_package_context:3
msgid "A traceback from some exception raised during install"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.get_package_context:6
msgid ""
"Lines of context to show before and after the line where the error happened"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.get_package_context:10
msgid ""
"This function inspects the stack to find where we failed in the package "
"file, and it adds detailed context to the long_message from there."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.get_rpath_deps:1
msgid "Return immediate or transitive RPATHs depending on the package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.get_rpaths:1
msgid "Get a list of all the rpaths for a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.get_std_cmake_args:1
msgid "List of standard arguments used if a package is a CMakePackage."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.get_std_cmake_args:3
msgid ""
"standard arguments that would be used if this package were a CMakePackage "
"instance."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.get_std_cmake_args:7
#: spack.build_environment.get_std_meson_args:7
msgid "package under consideration"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.get_std_cmake_args:10
msgid "arguments for cmake"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.get_std_meson_args:1
msgid "List of standard arguments used if a package is a MesonPackage."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.get_std_meson_args:3
msgid ""
"standard arguments that would be used if this package were a MesonPackage "
"instance."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.get_std_meson_args:10
msgid "arguments for meson"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.load_external_modules:1
msgid "Traverse a package's spec DAG and load any external modules."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.load_external_modules:3
msgid ""
"Traverse a package's dependencies and load any external modules associated "
"with them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.load_external_modules:6
msgid "package to load deps for"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.parent_class_modules:1
msgid ""
"Get list of superclass modules that descend from spack.package.PackageBase"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.parent_class_modules:3
msgid "Includes cls.__module__"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.set_build_environment_variables:1
msgid "Ensure a clean install environment when we build packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.set_build_environment_variables:3
msgid ""
"This involves unsetting pesky environment variables that may affect the "
"build. It also involves setting environment variables used by Spack's "
"compiler wrappers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.set_build_environment_variables:7
msgid "The package we are building"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.set_build_environment_variables:9
msgid "Skip unsetting the user's environment settings"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.set_module_variables_for_package:1
msgid ""
"Populate the module scope of install() with some useful functions. This "
"makes things easier for package writers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring
#: of spack.build_environment.setup_package:1
msgid "Execute all environment setup routines."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:57
msgid "spack.caches module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/caches.py:docstring of
#: spack.caches:1
msgid "Caches used by Spack to store data"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/caches.py:docstring of
#: spack.caches.fetch_cache:1
msgid "Spack's local cache for downloaded source archives"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/caches.py:docstring of
#: spack.caches.misc_cache:1
msgid "Spack's cache for small data"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:65
msgid "spack.compiler module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compiler.py:docstring of
#: spack.compiler.Compiler:1
msgid ""
"This class encapsulates a Spack \"compiler\", which includes C, C++, and "
"Fortran compilers.  Subclasses should implement support for specific "
"compilers, their possible names, arguments, and how to identify the "
"particular type of compiler."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compiler.py:docstring of
#: spack.compiler.Compiler.default_version:1
msgid "Override just this to override all compiler version functions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compiler.py:docstring of
#: spack.compiler.Compiler.setup_custom_environment:1
msgid "Set any environment variables necessary to use the compiler."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compiler.py:docstring of
#: spack.compiler.Compiler.version_argument:1
msgid "Compiler argument that produces version information"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compiler.py:docstring of
#: spack.compiler.Compiler.version_regex:1
msgid "Regex used to extract version from compiler's output"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:73
msgid "spack.concretize module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize:1
msgid ""
"Functions here are used to take abstract specs and make them concrete. For "
"example, if a spec asks for a version between 1.8 and 1.9, these functions "
"might take will take the most recent 1.9 version of the package available.  "
"Or, if the user didn't specify a compiler for a spec, then this will assign "
"a compiler to the spec based on defaults or user preferences."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize:10
msgid "TODO: make this customizable and allow users to configure"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize:9
msgid "concretization  policies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.Concretizer:1
msgid ""
"You can subclass this class to override some of the default concretization "
"strategies, or you can override all of them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.Concretizer.choose_virtual_or_external:1
msgid ""
"Given a list of candidate virtual and external packages, try to find one "
"that is most ABI compatible."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.Concretizer.concretize_architecture:1
msgid ""
"If the spec is empty provide the defaults of the platform. If the "
"architecture is not a string type, then check if either the platform, target "
"or operating system are concretized. If any of the fields are changed then "
"return True. If everything is concretized (i.e the architecture attribute is "
"a namedtuple of classes) then return False. If the target is a string type, "
"then convert the string into a concretized architecture. If it has no "
"architecture and the root of the DAG has an architecture, then use the root "
"otherwise use the defaults on the platform."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.Concretizer.concretize_compiler:1
msgid ""
"If the spec already has a compiler, we're done.  If not, then take the "
"compiler used for the nearest ancestor with a compiler spec and use that.  "
"If the ancestor's compiler is not concrete, then used the preferred compiler "
"as specified in spackconfig."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.Concretizer.concretize_compiler:7
msgid ""
"Intuition: Use the spackconfig default if no package that depends on this "
"one has a strict compiler requirement.  Otherwise, try to build with the "
"compiler that will be used by libraries that link to this one, to maximize "
"compatibility."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.Concretizer.concretize_compiler_flags:1
msgid ""
"The compiler flags are updated to match those of the spec whose compiler is "
"used, defaulting to no compiler flags in the spec. Default specs set at the "
"compiler level will still be added later."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.Concretizer.concretize_variants:1
msgid ""
"If the spec already has variants filled in, return.  Otherwise, add the user "
"preferences from packages.yaml or the default variants from the package "
"specification."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.Concretizer.concretize_version:1
msgid ""
"If the spec is already concrete, return.  Otherwise take the preferred "
"version from spackconfig, and default to the package's version if there are "
"no available versions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.Concretizer.concretize_version:11
msgid "TODO: In many cases we probably want to look for installed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.Concretizer.concretize_version:6
msgid ""
"versions of each package and use an installed version if we can link to it.  "
"The policy implemented here will tend to rebuild a lot of stuff becasue it "
"will prefer a compiler in the spec to any compiler already- installed things "
"were built with.  There is likely some better policy that finds some middle "
"ground between these two extremes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.InsufficientArchitectureInfoError:1
msgid "Raised when details on architecture cannot be collected from the system"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.NoBuildError:1
msgid ""
"Raised when a package is configured with the buildable option False, but no "
"satisfactory external versions can be found"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.NoValidVersionError:1
msgid ""
"Raised when there is no way to have a concrete version for a particular spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.UnavailableCompilerVersionError:1
msgid ""
"Raised when there is no available compiler that satisfies a compiler spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.concretize_specs_together:1
msgid "Given a number of specs as input, tries to concretize them together."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.concretize_specs_together:3
msgid "abstract specs to be concretized, given either as Specs or strings"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.concretize_specs_together:6
msgid "List of concretized specs"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.concretizer:1
msgid "Concretizer singleton"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring
#: of spack.concretize.find_spec:1
msgid ""
"Searches the dag from spec in an intelligent order and looks for a spec that "
"matches a condition"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:81
msgid "spack.config module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config:1
msgid "This module implements Spack's configuration file handling."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config:3
msgid ""
"This implements Spack's configuration system, which handles merging multiple "
"scopes with different levels of precedence.  See the documentation on :ref:"
"`configuration-scopes` for details on how Spack's configuration system "
"behaves.  The scopes are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config:8
msgid "``default``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config:13
msgid ""
"And corresponding :ref:`per-platform scopes <platform-scopes>`. Important "
"functions in this module are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config:16
msgid ":py:func:`get_config`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config:17
msgid ":py:func:`update_config`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config:19
msgid ""
"``get_config`` reads in YAML data for a particular scope and returns it. "
"Callers can then modify the data and write it back with ``update_config``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config:23
msgid ""
"When read in, Spack validates configurations with jsonschemas.  The schemas "
"are in submodules of :py:mod:`spack.schema`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.ConfigError:1
msgid "Superclass for all Spack config related errors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.ConfigFileError:1 spack.config.ConfigFormatError:1
#: spack.config.ConfigSectionError:1
msgid "Bases: :class:`spack.config.ConfigError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.ConfigFileError:1
msgid "Issue reading or accessing a configuration file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.ConfigFormatError:1
msgid "Raised when a configuration format does not match its schema."
msgstr ""

# 9c98fd10a2b2403aba63f6a89cdd55d5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.ConfigScope:1
msgid "This class represents a configuration scope."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.ConfigScope:3
msgid ""
"A scope is one directory containing named configuration files. Each file is "
"a config \"section\" (e.g., mirrors, compilers, etc)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.ConfigScope.clear:1
msgid "Empty cached config information."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.ConfigSectionError:1
msgid "Error for referring to a bad config section name in a configuration."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration:1
msgid "A full Spack configuration, from a hierarchy of config files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration:3
msgid "This class makes it easy to add a new scope on top of an existing one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.clear_caches:1
msgid "Clears the caches for configuration files,"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.clear_caches:3
msgid "This will cause files to be re-read upon the next request."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.file_scopes:1
msgid "List of writable scopes with an associated file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.get:1
msgid "Get a config section or a single value from one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.get:3
msgid ""
"Accepts a path syntax that allows us to grab nested config map entries.  "
"Getting the 'config' section would look like::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.get:8
msgid "and the ``dirty`` section in the ``config`` scope would be::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.get:12
msgid "We use ``:`` as the separator, like YAML objects."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.get_config:1
msgid "Get configuration settings for a section."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.get_config:3
msgid ""
"If ``scope`` is ``None`` or not provided, return the merged contents of all "
"of Spack's configuration scopes.  If ``scope`` is provided, return only the "
"confiugration as specified in that scope."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.get_config:7
msgid ""
"This off the top-level name from the YAML section.  That is, for a YAML "
"config file that looks like this::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.get_config:15
msgid "``get_config('config')`` will return::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.get_config_filename:1
msgid "For some scope and section, get the name of the configuration file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.highest_precedence_scope:1
msgid "Non-internal scope with highest precedence."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.pop_scope:1
msgid "Remove the highest precedence scope and return it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.print_section:1
msgid "Print a configuration to stdout."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.push_scope:1
msgid "Add a higher precedence scope to the Configuration."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.set:1
msgid "Convenience function for setting single values in config files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.set:3 spack.config.set:3
msgid "Accepts the path syntax described in ``get()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.update_config:1
msgid "Update the configuration file for a particular scope."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.update_config:3
msgid ""
"Overwrites contents of a section in a scope with update_data, then writes "
"out the config file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.Configuration.update_config:6
msgid ""
"update_data should have the top-level section name stripped off (it will be "
"re-added).  Data itself can be a list, dict, or any other yaml-ish structure."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.ImmutableConfigScope:1 spack.config.InternalConfigScope:1
#: spack.config.SingleFileScope:1
msgid "Bases: :class:`spack.config.ConfigScope`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.ImmutableConfigScope:1
msgid "A configuration scope that cannot be written to."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.ImmutableConfigScope:3
msgid "This is used for ConfigScopes passed on the command line."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.InternalConfigScope:1
msgid "An internal configuration scope that is not persisted to a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.InternalConfigScope:3
msgid ""
"This is for spack internal use so that command-line options and config file "
"settings are accessed the same way, and Spack can easily override settings "
"from files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.InternalConfigScope.get_section:1
msgid "Just reads from an internal dictionary."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.InternalConfigScope.write_section:1
msgid "This only validates, as the data is already in memory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.SingleFileScope:1
msgid "This class represents a configuration scope in a single YAML file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.command_line_scopes:1
msgid ""
"configuration scopes added on the command line set by ``spack.main.main()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.config:1
msgid "This is the singleton configuration instance for Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.config_defaults:1
msgid ""
"Hard-coded default values for some key configuration options. This ensures "
"that Spack will still work even if config.yaml in the defaults scope is "
"removed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.configuration_paths:1
msgid "Builtin paths to configuration files in Spack"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.default_list_scope:1
msgid "Return the config scope that is listed by default."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.default_list_scope:3
msgid "Commands that list configuration list *all* scopes (merged) by default."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.default_modify_scope:1
msgid "Return the config scope that commands should modify by default."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.default_modify_scope:3
msgid ""
"Commands that modify configuration by default modify the *highest* priority "
"scope."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.first_existing:1
msgid "Get the value of the first key in keys that is in the dictionary."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.get:1
msgid "Module-level wrapper for ``Configuration.get()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.override:1
msgid "Simple way to override config settings within a context."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.override:3
msgid "scope or single option to override"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.override:5
msgid "value for the single option"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.override:8
msgid ""
"Temporarily push a scope on the current configuration, then remove it after "
"the context completes. If a single option is provided, create an internal "
"config scope for it and push/pop that scope."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.scopes:1
msgid "Convenience function to get list of configuration scopes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.scopes_metavar:1
msgid ""
"metavar to use for commands that accept scopes this is shorter and more "
"readable than listing all choices"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.section_schemas:1
msgid "Dict from section names -> schema for that section"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.set:1
msgid "Convenience function for getting single values in config files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.validate:1
msgid "Validate data read in from a Spack YAML file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.validate:3
msgid "data read from a Spack YAML file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.validate:5
msgid "jsonschema to validate data"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.validate:7
msgid "whether to set defaults based on the schema"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of
#: spack.config.validate:10
msgid ""
"This leverages the line information (start_mark, end_mark) stored on Spack "
"YAML structures."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:89
msgid "spack.database module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database:1
msgid "Spack's installation tracking database."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database:3
msgid "The database serves two purposes:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database:5
msgid ""
"It implements a cache on top of a potentially very large Spack directory "
"hierarchy, speeding up many operations that would otherwise require "
"filesystem access."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database:9
msgid ""
"It will allow us to track external installations as well as lost packages "
"and their dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database:12
msgid ""
"Prior to the implementation of this store, a directory layout served as the "
"authoritative database of packages in Spack.  This module provides a cache "
"and a sanity checking mechanism for what is in the filesystem."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.CorruptDatabaseError:1
msgid "Raised when errors are found while reading the database."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.Database:1
msgid "Per-process lock objects for each install prefix."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.Database.prefix_lock:1
msgid "Get a lock on a particular spec's installation directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.Database.prefix_lock:3
msgid "NOTE: The installation directory **does not** need to exist."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.Database.prefix_lock:5
msgid "Prefix lock is a byte range lock on the nth byte of a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.Database.prefix_lock:7
msgid ""
"The lock file is ``spack.store.db.prefix_lock`` -- the DB tells us what to "
"call it and it lives alongside the install DB."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.Database.prefix_lock:10
msgid ""
"n is the sys.maxsize-bit prefix of the DAG hash.  This makes likelihood of "
"collision is very low AND it gives us readers-writer lock semantics with "
"just a single lockfile, so no cleanup required."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.Database.query_one:1
msgid "Query for exactly one spec that matches the query spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.Database.query_one:3
msgid ""
"Raises an assertion error if more than one spec matches the query. Returns "
"None if no installed package matches."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.Database.read_transaction:1
msgid "Get a read lock context manager for use in a `with` block."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.Database.reindex:1
msgid "Build database index from scratch based on a directory layout."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.Database.reindex:3
msgid "Locks the DB if it isn't locked already."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.Database.write_transaction:1
msgid "Get a write lock context manager for use in a `with` block."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.ForbiddenLockError:1
msgid "Raised when an upstream DB attempts to acquire a lock"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.InstallRecord:1
msgid "A record represents one installation in the DB."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.InstallRecord:3
msgid ""
"The record keeps track of the spec for the installation, its install path, "
"AND whether or not it is installed.  We need the installed flag in case a "
"user either:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.InstallRecord:7
msgid "blew away a directory, or"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.InstallRecord:8
msgid "used spack uninstall -f to get rid of it"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.InstallRecord:10
msgid ""
"If, in either case, the package was removed but others still depend on it, "
"we still need to track its spec, so we don't actually remove from the "
"database until a spec has no installed dependents left."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.InstallRecord:15
msgid "spec tracked by the install record"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.InstallRecord:17
msgid "path where the spec has been installed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.InstallRecord:19
msgid "whether or not the spec is currently installed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.InstallRecord:21
msgid "number of specs that depend on this one"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.InstallRecord:23
msgid ""
"whether or not this spec was explicitly installed, or pulled-in as a "
"dependency of something else"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.InstallRecord:26
msgid "time of the installation"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.MissingDependenciesError:1
msgid "Raised when DB cannot find records for dependencies"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.NonConcreteSpecAddError:1
msgid "Raised when attemptint to add non-concrete spec to DB."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of
#: spack.database.UpstreamDatabaseLockingError:1
msgid "Raised when an operation would need to lock an upstream database"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:97
msgid "spack.dependency module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring
#: of spack.dependency:1
msgid "Data structures that represent Spack's dependency relationships."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring
#: of spack.dependency.Dependency:1
msgid "Class representing metadata for a dependency on a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring
#: of spack.dependency.Dependency:3
msgid ""
"This class differs from ``spack.spec.DependencySpec`` because it represents "
"metadata at the ``Package`` level. ``spack.spec.DependencySpec`` is a "
"descriptor for an actual package configuration, while ``Dependency`` is a "
"descriptor for a package's dependency *requirements*."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring
#: of spack.dependency.Dependency:9
msgid ""
"A dependency is a requirement for a configuration of another package that "
"satisfies a particular spec.  The dependency can have *types*, which "
"determine *how* that package configuration is required, e.g. whether it is "
"required for building the package, whether it needs to be linked to, or "
"whether it is needed at runtime so that Spack can call commands from it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring
#: of spack.dependency.Dependency:16
msgid ""
"A package can also depend on another package with *patches*. This is for "
"cases where the maintainers of one package also maintain special patches for "
"their dependencies.  If one package depends on another with patches, a "
"special version of that dependency with patches applied will be built for "
"use by the dependent package.  The patches are included in the new version's "
"spec hash to differentiate it from unpatched versions of the same package, "
"so that unpatched versions of the dependency package can coexist with the "
"patched version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring
#: of spack.dependency.Dependency.merge:1
msgid "Merge constraints, deptypes, and patches of other into self."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring
#: of spack.dependency.Dependency.name:1
msgid "Get the name of the dependency package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring
#: of spack.dependency.all_deptypes:1
msgid "The types of dependency relationships that Spack understands."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring
#: of spack.dependency.canonical_deptype:1
msgid "Convert deptype to a canonical sorted tuple, or raise ValueError."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring
#: of spack.dependency.canonical_deptype:3
msgid ""
"string representing dependency type, or a list/tuple of such strings.  Can "
"also be the builtin function ``all`` or the string 'all', which result in a "
"tuple of all dependency types known to Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring
#: of spack.dependency.default_deptype:1
msgid "Default dependency type if none is specified"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:105
msgid "spack.directives module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives:1
msgid "This package contains directives that can be used within a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives:3
msgid ""
"Directives are functions that can be called inside a package definition to "
"modify the package, for example:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives:9
msgid "class OpenMpi(Package):"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives:7
msgid "depends_on(\"hwloc\") provides(\"mpi\") ..."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives:11
msgid "``provides`` and ``depends_on`` are spack directives."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives:13
msgid "The available directives are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives:15
msgid "``version``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives:16
msgid "``depends_on``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives:18
msgid "``extends``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives:20
msgid "``variant``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives:21
msgid "``resource``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.version:1
msgid "Adds a version and metadata describing how to fetch its source code."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.version:3
msgid ""
"Metadata is stored as a dict of ``kwargs`` in the package class's "
"``versions`` dictionary."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.version:6
msgid ""
"The ``dict`` of arguments is turned into a valid fetch strategy later. See "
"``spack.fetch_strategy.for_package_version()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.conflicts:1
msgid "Allows a package to define a conflict."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.conflicts:3
msgid ""
"Currently, a \"conflict\" is a concretized configuration that is known to be "
"non-valid. For example, a package that is known not to be buildable with "
"intel compilers can declare::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.conflicts:9
msgid ""
"To express the same constraint only when the 'foo' variant is activated::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.conflicts:14
msgid "constraint defining the known conflict"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.conflicts:16
msgid "optional constraint that triggers the conflict"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.conflicts:18
msgid "optional user defined message"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.depends_on:1
msgid "Creates a dict of deps with specs defining when they apply."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.depends_on:3
msgid "the package and constraints depended on"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.depends_on:5
msgid ""
"when the dependent satisfies this, it has the dependency represented by "
"``spec``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.depends_on:8
msgid "str or tuple of legal Spack deptypes"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.depends_on:10
msgid ""
"single result of ``patch()`` directive, a ``str`` to be passed to ``patch``, "
"or a list of these"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.depends_on:14
msgid ""
"This directive is to be used inside a Package definition to declare that the "
"package requires other packages to be built first. @see The section "
"\"Dependency specs\" in the Spack Packaging Guide."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.extends:1
msgid ""
"Same as depends_on, but allows symlinking into dependency's prefix tree."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.extends:4
msgid ""
"This is for Python and other language modules where the module needs to be "
"installed into the prefix of the Python installation. Spack handles this by "
"installing modules into their own prefix, but allowing ONE module version to "
"be symlinked into a parent Python install at a time, using ``spack "
"activate``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.extends:10
msgid ""
"keyword arguments can be passed to extends() so that extension packages can "
"pass parameters to the extendee's extension mechanism."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.provides:1
msgid ""
"Allows packages to provide a virtual dependency.  If a package provides "
"'mpi', other packages can declare that they depend on \"mpi\", and spack can "
"use the providing package to satisfy the dependency."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.patch:1
msgid ""
"Packages can declare patches to apply to source.  You can optionally provide "
"a when spec to indicate that a particular patch should only be applied when "
"the package's spec meets certain conditions (e.g. a particular version)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.patch:6
msgid "url or relative filename of the patch"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.patch:8
msgid "patch level (as in the patch shell command)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.patch:10
msgid "optional anonymous spec that specifies when to apply the patch"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.patch:13
msgid "dir to change to before applying"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.patch:16
msgid ""
"sha256 sum of the patch, used to verify the patch (only required for URL "
"patches)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.patch:19
msgid ""
"sha256 sum of the *archive*, if the patch is compressed (only required for "
"compressed URL patches)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.variant:1
msgid ""
"Define a variant for the package. Packager can specify a default value as "
"well as a text description."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.variant:4
msgid "name of the variant"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.variant:6
msgid ""
"default value for the variant, if not specified otherwise the default will "
"be False for a boolean variant and 'nothing' for a multi-valued variant"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.variant:10
msgid "description of the purpose of the variant"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.variant:12
msgid ""
"either a tuple of strings containing the allowed values, or a callable "
"accepting one value and returning True if it is valid"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.variant:16
msgid "if False only one value per spec is allowed for this variant"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.variant:19
msgid ""
"optional group validator to enforce additional logic. It receives the "
"package name, the variant name and a tuple of values and should raise an "
"instance of SpackError if the group doesn't meet the additional constraints"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.variant:25
msgid "if arguments passed to the directive are invalid"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.resource:1
msgid ""
"Define an external resource to be fetched and staged when building the "
"package. Based on the keywords present in the dictionary the appropriate "
"FetchStrategy will be used for the resource. Resources are fetched and "
"staged in their own folder inside spack stage area, and then moved into the "
"stage area of the package that needs them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.resource:7
msgid "List of recognized keywords:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.resource:9
msgid ""
"'when' : (optional) represents the condition upon which the resource is "
"needed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.resource:11
msgid ""
"'destination' : (optional) path where to move the resource. This path must "
"be relative to the main package stage area."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring
#: of spack.directives.resource:13
msgid ""
"'placement' : (optional) gives the possibility to fine tune how the resource "
"is moved into the main package stage area."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:113
msgid "spack.directory\\_layout module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.DirectoryLayout:1
msgid ""
"A directory layout is used to associate unique paths with specs. Different "
"installations are going to want differnet layouts for their install, and "
"they can use this to customize the nesting structure of spack installs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.DirectoryLayout.all_specs:1
#: spack.directory_layout.YamlDirectoryLayout.all_specs:1
msgid ""
"To be implemented by subclasses to traverse all specs for which there is a "
"directory within the root."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.DirectoryLayout.check_installed:1
#: spack.directory_layout.YamlDirectoryLayout.check_installed:1
msgid "Checks whether a spec is installed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.DirectoryLayout.check_installed:3
#: spack.directory_layout.YamlDirectoryLayout.check_installed:3
msgid "Return the spec's prefix, if it is installed, None otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.DirectoryLayout.check_installed:5
#: spack.directory_layout.YamlDirectoryLayout.check_installed:5
msgid "Raise an exception if the install is inconsistent or corrupt."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.DirectoryLayout.create_install_directory:1
#: spack.directory_layout.YamlDirectoryLayout.create_install_directory:1
msgid "Creates the installation directory for a spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.DirectoryLayout.hidden_file_paths:1
#: spack.directory_layout.YamlDirectoryLayout.hidden_file_paths:1
msgid "Return a list of hidden files used by the directory layout."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.DirectoryLayout.hidden_file_paths:3
#: spack.directory_layout.YamlDirectoryLayout.hidden_file_paths:3
msgid "Paths are relative to the root of an install directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.DirectoryLayout.hidden_file_paths:5
#: spack.directory_layout.YamlDirectoryLayout.hidden_file_paths:5
msgid ""
"If the directory layout uses no hidden files to maintain state, this should "
"return an empty container, e.g. [] or (,)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.DirectoryLayout.path_for_spec:1
msgid "Return absolute path from the root to a directory for the spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.DirectoryLayout.relative_path_for_spec:1
#: spack.directory_layout.YamlDirectoryLayout.relative_path_for_spec:1
msgid ""
"Implemented by subclasses to return a relative path from the install root to "
"a unique location for the provided spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.DirectoryLayout.remove_install_directory:1
msgid ""
"Removes a prefix and any empty parent directories from the root. Raised "
"RemoveFailedError if something goes wrong."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.DirectoryLayoutError:1
msgid "Superclass for directory layout errors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.ExtensionAlreadyInstalledError:1
#: spack.directory_layout.ExtensionConflictError:1
#: spack.directory_layout.InconsistentInstallDirectoryError:1
#: spack.directory_layout.InstallDirectoryAlreadyExistsError:1
#: spack.directory_layout.InvalidDirectoryLayoutParametersError:1
#: spack.directory_layout.InvalidExtensionSpecError:1
#: spack.directory_layout.NoSuchExtensionError:1
#: spack.directory_layout.RemoveFailedError:1
#: spack.directory_layout.SpecHashCollisionError:1
#: spack.directory_layout.SpecReadError:1
msgid "Bases: :class:`spack.directory_layout.DirectoryLayoutError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.ExtensionAlreadyInstalledError:1
#: spack.directory_layout.ExtensionConflictError:1
msgid "Raised when an extension is added to a package that already has it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.ExtensionsLayout:1
msgid ""
"A directory layout is used to associate unique paths with specs for package "
"extensions. Keeps track of which extensions are activated for what package. "
"Depending on the use case, this can mean globally activated extensions "
"directly in the installation folder - or extensions activated in filesystem "
"views."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.ExtensionsLayout.add_extension:1
#: spack.directory_layout.YamlViewExtensionsLayout.add_extension:1
msgid "Add to the list of currently installed extensions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.ExtensionsLayout.check_activated:1
#: spack.directory_layout.YamlViewExtensionsLayout.check_activated:1
msgid "Ensure that ext_spec can be removed from spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.ExtensionsLayout.check_activated:3
#: spack.directory_layout.YamlViewExtensionsLayout.check_activated:3
msgid "If not, raise NoSuchExtensionError."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.ExtensionsLayout.check_extension_conflict:1
#: spack.directory_layout.YamlViewExtensionsLayout.check_extension_conflict:1
msgid "Ensure that ext_spec can be activated in spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.ExtensionsLayout.check_extension_conflict:3
#: spack.directory_layout.YamlViewExtensionsLayout.check_extension_conflict:3
msgid "If not, raise ExtensionAlreadyInstalledError or ExtensionConflictError."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.ExtensionsLayout.extendee_target_directory:1
msgid ""
"Specify to which full path extendee should link all files from extensions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.ExtensionsLayout.extension_map:1
msgid "Get a dict of currently installed extension packages for a spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.ExtensionsLayout.extension_map:3
msgid ""
"Dict maps { name : extension_spec } Modifying dict does not affect internals "
"of this layout."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.ExtensionsLayout.remove_extension:1
#: spack.directory_layout.YamlViewExtensionsLayout.remove_extension:1
msgid "Remove from the list of currently installed extensions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.InconsistentInstallDirectoryError:1
msgid "Raised when a package seems to be installed to the wrong place."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.InstallDirectoryAlreadyExistsError:1
msgid "Raised when create_install_directory is called unnecessarily."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.InvalidDirectoryLayoutParametersError:1
msgid "Raised when a invalid directory layout parameters are supplied"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.InvalidExtensionSpecError:1
msgid "Raised when an extension file has a bad spec in it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.NoSuchExtensionError:1
msgid "Raised when an extension isn't there on deactivate."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.RemoveFailedError:1
msgid "Raised when a DirectoryLayout cannot remove an install prefix."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.SpecHashCollisionError:1
msgid "Raised when there is a hash collision in an install layout."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.SpecReadError:1
msgid "Raised when directory layout can't read a spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.YamlDirectoryLayout:1
msgid "Bases: :class:`spack.directory_layout.DirectoryLayout`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.YamlDirectoryLayout:5
msgid "By default lays out installation directories like this::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.YamlDirectoryLayout:5
msgid "<install root>/"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.YamlDirectoryLayout:5
msgid "<platform-os-target>/"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.YamlDirectoryLayout:5
msgid "<compiler>-<compiler version>/"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.YamlDirectoryLayout:5
msgid "<name>-<version>-<hash>"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.YamlDirectoryLayout:7
msgid ""
"The hash here is a SHA-1 hash for the full DAG plus the build spec.  TODO: "
"implement the build spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.YamlDirectoryLayout:10
msgid ""
"The installation directory scheme can be modified with the arguments "
"hash_len and path_scheme."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.YamlDirectoryLayout.read_spec:1
msgid "Read the contents of a file and parse them as a spec"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.YamlDirectoryLayout.spec_file_path:1
msgid "Gets full path to spec file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.YamlDirectoryLayout.write_spec:1
msgid "Write a spec out to a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.YamlViewExtensionsLayout:1
msgid "Bases: :class:`spack.directory_layout.ExtensionsLayout`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.YamlViewExtensionsLayout:1
msgid "Maintain extensions within a view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.YamlViewExtensionsLayout.extension_file_path:1
msgid ""
"Gets full path to an installed package's extension file, which keeps track "
"of all the extensions for that package which have been added to this view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring
#: of spack.directory_layout.YamlViewExtensionsLayout.extension_map:1
msgid "Defensive copying version of _extension_map() for external API."
msgstr ""

# 3a8d6f12cb9f4c20814ced54e413d7b2
#: ../spack/lib/spack/docs/spack.rst:121
msgid "spack.environment module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.active:1
msgid "True if this environment is currently active."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.add:1
msgid "Add a single user_spec (non-concretized) to the Environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.add:3
msgid ""
"True if the spec was added, False if it was already     present and did not "
"need to be added"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.add:5
msgid "True if the spec was added, False if it was already"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.add:6
msgid "present and did not need to be added"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.added_specs:1
msgid "Specs that are not yet installed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.added_specs:3
msgid ""
"Yields the user spec for non-concretized specs, and the concrete spec for "
"already concretized but not yet installed specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.all_hashes:1
#: spack.environment.Environment.all_specs:1
msgid "Return all specs, even those a user spec would shadow."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.all_specs_by_hash:1
msgid "Map of hashes to spec for all specs in this environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.concretize:1
msgid "Concretize user_specs in this environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.concretize:3
msgid ""
"Only concretizes specs that haven't been concretized yet unless force is "
"``True``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.concretize:6
msgid ""
"This only modifies the environment in memory. ``write()`` will write out a "
"lockfile containing concretized specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.concretize:9
msgid "re-concretize ALL specs, even those that were already concretized"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.concretized_specs:1
msgid "Tuples of (user spec, concrete spec) for all concrete specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.config_scopes:1
msgid "A list of all configuration scopes for this environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.destroy:1
msgid "Remove this environment from Spack entirely."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.env_file_config_scope:1
msgid "Get the configuration scope for the environment's manifest file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.env_file_config_scope_name:1
msgid "Name of the config scope of this environment's manifest file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.env_subdir_path:1
msgid "Path to directory where the env stores repos, logs, views."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.included_config_scopes:1
msgid "List of included configuration scopes from the environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.included_config_scopes:3
msgid ""
"Scopes are listed in the YAML file in order from highest to lowest "
"precedence, so configuration from earlier scope will take precedence over "
"later ones."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.included_config_scopes:7
msgid ""
"This routine returns them in the order they should be pushed onto the "
"internal scope stack (so, in reverse, from lowest to highest)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.install:1
msgid "Install a single spec into an environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.install:3
msgid ""
"This will automatically concretize the single spec, but it won't affect "
"other as-yet unconcretized specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.install_all:1
msgid "Install all concretized specs in an environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.internal:1
msgid "Whether this environment is managed by Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.lock_path:1
msgid "Path to spack.lock file in this environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.manifest_path:1
msgid "Path to spack.yaml file in this environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.name:1
msgid "Human-readable representation of the environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.name:3
msgid ""
"This is the path for directory environments, and just the name for named "
"environments."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.remove:1
msgid "Remove specs from an environment that match a query_spec"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.removed_specs:1
msgid ""
"Tuples of (user spec, concrete spec) for all specs that will be removed on "
"nexg concretize."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.roots:1
msgid "Specs explicitly requested by the user *in this environment*."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.roots:3
msgid ""
"Yields both added and installed specs that have user specs in `spack.yaml`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.write:1
msgid "Writes an in-memory environment to its location on disk."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.Environment.write:3
msgid "This will also write out package files for each newly concretized spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.SpackEnvironmentError:1
msgid "Superclass for all errors to do with Spack environments."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.activate:1
msgid "Activate an environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.activate:3
msgid ""
"To activate an environment, we add its configuration scope to the existing "
"Spack configuration, and we set active to the current environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.activate:7
msgid "the environment to activate"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.activate:9
msgid "use the packages exactly as they appear in the environment's repository"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.activate:12
msgid "generate commands to add view to path variables"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.activate:14
msgid "One of `sh`, `csh`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.activate:16
msgid "string to add to the users prompt, or None"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.activate:19
msgid "Shell commands to activate environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.activate:22
msgid "TODO: environment to use the activated spack environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.active:1
msgid "True if the named environment is active."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.all_environment_names:1
msgid "List the names of environments that currently exist."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.all_environments:1
msgid "Generator for all named Environments."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.config_dict:1
msgid "Get the configuration scope section out of an spack.yaml"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.create:1
msgid "Create a named environment in Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.deactivate:1
msgid "Undo any configuration or repo settings modified by ``activate()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.deactivate:3
msgid "One of `sh`, `csh`. Shell style to use."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.deactivate:6
msgid "shell commands for `shell` to undo environment variables"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.deactivate_config_scope:1
msgid "Remove any scopes from env from the global config path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.default_manifest_yaml:1
msgid "default spack.yaml file to put in new environments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.env_path:1
msgid "path where environments are stored in the spack tree"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.env_schema_keys:1
msgid "legal first keys in the spack.yaml manifest file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.env_subdir_name:1
msgid "Name of the directory where environments store repos, logs, views"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.exists:1
msgid "Whether an environment with this name exists or not."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.find_environment:1
msgid "Find active environment from args, spack.yaml, or environment variable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.find_environment:3
msgid ""
"This is called in ``spack.main`` to figure out which environment to activate."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.find_environment:9
msgid "Check for an environment in this order:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.find_environment:7
msgid "via ``spack -e ENV`` or ``spack -D DIR`` (arguments)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.find_environment:8
msgid "as a spack.yaml file in the current directory, or"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.find_environment:9
msgid "via a path in the SPACK_ENV environment variable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.find_environment:11
msgid "If an environment is found, read it in.  If not, return None."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.find_environment:13 spack.environment.get_env:15
msgid "argparse namespace wtih command arguments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.find_environment:16
msgid "a found environment, or ``None``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.get_env:1
msgid "Used by commands to get the active environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.get_env:3
msgid ""
"This first checks for an ``env`` argument, then looks at the ``active`` "
"environment.  We check args first because Spack's subcommand arguments are "
"parsed *after* the ``-e`` and ``-D`` arguments to ``spack``.  So there may "
"be an ``env`` argument that is *not* the active environment, and we give it "
"precedence."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.get_env:9
msgid ""
"This is used by a number of commands for determining whether there is an "
"active environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.get_env:12
msgid ""
"If an environment is not found *and* is required, print an error message "
"that says the calling command *needs* an active environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.get_env:17
msgid "name of calling command"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.get_env:19
msgid ""
"if ``True``, raise an exception when no environment is found; if ``False``, "
"just return ``None``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.get_env:23
msgid "if there is an arg or active environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.is_env_dir:1
msgid "Whether a directory contains a spack environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.lockfile_format_version:1
msgid "version of the lockfile format. Must increase monotonically."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.lockfile_name:1 spack.environment.manifest_name:1
msgid "Name of the input yaml file for an environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.make_repo_path:1
msgid "Make a RepoPath from the repo subdirectories in an environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.prepare_config_scope:1
msgid "Add env's scope to the global configuration search path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.read:1
msgid "Get an environment with the supplied name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.root:1
msgid "Get the root directory for an environment by name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.spack_env_var:1
msgid "environment variable used to indicate the active environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring
#: of spack.environment.valid_environment_name_re:1
msgid "regex for validating enviroment names"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:129
msgid "spack.error module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of
#: spack.error.NoHeadersError:1
msgid "Raised when package headers are requested but cannot be found"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of
#: spack.error.NoLibrariesError:1
msgid "Raised when package libraries are requested but cannot be found"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of
#: spack.error.SpackError:1
msgid ""
"This is the superclass for all Spack errors. Subclasses can be found in the "
"modules they have to do with."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of
#: spack.error.SpackError.print_context:1
msgid "Print extended debug information about this exception."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of
#: spack.error.SpackError.print_context:3
msgid ""
"This is usually printed when the top-level Spack error handler calls "
"``die()``, but it can be called separately beforehand if a lower-level error "
"handler needs to print error context and continue without raising the "
"exception to the top level."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of
#: spack.error.SpecError:1 spack.spec.SpecError:1
msgid "Superclass for all errors that occur while constructing specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of
#: spack.error.UnsatisfiableSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring
#: spack.spec.SpecParseError:1 spack.spec.DuplicateDependencyError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring
#: spack.spec.DuplicateVariantError:1 spack.spec.DuplicateCompilerSpecError:1
#: spack.spec.UnsupportedCompilerError:1 spack.spec.UnknownVariantError:1
#: spack.spec.DuplicateArchitectureError:1 spack.spec.InconsistentSpecError:1
#: spack.spec.InvalidDependencyError:1 spack.spec.NoProviderError:1
#: spack.spec.MultipleProviderError:1 spack.spec.UnsatisfiableSpecError:1
#: spack.spec.AmbiguousHashError:1 spack.spec.InvalidHashError:1
#: spack.spec.NoSuchHashError:1 spack.spec.RedundantSpecError:1
#: spack.variant.DuplicateVariantError:1
#: spack.variant.InconsistentValidationError:1
#: spack.variant.InvalidVariantValueError:1 spack.variant.UnknownVariantError:1
msgid "Bases: :class:`spack.error.SpecError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of
#: spack.error.UnsatisfiableSpecError:1 spack.spec.UnsatisfiableSpecError:1
msgid ""
"Raised when a spec conflicts with package constraints. Provide the "
"requirement that was violated when raising."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of
#: spack.error.UnsupportedPlatformError:1
msgid "Raised by packages when a platform is not supported"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of
#: spack.error.debug:1
msgid ""
"whether we should write stack traces or short error messages this is module-"
"scoped because it needs to be set very early"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:137
msgid "spack.extensions module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: of spack.extensions:1
msgid ""
"Service functions and classes to implement the hooks for Spack's command "
"extensions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: of spack.extensions.extension_name:1
msgid "Returns the name of the extension in the path passed as argument."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: of spack.extensions.extension_name:3
msgid "path where the extension resides"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: of spack.extensions.extension_name:6
msgid ""
"The extension name or None if path doesn't match the format for Spack's "
"extension."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: of spack.extensions.get_command_paths:1
msgid "Return the list of paths where to search for command files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: of spack.extensions.get_module:1
msgid ""
"Imports the extension module for a particular command name and returns it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: of spack.extensions.get_template_dirs:1
msgid ""
"Returns the list of directories where to search for templates in extensions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: of spack.extensions.load_command_extension:1
msgid "Loads a command extension from the path passed as argument."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: of spack.extensions.load_command_extension:3
msgid "name of the command"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: of spack.extensions.load_command_extension:5
msgid "base path of the command extension"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: of spack.extensions.load_command_extension:8
msgid "A valid module object if the command is found or None"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: of spack.extensions.path_for_extension:1
msgid "Return the test root dir for a given extension."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: of spack.extensions.path_for_extension:3
msgid "name of the extension to test"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: of spack.extensions.path_for_extension:5
msgid "paths where the extensions reside"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring
#: of spack.extensions.path_for_extension:7
msgid "Root directory where tests should reside or None"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:145
msgid "spack.fetch\\_strategy module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy:1
msgid ""
"Fetch strategies are used to download source code into a staging area in "
"order to build it.  They need to define the following methods:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy:4
msgid "fetch()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy:5
msgid "This should attempt to download/check out source from somewhere."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy:7
msgid "check()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy:7
msgid ""
"Apply a checksum to the downloaded source code, e.g. for an archive. May not "
"do anything if the fetch method was safe to begin with."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy:9
msgid "expand()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy:10
msgid "Expand (e.g., an archive) downloaded file to source."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy:13
msgid "reset()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy:12
msgid ""
"Restore original state of downloaded code.  Used by clean commands. This may "
"just remove the expanded source and re-expand an archive, or it may run "
"something like git reset --hard."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy:17
msgid "archive()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy:16
msgid "Archive a source directory, e.g. for creating a mirror."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.CacheURLFetchStrategy:1
msgid "Bases: :class:`spack.fetch_strategy.URLFetchStrategy`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.CacheURLFetchStrategy:1
msgid "The resource associated with a cache URL may be out of date."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.CacheURLFetchStrategy.fetch:1
#: spack.fetch_strategy.FetchStrategy.fetch:1
#: spack.fetch_strategy.GitFetchStrategy.fetch:1
#: spack.fetch_strategy.GoFetchStrategy.fetch:1
#: spack.fetch_strategy.HgFetchStrategy.fetch:1
#: spack.fetch_strategy.SvnFetchStrategy.fetch:1
#: spack.fetch_strategy.URLFetchStrategy.fetch:1
msgid "Fetch source code archive or repo."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.CacheURLFetchStrategy.fetch:3
#: spack.fetch_strategy.FetchStrategy.fetch:3
#: spack.fetch_strategy.GitFetchStrategy.fetch:3
#: spack.fetch_strategy.GoFetchStrategy.fetch:3
#: spack.fetch_strategy.HgFetchStrategy.fetch:3
#: spack.fetch_strategy.SvnFetchStrategy.fetch:3
#: spack.fetch_strategy.URLFetchStrategy.fetch:3
msgid "True on success, False on failure."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.ChecksumError:1
#: spack.fetch_strategy.ExtrapolationError:1
#: spack.fetch_strategy.FailedDownloadError:1
#: spack.fetch_strategy.FetcherConflict:1
#: spack.fetch_strategy.InvalidArgsError:1
#: spack.fetch_strategy.NoArchiveFileError:1
#: spack.fetch_strategy.NoCacheError:1 spack.fetch_strategy.NoDigestError:1
#: spack.fetch_strategy.NoStageError:1
msgid "Bases: :class:`spack.fetch_strategy.FetchError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.ChecksumError:1
msgid "Raised when archive fails to checksum."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.ExtrapolationError:1
msgid "Raised when we can't extrapolate a version for a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FSMeta:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring
#: spack.tengine.ContextMeta:1
msgid "Bases: :class:`type`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FSMeta:1
msgid "This metaclass registers all fetch strategies in a list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FailedDownloadError:1
msgid "Raised wen a download fails."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchError:1
msgid "Superclass fo fetcher errors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchStrategy:1
msgid "Superclass of all fetch strategies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchStrategy.archive:1
#: spack.fetch_strategy.GitFetchStrategy.archive:1
#: spack.fetch_strategy.GoFetchStrategy.archive:1
#: spack.fetch_strategy.HgFetchStrategy.archive:1
#: spack.fetch_strategy.SvnFetchStrategy.archive:1
#: spack.fetch_strategy.VCSFetchStrategy.archive:1
msgid "Create an archive of the downloaded data for a mirror."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchStrategy.archive:3
#: spack.fetch_strategy.GitFetchStrategy.archive:3
#: spack.fetch_strategy.GoFetchStrategy.archive:3
#: spack.fetch_strategy.HgFetchStrategy.archive:3
#: spack.fetch_strategy.SvnFetchStrategy.archive:3
#: spack.fetch_strategy.VCSFetchStrategy.archive:3
msgid ""
"For downloaded files, this should preserve the checksum of the original "
"file. For repositories, it should just create an expandable tarball out of "
"the downloaded repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchStrategy.cachable:1
#: spack.fetch_strategy.GitFetchStrategy.cachable:1
#: spack.fetch_strategy.HgFetchStrategy.cachable:1
#: spack.fetch_strategy.SvnFetchStrategy.cachable:1
#: spack.fetch_strategy.URLFetchStrategy.cachable:1
msgid "Whether fetcher is capable of caching the resource it retrieves."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchStrategy.cachable:3
#: spack.fetch_strategy.GitFetchStrategy.cachable:3
#: spack.fetch_strategy.HgFetchStrategy.cachable:3
#: spack.fetch_strategy.SvnFetchStrategy.cachable:3
#: spack.fetch_strategy.URLFetchStrategy.cachable:3
msgid ""
"This generally is determined by whether the resource is identifiably "
"associated with a specific package version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchStrategy.cachable:6
#: spack.fetch_strategy.GitFetchStrategy.cachable:6
#: spack.fetch_strategy.HgFetchStrategy.cachable:6
#: spack.fetch_strategy.SvnFetchStrategy.cachable:6
#: spack.fetch_strategy.URLFetchStrategy.cachable:6
msgid "True if can cache, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchStrategy.check:1
#: spack.fetch_strategy.VCSFetchStrategy.check:1
msgid "Checksum the archive fetched by this FetchStrategy."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchStrategy.expand:1
#: spack.fetch_strategy.URLFetchStrategy.expand:1
#: spack.fetch_strategy.VCSFetchStrategy.expand:1
msgid "Expand the downloaded archive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchStrategy.optional_attrs:1
msgid ""
"Optional attributes can be used to distinguish fetchers when: classes have "
"multiple ``url_attrs`` at the top-level."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchStrategy.reset:1
#: spack.fetch_strategy.GitFetchStrategy.reset:1
#: spack.fetch_strategy.GoFetchStrategy.reset:1
#: spack.fetch_strategy.HgFetchStrategy.reset:1
#: spack.fetch_strategy.SvnFetchStrategy.reset:1
msgid "Revert to freshly downloaded state."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchStrategy.reset:3
#: spack.fetch_strategy.GitFetchStrategy.reset:3
#: spack.fetch_strategy.GoFetchStrategy.reset:3
#: spack.fetch_strategy.HgFetchStrategy.reset:3
#: spack.fetch_strategy.SvnFetchStrategy.reset:3
msgid "For archive files, this may just re-expand the archive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchStrategy.set_stage:1
msgid ""
"This is called by Stage before any of the fetching methods are called on the "
"stage."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchStrategy.source_id:1
#: spack.fetch_strategy.GitFetchStrategy.source_id:1
#: spack.fetch_strategy.HgFetchStrategy.source_id:1
#: spack.fetch_strategy.SvnFetchStrategy.source_id:1
#: spack.fetch_strategy.URLFetchStrategy.source_id:1
msgid "A unique ID for the source."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchStrategy.source_id:3
#: spack.fetch_strategy.GitFetchStrategy.source_id:3
#: spack.fetch_strategy.HgFetchStrategy.source_id:3
#: spack.fetch_strategy.SvnFetchStrategy.source_id:3
#: spack.fetch_strategy.URLFetchStrategy.source_id:3
msgid ""
"The returned value is added to the content which determines the full hash "
"for a package using `str()`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetchStrategy.url_attr:1
msgid ""
"The URL attribute must be specified either at the package class level, or as "
"a keyword argument to ``version()``.  It is used to distinguish fetchers for "
"different versions in the package DSL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.FetcherConflict:1
msgid "Raised for packages with invalid fetch attributes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.GitFetchStrategy:1
#: spack.fetch_strategy.GoFetchStrategy:1
#: spack.fetch_strategy.HgFetchStrategy:1
#: spack.fetch_strategy.SvnFetchStrategy:1
msgid "Bases: :class:`spack.fetch_strategy.VCSFetchStrategy`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.GitFetchStrategy:1
msgid ""
"Fetch strategy that gets source code from a git repository. Use like this in "
"a package:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.GitFetchStrategy:4
msgid "version('name', git='https://github.com/project/repo.git')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.GitFetchStrategy:6
msgid "Optionally, you can provide a branch, or commit to check out, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.GitFetchStrategy:8
msgid "version('1.1', git='https://github.com/project/repo.git', tag='v1.1')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.GitFetchStrategy:10
msgid "You can use these three optional attributes in addition to ``git``:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.GitFetchStrategy:12
msgid "``branch``: Particular branch to build from (default is the"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.GitFetchStrategy:13
msgid "repository's default branch)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.GitFetchStrategy:14
msgid "``tag``: Particular tag to check out"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.GitFetchStrategy:15
msgid "``commit``: Particular commit hash in the repo"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.GoFetchStrategy:1
msgid "Fetch strategy that employs the `go get` infrastructure."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.GoFetchStrategy:3
msgid "Use like this in a package:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.GoFetchStrategy:6
msgid "version('name',"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.GoFetchStrategy:6
msgid "go='github.com/monochromegane/the_platinum_searcher/...')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.GoFetchStrategy:8
msgid "Go get does not natively support versions, they can be faked with git"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.HgFetchStrategy:1
msgid ""
"Fetch strategy that gets source code from a Mercurial repository. Use like "
"this in a package:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.HgFetchStrategy:4
msgid "version('name', hg='https://jay.grs.rwth-aachen.de/hg/lwm2')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.HgFetchStrategy:6
msgid "Optionally, you can provide a branch, or revision to check out, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.HgFetchStrategy:9
msgid "version('torus',"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.HgFetchStrategy:9
msgid "hg='https://jay.grs.rwth-aachen.de/hg/lwm2', branch='torus')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.HgFetchStrategy:11
msgid ""
"You can use the optional 'revision' attribute to check out a branch, tag, or "
"particular revision in hg.  To prevent non-reproducible builds, using a "
"moving target like a branch is discouraged."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.HgFetchStrategy:16
msgid "``revision``: Particular revision, branch, or tag."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.HgFetchStrategy.hg:1
msgid "The hg executable :rtype: Executable"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.HgFetchStrategy.hg:4
msgid "returns"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.InvalidArgsError:1
msgid "Raised when a version can't be deduced from a set of arguments."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.NoArchiveFileError:1
msgid "\"Raised when an archive file is expected but none exists."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.NoCacheError:1
msgid "Raised when there is no cached archive for a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.NoDigestError:1
msgid "Raised after attempt to checksum when URL has no digest."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.NoStageError:1
msgid "Raised when fetch operations are called before set_stage()."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.SvnFetchStrategy:1
msgid ""
"Fetch strategy that gets source code from a subversion repository. Use like "
"this in a package:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.SvnFetchStrategy:4
msgid "version('name', svn='http://www.example.com/svn/trunk')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.SvnFetchStrategy:6
msgid "Optionally, you can provide a revision for the URL:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.SvnFetchStrategy:10
msgid "version('name', svn='http://www.example.com/svn/trunk',"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.SvnFetchStrategy:9
msgid "revision='1641')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.URLFetchStrategy:1
#: spack.fetch_strategy.VCSFetchStrategy:1
msgid "Bases: :class:`spack.fetch_strategy.FetchStrategy`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.URLFetchStrategy:1
msgid ""
"FetchStrategy that pulls source code from a URL for an archive, checks the "
"archive against a checksum,and decompresses the archive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.URLFetchStrategy.archive:1
msgid "Just moves this archive to the destination."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.URLFetchStrategy.archive_file:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring
#: spack.stage.Stage.archive_file:1
msgid "Path to the source archive within this stage directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.URLFetchStrategy.check:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring
#: spack.stage.Stage.check:1
msgid ""
"Check the downloaded archive against a checksum digest. No-op if this stage "
"checks code out of a repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.URLFetchStrategy.reset:1
msgid "Removes the source path if it exists, then re-expands the archive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.VCSFetchStrategy:1
msgid "Superclass for version control system fetch strategies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.VCSFetchStrategy:3
msgid ""
"Like all fetchers, VCS fetchers are identified by the attributes passed to "
"the ``version`` directive.  The optional_attrs for a VCS fetch strategy "
"represent types of revisions, e.g. tags, branches, commits, etc."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.VCSFetchStrategy:8
msgid ""
"The required attributes (git, svn, etc.) are used to specify the URL and to "
"distinguish a VCS fetch strategy from a URL fetch strategy."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.all_strategies:1
msgid "List of all fetch strategies, created by FetchStrategy metaclass."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.check_pkg_attributes:1
msgid "Find ambiguous top-level fetch attributes in a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.check_pkg_attributes:3
msgid ""
"Currently this only ensures that two or more VCS fetch strategies are not "
"specified at once."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.for_package_version:1
msgid ""
"Determine a fetch strategy based on the arguments supplied to version() in "
"the package description."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.from_kwargs:1
msgid ""
"Construct an appropriate FetchStrategy from the given keyword arguments."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.from_kwargs:3
msgid ""
"dictionary of keyword arguments, e.g. from a ``version()`` directive in a "
"package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.from_kwargs:6
msgid ""
"The fetch strategy that matches the args, based     on attribute names (e."
"g., ``git``, ``hg``, etc.)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.from_kwargs:8
msgid "The fetch strategy that matches the args, based"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.from_kwargs:9
msgid "on attribute names (e.g., ``git``, ``hg``, etc.)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.from_kwargs:12
msgid "If no ``fetch_strategy`` matches the args."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.from_list_url:1
msgid ""
"If a package provides a URL which lists URLs for resources by version, this "
"can can create a fetcher for a URL discovered for the specified package's "
"version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.from_url:1
msgid ""
"Given a URL, find an appropriate fetch strategy for it. Currently just gives "
"you a URLFetchStrategy that uses curl."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.from_url:4
msgid "TODO: make this return appropriate fetch strategies for other"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring
#: of spack.fetch_strategy.from_url:5
msgid "types of URLs."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:153
msgid "spack.filesystem\\_view module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView:1
msgid "Governs a filesystem view that is located at certain root-directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView:3
msgid ""
"Packages are linked from their install directories into a common file "
"hierachy."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView:6
msgid ""
"In distributed filesystems, loading each installed package seperately can "
"lead to slow-downs due to too many directories being traversed. This can be "
"circumvented by loading all needed modules into a common directory structure."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.add_extension:1
#: spack.filesystem_view.YamlFilesystemView.add_extension:1
msgid "Add (link) an extension in this view. Does not add dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.add_specs:1
#: spack.filesystem_view.YamlFilesystemView.add_specs:1
msgid "Add given specs to view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.add_specs:3
#: spack.filesystem_view.YamlFilesystemView.add_specs:3
msgid ""
"The supplied specs might be standalone packages or extensions of other "
"packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.add_specs:6
#: spack.filesystem_view.YamlFilesystemView.add_specs:6
msgid ""
"Should accept `with_dependencies` as keyword argument (default True) to "
"indicate wether or not dependencies should be activated as well."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.add_specs:10
#: spack.filesystem_view.FilesystemView.remove_specs:14
#: spack.filesystem_view.YamlFilesystemView.add_specs:10
#: spack.filesystem_view.YamlFilesystemView.remove_specs:14
msgid ""
"Should except an `exclude` keyword argument containing a list of regexps "
"that filter out matching spec names."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.add_specs:13
#: spack.filesystem_view.YamlFilesystemView.add_specs:13
msgid "This method should make use of `activate_{extension,standalone}`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.add_standalone:1
#: spack.filesystem_view.YamlFilesystemView.add_standalone:1
msgid "Add (link) a standalone package into this view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.check_added:1
#: spack.filesystem_view.YamlFilesystemView.check_added:1
msgid "Check if the given concrete spec is active in this view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.get_all_specs:1
#: spack.filesystem_view.YamlFilesystemView.get_all_specs:1
msgid "Get all specs currently active in this view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.get_projection_for_spec:1
msgid "Get the projection in this view for a spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.get_spec:1
#: spack.filesystem_view.YamlFilesystemView.get_spec:1
msgid ""
"Return the actual spec linked in this view (i.e. do not look it up in the "
"database by name)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.get_spec:4
#: spack.filesystem_view.YamlFilesystemView.get_spec:4
msgid "`spec` can be a name or a spec from which the name is extracted."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.get_spec:6
#: spack.filesystem_view.YamlFilesystemView.get_spec:6
msgid ""
"As there can only be a single version active for any spec the name is enough "
"to identify the spec in the view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.get_spec:9
#: spack.filesystem_view.YamlFilesystemView.get_spec:9
msgid "If no spec is present, returns None."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.print_status:4
#: spack.filesystem_view.YamlFilesystemView.print_status:4
msgid "Print a short summary about the given specs, detailing whether.."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.print_status:2
#: spack.filesystem_view.YamlFilesystemView.print_status:2
msgid "..they are active in the view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.print_status:3
#: spack.filesystem_view.YamlFilesystemView.print_status:3
msgid "..they are active but the activated version differs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.print_status:4
#: spack.filesystem_view.YamlFilesystemView.print_status:4
msgid "..they are not activte in the view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.print_status:6
#: spack.filesystem_view.YamlFilesystemView.print_status:6
msgid ""
"Takes `with_dependencies` keyword argument so that the status of "
"dependencies is printed as well."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.remove_extension:1
#: spack.filesystem_view.YamlFilesystemView.remove_extension:1
msgid "Remove (unlink) an extension from this view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.remove_specs:1
#: spack.filesystem_view.YamlFilesystemView.remove_specs:1
msgid "Removes given specs from view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.remove_specs:3
#: spack.filesystem_view.YamlFilesystemView.remove_specs:3
msgid ""
"The supplied spec might be a standalone package or an extension of another "
"package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.remove_specs:6
#: spack.filesystem_view.YamlFilesystemView.remove_specs:6
msgid ""
"Should accept `with_dependencies` as keyword argument (default True) to "
"indicate wether or not dependencies should be deactivated as well."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.remove_specs:10
#: spack.filesystem_view.YamlFilesystemView.remove_specs:10
msgid ""
"Should accept `with_dependents` as keyword argument (default True) to "
"indicate wether or not dependents on the deactivated specs should be removed "
"as well."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.remove_specs:17
#: spack.filesystem_view.YamlFilesystemView.remove_specs:17
msgid "This method should make use of `deactivate_{extension,standalone}`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.FilesystemView.remove_standalone:1
#: spack.filesystem_view.YamlFilesystemView.remove_standalone:1
msgid "Remove (unlink) a standalone package from this view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.YamlFilesystemView:1
msgid "Bases: :class:`spack.filesystem_view.FilesystemView`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.YamlFilesystemView:1
msgid "Filesystem view to work with a yaml based directory layout."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.YamlFilesystemView.get_conflicts:1
msgid ""
"Return list of tuples (<spec>, <spec in view>) where the spec active in the "
"view differs from the one to be activated."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.YamlFilesystemView.get_path_meta_folder:1
msgid "Get path to meta folder for either spec or spec name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.YamlFilesystemView.get_projection_for_spec:1
msgid "Return the projection for a spec in this view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.YamlFilesystemView.get_projection_for_spec:3
msgid "Relies on the ordering of projections to avoid ambiguity."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring
#: of spack.filesystem_view.YamlFilesystemView.print_conflict:1
msgid "Singular print function for spec conflicts."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:161
msgid "spack.graph module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of
#: spack.graph:1
msgid "Functions for graphing DAGs of dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of
#: spack.graph:3
msgid ""
"This file contains code for graphing DAGs of software packages (i.e. Spack "
"specs).  There are two main functions you probably care about:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of
#: spack.graph:7
msgid ""
"graph_ascii() will output a colored graph of a spec in ascii format, kind of "
"like the graph git shows with \"git log --graph\", e.g.::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of
#: spack.graph:33
msgid ""
"graph_dot() will output a graph of a spec (or multiple specs) in dot format."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of
#: spack.graph:36
msgid ""
"Note that ``graph_ascii`` assumes a single spec while ``graph_dot`` can take "
"a number of specs as input."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of
#: spack.graph.topological_sort:1
msgid "Topological sort for specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of
#: spack.graph.topological_sort:3
msgid ""
"Return a list of dependency specs sorted topologically.  The spec argument "
"is not modified in the process."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of
#: spack.graph.AsciiGraph.write:1
msgid "Write out an ascii graph of the provided spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of
#: spack.graph.AsciiGraph.write:3
msgid ""
"Arguments: spec -- spec to graph.  This only handles one spec at a time."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of
#: spack.graph.AsciiGraph.write:6
msgid "Optional arguments:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of
#: spack.graph.AsciiGraph.write:8
msgid "out -- file object to write out to (default is sys.stdout)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of
#: spack.graph.AsciiGraph.write:10
msgid "color -- whether to write in color.  Default is to autodetect"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of
#: spack.graph.AsciiGraph.write:11
msgid "based on output file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of
#: spack.graph.graph_dot:1
msgid "Generate a graph in dot format of all provided specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of
#: spack.graph.graph_dot:3
msgid ""
"Print out a dot formatted graph of all the dependencies between package.  "
"Output can be passed to graphviz, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:169
msgid "spack.main module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main:1
msgid "This is the implementation of the Spack command line executable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main:3
msgid ""
"In a normal Spack installation, this is invoked from the bin/spack script "
"after the system path is set up."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.SpackArgumentParser:1
msgid "Bases: :class:`argparse.ArgumentParser`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.SpackArgumentParser.add_command:1
msgid "Add one subcommand to this parser."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.SpackArgumentParser.add_subparsers:1
msgid "Ensure that sensible defaults are propagated to subparsers"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.SpackArgumentParser.format_help_sections:1
msgid "Format help on sections for a particular verbosity level."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.SpackArgumentParser.format_help_sections:3
msgid "'short' or 'long' (more commands shown for long)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.SpackCommand:1
msgid "Callable object that invokes a spack command (for testing)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.SpackCommand:3
msgid "Example usage::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.SpackCommand:8
msgid ""
"Use this to invoke Spack commands directly from Python and check their "
"output."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.SpackCommandError:1
msgid "Raised when SpackCommand execution fails."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.SpackHelpFormatter:1
msgid "Bases: :class:`argparse.RawTextHelpFormatter`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.add_all_commands:1
msgid "Add all spack subcommands to the parser."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.aliases:1
msgid "top-level aliases for Spack commands"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.allows_unknown_args:1
msgid "Implements really simple argument injection for unknown arguments."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.allows_unknown_args:3
msgid ""
"Commands may add an optional argument called \"unknown args\" to indicate "
"they can handle unknonwn args, and we'll pass the unknown args in."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.index_commands:1
msgid "create an index of commands by section for this help level"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.intro_by_level:1
msgid "intro text for help at different levels"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.levels:1
msgid "help levels in order of detail (i.e., number of commands shown)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.main:1
msgid "This is the entry point for the Spack command."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.main:3
msgid ""
"command line arguments, NOT including the executable name. If None, parses "
"from sys.argv."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.make_argument_parser:1
msgid "Create an basic argument parser without any subcommands added."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.options_by_level:1
msgid "control top-level spack options shown in basic vs. advanced help"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.print_setup_info:1
msgid "Print basic information needed by setup-env.[c]sh."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.print_setup_info:3
msgid ""
"list of things to print: comma-separated list of 'csh', 'sh', or 'modules'"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.print_setup_info:7
msgid ""
"This is in ``main.py`` to make it fast; the setup scripts need to invoke "
"spack in login scripts, and it needs to be quick."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.required_command_properties:1
msgid "Properties that commands are required to set."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.section_descriptions:1
msgid "Longer text for each section, to show in help"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.section_order:1
msgid ""
"preferential command order for some sections (e.g., build pipeline is in "
"execution order, not alphabetical)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.set_working_dir:1
msgid "Change the working directory to getcwd, or spack prefix if no cwd."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.setup_main_options:1
msgid "Configure spack globals based on the basic options."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.spack_working_dir:1
msgid "Recorded directory where spack command was originally invoked"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of
#: spack.main.stat_names:1
msgid "names of profile statistics"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:177
msgid "spack.mirror module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror:1
msgid ""
"This file contains code for creating spack mirror directories.  A mirror is "
"an organized hierarchy containing specially named archive files.  This "
"enabled spack to know where to find files in a mirror if the main server for "
"a particular package is down.  Or, if the computer where spack is run is not "
"connected to the internet, it allows spack to download packages directly "
"from a mirror (e.g., on an intranet)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror.MirrorError:1
msgid "Superclass of all mirror-creation related errors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror.create:4
msgid "Path to create a mirror directory hierarchy in."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror.create:5
msgid ""
"Any package versions matching these specs will be added             to the "
"mirror."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror.create:7
msgid ""
"Max number of versions to fetch per spec,             (default is 1 each "
"spec)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror.create:14
msgid "Return Value:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror.create:10
msgid "Returns a tuple of lists: (present, mirrored, error)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror.create:12
msgid "present:  Package specs that were already present."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror.create:13
msgid "mirrored: Package specs that were successfully mirrored."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror.create:14
msgid "error:    Package specs that failed to mirror due to some error."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror.create:16
msgid ""
"This routine iterates through all known package versions, and it creates "
"specs for those versions.  If the version satisfies any spec in the specs "
"list, it is downloaded and added to the mirror."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror.get_matching_versions:1
msgid ""
"Get a spec for EACH known version matching any spec in the list. For "
"concrete specs, this retrieves the concrete version and, if more than one "
"version per spec is requested, retrieves the latest versions of the package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror.mirror_archive_filename:1
msgid "Get the name of the spec's archive in the mirror."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror.mirror_archive_path:1
msgid "Get the relative path to the spec's archive within a mirror."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror.suggest_archive_basename:1
msgid "Return a tentative basename for an archive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of
#: spack.mirror.suggest_archive_basename:3
msgid "if the name is not an allowed archive type."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:185
msgid "spack.mixins module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of
#: spack.mixins:1
msgid ""
"This module contains additional behavior that can be attached to any given "
"package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of
#: spack.mixins.filter_compiler_wrappers:1
msgid ""
"Substitutes any path referring to a Spack compiler wrapper with the path of "
"the underlying compiler that has been used."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of
#: spack.mixins.filter_compiler_wrappers:4
msgid ""
"If this isn't done, the files will have CC, CXX, F77, and FC set to Spack's "
"generic cc, c++, f77, and f90. We want them to be bound to whatever compiler "
"they were built with."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of
#: spack.mixins.filter_compiler_wrappers:8
msgid ""
"files to be filtered relative to the search root (which is, by default, the "
"installation prefix)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of
#: spack.mixins.filter_compiler_wrappers:10
msgid ""
"allowed keyword arguments  after     specifies after which phase the files "
"should be     filtered (defaults to 'install')  relative_root     path "
"relative to prefix where to start searching for     the files to be "
"filtered. If not set the install prefix     wil be used as the search root. "
"**It is highly recommended     to set this, as searching from the "
"installation prefix may     affect performance severely in some cases**.  "
"ignore_absent, backup     these two keyword arguments, if present, will be "
"forwarded     to ``filter_file`` (see its documentation for more "
"information     on their behavior)  recursive     this keyword argument, if "
"present, will be forwarded to     ``find`` (see its documentation for more "
"information on the     behavior)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of
#: spack.mixins.filter_compiler_wrappers:10
msgid "allowed keyword arguments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of
#: spack.mixins.filter_compiler_wrappers:14
msgid "after"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of
#: spack.mixins.filter_compiler_wrappers:13
msgid ""
"specifies after which phase the files should be filtered (defaults to "
"'install')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of
#: spack.mixins.filter_compiler_wrappers:21
msgid "relative_root"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of
#: spack.mixins.filter_compiler_wrappers:17
msgid ""
"path relative to prefix where to start searching for the files to be "
"filtered. If not set the install prefix wil be used as the search root. **It "
"is highly recommended to set this, as searching from the installation prefix "
"may affect performance severely in some cases**."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of
#: spack.mixins.filter_compiler_wrappers:26
msgid "ignore_absent, backup"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of
#: spack.mixins.filter_compiler_wrappers:24
msgid ""
"these two keyword arguments, if present, will be forwarded to "
"``filter_file`` (see its documentation for more information on their "
"behavior)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of
#: spack.mixins.filter_compiler_wrappers:30
msgid "recursive"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of
#: spack.mixins.filter_compiler_wrappers:29
msgid ""
"this keyword argument, if present, will be forwarded to ``find`` (see its "
"documentation for more information on the behavior)"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:193
msgid "spack.multimethod module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod:1
msgid ""
"This module contains utilities for using multi-methods in spack. You can "
"think of multi-methods like overloaded methods -- they're methods with the "
"same name, and we need to select a version of the method based on some "
"criteria.  e.g., for overloaded methods, you would select a version of the "
"method to call based on the types of its arguments."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod:8
msgid ""
"In spack, multi-methods are used to ease the life of package authors.  They "
"allow methods like install() (or other methods called by install()) to "
"declare multiple versions to be called when the package is instantiated with "
"different specs.  e.g., if the package is built with OpenMPI on x86_64,, you "
"might want to call a different install method than if it was built for "
"mpich2 on BlueGene/Q.  Likewise, you might want to do a different type of "
"install for different versions of the package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod:17
msgid ""
"Multi-methods provide a simple decorator-based syntax for this that avoids "
"overly complicated rat nests of if statements.  Obviously, depending on the "
"scenario, regular old conditionals might be clearer, so package authors "
"should use their judgement."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod.MultiMethodError:1
msgid "Superclass for multimethod dispatch errors"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod.NoSuchMethodError:1
msgid "Raised when we can't find a version of a multi-method."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod.SpecMultiMethod:1
msgid ""
"This implements a multi-method for Spack specs.  Packages are instantiated "
"with a particular spec, and you may want to execute different versions of "
"methods based on what the spec looks like.  For example, you might want to "
"call a different version of install() for one platform than you call on "
"another."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod.SpecMultiMethod:7
msgid ""
"The SpecMultiMethod class implements a callable object that handles method "
"dispatch.  When it is called, it looks through registered methods and their "
"associated specs, and it tries to find one that matches the package's spec.  "
"If it finds one (and only one), it will call that method."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod.SpecMultiMethod:13
msgid ""
"This is intended for use with decorators (see below).  The decorator (see "
"docs below) creates SpecMultiMethods and registers method versions with them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod.SpecMultiMethod:19
msgid "To register a method, you can do something like this:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod.SpecMultiMethod:18
msgid "mm = SpecMultiMethod() mm.register(\"^chaos_5_x86_64_ib\", some_method)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod.SpecMultiMethod:21
msgid ""
"The object registered needs to be a Spec or some string that will parse to "
"be a valid spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod.SpecMultiMethod:24
msgid ""
"When the mm is actually called, it selects a version of the method to call "
"based on the sys_type of the object it is called on."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod.SpecMultiMethod:28
msgid "See the docs for decorators below for more details."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod.SpecMultiMethod.register:1
msgid "Register a version of a method for a particular spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod.when:1
msgid ""
"This annotation lets packages declare multiple versions of methods like "
"install() that depend on the package's spec. For example:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod.when:22
msgid ""
"This allows each package to have a default version of install() AND "
"specialized versions for particular platforms.  The version that is called "
"depends on the architecutre of the instantiated package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod.when:26
msgid ""
"Note that this works for methods other than install, as well.  So, if you "
"only have part of the install that is platform specific, you could do this:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring
#: of spack.multimethod.when:53
msgid ""
"Note that the default version of decorated methods must *always* come "
"first.  Otherwise it will override all of the platform-specific versions.  "
"There's not much we can do to get around this because of the way decorators "
"work."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:201
msgid "spack.package module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package:1
msgid "This is where most of the action happens in Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package:3
msgid ""
"The spack package class structure is based strongly on Homebrew (http://brew."
"sh/), mainly because Homebrew makes it very easy to create packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.ActivationError:1
msgid "Bases: :class:`spack.package.ExtensionError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.ActivationError:1
msgid "Raised when there are problems activating an extension."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.DependencyConflictError:1
msgid "Raised when the dependencies cannot be flattened as asked for."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.ExtensionError:1 spack.package.NoURLError:1
#: spack.package.PackageVersionError:1
msgid "Bases: :class:`spack.package.PackageError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.ExtensionError:1
msgid "Superclass for all errors having to do with extension packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.ExternalPackageError:1 spack.package.PackageStillNeededError:1
msgid "Bases: :class:`spack.package.InstallError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.ExternalPackageError:1
msgid "Raised by install() when a package is only for external use."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.FetchError:1
msgid "Raised when something goes wrong during fetch."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.InstallError:1
msgid "Raised when something goes wrong during install or uninstall."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.InstallPhase:1
msgid "Manages a single phase of the installation."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.InstallPhase:3
msgid ""
"This descriptor stores at creation time the name of the method it should "
"search for execution. The method is retrieved at __get__ time, so that it "
"can be overridden by subclasses of whatever class declared the phases."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.InstallPhase:7
msgid ""
"It also provides hooks to execute arbitrary callbacks before and after the "
"phase."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.NoURLError:1
msgid "Raised when someone tries to build a URL for a package with no URLs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.Package:1
msgid ""
"General purpose class with a single ``install`` phase that needs to be coded "
"by packagers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.Package.build_system_class:1
msgid ""
"This attribute is used in UI queries that require to know which build-system "
"class we are using"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.Package.phases:1
msgid "The one and only phase"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:1
msgid "Bases: :class:`spack.package.PackageViewMixin`, :class:`object`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:1
msgid "This is the superclass for all spack packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:3
msgid "***The Package class***"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:5
msgid ""
"A package defines how to fetch, verify (via, e.g., sha256), build, and "
"install a piece of software.  A Package also defines what other packages it "
"depends on, so that dependencies can be installed along with the package "
"itself.  Packages are written in pure python by users of Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:11
msgid "There are two main parts of a Spack package:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:13
msgid ""
"**The package class**.  Classes contain ``directives``, which are special "
"functions, that add metadata (versions, patches, dependencies, and other "
"information) to packages (see ``directives.py``). Directives provide the "
"constraints that are used as input to the concretizer."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:19
msgid ""
"**Package instances**. Once instantiated, a package is essentially an "
"installer for a particular piece of software. Spack calls methods like "
"``do_install()`` on the ``Package`` object, and it uses those to drive user-"
"implemented methods like ``patch()``, ``install()``, and other build steps. "
"To install software, An instantiated package needs a *concrete* spec, which "
"guides the behavior of the various install methods."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:27
msgid "Packages are imported from repos (see ``repo.py``)."
msgstr ""

# e5651210b9ac460bac4fb383a1f07c4c
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:29
msgid "**Package DSL**"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:31
msgid ""
"Look in ``lib/spack/docs`` or check https://spack.readthedocs.io for the "
"full documentation of the package domain-specific language.  That used to be "
"partially documented here, but as it grew, the docs here became increasingly "
"out of date."
msgstr ""

# e5651210b9ac460bac4fb383a1f07c4c
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:36
msgid "**Package Lifecycle**"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:38
msgid "A package's lifecycle over a run of Spack looks something like this:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:50
msgid "There are also some other commands that clean the build area:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:58
msgid ""
"The convention used here is that a ``do_*`` function is intended to be "
"called internally by Spack commands (in spack.cmd).  These aren't for "
"package writers to override, and doing so may break the functionality of the "
"Package class."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:63
msgid ""
"Package creators have a lot of freedom, and they could technically override "
"anything in this class.  That is not usually required."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase:66
msgid ""
"For most use cases.  Package creators typically just add attributes like "
"``url`` and ``homepage``, or functions like ``install()``. There are many "
"custom ``Package`` subclasses in the ``spack.build_systems`` package that "
"make things even easier for specific build systems."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.activate:1
msgid "Add the extension to the specified view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.activate:3
msgid ""
"Package authors can override this function to maintain some centralized "
"state related to the set of activated extensions for a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.activate:7
msgid ""
"Spack internals (commands, hooks, etc.) should call do_activate() method so "
"that proper checks are always executed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.all_urls:1
msgid "A list of all URLs in a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.all_urls:3
msgid "Check both class-level and version-specific URLs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.all_urls:5
msgid "a list of URLs"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.architecture:1
msgid ""
"Get the spack.architecture.Arch object that represents the environment in "
"which this package will be built."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.archive_files:1
msgid ""
"List of glob expressions. Each expression must either be absolute or "
"relative to the package source path. Matching artifacts found at the end of "
"the build process will be copied in the same directory tree as build.env and "
"build.out."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.bootstrap_compiler:1
msgid "Called by do_install to setup ensure Spack has the right compiler."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.bootstrap_compiler:3
msgid ""
"Checks Spack's compiler configuration for a compiler that matches the "
"package spec. If none are configured, installs and adds to the compiler "
"configuration the compiler matching the CompilerSpec object."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.build_system_flags:1
msgid ""
"flag_handler that passes flags to the build system arguments.  Any package "
"using `build_system_flags` must also implement `flags_to_build_system_args`, "
"or derive from a class that implements it.  Currently, AutotoolsPackage and "
"CMakePackage implement it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.check_for_unfinished_installation:1
msgid ""
"Check for leftover files from partially-completed prior install to prepare "
"for a new install attempt."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.check_for_unfinished_installation:4
msgid "Options control whether these files are reused (vs. destroyed)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.check_for_unfinished_installation:6
msgid "True if the installation prefix needs to be kept, False otherwise"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.check_for_unfinished_installation:9
msgid "False if the stage has to be kept, True otherwise"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.check_for_unfinished_installation:12
msgid ""
"True if the prefix exists but the install is not complete, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.compiler:1
msgid "Get the spack.compiler.Compiler object used to build this package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.content_hash:1
msgid ""
"Create a hash based on the sources and logic used to build the package. This "
"includes the contents of all applied patches and the contents of applicable "
"functions in the package subclass."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.deactivate:1
msgid "Remove all extension files from the specified view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.deactivate:3
msgid ""
"Package authors can override this method to support other extension "
"mechanisms.  Spack internals (commands, hooks, etc.) should call "
"do_deactivate() method so that proper checks are always executed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.dependencies_of_type:1
msgid "Get dependencies that can possibly have these deptypes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.dependencies_of_type:3
msgid ""
"This analyzes the package and determines which dependencies *can* be a "
"certain kind of dependency. Note that they may not *always* be this kind of "
"dependency, since dependencies can be optional, so something may be a build "
"dependency in one configuration and a run dependency in another."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_activate:1
msgid "Called on an extension to invoke the extendee's activate method."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_activate:3
msgid ""
"Commands should call this routine, and should not call activate() directly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_clean:1
msgid "Removes the package's build stage and source tarball."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_deactivate:1
msgid ""
"Remove this extension package from the specified view. Called on the "
"extension to invoke extendee's deactivate() method."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_deactivate:4
msgid ""
"`remove_dependents=True` deactivates extensions depending on this package "
"instead of raising an error."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_fake_install:1
msgid ""
"Make a fake install directory containing fake executables, headers, and "
"libraries."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_fetch:1
msgid ""
"Creates a stage directory and downloads the tarball for this package. "
"Working directory will be set to the stage directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:1
msgid "Called by commands to install a package and its dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:3
msgid ""
"Package implementations should override install() to describe their build "
"process."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:6
msgid "Keep install prefix on failure. By default, destroys it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:9
msgid ""
"By default, stage is destroyed only if there are no exceptions during build. "
"Set to True to keep the stage even with exceptions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:13
msgid ""
"By default, source is not installed, but for debugging it might be useful to "
"keep it around."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:16
msgid "Install dependencies before installing this package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:19
msgid "Skip patch stage of build if True."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:21
msgid "Display verbose build output (by default, suppresses it)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:24
msgid "Don't really build; install fake stub files instead."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:26
msgid ""
"True if package was explicitly installed, False if package was implicitly "
"installed (as a dependency)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:29
msgid ""
"False to run no tests, True to test all packages, or a list of package names "
"to run tests for some"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:32
msgid "Don't clean the build environment before installing."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:34
msgid "Force spack to restage the package source."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:36
msgid "Install again, even if already installed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:38
msgid "Install from binary package, if available."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_install:40
msgid "last installation phase to be executed (or None)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_patch:1
msgid "Applies patches if they haven't been applied already."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_restage:1
msgid "Reverts expanded/checked out source to a pristine state."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_stage:1
msgid "Unpacks and expands the fetched tarball."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.do_uninstall:1
msgid "Uninstall this package by spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.env_flags:1
msgid "flag_handler that adds all flags to canonical environment variables."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.extendable:1
msgid "Most packages are NOT extendable. Set to True if you want extensions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.extendee_args:1
#: spack.package.PackageBase.extendee_spec:1
msgid "Spec of the extendee of this package, or None if it is not an extension"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.extends:1
msgid "Returns True if this package extends the given spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.extends:3
msgid ""
"If ``self.spec`` is concrete, this returns whether this package extends the "
"given spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.extends:6
msgid ""
"If ``self.spec`` is not concrete, this returns whether this package may "
"extend the given spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.fetch_remote_versions:1
msgid "Find remote versions of this package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.fetch_remote_versions:3
msgid "Uses ``list_url`` and any other URLs listed in the package file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.fetch_remote_versions:5
msgid "a dictionary mapping versions to URLs"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.flag_handler:1
#: spack.package.PackageBase.inject_flags:1
msgid "flag_handler that injects all flags through the compiler wrapper."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.format_doc:1
msgid "Wrap doc string at 72 characters and format nicely"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.fullname:1
msgid "namespace.name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.fullname:3
msgid "Name of this package, including namespace"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.global_license_dir:1
msgid ""
"Returns the directory where global license files for all packages are stored."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.global_license_file:1
msgid ""
"Returns the path where a global license file for this particular package "
"should be stored."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.installed:1
msgid "Installation status of a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.installed:3
msgid "True if the package has been installed, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.is_activated:1
msgid "Return True if package is activated."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.license_required:1
msgid ""
"Boolean. If set to ``True``, this software requires a license. If set to "
"``False``, all of the ``license_*`` attributes will be ignored. Defaults to "
"``False``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.maintainers:1
msgid ""
"List of strings which contains GitHub usernames of package maintainers. Do "
"not include @ here in order not to unnecessarily ping the users."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.metadata_attrs:1
msgid "List of attributes which affect do not affect a package's content."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.nearest_url:1
msgid "Finds the URL with the \"closest\" version to ``version``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.nearest_url:3
msgid "This uses the following precedence order:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.nearest_url:5
msgid "Find the next lowest or equal version with a URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.nearest_url:6
msgid "If no lower URL, return the next *higher* URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.nearest_url:7
msgid "If no higher URL, return None."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.parallel:1
msgid "By default we build in parallel.  Subclasses can override this."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.possible_dependencies:1
msgid "Return set of possible dependencies of this package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.possible_dependencies:3
msgid "Note: the set returned *includes* the package itself."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.possible_dependencies:5
msgid ""
"return all transitive dependencies if True, only direct dependencies if "
"False."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.possible_dependencies:8
msgid "expand virtual dependencies into all possible implementations."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.possible_dependencies:11
msgid "set of names of dependencies visited so far."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.prefix:1
msgid "Get the prefix into which this package should be installed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.provides:1
msgid "True if this package provides a virtual package with the specified name"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.remove_prefix:1
msgid ""
"Removes the prefix for a package along with any empty parent directories"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.rpath:1
msgid "Get the rpath this package links with, as a list of paths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.rpath_args:1
msgid "Get the rpath args as a string, with -Wl,-rpath, for each element"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.run_tests:1
msgid "By default do not run tests within package's install()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.sanity_check_is_dir:1
msgid ""
"List of prefix-relative directory paths (or a single path). If these do not "
"exist after install, or if they exist but are not directories, sanity checks "
"will fail."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.sanity_check_is_file:1
msgid ""
"List of prefix-relative file paths (or a single path). If these do not exist "
"after install, or if they exist but are not files, sanity checks fail."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.sanity_check_prefix:1
msgid "This function checks whether install succeeded."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.setup_environment:3
msgid ""
"``spack_env`` and ``run_env`` are ``EnvironmentModifications`` objects. "
"Package authors can call methods on them to alter the environment within "
"Spack and at runtime."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.setup_environment:7
msgid ""
"Both ``spack_env`` and ``run_env`` are applied within the build process, "
"before this package's ``install()`` method is called."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.setup_environment:10
msgid ""
"Modifications in ``run_env`` will *also* be added to the generated "
"environment modules for this package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.setup_environment:13
msgid ""
"Default implementation does nothing, but this can be overridden if the "
"package needs a particular environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.setup_environment:18
msgid "Qt extensions need ``QTDIR`` set."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.setup_environment:20
msgid ""
"List of environment modifications to be applied when this package is built "
"within Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.setup_environment:24
msgid ""
"List of environment modifications to be applied when this package is run "
"outside of Spack. These are added to the resulting module file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.stage:1
msgid "Get the build staging area for this package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.stage:3
msgid ""
"This automatically instantiates a ``Stage`` object if the package doesn't "
"have one yet, but it does not create the Stage directory on the filesystem."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.transitive_rpaths:1
msgid ""
"When True, add RPATHs for the entire DAG. When False, add RPATHs only for "
"immediate dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.unit_test_check:1
msgid "Hook for unit tests to assert things about package internals."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.unit_test_check:3
msgid ""
"Unit tests can override this function to perform checks after ``Package."
"install`` and all post-install hooks run, but before the database is updated."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.unit_test_check:7
msgid ""
"The overridden function may indicate that the install procedure should "
"terminate early (before updating the database) by returning ``False`` (or "
"any value such that ``bool(result)`` is ``False``)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.unit_test_check:12
msgid "``True`` to continue, ``False`` to skip ``install()``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.url_for_version:1
msgid ""
"Returns a URL from which the specified version of this package may be "
"downloaded."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.url_for_version:5
msgid "version: class Version"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.url_for_version:5
msgid "The version for which a URL is sought."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.url_for_version:7
msgid "See Class Version (version.py)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.url_version:1
msgid ""
"Given a version, this returns a string that should be substituted into the "
"package's URL to download that version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.url_version:4
msgid ""
"By default, this just returns the version string. Subclasses may need to "
"override this, e.g. for boost versions where you need to ensure that there "
"are _'s in the download URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.use_xcode:1
msgid "By default do not setup mockup XCode on macOS with Clang"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.version_urls:1
msgid "OrderedDict of explicitly defined URLs for versions of this package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.version_urls:3
msgid ""
"An OrderedDict (version -> URL) different versions of this package, sorted "
"by version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.version_urls:6
msgid ""
"A version's URL only appears in the result if it has an an explicitly "
"defined ``url`` argument. So, this list may be empty if a package only "
"defines ``url`` at the top level."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageBase.view:1
msgid ""
"Create a view with the prefix of this package as the root. Extensions added "
"to this view will modify the installation prefix of this package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageError:1
msgid "Raised when something is wrong with a package definition."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageMeta:1
msgid ""
"Bases: :class:`spack.directives.DirectiveMeta`, :class:`spack.mixins."
"PackageMixinsMeta`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageMeta:1
msgid "Conveniently transforms attributes to permit extensible phases"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageMeta:3
msgid ""
"Iterates over the attribute 'phases' and creates / updates private "
"InstallPhase attributes in the class that is being initialized"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageMeta.fullname:1
msgid "Name of this package, including the namespace"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageMeta.module:1
msgid "Module object (not just the name) that this package is defined in."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageMeta.module:3
msgid ""
"We use this to add variables to package modules.  This makes install() "
"methods easier to write (e.g., can call configure())"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageMeta.namespace:1
msgid "Spack namespace for the package, which identifies its repo."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageMeta.package_dir:1
msgid "Directory where the package.py file lives."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageStillNeededError:1
msgid "Raised when package is still needed by another on uninstall."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageVersionError:1
msgid "Raised when a version URL cannot automatically be determined."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageViewMixin:1
msgid ""
"This collects all functionality related to adding installed Spack package to "
"views. Packages can customize how they are added to views by overriding "
"these functions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.PackageViewMixin.view_file_conflicts:1
msgid ""
"Report any files which prevent adding this package to the view. The default "
"implementation looks for any files which already exist. Alternative "
"implementations may allow some of the files to exist in the view (in this "
"case they would be omitted from the results)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.dump_packages:1
msgid "Dump all package information for a spec and its dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.dump_packages:3
msgid ""
"This creates a package repository within path for every namespace in the "
"spec DAG, and fills the repos wtih package files and patch files for every "
"node in the DAG."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.flatten_dependencies:1
msgid "Make each dependency of spec present in dir via symlink."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.install_dependency_symlinks:1
msgid "Execute a dummy install and flatten dependencies"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.on_package_attributes:1
msgid "Decorator: executes instance function only if object has attr valuses."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.on_package_attributes:3
msgid ""
"Executes the decorated method only if at the moment of calling the instance "
"has attributes that are equal to certain values."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.on_package_attributes:6
msgid "dictionary mapping attribute names to their required values"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.print_pkg:1
msgid "Outputs a message with a package icon."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.run_after:1
msgid "Registers a method of a package to be run after a given phase"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.run_before:1
msgid "Registers a method of a package to be run before a given phase"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of
#: spack.package.use_cray_compiler_names:1
msgid "Compiler names for builds that rely on cray compiler names."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:209
msgid "spack.package\\_prefs module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.PackagePrefs:1
msgid "Defines the sort order for a set of specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.PackagePrefs:3
msgid ""
"Spack's package preference implementation uses PackagePrefss to define sort "
"order. The PackagePrefs class looks at Spack's packages.yaml configuration "
"and, when called on a spec, returns a key that can be used to sort that spec "
"in order of the user's preferences."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.PackagePrefs:9
msgid "You can use it like this:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.PackagePrefs:11
msgid ""
"# key function sorts CompilerSpecs for `mpich` in order of preference kf = "
"PackagePrefs('mpich', 'compiler') compiler_list.sort(key=kf)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.PackagePrefs:15
msgid "Or like this:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.PackagePrefs:17
msgid ""
"# key function to sort VersionLists for OpenMPI in order of preference. kf = "
"PackagePrefs('openmpi', 'version') version_list.sort(key=kf)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.PackagePrefs:21
msgid ""
"Optionally, you can sort in order of preferred virtual dependency "
"providers.  To do that, provide 'providers' and a third argument denoting "
"the virtual package (e.g., ``mpi``):"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.PackagePrefs:25
msgid ""
"kf = PackagePrefs('trilinos', 'providers', 'mpi') provider_spec_list."
"sort(key=kf)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.PackagePrefs.has_preferred_providers:1
msgid "Whether specific package has a preferred vpkg providers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.PackagePrefs.order_for_package:1
msgid ""
"Given a package name, sort component (e.g, version, compiler, ...), and an "
"optional vpkg, return the list from the packages config."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.PackagePrefs.preferred_variants:1
msgid "Return a VariantMap of preferred variants/values for a spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.VirtualInPackagesYAMLError:1
msgid "Raised when a disallowed virtual is found in packages.yaml"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.get_package_dir_permissions:1
#: spack.package_prefs.get_package_permissions:1
msgid "Return the permissions configured for the spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.get_package_dir_permissions:3
msgid ""
"Include the GID bit if group permissions are on. This makes the group "
"attribute sticky for the directory. Package-specific settings take precedent "
"over settings for ``all``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.get_package_group:1
msgid "Return the unix group associated with the spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.get_package_group:3
#: spack.package_prefs.get_package_permissions:3
msgid "Package-specific settings take precedence over settings for ``all``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.get_packages_config:1
msgid "Wrapper around get_packages_config() to validate semantics."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.is_spec_buildable:1
msgid "Return true if the spec pkgspec is configured as buildable"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring
#: of spack.package_prefs.spec_externals:1
msgid ""
"Return a list of external specs (w/external directory path filled in), one "
"for each known external installation."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:217
msgid "spack.package\\_test module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_test.py:docstring
#: of spack.package_test.compare_output:1
msgid "Compare blessed and current output of executables."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_test.py:docstring
#: of spack.package_test.compare_output_file:1
msgid "Same as above, but when the blessed output is given as a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_test.py:docstring
#: of spack.package_test.compile_c_and_execute:1
msgid ""
"Compile C @p source_file with @p include_flags and @p link_flags, run and "
"return the output."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:225
msgid "spack.parse module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of
#: spack.parse.LexError:1
msgid "Bases: :class:`spack.parse.ParseError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of
#: spack.parse.LexError:1
msgid "Raised when we don't know how to lex something."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of
#: spack.parse.Lexer:1
msgid "Base class for Lexers that keep track of line numbers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of
#: spack.parse.ParseError:1
msgid "Raised when we don't hit an error while parsing."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of
#: spack.parse.Parser:1
msgid "Base class for simple recursive descent parsers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of
#: spack.parse.Parser.accept:1
msgid "Put the next symbol in self.token if accepted, then call gettok()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of
#: spack.parse.Parser.expect:1
msgid "Like accept(), but fails if we don't like the next token."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of
#: spack.parse.Parser.gettok:1
msgid "Puts the next token in the input stream into self.next."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of
#: spack.parse.Parser.last_token_error:1
msgid "Raise an error about the previous token in the stream."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of
#: spack.parse.Parser.next_token_error:1
msgid "Raise an error about the next token in the stream."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of
#: spack.parse.Parser.push_tokens:1
msgid "Adds all tokens in some iterable to the token stream."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of
#: spack.parse.Token:1
msgid "Represents tokens; generated from input by lexer and fed to parse()."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:233
msgid "spack.patch module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.FilePatch:1 spack.patch.UrlPatch:1
msgid "Bases: :class:`spack.patch.Patch`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.FilePatch:1
msgid "Describes a patch that is retrieved from a file in the repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.FilePatch:3
msgid "the class object for the package that owns the patch"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.FilePatch:5
msgid "path to patch, relative to the repository directory for a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.FilePatch:8 spack.patch.UrlPatch:7
msgid "level to pass to patch command"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.FilePatch:10 spack.patch.UrlPatch:9
msgid "path within the source directory where patch should be applied"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.FilePatch.to_dict:1 spack.patch.Patch.to_dict:1
#: spack.patch.UrlPatch.to_dict:1
msgid "Partial dictionary -- subclases should add to this."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.NoSuchPatchError:1
msgid "Raised when a patch file doesn't exist."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.Patch:1
msgid "Base class for patches."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.Patch:3 spack.patch.UrlPatch:3
msgid "the package that owns the patch"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.Patch:6
msgid ""
"The owning package is not necessarily the package to apply the patch to -- "
"in the case where a dependent package patches its dependency, it is the "
"dependent's fullname."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.Patch.apply:1
msgid "Apply a patch to source in a stage."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.Patch.apply:3
msgid "stage where source code lives"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.Patch.clean:1 spack.patch.UrlPatch.clean:1
msgid "Clean up the patch stage in case of a UrlPatch"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.Patch.fetch:1
msgid "Fetch the patch in case of a UrlPatch"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.Patch.fetch:3 spack.patch.UrlPatch.fetch:3
msgid "stage for the package that needs to be patched"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.PatchCache:1
msgid "Index of patches used in a repository, by sha256 hash."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.PatchCache:3
msgid ""
"This allows us to look up patches without loading all packages.  It's also "
"needed to properly implement dependency patching, as need a way to look up "
"patches that come from packages not in the Spec sub-DAG."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.PatchCache:7
msgid ""
"The patch index is structured like this in a file (this is YAML, but we "
"write JSON)::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.PatchCache.patch_for_package:1
msgid "Look up a patch in the index and build a patch object for it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.PatchCache.patch_for_package:3
msgid "sha256 hash to look up"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.PatchCache.patch_for_package:5
msgid "Package object to get patch for."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.PatchCache.patch_for_package:8
msgid ""
"We build patch objects lazily because building them requires that we have "
"information about the package's location in its repo."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.PatchCache.update:1
msgid "Update this cache with the contents of another."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.PatchDirectiveError:1
msgid "Raised when the wrong arguments are suppled to the patch directive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.UrlPatch:1
msgid "Describes a patch that is retrieved from a URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.UrlPatch:5
msgid "URL where the patch can be fetched"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.UrlPatch.fetch:1
msgid "Retrieve the patch in a temporary stage and compute self.path"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.apply_patch:1
msgid "Apply the patch at patch_path to code in the stage."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.apply_patch:3
msgid "stage with code that will be patched"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.apply_patch:5
msgid "filesystem location for the patch to apply"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.apply_patch:7
msgid "patch level (default 1)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.apply_patch:9
msgid "relative path *within* the stage to change to (default '.')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of
#: spack.patch.from_dict:1
msgid "Create a patch from json dictionary."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:241
msgid "spack.paths module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/paths.py:docstring of
#: spack.paths:1
msgid "Defines paths that are part of Spack's directory structure."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/paths.py:docstring of
#: spack.paths:3
msgid ""
"Do not import other ``spack`` modules here. This module is used throughout "
"Spack and should bring in a minimal number of external dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/paths.py:docstring of
#: spack.paths.bin_path:1
msgid "bin directory in the spack prefix"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/paths.py:docstring of
#: spack.paths.prefix:1
msgid "This file lives in $prefix/lib/spack/spack/__file__"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/paths.py:docstring of
#: spack.paths.spack_root:1
msgid "synonym for prefix"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/paths.py:docstring of
#: spack.paths.spack_script:1
msgid "The spack script itself"
msgstr ""

# cd3b01fdb54c49d5907f5cfd0fdb4303
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/paths.py:docstring of
#: spack.paths.user_config_path:1
msgid "User configuration location"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:249
msgid "spack.pkgkit module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/pkgkit.py:docstring of
#: spack.pkgkit:1
msgid "pkgkit is a set of useful build tools and directives for packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/pkgkit.py:docstring of
#: spack.pkgkit:3
msgid ""
"Everything in this module is automatically imported into Spack package files."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:257
msgid "spack.provider\\_index module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: of spack.provider_index:1
msgid ""
"The ``virtual`` module contains utility classes for virtual dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: of spack.provider_index.ProviderIndex:1
msgid ""
"This is a dict of dicts used for finding providers of particular virtual "
"dependencies. The dict of dicts looks like:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: of spack.provider_index.ProviderIndex:5
msgid "{ vpkg name :"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: of spack.provider_index.ProviderIndex:5
msgid "{ full vpkg spec : set(packages providing spec) } }"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: of spack.provider_index.ProviderIndex:7
msgid ""
"Callers can use this to first find which packages provide a vpkg, then find "
"a matching full spec.  e.g., in this scenario:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: of spack.provider_index.ProviderIndex:12
msgid "{ 'mpi' :"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: of spack.provider_index.ProviderIndex:12
msgid "{ mpi@:1.1"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: of spack.provider_index.ProviderIndex:12
msgid "mpi@:2.3 : set([mpich2@1.9:]) } }"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: of spack.provider_index.ProviderIndex:14
msgid ""
"Calling providers_for(spec) will find specs that provide a matching "
"implementation of MPI."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: of spack.provider_index.ProviderIndex.copy:1
msgid "Deep copy of this ProviderIndex."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: of spack.provider_index.ProviderIndex.merge:1
msgid "Merge `other` ProviderIndex into this one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: of spack.provider_index.ProviderIndex.providers_for:1
msgid ""
"Gives specs of all packages that provide virtual packages with the supplied "
"specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: of spack.provider_index.ProviderIndex.remove_provider:1
msgid "Remove a provider from the ProviderIndex."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: of spack.provider_index.ProviderIndex.satisfies:1
msgid "Check that providers of virtual specs are compatible."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring
#: of spack.provider_index.ProviderIndexError:1
msgid "Raised when there is a problem with a ProviderIndex."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:265
msgid "spack.relocate module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.InstallRootStringException:1
msgid "Raised when the relocated binary still has the install root string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.file_is_relocatable:1
msgid "Returns True if the file passed as argument is relocatable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.file_is_relocatable:3
msgid "absolute path of the file to be analyzed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.file_is_relocatable:5
msgid "True or false"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.file_is_relocatable:7
msgid "if the file does not exist or the path is not absolute"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.get_existing_elf_rpaths:1
msgid ""
"Return the RPATHS returned by patchelf --print-rpath path_name as a list of "
"strings."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.get_patchelf:1
msgid ""
"Builds and installs spack patchelf package on linux platforms using the "
"first concretized spec. Returns the full patchelf binary path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.get_placeholder_rpaths:1
msgid ""
"Replaces original layout root dir with a placeholder string in all rpaths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.get_relative_rpaths:1
msgid ""
"Replaces orig_dir with relative path from dirname(path_name) if an rpath in "
"orig_rpaths contains orig_path. Prefixes $ORIGIN to relative paths and "
"returns replacement rpaths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.is_binary:1
msgid "Returns true if a file is binary, False otherwise"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.is_binary:3
msgid "file to be tested"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.is_binary:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring
#: spack.variant.AbstractVariant.compatible:8
#: spack.variant.AbstractVariant.constrain:7
#: spack.variant.AbstractVariant.satisfies:6
#: spack.variant.MultiValuedVariant.satisfies:6
#: spack.variant.SingleValuedVariant.compatible:8
#: spack.variant.SingleValuedVariant.constrain:7
#: spack.variant.SingleValuedVariant.satisfies:6
#: spack.variant.VariantMap.concrete:3 spack.variant.VariantMap.constrain:8
#: spack.variant.VariantMap.satisfies:11
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: spack.util.environment.is_system_path:7
msgid "True or False"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.is_relocatable:1
msgid "Returns True if an installed spec is relocatable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.is_relocatable:6
msgid ""
"True if the binaries of an installed spec are relocatable and False "
"otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.is_relocatable:9
msgid "if the spec is not installed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.macho_get_paths:1
msgid ""
"Examines the output of otool -l path_name for these three fields: "
"LC_ID_DYLIB, LC_LOAD_DYLIB, LC_RPATH and parses out the rpaths, "
"dependiencies and library id. Returns these values."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.macho_make_paths_placeholder:1
msgid ""
"Replace old_dir with a placeholder of the same length in rpaths and deps and "
"idpaths is needed. replacement are returned."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.macho_make_paths_relative:1
msgid ""
"Replace old_dir with relative path from dirname(path_name) in rpaths and "
"deps; idpaths are replaced with @rpath/libname as needed; replacement are "
"returned."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.macho_replace_paths:1
msgid ""
"Replace old_dir with new_dir in rpaths, deps and idpath and return "
"replacements"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.make_binary_placeholder:1
msgid "Replace old install root in RPATHs with placeholder in binary files"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.make_binary_relative:1
msgid "Replace old RPATHs with paths relative to old_dir in binary files"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.make_link_placeholder:1
msgid "Replace old install path with placeholder in absolute links."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.make_link_placeholder:3
msgid "Links in ``cur_path_names`` must link to absolute paths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.make_link_relative:1
msgid "Change absolute links to be relative."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.mime_type:1
msgid "Returns the mime type and subtype of a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.mime_type:3
msgid "file to be analyzed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.mime_type:5
msgid "Tuple containing the MIME type and subtype"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.modify_elf_object:1
msgid "Replace orig_rpath with new_rpath in RPATH of elf object path_name"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.modify_macho_object:1
msgid ""
"Modify MachO binary path_name by replacing old_dir with new_dir or the "
"relative path to spack install root. The old install dir in LC_ID_DYLIB is "
"replaced with the new install dir using install_name_tool -id newid binary "
"The old install dir in LC_LOAD_DYLIB is replaced with the new install dir "
"using install_name_tool -change old new binary The old install dir in "
"LC_RPATH is replaced with the new install dir using install_name_tool  -"
"rpath old new binary"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.needs_binary_relocation:1
msgid "Check whether the given filetype is a binary that may need relocation."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.needs_text_relocation:1
msgid "Check whether the given filetype is text that may need relocation."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.relocate_binary:1
msgid ""
"Change old_dir to new_dir in RPATHs of elf or mach-o files Account for the "
"case where old_dir is now a placeholder"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.relocate_links:1
msgid "Replace old path with new path in link sources."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.relocate_links:3
msgid "Links in ``path_names`` must link to absolute paths or placeholders."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.relocate_text:1
msgid "Replace old path with new path in text file path_name"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.set_placeholder:1
msgid "return string of @'s with same length"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.strings_contains_installroot:1
msgid "Check if the file contain the install root string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of
#: spack.relocate.substitute_rpath:1
msgid "Replace topdir with new_root_path RPATH list orig_rpath"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:273
msgid "spack.repo module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.BadRepoError:1 spack.repo.FailedConstructorError:1
#: spack.repo.IndexError:1 spack.repo.InvalidNamespaceError:1
#: spack.repo.NoRepoConfiguredError:1 spack.repo.UnknownEntityError:1
msgid "Bases: :class:`spack.repo.RepoError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.BadRepoError:1
msgid "Raised when repo layout is invalid."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.FailedConstructorError:1
msgid "Raised when a package's class constructor fails."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.FastPackageChecker:1 spack.repo.TagIndex:1
msgid "Bases: :class:`collections.abc.Mapping`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.FastPackageChecker:1
msgid ""
"Cache that maps package names to the stats obtained on the 'package.py' "
"files associated with them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.FastPackageChecker:4
msgid ""
"For each repository a cache is maintained at class level, and shared among "
"all instances referring to it. Update of the global cache is done lazily "
"during instance initialization."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.IndexError:1
msgid "Raised when there's an error with an index."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Indexer:1
msgid "Adaptor for indexes that need to be generated when repos are updated."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Indexer.needs_update:1 spack.repo.PatchIndexer.needs_update:1
msgid "Whether an update is needed when the package file hasn't changed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Indexer.needs_update:3 spack.repo.PatchIndexer.needs_update:3
msgid ""
"``True`` if this package needs its index     updated, ``False`` otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Indexer.needs_update:5 spack.repo.PatchIndexer.needs_update:5
msgid "``True`` if this package needs its index"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Indexer.needs_update:6 spack.repo.PatchIndexer.needs_update:6
msgid "updated, ``False`` otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Indexer.needs_update:9 spack.repo.PatchIndexer.needs_update:9
msgid ""
"We already automatically update indexes when package files change, but other "
"files (like patches) may change underneath the package file. This method can "
"be used to check additional package-specific files whenever they're loaded, "
"to tell the RepoIndex to update the index *just* for that package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Indexer.read:1 spack.repo.PatchIndexer.read:1
#: spack.repo.ProviderIndexer.read:1 spack.repo.TagIndexer.read:1
msgid "Read this index from a provided file object."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Indexer.update:1 spack.repo.PatchIndexer.update:1
#: spack.repo.ProviderIndexer.update:1 spack.repo.TagIndexer.update:1
msgid "Update the index in memory with information about a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Indexer.write:1 spack.repo.PatchIndexer.write:1
#: spack.repo.ProviderIndexer.write:1 spack.repo.TagIndexer.write:1
msgid "Write the index to a file object."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.InvalidNamespaceError:1
msgid "Raised when an invalid namespace is encountered."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.NOT_PROVIDED:1
msgid "Guaranteed unused default value for some functions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.NoRepoConfiguredError:1
msgid "Raised when there are no repositories configured."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.PatchIndexer:1 spack.repo.ProviderIndexer:1
#: spack.repo.TagIndexer:1
msgid "Bases: :class:`spack.repo.Indexer`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.PatchIndexer:1
msgid "Lifecycle methods for patch cache."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.ProviderIndexer:1
msgid "Lifecycle methods for virtual package providers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo:1
msgid "Class representing a package repository in the filesystem."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo:3
msgid ""
"Each package repository must have a top-level configuration file called "
"`repo.yaml`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo:6
msgid "Currently, `repo.yaml` this must define:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo:11
msgid "`namespace`:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo:9
msgid "A Python namespace where the repository's packages should live."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.all_package_names:1
msgid "Returns a sorted list of all package names in the Repo."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.all_packages:1
msgid "Iterator over all packages in the repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.all_packages:3
msgid "Use this with care, because loading packages is slow."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.dirname_for_package_name:1
msgid ""
"Get the directory name for a particular package.  This is the directory that "
"contains its package.py file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.dump_provenance:1 spack.repo.RepoPath.dump_provenance:1
msgid "Dump provenance information for a spec to a particular path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.dump_provenance:3 spack.repo.RepoPath.dump_provenance:3
msgid ""
"This dumps the package file and any associated patch files. Raises "
"UnknownPackageError if not found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.exists:1
msgid "Whether a package with the supplied name exists."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.filename_for_package_name:1
msgid ""
"Get the filename for the module we should load for a particular package.  "
"Packages for a Repo live in ``$root/<package_name>/package.py``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.filename_for_package_name:5
msgid ""
"This will return a proper package.py path even if the package doesn't exist "
"yet, so callers will need to ensure the package exists before importing."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.find_module:1
msgid "Python find_module import hook."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.find_module:3
msgid "Returns this Repo if it can load the module; None if not."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.get:1 spack.repo.RepoPath.get:1
msgid "Returns the package associated with the supplied spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.get_pkg_class:1
msgid "Get the class for the package out of its module."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.get_pkg_class:3
msgid ""
"First loads (or fetches from cache) a module for the package. Then extracts "
"the package class from the module according to Spack's naming convention."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.index:1
msgid "Construct the index for this repo lazily."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.is_prefix:1
msgid "True if fullname is a prefix of this Repo's namespace."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.is_virtual:1 spack.repo.RepoPath.is_virtual:1
msgid "True if the package with this name is virtual, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.last_mtime:1 spack.repo.RepoPath.last_mtime:1
msgid "Time a package file in this repo was last updated."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.load_module:1
msgid "Python importer load hook."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.load_module:3
msgid "Tries to load the module; raises an ImportError if it can't."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.patch_index:1
msgid "Index of patches and packages they're defined on."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.provider_index:1
msgid "A provider index with names *specific* to this repo."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.purge:1
msgid "Clear entire package instance cache."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.real_name:1
msgid "Allow users to import Spack packages using Python identifiers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.real_name:3
msgid ""
"A python identifier might map to many different Spack package names due to "
"hyphen/underscore ambiguity."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.real_name:7
msgid "Easy example:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.real_name:7
msgid "num3proxy   -> 3proxy"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.real_name:10
msgid "Ambiguous:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.real_name:10
msgid "foo_bar -> foo_bar, foo-bar"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.real_name:12
msgid "More ambiguous:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.real_name:13
msgid "foo_bar_baz -> foo_bar_baz, foo-bar-baz, foo_bar-baz, foo-bar_baz"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.Repo.tag_index:1
msgid "Index of tags and which packages they're defined on."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoError:1
msgid "Superclass for repository-related errors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoIndex:1
msgid "Container class that manages a set of Indexers for a Repo."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoIndex:3
msgid ""
"This class is responsible for checking packages in a repository for updates "
"(using ``FastPackageChecker``) and for regenerating indexes when they're "
"needed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoIndex:7
msgid ""
"``Indexers`` should be added to the ``RepoIndex`` using ``add_index(name, "
"indexer)``, and they should support the interface defined by ``Indexer``, so "
"that the ``RepoIndex`` can read, generate, and update stored indices."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoIndex:12
msgid "Generated indexes are accessed by name via ``__getitem__()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoIndex.add_indexer:1
msgid "Add an indexer to the repo index."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoIndex.add_indexer:3
msgid "name of this indexer"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoIndex.add_indexer:5
msgid ""
"an object that supports create(), read(), write(), and get_index() operations"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath:1
msgid "A RepoPath is a list of repos that function as one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath:3
msgid ""
"It functions exactly like a Repo, but it operates on the combined results of "
"the Repos in its list instead of on a single package repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath:7
msgid "list Repo objects or paths to put in this RepoPath"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.all_package_names:1
msgid "Return all unique package names in all repositories."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.exists:1
msgid "Whether package with the give name exists in the path's repos."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.exists:3
msgid "Note that virtual packages do not \"exist\"."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.find_module:1
msgid "Implements precedence for overlaid namespaces."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.find_module:3
msgid ""
"Loop checks each namespace in self.repos for packages, and also handles "
"loading empty containing namespaces."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.first_repo:1
msgid "Get the first repo in precedence order."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.get_pkg_class:1
msgid "Find a class for the spec's package and return the class object."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.get_repo:1
msgid "Get a repository by namespace."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.get_repo:3
msgid "Look up this namespace in the RepoPath, and return it if found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.get_repo:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/editor.py:docstring
#: spack.util.editor.editor:17
msgid "Optional Arguments:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.get_repo:7
msgid "default:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.get_repo:9
msgid ""
"If default is provided, return it when the namespace isn't found.  If not, "
"raise an UnknownNamespaceError."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.load_module:1
msgid "Handles loading container namespaces when necessary."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.load_module:3
msgid "See ``Repo`` for how actual package modules are loaded."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.patch_index:1
msgid "Merged PatchIndex from all Repos in the RepoPath."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.provider_index:1
msgid "Merged ProviderIndex from all Repos in the RepoPath."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.put_first:1
msgid "Add repo first in the search path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.put_last:1
msgid "Add repo last in the search path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.remove:1
msgid "Remove a repo from the search path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.RepoPath.repo_for_pkg:1
msgid "Given a spec, get the repository for its package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.SpackNamespace:1
msgid "Bases: :class:`module`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.SpackNamespace:1
msgid "Allow lazy loading of modules."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.TagIndex:1
msgid "Maps tags to list of packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.TagIndex.update_package:1
msgid "Updates a package in the tag index."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.TagIndex.update_package:3
msgid "name of the package to be removed from the index"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.TagIndexer:1
msgid "Lifecycle methods for a TagIndex on a Repo."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.UnknownEntityError:1 spack.repo.UnknownPackageError:1
msgid "Raised when we encounter a package spack doesn't have."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.UnknownNamespaceError:1 spack.repo.UnknownPackageError:1
msgid "Bases: :class:`spack.repo.UnknownEntityError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.UnknownNamespaceError:1
msgid "Raised when we encounter an unknown namespace"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.additional_repository:1
msgid "Adds temporarily a repository to the default one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.additional_repository:3
msgid "repository to be added"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.all_package_names:1
msgid "Convenience wrapper around ``spack.repo.all_package_names()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.autospec:1
msgid ""
"Decorator that automatically converts the first argument of a function to a "
"Spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.create_or_construct:1
msgid "Create a repository, or just return a Repo if it already exists."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.create_repo:1
msgid "Create a new repository in root with the specified namespace."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.create_repo:3
msgid ""
"If the namespace is not provided, use basename of root. Return the "
"canonicalized path and namespace of the created repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.get:1
msgid "Convenience wrapper around ``spack.repo.get()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.get_full_namespace:1
msgid "Returns the full namespace of a repository, given its relative one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.path:1
msgid "Singleton repo path instance"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.repo_namespace:1
msgid ""
"Super-namespace for all packages. Package modules are imported as spack.pkg."
"<namespace>.<pkg-name>."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.set_path:1
msgid "Set the path singleton to a specific value."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.set_path:3
msgid ""
"Overwrite ``path`` and register it as an importer in ``sys.meta_path`` if it "
"is a ``Repo`` or ``RepoPath``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of
#: spack.repo.swap:1
msgid "Temporarily use another RepoPath."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:281
msgid "spack.report module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of
#: spack.report:1
msgid "Tools to produce reports of spec installations"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of
#: spack.report.valid_formats:1
msgid "Allowed report formats"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of
#: spack.report.collect_info:1
msgid ""
"Collects information to build a report while installing and dumps it on exit."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of
#: spack.report.collect_info:4
msgid ""
"If the format name is not ``None``, this context manager decorates "
"PackageBase.do_install when entering the context and unrolls the change when "
"exiting."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of
#: spack.report.collect_info:8
msgid ""
"Within the context, only the specs that are passed to it on initialization "
"will be recorded for the report. Data from other specs will be discarded."
msgstr ""

# 603caffe426842d797687d80f8791910
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of
#: spack.report.collect_info:13
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring
#: spack.spec.Spec.copy:13 spack.spec.Spec.from_literal:16
#: spack.spec.Spec.old_format:59
#: ../spack/lib/spack/docs/tutorial_configuration.rst:931
msgid "Examples"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of
#: spack.report.collect_info:26
msgid "one of the supported formats"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of
#: spack.report.collect_info:28
msgid "args passed to spack install"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of
#: spack.report.collect_info:31
msgid "when ``format_name`` is not in ``valid_formats``"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:289
msgid "spack.reporter module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/reporter.py:docstring of
#: spack.reporter.Reporter:1
msgid "Base class for report writers."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:297
msgid "spack.resource module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/resource.py:docstring of
#: spack.resource:1
msgid "Describes an optional resource needed for a build."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/resource.py:docstring of
#: spack.resource:3
msgid ""
"Typically a bunch of sources that can be built in-tree within another "
"package to enable optional features."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/resource.py:docstring of
#: spack.resource.Resource:1
msgid "Represents an optional resource to be fetched by a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/resource.py:docstring of
#: spack.resource.Resource:3
msgid "Aggregates a name, a fetcher, a destination and a placement."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:305
msgid "spack.spec module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec:1
msgid ""
"Spack allows very fine-grained control over how packages are installed and "
"over how they are built and configured.  To make this easy, it has its own "
"syntax for declaring a dependence.  We call a descriptor of a particular "
"package configuration a \"spec\"."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec:6
msgid "The syntax looks like this:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec:13
msgid ""
"The first part of this is the command, 'spack install'.  The rest of the "
"line is a spec for a particular installation of the mpileaks package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec:16
msgid "The package to install"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec:18
msgid "A dependency of the package, prefixed by ^"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec:20
msgid ""
"A version descriptor for the package.  This can either be a specific "
"version, like \"1.2\", or it can be a range of versions, e.g. \"1.2:1.4\". "
"If multiple specific versions or multiple ranges are acceptable, they can be "
"separated by commas, e.g. if a package will only build with versions 1.0, "
"1.2-1.4, and 1.6-1.8 of mavpich, you could say:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec:26
msgid "depends_on(\"mvapich@1.0,1.2:1.4,1.6:1.8\")"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec:28
msgid ""
"A compile-time variant of the package.  If you need openmpi to be built in "
"debug mode for your package to work, you can require it by adding +debug to "
"the openmpi spec when you depend on it.  If you do NOT want the debug option "
"to be enabled, then replace this with -debug."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec:33
msgid "The name of the compiler to build with."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec:35
msgid ""
"The versions of the compiler to build with.  Note that the identifier for a "
"compiler version is the same '@' that is used for a package version. A "
"version list denoted by '@' is associated with the compiler only if if it "
"comes immediately after the compiler name.  Otherwise it will be associated "
"with the current package spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec:41
msgid ""
"The architecture to build with.  This is needed on machines where cross-"
"compilation is required"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec:44
msgid "Here is the EBNF grammar for a spec::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec:60
msgid ""
"Identifiers using the <name>=<value> command, such as architectures and "
"compiler flags, require a space before the name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec:63
msgid ""
"There is one context-sensitive part: ids in versions may contain '.', while "
"other ids may not."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec:66
msgid ""
"There is one ambiguity: since '-' is allowed in an id, you need to put "
"whitespace space before -variant for it to be tokenized properly.  You can "
"either use whitespace, or you can just use ~variant since it means the same "
"thing.  Spack uses ~variant in directory names and in the canonical form of "
"specs to avoid ambiguity.  Both are provided because ~ can cause shell "
"expansion when it is the first character in an id typed on the command line."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.cformat:1
msgid "Same as format, but color defaults to auto instead of False."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.common_dependencies:1
msgid "Return names of dependencies that self an other have in common."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.concrete:1
msgid "A spec is concrete if it describes a single build of a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.concrete:3
msgid ""
"More formally, a spec is concrete if concretize() has been called on it and "
"it has been marked `_concrete`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.concrete:6
msgid ""
"Concrete specs either can be or have been built. All constraints have been "
"resolved, optional dependencies have been added or removed, a compiler has "
"been chosen, and all variants have values."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.concretize:1
msgid ""
"A spec is concrete if it describes one build of a package uniquely. This "
"will ensure that this spec is concrete."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.concretize:4
msgid ""
"list of packages that will need test dependencies, or True/False for test "
"all/none"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.concretize:8
msgid ""
"If this spec could describe more than one version, variant, or build of a "
"package, this will add constraints to make it concrete."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.concretize:11
msgid ""
"Some rigorous validation and checks are also performed on the spec. "
"Concretizing ensures that it is self-consistent and that it's consistent "
"with requirements of its packages. See flatten() and normalize() for more "
"details on this."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.concretized:1
msgid ""
"This is a non-destructive version of concretize().  First clones, then "
"returns a concrete version of this package without modifying this package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.constrain:1
msgid "Merge the constraints of other with self."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.constrain:3
msgid "Returns True if the spec changed as a result, False if not."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.constrained:1
msgid "Return a constrained copy without modifying this spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.copy:1
msgid "Make a copy of this spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.copy:3
msgid ""
"Defaults to True. If boolean, controls whether dependencies are copied "
"(copied if True). If a tuple is provided, *only* dependencies of types "
"matching those in the tuple are copied."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.copy:8
msgid "additional arguments for internal use (passed to ``_dup``)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.copy:10
msgid "A copy of this spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.copy:14
msgid "Deep copy with dependnecies::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.copy:19
msgid "Shallow copy (no dependencies)::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.copy:23
msgid "Only build and run dependencies::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.cshort_spec:1
msgid "Returns an auto-colorized version of ``self.short_spec``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.dag_hash:1
msgid "Return a hash of the entire spec DAG, including connectivity."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.dag_hash_bit_prefix:1
msgid "Get the first <bits> bits of the DAG hash as an integer type."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.dep_difference:1
msgid "Returns dependencies in self that are not in other."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.eq_dag:1
msgid "True if the full dependency DAGs of specs are equal."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.eq_node:1
msgid "Equality with another spec, not including dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.flat_dependencies:1
msgid ""
"Return a DependencyMap containing all of this spec's dependencies with their "
"constraints merged."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.flat_dependencies:4
msgid ""
"If copy is True, returns merged copies of its dependencies without modifying "
"the spec it's called on."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.flat_dependencies:7
msgid "If copy is False, clears this spec's dependencies and returns them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.format:1
msgid ""
"Prints out particular pieces of a spec, depending on what is in the format "
"string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.format:4
msgid ""
"Using the ``{attribute}`` syntax, any field of the spec can be selected.  "
"Those attributes can be recursive. For example, ``s.format({compiler."
"version})`` will print the version of the compiler."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.format:9
msgid "Commonly used attributes of the Spec for format strings include::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.format:24
msgid "Some additional special-case properties can be added::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.format:30
msgid ""
"The ``^`` sigil can be used to access dependencies by name. ``s.format({^mpi."
"name})`` will print the name of the MPI implementation in the spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.format:34
msgid ""
"The ``@``, ``%``, ``arch=``, and ``/`` sigils can be used to include the "
"sigil with the printed string. These sigils may only be used with the "
"appropriate attributes, listed below::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.format:44
msgid ""
"The ``@`` sigil may also be used for any other property named ``version``. "
"Sigils printed with the attribute string are only printed if the attribute "
"string is non-empty, and are colored according to the color of the attribute."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.format:49
msgid ""
"Sigils are not used for printing variants. Variants listed by name naturally "
"print with their sigil. For example, ``spec.format('{variants.debug}')`` "
"would print either ``+debug`` or ``~debug`` depending on the name of the "
"variant. Non-boolean variants print as ``name=value``. To print variant "
"names or values independently, use ``spec.format('{variants.<name>.name}')`` "
"or ``spec.format('{variants.<name>.value}')``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.format:58
msgid ""
"Spec format strings use ``\\`` as the escape character. Use ``\\{`` and ``\\}"
"`` for literal braces, and ``\\\\`` for the literal ``\\`` character. Also "
"use ``\\$`` for the literal ``$`` to differentiate from previous, deprecated "
"format string syntax."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.format:64
msgid ""
"The previous format strings are deprecated. They can still be accessed by "
"the ``old_format`` method. The ``format`` method will call ``old_format`` if "
"the character ``$`` appears unescaped in the format string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.format:70 spack.spec.Spec.old_format:50
msgid "string containing the format to be expanded"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.format:73 spack.spec.Spec.old_format:53
msgid "True if returned string is colored"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.format:75
msgid ""
"maps full-string formats to a callable \\ that accepts a string and returns "
"another one"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.from_dict:1 spack.spec.Spec.from_yaml:1
msgid "Construct a spec from YAML."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.from_dict:3
msgid ""
"Parameters: data -- a nested dict/list data structure read from YAML or JSON."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.from_json:1
msgid "Construct a spec from JSON."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.from_json:3 spack.spec.Spec.from_yaml:3
msgid "Parameters: stream -- string or file object to read from."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.from_literal:1
msgid "Builds a Spec from a dictionary containing the spec literal."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.from_literal:3
msgid ""
"The dictionary must have a single top level key, representing the root, and "
"as many secondary level keys as needed in the spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.from_literal:6
msgid ""
"The keys can be either a string or a Spec or a tuple containing the Spec and "
"the dependency types."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.from_literal:9
msgid "the dictionary containing the spec literal"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.from_literal:11
msgid ""
"if True the same key appearing at different levels of the ``spec_dict`` will "
"map to the same object in memory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.from_literal:17
msgid "A simple spec ``foo`` with no dependencies:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.from_literal:23
msgid "A spec ``foo`` with a ``(build, link)`` dependency ``bar``:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.from_literal:30
msgid "A spec with a diamond dependency and various build types:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.from_literal:43
msgid ""
"The same spec with a double copy of ``dt-diamond-bottom`` and no diamond "
"structure:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.from_literal:57
msgid "Constructing a spec using a Spec object as key:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.index:1
msgid "Return DependencyMap that points to all the dependencies in this spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.install_status:1
msgid "Helper for tree to print DB install status."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.is_virtual:1
msgid "Test if a name is virtual without requiring a Spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.ne_dag:1
msgid "True if the full dependency DAGs of specs are not equal."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.ne_node:1
msgid "Inequality with another spec, not including dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.normalize:1
msgid ""
"When specs are parsed, any dependencies specified are hanging off the root, "
"and ONLY the ones that were explicitly provided are there. Normalization "
"turns a partial flat spec into a DAG, where:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.normalize:5
msgid "Known dependencies of the root package are in the DAG."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.normalize:6
msgid "Each node's dependencies dict only contains its known direct deps."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.normalize:8
msgid "There is only ONE unique spec for each package in the DAG."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.normalize:10
msgid ""
"This includes virtual packages.  If there a non-virtual package that "
"provides a virtual package that is in the spec, then we replace the virtual "
"package with the non-virtual one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.normalize:14
msgid ""
"TODO: normalize should probably implement some form of cycle detection, to "
"ensure that the spec is actually a DAG."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.normalized:1
msgid "Return a normalized copy of this spec without modifying this spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.old_format:1
msgid "The format strings you can provide are::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.old_format:16
msgid "You can also use full-string versions, which elide the prefixes::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.old_format:41
msgid ""
"Note these are case-insensitive: for example you can specify either ``"
"${PACKAGE}`` or ``${package}``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.old_format:44
msgid ""
"Optionally you can provide a width, e.g. ``$20_`` for a 20-wide name. Like "
"printf, you can provide '-' for left justification, e.g. ``$-20_`` for a "
"left-justified name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.old_format:48
msgid "Anything else is copied verbatim into the output stream."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.old_format:55
msgid ""
"maps full-string formats to a callable                 that accepts a string "
"and returns another one"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.old_format:60
msgid "The following line:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.old_format:66
msgid ""
"translates to the name, version, and options of the package, but no "
"dependencies, arch, or compiler."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.old_format:69
msgid ""
"TODO: allow, e.g., ``$6#`` to customize short hash length TODO: allow, e.g., "
"``$//`` for full hash."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.package_class:1
msgid ""
"Internal package call gets only the class object for a package. Use this to "
"just get package metadata."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.patches:1
msgid "Return patch objects for any patch sha256 sums on this Spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.patches:3
msgid ""
"This is for use after concretization to iterate over any patches associated "
"with this spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.patches:6
msgid ""
"TODO: this only checks in the package; it doesn't resurrect old patches from "
"install directories, but it probably should."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.read_yaml_dep_specs:1
msgid "Read the DependencySpec portion of a YAML-formatted Spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.read_yaml_dep_specs:3
msgid ""
"This needs to be backward-compatible with older spack spec formats so that "
"reindex will work on old specs/databases."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.root:1
msgid "Follow dependent links and find the root of this spec's DAG."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.root:3
msgid "Spack specs have a single root (the package being installed)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.satisfies:1
msgid "Determine if this spec satisfies all constraints of another."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.satisfies:3
msgid "There are two senses for satisfies:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.satisfies:5
msgid ""
"`loose` (default): the absence of a constraint in self implies that it "
"*could* be satisfied by other, so we only check that there are no conflicts "
"with other for constraints that this spec actually has."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.satisfies:10
msgid ""
"`strict`: strict means that we *must* meet all the constraints specified on "
"other."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.satisfies_dependencies:1
msgid "This checks constraints on common dependencies against each other."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.short_spec:1
msgid ""
"Returns a version of the spec with the dependencies hashed instead of "
"completely enumerated."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.sorted_deps:1
msgid "Return a list of all dependencies sorted by name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:1
msgid ""
"Generic traversal of the DAG represented by this spec. This will yield each "
"node in the spec.  Options:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:11
msgid "order    [=pre|post]"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:5
msgid ""
"Order to traverse spec nodes. Defaults to preorder traversal. Options are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:8
msgid "'pre':  Pre-order traversal; each node is yielded before its"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:9 spack.spec.Spec.traverse_edges:11
msgid "children in the dependency DAG."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:11
msgid "'post': Post-order  traversal; each node is yielded after its"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:23
msgid "cover    [=nodes|edges|paths]"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:14
msgid "Determines how extensively to cover the dag.  Possible values:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:16
msgid "'nodes': Visit each node in the dag only once.  Every node"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:17
msgid "yielded by this function will be unique."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:19
msgid "'edges': If a node has been visited once but is reached along a"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:19
msgid ""
"new path from the root, yield it but do not descend into it.  This traverses "
"each 'edge' in the DAG once."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:23
msgid "'paths': Explore every unique path reachable from the root."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:22
msgid ""
"This descends into visited subtrees and will yield nodes twice if they're "
"reachable by multiple paths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:28
msgid "depth    [=False]"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:26
msgid ""
"Defaults to False.  When True, yields not just nodes in the spec, but also "
"their depth from the root in a (depth, node) tuple."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:32
msgid "key   [=id]"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:31
msgid ""
"Allow a custom key function to track the identity of nodes in the traversal."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:35
msgid "root     [=True]"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:35
msgid "If False, this won't yield the root node, just its descendents."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:38
msgid "direction [=children|parents]"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.traverse_edges:38
msgid ""
"If 'children', does a traversal of this spec's children.  If 'parents', "
"traverses upwards in the DAG towards the root."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.tree:1
msgid ""
"Prints out this spec and its dependencies, tree-formatted with indentation."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.validate_or_raise:1
msgid ""
"Checks that names and values in this spec are real. If they're not, it will "
"raise an appropriate exception."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.virtual:1
msgid "Right now, a spec is virtual if no package exists with its name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.virtual:3
msgid ""
"TODO: revisit this -- might need to use a separate namespace and be more "
"explicit about this. Possible idea: just use conventin and make virtual deps "
"all caps, e.g., MPI vs mpi."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.Spec.virtual_dependencies:1
msgid "Return list of any virtual deps in this spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.parse:1
msgid ""
"Returns a list of specs from an input string. For creating one spec, see "
"Spec() constructor."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.parse_anonymous_spec:1
msgid ""
"Allow the user to omit the package name part of a spec if they know what it "
"has to be already."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.parse_anonymous_spec:4
msgid ""
"e.g., provides('mpi@2', when='@1.9:') says that this package provides MPI-3 "
"when its version is higher than 1.9."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.SpecParseError:1
msgid "Wrapper for ParseError for when we're parsing specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.DuplicateDependencyError:1
msgid "Raised when the same dependency occurs in a spec twice."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.spec.DuplicateVariantError:1 spack.variant.DuplicateVariantError:1
msgid "Raised when the same variant occurs in a spec twice."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.DuplicateCompilerSpecError:1
msgid "Raised when the same compiler occurs in a spec twice."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.UnsupportedCompilerError:1
msgid "Raised when the user asks for a compiler spack doesn't know about."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.spec.UnknownVariantError:1 spack.variant.UnknownVariantError:1
msgid "Raised when an unknown variant occurs in a spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.DuplicateArchitectureError:1
msgid "Raised when the same architecture occurs in a spec twice."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.InconsistentSpecError:1
msgid ""
"Raised when two nodes in the same spec DAG have inconsistent constraints."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.InvalidDependencyError:1
msgid ""
"Raised when a dependency in a spec is not actually a dependency of the "
"package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.NoProviderError:1 spack.spec.MultipleProviderError:1
msgid ""
"Raised when there is no package that provides a particular virtual "
"dependency."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.UnsatisfiableSpecNameError:1
#: spack.spec.UnsatisfiableVersionSpecError:1
#: spack.spec.UnsatisfiableCompilerSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring
#: spack.spec.UnsatisfiableVariantSpecError:1
#: spack.spec.UnsatisfiableCompilerFlagSpecError:1
#: spack.spec.UnsatisfiableArchitectureSpecError:1
#: spack.spec.UnsatisfiableProviderSpecError:1
#: spack.spec.UnsatisfiableDependencySpecError:1
#: spack.variant.UnsatisfiableVariantSpecError:1
msgid "Bases: :class:`spack.error.UnsatisfiableSpecError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.UnsatisfiableSpecNameError:1
msgid "Raised when two specs aren't even for the same package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.UnsatisfiableVersionSpecError:1
msgid "Raised when a spec version conflicts with package constraints."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.UnsatisfiableCompilerSpecError:1
msgid "Raised when a spec comiler conflicts with package constraints."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.spec.UnsatisfiableVariantSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring
#: spack.spec.UnsatisfiableCompilerFlagSpecError:1
#: spack.variant.UnsatisfiableVariantSpecError:1
msgid "Raised when a spec variant conflicts with package constraints."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.UnsatisfiableArchitectureSpecError:1
msgid "Raised when a spec architecture conflicts with package constraints."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.UnsatisfiableProviderSpecError:1
msgid ""
"Raised when a provider is supplied but constraints don't match a vpkg "
"requirement"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of
#: spack.spec.UnsatisfiableDependencySpecError:1
msgid "Raised when some dependency of constrained specs are incompatible"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:313
msgid "spack.spec\\_set module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec_set.py:docstring of
#: spack.spec_set.CombinatorialSpecSet:1
msgid "Set of combinatorial Specs constructed from YAML file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec_set.py:docstring of
#: spack.spec_set.CombinatorialSpecSet.all_package_versions:1
msgid "Get package/version combinations for all spack packages."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:321
msgid "spack.stage module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.DIYStage:1
msgid "Simple class that allows any directory to be a spack stage."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.ResourceStage:1
msgid "Bases: :class:`spack.stage.Stage`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.ResourceStage.expand_archive:1
#: spack.stage.Stage.expand_archive:1
msgid ""
"Changes to the stage directory and attempt to expand the downloaded "
"archive.  Fail if the stage is not set up or if the archive is not yet "
"downloaded."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.ResourceStage.restage:1 spack.stage.Stage.restage:1
msgid ""
"Removes the expanded archive path if it exists, then re-expands the archive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.RestageError:1
msgid "Bases: :class:`spack.stage.StageError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.RestageError:1
msgid "\"Error encountered during restaging."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.Stage:1
msgid "Manages a temporary stage directory for building."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.Stage:3
msgid ""
"A Stage object is a context manager that handles a directory where some "
"source code is downloaded and built before being installed. It handles "
"fetching the source code, either as an archive to be expanded or by checking "
"it out of a repository.  A stage's lifecycle looks like this::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.Stage:16
msgid ""
"When used as a context manager, the stage is automatically destroyed if no "
"exception is raised by the context. If an excpetion is raised, the stage is "
"left in the filesystem and NOT destroyed, for potential reuse later."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.Stage:21
msgid ""
"You can also use the stage's create/destroy functions manually, like this::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.Stage:34
msgid ""
"There are two kinds of stages: named and unnamed.  Named stages can persist "
"between runs of spack, e.g. if you fetched a tarball but didn't finish "
"building it, you won't have to fetch it again."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.Stage:38
msgid ""
"Unnamed stages are created using standard mkdtemp mechanisms or similar, and "
"are intended to persist for only one run of spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.Stage.create:1
msgid "Creates the stage directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.Stage.create:3
msgid ""
"If get_tmp_root() is None, the stage directory is created directly under "
"spack.paths.stage_path, otherwise this will attempt to create a stage in a "
"temporary directory and link it into spack.paths.stage_path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.Stage.destroy:1
msgid "Removes this stage directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.Stage.expected_archive_files:1
msgid "Possible archive file paths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.Stage.fetch:1
msgid "Downloads an archive or checks out code from a repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.Stage.source_path:1
msgid "Returns the path to the expanded/checked out source code."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.Stage.source_path:3
msgid ""
"To find the source code, this method searches for the first subdirectory of "
"the stage that it can find, and returns it. This assumes nothing besides the "
"archive file will be in the stage path, but it has the advantage that we "
"don't need to know the name of the archive or its contents."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.Stage.source_path:9
msgid ""
"If the fetch strategy is not supposed to expand the downloaded file, it will "
"just return the stage path. If the archive needs to be expanded, it will "
"return None when no archive is found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.StageError:1
msgid "\"Superclass for all errors encountered during staging."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.ensure_access:1
msgid "Ensure we can access a directory and die with an error if we can't."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of
#: spack.stage.purge:1
msgid "Remove all build directories in the top-level stage path."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:329
msgid "spack.store module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of
#: spack.store:1
msgid "Components that manage Spack's installation tree."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of
#: spack.store:3
msgid "An install tree, or \"build store\" consists of two parts:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of
#: spack.store:5
msgid "A package database that tracks what is installed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of
#: spack.store:6
msgid "A directory layout that determines how the installations are laid out."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of
#: spack.store:9
msgid ""
"The store contains all the install prefixes for packages installed by "
"Spack.  The simplest store could just contain prefixes named by DAG hash, "
"but we use a fancier directory layout to make browsing the store and "
"debugging easier."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of
#: spack.store:14
msgid ""
"The directory layout is currently hard-coded to be a YAMLDirectoryLayout, so "
"called because it stores build metadata within each prefix, in `spec.yaml` "
"files. In future versions of Spack we may consider allowing install trees to "
"define their own layouts with some per-tree configuration."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of
#: spack.store.Store:1
msgid "A store is a path full of installed Spack packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of
#: spack.store.Store:3
msgid ""
"Stores consist of packages installed according to a ``DirectoryLayout``, "
"along with an index, or _database_ of their contents.  The directory layout "
"controls what paths look like and how Spack ensures that each uniqe spec "
"gets its own unique directory (or not, though we don't recommend that). The "
"database is a signle file that caches metadata for the entire Spack "
"installation.  It prevents us from having to spider the install tree to "
"figure out what's there."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of
#: spack.store.Store:11
msgid "path to the root of the install tree"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of
#: spack.store.Store:13
msgid ""
"expression according to guidelines in ``spack.util.path`` that describes how "
"to construct a path to a package prefix in this store"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of
#: spack.store.Store:17
msgid ""
"length of the hashes used in the directory layout; spec hash suffixes will "
"be truncated to this length"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of
#: spack.store.Store.reindex:1
msgid "Convenience function to reindex the store DB with its own layout."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of
#: spack.store.default_root:1
msgid "default installation root, relative to the Spack install path"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of
#: spack.store.store:1
msgid "Singleton store instance"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:337
msgid "spack.tengine module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of
#: spack.tengine.Context:1
msgid "Base class for context classes that are used with the template engine."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of
#: spack.tengine.Context.to_dict:1
msgid "Returns a dictionary containing all the context properties."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of
#: spack.tengine.ContextMeta:1
msgid ""
"Meta class for Context. It helps reducing the boilerplate in client code."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of
#: spack.tengine.ContextMeta.context_property:1
msgid ""
"Decorator that adds a function name to the list of new context properties, "
"and then returns a property."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of
#: spack.tengine.context_property:1
msgid "A saner way to use the decorator"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of
#: spack.tengine.make_environment:1
msgid "Returns an configured environment for template rendering."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of
#: spack.tengine.prepend_to_line:1
msgid "Prepends a token to each line in text"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of
#: spack.tengine.quote:1
msgid "Quotes each line in text"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:345
msgid "spack.url module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url:1
msgid ""
"This module has methods for parsing names and versions of packages from "
"URLs. The idea is to allow package creators to supply nothing more than the "
"download location of the package, and figure out version and name "
"information from there."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url:6
msgid "**Example:** when spack is given the following URL:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url:8
msgid ""
"https://www.hdfgroup.org/ftp/HDF/releases/HDF4.2.12/src/hdf-4.2.12.tar.gz"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url:10
msgid ""
"It can figure out that the package name is ``hdf``, and that it is at "
"version ``4.2.12``. This is useful for making the creation of packages "
"simple: a user just supplies a URL and skeleton code is generated "
"automatically."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url:14
msgid ""
"Spack can also figure out that it can most likely download 4.2.6 at this URL:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url:16
msgid "https://www.hdfgroup.org/ftp/HDF/releases/HDF4.2.6/src/hdf-4.2.6.tar.gz"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url:18
msgid ""
"This is useful if a user asks for a package at a particular version number; "
"spack doesn't need anyone to tell it where to get the tarball even though "
"it's never been told about that version before."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.UndetectableNameError:1 spack.url.UndetectableVersionError:1
msgid "Bases: :class:`spack.url.UrlParseError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.UndetectableNameError:1
msgid "Raised when we can't parse a package name from a string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.UndetectableVersionError:1
msgid "Raised when we can't parse a version from a string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.UrlParseError:1
msgid "Raised when the URL module can't parse something correctly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.color_url:1
msgid "Color the parts of the url according to Spack's parsing."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.color_url:8
msgid "Colors are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.color_url:0
msgid "Cyan: The version found by :func:`parse_version_offset`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.color_url:0
msgid "Red:  The name found by :func:`parse_name_offset`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.color_url:0
msgid "Green:   Instances of version string from :func:`substitute_version`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.color_url:0
msgid "Magenta: Instances of the name (protected from substitution)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.color_url:10 spack.url.parse_name:3
#: spack.url.parse_name_and_version:4 spack.url.parse_name_offset:3
#: spack.url.parse_version:3 spack.url.parse_version_offset:3
#: spack.url.strip_name_suffixes:18 spack.url.strip_version_suffixes:15
msgid "The filename or URL for the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.color_url:12
msgid "Append parse errors at end of string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.color_url:14
msgid "Color substitutions as well as parsed name/version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.cumsum:1
msgid "Return cumulative sum of result of fn on each element in elts."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.determine_url_file_extension:1
msgid ""
"This returns the type of archive a URL refers to.  This is sometimes "
"confusing because of URLs like:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.determine_url_file_extension:4
msgid "https://github.com/petdance/ack/tarball/1.93_02"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.determine_url_file_extension:6
msgid ""
"Where the URL doesn't actually contain the filename.  We need to know what "
"type it is so that we can appropriately name files in mirrors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.find_all:1
msgid ""
"Returns a list containing the indices of every occurrence of substring in "
"string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.find_list_url:1
msgid "Finds a good list URL for the supplied URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.find_list_url:3
msgid "By default, returns the dirname of the archive path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.find_list_url:5
msgid ""
"Provides special treatment for the following websites, which have a unique "
"list URL different from the dirname of the download URL:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.find_list_url:9
msgid "https://github.com/<repo>/<name>/releases"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.find_list_url:10
msgid "GitLab"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.find_list_url:10
msgid "https://gitlab.\\*/<repo>/<name>/tags"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.find_list_url:11
msgid "BitBucket"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.find_list_url:11
msgid "https://bitbucket.org/<repo>/<name>/downloads/?tab=tags"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.find_list_url:12
msgid "CRAN"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.find_list_url:12
msgid "https://\\*.r-project.org/src/contrib/Archive/<name>"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.find_list_url:15
msgid "The download URL for the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.find_list_url:18
msgid "The list URL for the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.insensitize:1
msgid ""
"Change upper and lowercase letters to be case insensitive in the provided "
"string.  e.g., 'a' becomes '[Aa]', 'B' becomes '[bB]', etc.  Use for "
"building regexes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.parse_name:1 spack.url.parse_name_offset:1
msgid "Try to determine the name of a package from its filename or URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.parse_name:5 spack.url.parse_name_offset:5
#: spack.url.parse_version:6
msgid "The version of the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.parse_name:11 spack.url.parse_name_and_version:11
#: spack.url.parse_name_and_version:12 spack.url.parse_name_offset:18
#: spack.url.parse_version:9 spack.url.parse_version_offset:16
msgid "If the URL does not match any regexes"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.parse_name_and_version:1
msgid ""
"Try to determine the name of a package and extract its version from its "
"filename or URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.parse_name_and_version:7
msgid "The name of the package The version of the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.parse_name_offset:8
msgid ""
"A tuple containing:     name of the package,     first index of name,     "
"length of name,     the index of the matching regex     the matching regex"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.parse_name_offset:14 spack.url.parse_version_offset:12
msgid "A tuple containing:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.parse_name_offset:11
msgid ""
"name of the package, first index of name, length of name, the index of the "
"matching regex the matching regex"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.parse_version:1 spack.url.parse_version_offset:1
msgid "Try to extract a version string from a filename or URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.parse_version_offset:6
msgid ""
"A tuple containing:     version of the package,     first index of "
"version,     length of version string,     the index of the matching "
"regex     the matching regex"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.parse_version_offset:9
msgid ""
"version of the package, first index of version, length of version string, "
"the index of the matching regex the matching regex"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.split_url_extension:1
msgid "Some URLs have a query string, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.split_url_extension:3
msgid ""
"https://github.com/losalamos/CLAMR/blob/packages/PowerParser_v2.0.7.tgz?"
"raw=true"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.split_url_extension:4
msgid ""
"http://www.apache.org/dyn/closer.cgi?path=/cassandra/1.2.0/apache-"
"cassandra-1.2.0-rc2-bin.tar.gz"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.split_url_extension:5
msgid ""
"https://gitlab.kitware.com/vtk/vtk/repository/archive.tar.bz2?ref=v7.0.0"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.split_url_extension:7
msgid ""
"In (1), the query string needs to be stripped to get at the extension, but "
"in (2) & (3), the filename is IN a single final query argument."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.split_url_extension:11
msgid ""
"This strips the URL into three pieces: ``prefix``, ``ext``, and ``suffix``. "
"The suffix contains anything that was stripped off the URL to get at the "
"file extension.  In (1), it will be ``'?raw=true'``, but in (2), it will be "
"empty. In (3) the suffix is a parameter that follows after the file "
"extension, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.split_url_extension:17
msgid ""
"``('https://github.com/losalamos/CLAMR/blob/packages/PowerParser_v2.0.7', '."
"tgz', '?raw=true')``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.split_url_extension:18
msgid ""
"``('http://www.apache.org/dyn/closer.cgi?path=/cassandra/1.2.0/apache-"
"cassandra-1.2.0-rc2-bin', '.tar.gz', None)``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.split_url_extension:19
msgid ""
"``('https://gitlab.kitware.com/vtk/vtk/repository/archive', '.tar.bz2', '?"
"ref=v7.0.0')``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_name_suffixes:1
msgid ""
"Most tarballs contain a package name followed by a version number. However, "
"some also contain extraneous information in-between the name and version:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_name_suffixes:5
msgid "``rgb-1.0.6``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_name_suffixes:6
msgid "``converge_install_2.3.16``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_name_suffixes:7
msgid "``jpegsrc.v9b``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_name_suffixes:9
msgid ""
"These strings are not part of the package name and should be ignored. This "
"function strips the version number and any extraneous suffixes off and "
"returns the remaining string. The goal is that the name is always the last "
"thing in ``path``:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_name_suffixes:14
msgid "``rgb``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_name_suffixes:15
msgid "``converge``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_name_suffixes:16
msgid "``jpeg``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_name_suffixes:20
msgid "The version detected for this URL"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_name_suffixes:23 spack.url.strip_version_suffixes:18
msgid "The ``path`` with any extraneous suffixes removed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_version_suffixes:1
msgid "Some tarballs contain extraneous information after the version:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_version_suffixes:3
msgid "``bowtie2-2.2.5-source``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_version_suffixes:4
msgid "``libevent-2.0.21-stable``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_version_suffixes:5
msgid "``cuda_8.0.44_linux.run``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_version_suffixes:7
msgid ""
"These strings are not part of the version number and should be ignored. This "
"function strips those suffixes off and returns the remaining string. The "
"goal is that the version is always the last thing in ``path``:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_version_suffixes:11
msgid "``bowtie2-2.2.5``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_version_suffixes:12
msgid "``libevent-2.0.21``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.strip_version_suffixes:13
msgid "``cuda_8.0.44``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.substitute_version:1
msgid ""
"Given a URL or archive name, find the version in the path and substitute the "
"new version for it.  Replace all occurrences of the version *if* they don't "
"overlap with the package name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.substitute_version:5
msgid "Simple example:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.substitute_version:12
msgid "Complex example:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.substitution_offsets:1
msgid ""
"This returns offsets for substituting versions and names in the provided "
"path.  It is a helper for :func:`substitute_version`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of
#: spack.url.wildcard_version:1
msgid ""
"Find the version in the supplied path, and return a regular expression that "
"will match this path with any version in its place."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:353
msgid "spack.variant module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant:1
msgid ""
"The variant module contains data structures that are needed to manage "
"variants both in packages and in specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant:1
msgid ""
"A variant that has not yet decided who it wants to be. It behaves like a "
"multi valued variant which **could** do things."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant:4
msgid ""
"This kind of variant is generated during parsing of expressions like "
"``foo=bar`` and differs from multi valued variants because it will satisfy "
"any other variant with the same name. This is because it **could** do it if "
"it grows up to be a multi valued variant with the right set of values."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant.compatible:1
#: spack.variant.SingleValuedVariant.compatible:1
msgid "Returns True if self and other are compatible, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant.compatible:3
#: spack.variant.SingleValuedVariant.compatible:3
msgid ""
"As there is no semantic check, two VariantSpec are compatible if either they "
"contain the same value or they are both multi-valued."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant.compatible:6
#: spack.variant.SingleValuedVariant.compatible:6
msgid "instance against which we test compatibility"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant.constrain:1
#: spack.variant.SingleValuedVariant.constrain:1
msgid ""
"Modify self to match all the constraints for other if both instances are "
"multi-valued. Returns True if self changed, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant.constrain:5
#: spack.variant.SingleValuedVariant.constrain:5
#: spack.variant.VariantMap.constrain:5
msgid "instance against which we constrain self"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant.copy:1
msgid "Returns an instance of a variant equivalent to self"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant.copy:3 spack.variant.VariantMap.copy:3
msgid "a copy of self"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant.from_node_dict:1
msgid "Reconstruct a variant from a node dict."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant.satisfies:1
msgid ""
"Returns true if ``other.name == self.name``, because any value that other "
"holds and is not in self yet **could** be added."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant.satisfies:4
#: spack.variant.MultiValuedVariant.satisfies:4
#: spack.variant.SingleValuedVariant.satisfies:4
msgid "constraint to be met for the method to return True"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant.value:1
msgid "Returns a tuple of strings containing the values stored in the variant."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant.value:4
msgid "values stored in the variant"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant.yaml_entry:1
#: spack.variant.SingleValuedVariant.yaml_entry:1
msgid "Returns a key, value tuple suitable to be an entry in a yaml dict."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.AbstractVariant.yaml_entry:3
#: spack.variant.SingleValuedVariant.yaml_entry:3
msgid "(name, value_representation)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.BoolValuedVariant:1
msgid "Bases: :class:`spack.variant.SingleValuedVariant`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.BoolValuedVariant:1
msgid "A variant that can hold either True or False."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.DisjointSetsOfValues:1
msgid "Bases: :class:`collections.abc.Sequence`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.DisjointSetsOfValues:1
msgid "Allows combinations from one of many mutually exclusive sets."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.DisjointSetsOfValues:3
msgid ""
"The value ``('none',)`` is reserved to denote the empty set and therefore no "
"other set can contain the item ``'none'``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.DisjointSetsOfValues:6
msgid "mutually exclusive sets of values"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.DisjointSetsOfValues.allow_empty_set:1
msgid "Adds the empty set to the current list of disjoint sets."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.DisjointSetsOfValues.feature_values:1
msgid ""
"Attribute used to track values which correspond to features which can be "
"enabled or disabled as understood by the package's build system."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.DisjointSetsOfValues.prohibit_empty_set:1
msgid "Removes the empty set from the current list of disjoint sets."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.DisjointSetsOfValues.with_default:1
msgid "Sets the default value and returns self."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.DisjointSetsOfValues.with_error:1
msgid "Sets the error message format and returns self."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.DisjointSetsOfValues.with_non_feature_values:1
msgid "Marks a few values as not being tied to a feature."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.InconsistentValidationError:1
msgid "Raised if the wrong validator is used to validate a variant."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.InvalidVariantValueError:1
msgid "Raised when a valid variant has at least an invalid value."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.MultiValuedVariant:1
msgid "Bases: :class:`spack.variant.AbstractVariant`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.MultiValuedVariant:1
msgid "A variant that can hold multiple values at once."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.MultiValuedVariant.satisfies:1
#: spack.variant.SingleValuedVariant.satisfies:1
msgid ""
"Returns true if ``other.name == self.name`` and ``other.value`` is a strict "
"subset of self. Does not try to validate."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.MultipleValuesInExclusiveVariantError:1
msgid "Bases: :class:`spack.error.SpecError`, :class:`ValueError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.MultipleValuesInExclusiveVariantError:1
msgid ""
"Raised when multiple values are present in a variant that wants only one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.SingleValuedVariant:1
msgid "Bases: :class:`spack.variant.MultiValuedVariant`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.SingleValuedVariant:1
msgid "A variant that can hold multiple values, but one at a time."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.Variant:1
msgid ""
"Represents a variant in a package, as declared in the variant directive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.Variant.allowed_values:1
msgid ""
"Returns a string representation of the allowed values for printing purposes"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.Variant.allowed_values:4
msgid "representation of the allowed values"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.Variant.make_default:1
msgid "Factory that creates a variant holding the default value."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.Variant.make_default:3 spack.variant.Variant.make_variant:6
msgid "instance of the proper variant"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.Variant.make_variant:1
msgid "Factory that creates a variant holding the value passed as a parameter."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.Variant.make_variant:4
msgid "value that will be hold by the variant"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.Variant.validate_or_raise:1
msgid ""
"Validate a variant spec against this package variant. Raises an exception if "
"any error is found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.Variant.validate_or_raise:4
msgid "instance to be validated"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.Variant.validate_or_raise:6
msgid "the package that required the validation, if available"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.Variant.validate_or_raise:10
msgid "if ``vspec.name != self.name``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.Variant.validate_or_raise:11
msgid "if ``vspec`` has     multiple values but ``self.multi == False``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.Variant.validate_or_raise:12
msgid "if ``vspec.value`` contains     invalid values"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.Variant.variant_cls:1
msgid "Proper variant class to be used for this configuration."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.VariantMap:1
msgid "Bases: :class:`llnl.util.lang.HashableMap`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.VariantMap:1
msgid ""
"Map containing variant instances. New values can be added only if the key is "
"not already present."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.VariantMap.concrete:1
msgid "Returns True if the spec is concrete in terms of variants."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.VariantMap.constrain:1
msgid ""
"Add all variants in other that aren't in self to self. Also constrain all "
"multi-valued variants that are already present. Return True if self changed, "
"False otherwise"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.VariantMap.copy:1
msgid "Return an instance of VariantMap equivalent to self."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.VariantMap.satisfies:1
msgid ""
"Returns True if this VariantMap is more constrained than other, False "
"otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.VariantMap.satisfies:4
msgid "VariantMap instance to satisfy"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.VariantMap.satisfies:6
msgid ""
"if True return False if a key is in other and not in self, otherwise discard "
"that key and proceed with evaluation"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.VariantMap.substitute:1
msgid "Substitutes the entry under ``vspec.name`` with ``vspec``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.VariantMap.substitute:3
msgid "variant spec to be substituted"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.any_combination_of:1
msgid ""
"Multi-valued variant that allows any combination of the specified values, "
"and also allows the user to specify 'none' (as a string) to choose none of "
"them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.any_combination_of:5 spack.variant.disjoint_sets:5
msgid ""
"It is up to the package implementation to handle the value 'none' specially, "
"if at all."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.any_combination_of:8
#: spack.variant.auto_or_any_combination_of:4
msgid "allowed variant values"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.any_combination_of:10
#: spack.variant.auto_or_any_combination_of:6 spack.variant.disjoint_sets:10
msgid "a properly initialized instance of DisjointSetsOfValues"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.auto_or_any_combination_of:1
msgid ""
"Multi-valued variant that allows any combination of a set of values (but not "
"the empty set) or 'auto'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.disjoint_sets:1
msgid ""
"Multi-valued variant that allows any combination picking from one of "
"multiple disjoint sets of values, and also allows the user to specify "
"'none' (as a string) to choose none of them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.implicit_variant_conversion:1
msgid "Converts other to type(self) and calls method(self, other)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.implicit_variant_conversion:3
msgid "any predicate method that takes another variant as an argument"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.implicit_variant_conversion:5
msgid "Returns: decorated method"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.substitute_abstract_variants:1
msgid ""
"Uses the information in `spec.package` to turn any variant that needs it "
"into a SingleValuedVariant."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of
#: spack.variant.substitute_abstract_variants:4
msgid "spec on which to operate the substitution"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:361
msgid "spack.version module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version:1
msgid "This module implements Version and version-ish objects.  These are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version:3
msgid "Version"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version:4
msgid "A single version of a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version:5
msgid "VersionRange"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version:6
msgid "A range of versions of a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version:8
msgid "VersionList"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version:8
msgid "A list of Versions and VersionRanges."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version:10
msgid ""
"All of these types support the following operations, which can be called on "
"any of the types::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version:1
msgid "Class to represent versions"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.dashed:1
msgid "The dashed representation of the version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.dashed:3
msgid ""
"Example: >>> version = Version('1.2.3b') >>> version.dashed Version('1-2-3b')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.dashed:8
msgid "The version with separator characters replaced by dashes"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.dotted:1
msgid "The dotted representation of the version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.dotted:3
msgid ""
"Example: >>> version = Version('1-2-3b') >>> version.dotted Version('1.2.3b')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.dotted:8
msgid "The version with separator characters replaced by dots"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.is_predecessor:1
msgid ""
"True if the other version is the immediate predecessor of this one. That is, "
"NO versions v exist such that: (self < v < other and v not in self)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.isdevelop:1
msgid "Triggers on the special case of the `@develop-like` version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.joined:1
msgid "The joined representation of the version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.joined:3
msgid ""
"Example: >>> version = Version('1.2.3b') >>> version.joined Version('123b')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.joined:8
msgid "The version with separator characters removed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.satisfies:1
msgid ""
"A Version 'satisfies' another if it is at least as specific and has a common "
"prefix.  e.g., we want gcc@4.7.3 to satisfy a request for gcc@4.7 so that "
"when a user asks to build with gcc@4.7, we can find a suitable compiler."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.underscored:1
msgid "The underscored representation of the version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.underscored:3
msgid ""
"Example: >>> version = Version('1.2.3b') >>> version.underscored "
"Version('1_2_3b')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.underscored:8
msgid "The version with separator characters replaced by     underscores"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.underscored:10
msgid "The version with separator characters replaced by"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.underscored:11
msgid "underscores"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.up_to:1
msgid "The version up to the specified component."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.up_to:3
msgid ""
"Examples: >>> version = Version('1.23-4b') >>> version.up_to(1) Version('1') "
">>> version.up_to(2) Version('1.23') >>> version.up_to(3) Version('1.23-4') "
">>> version.up_to(4) Version('1.23-4b') >>> version.up_to(-1) "
"Version('1.23-4') >>> version.up_to(-2) Version('1.23') >>> version."
"up_to(-3) Version('1')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.Version.up_to:20
msgid "The first index components of the version"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionRange.satisfies:1
msgid ""
"A VersionRange satisfies another if some version in this range would satisfy "
"some version in the other range.  To do this it must either:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionRange.satisfies:5
msgid "Overlap with the other range"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionRange.satisfies:6
msgid "The start of this range satisfies the end of the other range."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionRange.satisfies:8
msgid ""
"This is essentially the same as overlaps(), but overlaps assumes that its "
"arguments are specific.  That is, 4.7 is interpreted as 4.7.0.0.0.0... .  "
"This function assumes that 4.7 would be satisfied by 4.7.3.5, etc."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionRange.satisfies:13
msgid "Rationale:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionRange.satisfies:15
msgid ""
"If a user asks for gcc@4.5:4.7, and a package is only compatible with "
"gcc@4.7.3:4.8, then that package should be able to build under the "
"constraints.  Just using overlaps() would not work here."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionRange.satisfies:19
msgid ""
"Note that we don't need to check whether the end of this range would satisfy "
"the start of the other range, because overlaps() already covers that case."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionRange.satisfies:23
msgid ""
"Note further that overlaps() is a symmetric operation, while satisfies() is "
"not."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionList:1
msgid "Sorted, non-redundant list of Versions and VersionRanges."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionList.from_dict:1
msgid "Parse dict from to_dict."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionList.highest:1
msgid "Get the highest version in the list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionList.intersect:1
msgid "Intersect this spec's list with other."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionList.intersect:3
msgid "Return True if the spec changed as a result; False otherwise"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionList.lowest:1
msgid "Get the lowest version in the list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionList.satisfies:1
msgid ""
"A VersionList satisfies another if some version in the list would satisfy "
"some version in the other list.  This uses essentially the same algorithm as "
"overlaps() does for VersionList, but it calls satisfies() on member Versions "
"and VersionRanges."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionList.satisfies:7
msgid ""
"If strict is specified, this version list must lie entirely *within* the "
"other in order to satisfy it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.VersionList.to_dict:1
msgid "Generate human-readable dict for YAML."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of
#: spack.version.ver:1
msgid ""
"Parses a Version, VersionRange, or VersionList from a string or list of "
"strings."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/__init__.py:docstring of
#: spack.spack_version_info:1
msgid "major, minor, patch version for Spack, in a tuple"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/__init__.py:docstring of
#: spack.spack_version:1
msgid "String containing Spack version joined with .'s"
msgstr ""

#: ../spack/lib/spack/docs/spack.schema.rst:2
msgid "spack.schema package"
msgstr ""

#: ../spack/lib/spack/docs/spack.schema.rst:8
msgid "spack.schema.compilers module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/compilers.py:docstring
#: of spack.schema.compilers:1
msgid "Schema for compilers.yaml configuration file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/compilers.py:docstring
#: of spack.schema.compilers.properties:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/config.py:docstring
#: spack.schema.config.properties:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/merged.py:docstring
#: spack.schema.merged.properties:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/mirrors.py:docstring
#: spack.schema.mirrors.properties:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/packages.py:docstring
#: spack.schema.packages.properties:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/projections.py:docstring
#: spack.schema.projections.properties:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/repos.py:docstring
#: spack.schema.repos.properties:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/upstreams.py:docstring
#: spack.schema.upstreams.properties:1
msgid "Properties for inclusion in other schemas"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/compilers.py:docstring
#: of spack.schema.compilers.schema:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/config.py:docstring
#: spack.schema.config.schema:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/merged.py:docstring
#: spack.schema.merged.schema:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/mirrors.py:docstring
#: spack.schema.mirrors.schema:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/modules.py:docstring
#: spack.schema.modules.schema:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/packages.py:docstring
#: spack.schema.packages.schema:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/projections.py:docstring
#: spack.schema.projections.schema:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/repos.py:docstring
#: spack.schema.repos.schema:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/upstreams.py:docstring
#: spack.schema.upstreams.schema:1
msgid "Full schema with metadata"
msgstr ""

#: ../spack/lib/spack/docs/spack.schema.rst:16
msgid "spack.schema.config module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/config.py:docstring
#: of spack.schema.config:1
msgid "Schema for config.yaml configuration file."
msgstr ""

#: ../spack/lib/spack/docs/spack.schema.rst:24
msgid "spack.schema.env module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/env.py:docstring
#: of spack.schema.env:1
msgid "Schema for env.yaml configuration file."
msgstr ""

#: ../spack/lib/spack/docs/spack.schema.rst:32
msgid "spack.schema.merged module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/merged.py:docstring
#: of spack.schema.merged:1
msgid "Schema for configuration merged into one file."
msgstr ""

#: ../spack/lib/spack/docs/spack.schema.rst:40
msgid "spack.schema.mirrors module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/mirrors.py:docstring
#: of spack.schema.mirrors:1
msgid "Schema for mirrors.yaml configuration file."
msgstr ""

#: ../spack/lib/spack/docs/spack.schema.rst:48
msgid "spack.schema.modules module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/modules.py:docstring
#: of spack.schema.modules:1
msgid "Schema for modules.yaml configuration file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/modules.py:docstring
#: of spack.schema.modules.anonymous_spec_regex:1
msgid "Matches an anonymous spec, i.e. a spec without a root name"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/modules.py:docstring
#: of spack.schema.modules.array_of_strings:1
msgid "Definitions for parts of module schema"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/modules.py:docstring
#: of spack.schema.modules.spec_regex:1
msgid "Matches a spec or a multi-valued variant but not another valid keyword."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/modules.py:docstring
#: of spack.schema.modules.spec_regex:4
msgid ""
"THIS NEEDS TO BE UPDATED FOR EVERY NEW KEYWORD THAT IS ADDED IMMEDIATELY "
"BELOW THE MODULE TYPE ATTRIBUTE"
msgstr ""

#: ../spack/lib/spack/docs/spack.schema.rst:56
msgid "spack.schema.os\\_container\\_mapping module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/os_container_mapping.py:docstring
#: of spack.schema.os_container_mapping:1
msgid "Schema for os-container-mapping.yaml configuration file."
msgstr ""

#: ../spack/lib/spack/docs/spack.schema.rst:64
msgid "spack.schema.packages module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/packages.py:docstring
#: of spack.schema.packages:1
msgid "Schema for packages.yaml configuration files."
msgstr ""

#: ../spack/lib/spack/docs/spack.schema.rst:72
msgid "spack.schema.projections module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/projections.py:docstring
#: of spack.schema.projections:1
msgid "Schema for projections.yaml configuration file."
msgstr ""

#: ../spack/lib/spack/docs/spack.schema.rst:80
msgid "spack.schema.repos module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/repos.py:docstring
#: of spack.schema.repos:1
msgid "Schema for repos.yaml configuration file."
msgstr ""

#: ../spack/lib/spack/docs/spack.schema.rst:88
msgid "spack.schema.spec\\_set module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/spec_set.py:docstring
#: of spack.schema.spec_set:1
msgid "Schema for Spack spec-set configuration file."
msgstr ""

#: ../spack/lib/spack/docs/spack.schema.rst:96
msgid "spack.schema.specs\\_deps module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/specs_deps.py:docstring
#: of spack.schema.specs_deps:1
msgid "Schema for expressing dependencies of a set of specs in a JSON file"
msgstr ""

#: ../spack/lib/spack/docs/spack.schema.rst:104
msgid "spack.schema.upstreams module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/schema/__init__.py:docstring
#: of spack.schema:1
msgid "This module contains jsonschema files for all of Spack's YAML formats."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:2
msgid "spack.test package"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:8
msgid "spack.test.architecture module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/architecture.py:docstring
#: of spack.test.architecture:1
msgid ""
"Test checks if the architecture class is created correctly and also that the "
"functions are looking for the correct architecture name"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/architecture.py:docstring
#: of spack.test.architecture.test_user_back_end_input:1
msgid ""
"Test when user inputs backend that both the backend target and backend "
"operating system match"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/architecture.py:docstring
#: of spack.test.architecture.test_user_front_end_input:1
msgid ""
"Test when user inputs just frontend that both the frontend target and "
"frontend operating system match"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:16
msgid "spack.test.build\\_environment module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/build_environment.py:docstring
#: of spack.test.build_environment.test_set_build_environment_variables:1
msgid ""
"Check that build_environment supplies the needed library/include directories "
"via the SPACK_LINK_DIRS and SPACK_INCLUDE_DIRS environment variables."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:24
msgid "spack.test.build\\_system\\_guess module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/build_system_guess.py:docstring
#: of spack.test.build_system_guess.url_and_build_system:1
msgid ""
"Sets up the resources to be pulled by the stage with the appropriate file "
"name and returns their url along with the correct build-system guess"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:32
msgid "spack.test.build\\_systems module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/build_systems.py:docstring
#: of spack.test.build_systems.test_affirmative_make_check:1
msgid "Tests that Spack correctly detects targets in a Makefile."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/build_systems.py:docstring
#: of spack.test.build_systems.test_affirmative_ninja_check:1
msgid "Tests that Spack correctly detects targets in a Ninja build script."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/build_systems.py:docstring
#: of spack.test.build_systems.test_negative_make_check:1
msgid "Tests that Spack correctly ignores false positives in a Makefile."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/build_systems.py:docstring
#: of spack.test.build_systems.test_negative_ninja_check:1
msgid ""
"Tests that Spack correctly ignores false positives in a Ninja build script."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:40
msgid "spack.test.cc module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc:1
msgid ""
"This test checks that the Spack cc compiler wrapper is parsing arguments "
"correctly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.check_args:1
msgid "Check output arguments that cc produces when called with args."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.check_args:3
msgid ""
"This assumes that cc will print debug command output with one element per "
"line, so that we see whether arguments that should (or shouldn't) contain "
"spaces are parsed correctly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.dump_mode:1
msgid "Make cc dump the mode it detects, and return it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.pkg_prefix:1
msgid "The prefix of the package being mock installed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.real_cc:1
msgid "the \"real\" compiler the wrapper is expected to invoke"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.test_cc_deps:1
msgid "Ensure -L and RPATHs are not added in cc mode."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.test_ccld_deps:1 spack.test.cc.test_ccld_with_system_dirs:1
msgid "Ensure all flags are added in ccld mode."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.test_dep_include:1
msgid "Ensure a single dependency include directory is added."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.test_dep_lib:1
msgid "Ensure a single dependency RPATH is added."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.test_dep_lib_no_lib:1
msgid "Ensure a single dependency RPATH is added with no -L."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.test_dep_lib_no_rpath:1
msgid "Ensure a single dependency link flag is added with no dep RPATH."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.test_dep_rpath:1
msgid "Ensure RPATHs for root package are added."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.test_ld_deps:1
msgid "Ensure no (extra) -I args or -Wl, are passed in ld mode."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.test_ld_deps_no_link:1
msgid "Ensure SPACK_RPATH_DEPS controls -rpath for ld."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.test_ld_deps_no_rpath:1
msgid "Ensure SPACK_LINK_DEPS controls -L for ld."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cc.py:docstring of
#: spack.test.cc.test_ld_deps_partial:1
msgid ""
"Make sure ld -r (partial link) is handled correctly on OS's where it doesn't "
"accept rpaths."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:48
msgid "spack.test.cmd\\_extensions module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cmd_extensions.py:docstring
#: of spack.test.cmd_extensions.hello_world_cmd:1
msgid "Simple extension command with code contained in a single file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/cmd_extensions.py:docstring
#: of spack.test.cmd_extensions.hello_world_with_module_in_root:1
msgid "Extension command with additional code in the root folder."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:56
msgid "spack.test.compilers module"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:64
msgid "spack.test.concretize module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize.py:docstring
#: of spack.test.concretize.TestConcretize.concretize_difficult_packages:1
msgid ""
"Test a couple of large packages that are often broken due to current "
"limitations in the concretizer"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize.py:docstring
#: of spack.test.concretize.TestConcretize.test_architecture_deep_inheritance:1
msgid ""
"Make sure that indirect dependencies receive architecture information from "
"the root even when partial architecture information is provided by an "
"intermediate dependency."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize.py:docstring
#: of spack.test.concretize.TestConcretize.test_architecture_inheritance:1
msgid ""
"test_architecture_inheritance is likely to fail with an "
"UnavailableCompilerVersionError if the architecture is concretized "
"incorrectly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize.py:docstring
#: of spack.test.concretize.TestConcretize.test_concretize_two_virtuals:1
msgid "Test a package with multiple virtual dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize.py:docstring
#: of
#: spack.test.concretize.TestConcretize.test_concretize_two_virtuals_with_dual_provider:1
msgid ""
"Test a package with multiple virtual dependencies and force a provider that "
"provides both."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize.py:docstring
#: of
#: spack.test.concretize.TestConcretize.test_concretize_two_virtuals_with_dual_provider_and_a_conflict:1
msgid ""
"Test a package with multiple virtual dependencies and force a provider that "
"provides both, and another conflicting package that provides one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize.py:docstring
#: of
#: spack.test.concretize.TestConcretize.test_concretize_two_virtuals_with_one_bound:1
msgid "Test a package with multiple virtual dependencies and one preset."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize.py:docstring
#: of
#: spack.test.concretize.TestConcretize.test_concretize_two_virtuals_with_two_bound:1
msgid "Test a package with multiple virtual deps and two of them preset."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize.py:docstring
#: of spack.test.concretize.TestConcretize.test_concretize_with_provides_when:1
msgid ""
"Make sure insufficient versions of MPI are not in providers list when we ask "
"for some advanced version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize.py:docstring
#: of spack.test.concretize.TestConcretize.test_find_spec_parents:1
msgid "Tests the spec finding logic used by concretization."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize.py:docstring
#: of spack.test.concretize.spec:1
msgid "Spec to be concretized"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:72
msgid "spack.test.concretize\\_preferences module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize_preferences.py:docstring
#: of
#: spack.test.concretize_preferences.TestConcretizePreferences.test_all_is_not_a_virtual:1
msgid "Verify that `all` is allowed in packages.yaml."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize_preferences.py:docstring
#: of
#: spack.test.concretize_preferences.TestConcretizePreferences.test_develop:1
msgid "Test concretization with develop-like versions"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize_preferences.py:docstring
#: of
#: spack.test.concretize_preferences.TestConcretizePreferences.test_no_virtuals_in_packages_yaml:1
msgid "Verify that virtuals are not allowed in packages.yaml."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize_preferences.py:docstring
#: of
#: spack.test.concretize_preferences.TestConcretizePreferences.test_preferred:1
msgid "\"Test packages with some version marked as preferred=True"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize_preferences.py:docstring
#: of
#: spack.test.concretize_preferences.TestConcretizePreferences.test_preferred_compilers:1
msgid "Test preferred compilers are applied correctly"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize_preferences.py:docstring
#: of
#: spack.test.concretize_preferences.TestConcretizePreferences.test_preferred_providers:1
msgid "Test preferred providers of virtual packages are applied correctly"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize_preferences.py:docstring
#: of
#: spack.test.concretize_preferences.TestConcretizePreferences.test_preferred_variants:1
msgid "Test preferred variants are applied correctly"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize_preferences.py:docstring
#: of
#: spack.test.concretize_preferences.TestConcretizePreferences.test_preferred_versions:1
msgid "Test preferred package versions are applied correctly"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize_preferences.py:docstring
#: of spack.test.concretize_preferences.concretize_scope:1
msgid "Adds a scope for concretization preferences"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/concretize_preferences.py:docstring
#: of spack.test.concretize_preferences.update_packages:1
msgid "Update config and reread package list"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:80
msgid "spack.test.config module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/config.py:docstring
#: of spack.test.config.check_compiler_config:1
msgid "Check that named compilers in comps match Spack's config."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/config.py:docstring
#: of spack.test.config.check_schema:1
msgid "Check a Spack YAML schema against some data"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/config.py:docstring
#: of spack.test.config.compiler_specs:1
msgid "Returns a couple of compiler specs needed for the tests"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/config.py:docstring
#: of spack.test.config.get_config_error:1
msgid "Parse a YAML string and return the resulting ConfigFormatError."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/config.py:docstring
#: of spack.test.config.get_config_error:3
msgid "Fail if there is no ConfigFormatError"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/config.py:docstring
#: of spack.test.config.test_bad_config_section:1
msgid "Test that getting or setting a bad section gives an error."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/config.py:docstring
#: of spack.test.config.test_config_format_error:1
msgid "This is raised when we try to write a bad configuration."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/config.py:docstring
#: of spack.test.config.test_keys_are_ordered:1
msgid "Test that keys in Spack YAML files retain their order from the file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/config.py:docstring
#: of spack.test.config.test_merge_with_defaults:1
msgid ""
"This ensures that specified preferences merge with defaults as expected. "
"Originally all defaults were initialized with the exact same object, which "
"led to aliasing problems. Therefore the test configs used here leave "
"'version' blank for multiple packages in 'packages_merge_low'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/config.py:docstring
#: of spack.test.config.write_config_file:1
msgid "Returns a function that writes a config file."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:88
msgid "spack.test.conftest module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.check_for_leftover_stage_files:1
msgid "Ensure that each test leaves a clean stage when done."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.check_for_leftover_stage_files:3
msgid ""
"This can be disabled for tests that are expected to dirty the stage by "
"adding::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.check_for_leftover_stage_files:8
msgid "to tests that need it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.config:1
msgid "Hooks the mock configuration files into spack.config"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.configuration_dir:1
msgid ""
"Copies mock configuration files in a temporary directory. Returns the "
"directory path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.conflict_spec:1
msgid ""
"Specs which violate constraints specified with the \"conflicts\" directive "
"in the \"conflict\" package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.database:1
msgid ""
"Creates a mock database with some packages installed note that the ref count "
"for dyninst here will be 3, as it's recycled across each install."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.ignore_stage_files:1
msgid "Session-scoped helper for check_for_leftover_stage_files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.ignore_stage_files:3
msgid "Used to track which leftover files in the stage have been seen."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.install_mockery:1
msgid "Hooks a fake install directory, DB, and stage directory into Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.installation_dir_with_headers:1
msgid ""
"Mock installation tree with a few headers placed in different "
"subdirectories. Shouldn't be modified by tests as it is session scoped."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.invalid_spec:1
msgid "Specs that do not parse cleanly due to invalid formatting."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.linux_os:1
msgid ""
"Returns a named tuple with attributes 'name' and 'version' representing the "
"OS."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.mock_archive:1
msgid ""
"Creates a very simple archive directory with a configure script and a "
"makefile that installs to a prefix. Tars it up into an archive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.mock_config:1
msgid "Mocks two configuration scopes: 'low' and 'high'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.mock_fetch:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/packaging.py:docstring
#: spack.test.packaging.fake_fetchify:1
msgid "Fake the URL for a package so it downloads from a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.mock_fetch_cache:1
msgid ""
"Substitutes spack.paths.fetch_cache with a mock object that does nothing and "
"raises on fetch."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.mock_git_repository:1
msgid "Creates a very simple git repository with two branches and two commits."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.mock_hg_repository:1
msgid "Creates a very simple hg repository with two commits."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.mock_packages:1
msgid "Use the 'builtin.mock' repository instead of 'builtin'"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.mock_stage:1
msgid "Mocks up a fake stage directory for use by tests."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.mock_svn_repository:1
msgid "Creates a very simple svn repository with two commits."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.module_configuration:1
msgid ""
"Reads the module configuration file from the mock ones prepared for tests "
"and monkeypatches the right classes to hook it in."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.mutable_config:1
msgid "Like config, but tests can modify the configuration."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.mutable_database:1
msgid "For tests that need to modify the database instance."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.mutable_mock_env_path:1
msgid "Fixture for mocking the internal spack environments directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.mutable_mock_packages:1
msgid "Function-scoped mock packages, for tests that need to modify them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.no_chdir:1
msgid "Ensure that no test changes Spack's working dirctory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.no_chdir:3
msgid ""
"This prevents Spack tests (and therefore Spack commands) from changing the "
"working directory and causing other tests to fail mysteriously. Tests should "
"use ``working_dir`` or ``py.path``'s ``.as_cwd()`` instead of ``os.chdir`` "
"to avoid failing this check."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.no_chdir:8
msgid ""
"We assert that the working directory hasn't changed, unless the original wd "
"somehow ceased to exist."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.remove_whatever_it_is:1
msgid "Type-agnostic remove."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/conftest.py:docstring
#: of spack.test.conftest.repo_path:1
msgid "Session scoped RepoPath object pointing to the mock repository"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:96
msgid "spack.test.database module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/database.py:docstring
#: of spack.test.database:1
msgid ""
"These tests check the database is functioning properly, both in memory and "
"in its file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/database.py:docstring
#: of spack.test.database.test_005_db_exists:1
msgid "Make sure db cache file exists after creating."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/database.py:docstring
#: of spack.test.database.test_010_all_install_sanity:1
msgid "Ensure that the install layout reflects what we think it does."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/database.py:docstring
#: of spack.test.database.test_020_db_sanity:1
msgid "Make sure query() returns what's actually in the db."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/database.py:docstring
#: of spack.test.database.test_025_reindex:1
msgid "Make sure reindex works and ref counts are valid."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/database.py:docstring
#: of spack.test.database.test_040_ref_counts:1
msgid "Ensure that we got ref counts right when we read the DB."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/database.py:docstring
#: of spack.test.database.test_050_basic_query:1
msgid "Ensure querying database is consistent with what is installed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/database.py:docstring
#: of spack.test.database.test_add_to_upstream_after_downstream:1
msgid ""
"An upstream DB can add a package after it is installed in the downstream DB. "
"When a package is recorded as installed in both, the results should refer to "
"the downstream DB."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/database.py:docstring
#: of spack.test.database.usr_folder_exists:1
msgid ""
"The ``/usr`` folder is assumed to be existing in some tests. This fixture "
"makes it such that its existence is mocked, so we have no requirements on "
"the system running tests."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:104
msgid "spack.test.directory\\_layout module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/directory_layout.py:docstring
#: of spack.test.directory_layout:1
msgid "This test verifies that the Spack directory layout works properly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/directory_layout.py:docstring
#: of spack.test.directory_layout.layout_and_dir:1
msgid "Returns a directory layout and the corresponding directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/directory_layout.py:docstring
#: of spack.test.directory_layout.test_find:1
msgid "Test that finding specs within an install layout works."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/directory_layout.py:docstring
#: of spack.test.directory_layout.test_handle_unknown_package:1
msgid ""
"This test ensures that spack can at least do *some* operations with packages "
"that are installed but that it does not know about.  This is actually not "
"such an uncommon scenario with spack; it can happen when you switch from a "
"git branch where you're working on a new package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/directory_layout.py:docstring
#: of spack.test.directory_layout.test_handle_unknown_package:7
msgid ""
"This test ensures that the directory layout stores enough information about "
"installed packages' specs to uninstall or query them again if the package "
"goes away."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/directory_layout.py:docstring
#: of spack.test.directory_layout.test_read_and_write_spec:1
msgid ""
"This goes through each package in spack and creates a directory for it.  It "
"then ensures that the spec for the directory's installed package can be read "
"back in consistently, and finally that the directory can be removed by the "
"directory layout."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/directory_layout.py:docstring
#: of spack.test.directory_layout.test_yaml_directory_layout_parameters:1
msgid ""
"This tests the various parameters that can be used to configure the install "
"location"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:112
msgid "spack.test.environment\\_modifications module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/environment_modifications.py:docstring
#: of spack.test.environment_modifications.env:1
msgid "Returns an empty EnvironmentModifications object."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/environment_modifications.py:docstring
#: of spack.test.environment_modifications.files_to_be_sourced:1
msgid "Returns a list of files to be sourced"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/environment_modifications.py:docstring
#: of spack.test.environment_modifications.miscellaneous_paths:1
msgid "Returns a list of paths, including system ones."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/environment_modifications.py:docstring
#: of spack.test.environment_modifications.prepare_environment_for_tests:1
msgid ""
"Sets a few dummy variables in the current environment, that will be useful "
"for the tests below."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/environment_modifications.py:docstring
#: of spack.test.environment_modifications.test_append_flags:1
msgid "Tests appending to a value in the environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/environment_modifications.py:docstring
#: of spack.test.environment_modifications.test_extend:1
msgid ""
"Tests that we can construct a list of environment modifications starting "
"from another list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/environment_modifications.py:docstring
#: of spack.test.environment_modifications.test_extra_arguments:1
msgid "Tests that we can attach extra arguments to any command."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/environment_modifications.py:docstring
#: of spack.test.environment_modifications.test_filter_system_paths:1
msgid "Tests that the filtering of system paths works as expected."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/environment_modifications.py:docstring
#: of spack.test.environment_modifications.test_path_manipulation:1
msgid "Tests manipulating list of paths in the environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/environment_modifications.py:docstring
#: of spack.test.environment_modifications.test_set:1
msgid "Tests setting values in the environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/environment_modifications.py:docstring
#: of spack.test.environment_modifications.test_set_path:1
msgid "Tests setting paths in an environment variable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/environment_modifications.py:docstring
#: of spack.test.environment_modifications.test_source_files:1
msgid ""
"Tests the construction of a list of environment modifications that are the "
"result of sourcing a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/environment_modifications.py:docstring
#: of spack.test.environment_modifications.test_unset:1
msgid "Tests unsetting values in the environment."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:120
msgid "spack.test.flag\\_handlers module"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:128
msgid "spack.test.git\\_fetch module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/git_fetch.py:docstring
#: of spack.test.git_fetch.git_version:1
msgid "Tests GitFetchStrategy behavior for different git versions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/git_fetch.py:docstring
#: of spack.test.git_fetch.git_version:3
msgid ""
"GitFetchStrategy tries to optimize using features of newer git versions, but "
"needs to work with older git versions.  To ensure code paths for old "
"versions still work, we fake it out here and make it use the backward-"
"compatibility code paths with newer git versions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/git_fetch.py:docstring
#: of spack.test.git_fetch.test_fetch:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/hg_fetch.py:docstring
#: spack.test.hg_fetch.test_fetch:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/svn_fetch.py:docstring
#: spack.test.svn_fetch.test_fetch:1
msgid "Tries to:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/git_fetch.py:docstring
#: of spack.test.git_fetch.test_fetch:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/hg_fetch.py:docstring
#: spack.test.hg_fetch.test_fetch:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/svn_fetch.py:docstring
#: spack.test.svn_fetch.test_fetch:3
msgid ""
"Fetch the repo using a fetch strategy constructed with supplied args (they "
"depend on type_of_test)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/git_fetch.py:docstring
#: of spack.test.git_fetch.test_fetch:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/hg_fetch.py:docstring
#: spack.test.hg_fetch.test_fetch:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/svn_fetch.py:docstring
#: spack.test.svn_fetch.test_fetch:5
msgid "Check if the test_file is in the checked out repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/git_fetch.py:docstring
#: of spack.test.git_fetch.test_fetch:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/hg_fetch.py:docstring
#: spack.test.hg_fetch.test_fetch:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/svn_fetch.py:docstring
#: spack.test.svn_fetch.test_fetch:6
msgid "Assert that the repository is at the revision supplied."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/git_fetch.py:docstring
#: of spack.test.git_fetch.test_fetch:7
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/hg_fetch.py:docstring
#: spack.test.hg_fetch.test_fetch:7
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/svn_fetch.py:docstring
#: spack.test.svn_fetch.test_fetch:7
msgid ""
"Add and remove some files, then reset the repo, and ensure it's all there "
"again."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:136
msgid "spack.test.graph module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/graph.py:docstring
#: of spack.test.graph.test_ascii_graph_mpileaks:1
#: spack.test.graph.test_dynamic_dot_graph_mpileaks:1
msgid "Test dynamically graphing the mpileaks package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/graph.py:docstring
#: of spack.test.graph.test_static_graph_mpileaks:1
msgid "Test a static spack graph for a simple package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/graph.py:docstring
#: of spack.test.graph.test_topo_sort:1
msgid "Test topo sort gives correct order."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:144
msgid "spack.test.hg\\_fetch module"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:152
msgid "spack.test.install module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/install.py:docstring
#: of spack.test.install.test_installed_upstream:1
#: spack.test.install.test_installed_upstream_external:1
msgid ""
"Check that when a dependency package is recorded as installed in an upstream "
"database that it is not reinstalled."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:160
msgid "spack.test.make\\_executable module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/make_executable.py:docstring
#: of spack.test.make_executable:1
msgid "Tests for Spack's built-in parallel make support."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/make_executable.py:docstring
#: of spack.test.make_executable:3
msgid "This just tests whether the right args are getting passed to make."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/make_executable.py:docstring
#: of spack.test.make_executable.MakeExecutableTest:1
msgid "Bases: :class:`unittest.case.TestCase`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/make_executable.py:docstring
#: of spack.test.make_executable.MakeExecutableTest.setUp:1
msgid "Hook method for setting up the test fixture before exercising it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/make_executable.py:docstring
#: of spack.test.make_executable.MakeExecutableTest.tearDown:1
msgid "Hook method for deconstructing the test fixture after testing it."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:168
msgid "spack.test.mirror module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/mirror.py:docstring
#: of spack.test.mirror.set_up_package:1
msgid "Set up a mock package to be mirrored. Each package needs us to:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/mirror.py:docstring
#: of spack.test.mirror.set_up_package:4
msgid "Set up a mock repo/archive to fetch from."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/mirror.py:docstring
#: of spack.test.mirror.set_up_package:5
msgid "Point the package's version args at that repo."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:176
msgid "spack.test.module\\_parsing module"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:184
msgid "spack.test.multimethod module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/multimethod.py:docstring
#: of spack.test.multimethod:1
msgid "Test for multi_method dispatch."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/multimethod.py:docstring
#: of spack.test.multimethod.pkg_name:1
msgid "Make tests run on both multimethod and multimethod-inheritor."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/multimethod.py:docstring
#: of spack.test.multimethod.pkg_name:3
msgid ""
"This means we test all of our @when methods on a class that uses them "
"directly, AND on a class that inherits them."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:192
msgid "spack.test.namespace\\_trie module"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:200
msgid "spack.test.optional\\_deps module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/optional_deps.py:docstring
#: of spack.test.optional_deps.spec_and_expected:1
msgid "Parameters for the normalization test."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:208
msgid "spack.test.package\\_hash module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/package_hash.py:docstring
#: of spack.test.package_hash.test_all_same_but_archive_hash:1
msgid "Archive hash is not intended to be reflected in Package hash."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:216
msgid "spack.test.package\\_sanity module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/package_sanity.py:docstring
#: of spack.test.package_sanity:1
msgid "This test does sanity checks on Spack's builtin package database."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/package_sanity.py:docstring
#: of spack.test.package_sanity.check_repo:1
msgid "Get all packages in the builtin repo to make sure they work."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/package_sanity.py:docstring
#: of spack.test.package_sanity.test_all_versions_are_lowercase:1
msgid "Spack package names must be lowercase, and use `-` instead of `_`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/package_sanity.py:docstring
#: of
#: spack.test.package_sanity.test_all_virtual_packages_have_default_providers:1
msgid "All virtual packages must have a default provider explicitly set."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/package_sanity.py:docstring
#: of spack.test.package_sanity.test_docstring:1
msgid "Ensure that every package has a docstring."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/package_sanity.py:docstring
#: of spack.test.package_sanity.test_get_all_mock_packages:1
msgid "Get the mock packages once each too."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/package_sanity.py:docstring
#: of spack.test.package_sanity.test_get_all_packages:1
msgid "Get all packages once and make sure that works."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/package_sanity.py:docstring
#: of spack.test.package_sanity.test_no_fixme:1
msgid ""
"Packages should not contain any boilerplate such as FIXME or example.com."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/package_sanity.py:docstring
#: of spack.test.package_sanity.test_package_version_consistency:1
msgid "Make sure all versions on builtin packages can produce a fetcher."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:224
msgid "spack.test.packages module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/packages.py:docstring
#: of spack.test.packages.test_git_top_level:1
msgid "Ensure that top-level git attribute can be used as a default."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/packages.py:docstring
#: of spack.test.packages.test_git_url_top_level_conflicts:1
#: spack.test.packages.test_git_url_top_level_git_versions:1
msgid "Test git fetch strategy inference when url is specified with git."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/packages.py:docstring
#: of spack.test.packages.test_git_url_top_level_url_versions:1
msgid "Test URL fetch strategy inference when url is specified with git."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/packages.py:docstring
#: of spack.test.packages.test_hg_top_level:1
msgid "Ensure that top-level hg attribute can be used as a default."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/packages.py:docstring
#: of spack.test.packages.test_no_extrapolate_without_url:1
msgid "Verify that we can't extrapolate versions for non-URL packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/packages.py:docstring
#: of spack.test.packages.test_svn_top_level:1
msgid "Ensure that top-level svn attribute can be used as a default."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/packages.py:docstring
#: of spack.test.packages.test_two_vcs_fetchers_top_level:1
msgid "Verify conflict when two VCS strategies are specified together."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/packages.py:docstring
#: of spack.test.packages.test_urls_for_versions:1
msgid "Version directive without a 'url' argument should use default url."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:232
msgid "spack.test.packaging module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/packaging.py:docstring
#: of spack.test.packaging:1
msgid "This test checks the binary packaging infrastructure"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:240
msgid "spack.test.patch module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/patch.py:docstring
#: of spack.test.patch.check_multi_dependency_patch_specs:1
msgid "Validate patches on dependencies of patch-several-dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/patch.py:docstring
#: of spack.test.patch.test_conditional_patched_dependencies:1
msgid "Test whether conditional patched dependencies work."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/patch.py:docstring
#: of spack.test.patch.test_conditional_patched_deps_with_conditions:1
msgid "Test whether conditional patched dependencies with conditions work."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/patch.py:docstring
#: of spack.test.patch.test_multiple_patched_dependencies:1
msgid "Test whether multiple patched dependencies work."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/patch.py:docstring
#: of spack.test.patch.test_nested_directives:1
msgid "Ensure pkg data structures are set up properly by nested directives."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/patch.py:docstring
#: of spack.test.patch.test_patch_in_spec:1
msgid "Test whether patches in a package appear in the spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/patch.py:docstring
#: of spack.test.patch.test_patched_dependency:1
msgid "Test whether patched dependencies work."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/patch.py:docstring
#: of spack.test.patch.test_write_and_read_sub_dags_with_patched_deps:1
msgid ""
"Test whether patched dependencies are still correct after writing and "
"reading a sub-DAG of a concretized Spec."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:248
msgid "spack.test.pattern module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/pattern.py:docstring
#: of spack.test.pattern.composite:1
msgid ""
"Returns a composite that contains an instance of `implementation(1)` and one "
"of `implementation(2)`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/pattern.py:docstring
#: of spack.test.pattern.implementation:1
msgid "Returns an implementation of the interface"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/pattern.py:docstring
#: of spack.test.pattern.interface:1
msgid "Returns the interface class for the composite."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:256
msgid "spack.test.permissions module"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:264
msgid "spack.test.provider\\_index module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/provider_index.py:docstring
#: of spack.test.provider_index:1
msgid "Tests for provider index cache files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/provider_index.py:docstring
#: of spack.test.provider_index:3
msgid "Tests assume that mock packages provide this::"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:272
msgid "spack.test.python\\_version module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/python_version.py:docstring
#: of spack.test.python_version:1
msgid "Check that Spack complies with minimum supported python versions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/python_version.py:docstring
#: of spack.test.python_version:3
msgid ""
"We ensure that all Spack files work with Python2 >= 2.6 and Python3 >= 3.0."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/python_version.py:docstring
#: of spack.test.python_version:5
msgid ""
"We'd like to drop 2.6 support at some point, but there are still many HPC "
"systems that ship with RHEL6/CentOS 6, which have Python 2.6 as the default "
"version.  Once those go away, we can likely drop 2.6 and increase the "
"minimum supported Python 3 version, as well."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/python_version.py:docstring
#: of spack.test.python_version.check_python_versions:1
msgid "Check that a set of Python files works with supported Ptyhon versions"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/python_version.py:docstring
#: of spack.test.python_version.pyfiles:1
msgid "Generator that yields all the python files in the search paths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/python_version.py:docstring
#: of spack.test.python_version.pyfiles:3
msgid "list of paths to search for python files"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/python_version.py:docstring
#: of spack.test.python_version.pyfiles:5
msgid "file paths to exclude from search"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/python_version.py:docstring
#: of spack.test.python_version.pyfiles:0
msgid "Yields"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/python_version.py:docstring
#: of spack.test.python_version.pyfiles:8
msgid "python files in the search path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/python_version.py:docstring
#: of spack.test.python_version.test_core_module_compatibility:1
msgid "Test that all core spack modules work with supported Python versions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/python_version.py:docstring
#: of spack.test.python_version.test_package_module_compatibility:1
msgid "Test that all spack packages work with supported Python versions."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:280
msgid "spack.test.relocate module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/relocate.py:docstring
#: of spack.test.relocate.source_file:1
msgid "Returns the path to a source file of a relocatable executable."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:288
msgid "spack.test.repo module"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:296
msgid "spack.test.sbang module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/sbang.py:docstring
#: of spack.test.sbang:1
msgid "Test that Spack's shebang filtering works correctly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/sbang.py:docstring
#: of spack.test.sbang.ScriptDirectory:1
msgid "Directory full of test scripts to run sbang instrumentation on."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:304
msgid "spack.test.schema module"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:312
msgid "spack.test.spack\\_yaml module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spack_yaml.py:docstring
#: of spack.test.spack_yaml:1
msgid "Test Spack's custom YAML format."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spack_yaml.py:docstring
#: of spack.test.spack_yaml.data:1
msgid "Returns the data loaded from a test file"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:320
msgid "spack.test.spec\\_dag module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: of spack.test.spec_dag:1
msgid "These tests check Spec DAG operations using dummy packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: of spack.test.spec_dag.TestSpecDag.check_diamond_deptypes:1
msgid "Validate deptypes in dt-diamond spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: of spack.test.spec_dag.TestSpecDag.check_diamond_deptypes:3
msgid ""
"This ensures that concretization works properly when two packages depend on "
"the same dependency in different ways."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: of spack.test.spec_dag.TestSpecDag.test_concretize_deptypes:1
msgid "Ensure that dependency types are preserved after concretization."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: of spack.test.spec_dag.TestSpecDag.test_construct_spec_with_deptypes:1
msgid ""
"Ensure that it is possible to construct a spec with explicit dependency "
"types."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: of spack.test.spec_dag.TestSpecDag.test_copy_deptypes:1
msgid "Ensure that dependency types are preserved by spec copy."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: of spack.test.spec_dag.TestSpecDag.test_edge_traversals:1
#: spack.test.spec_dag.TestSpecDag.test_traversal_directions:1
msgid "Make sure child and parent traversals of specs work."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: of spack.test.spec_dag.TestSpecDag.test_hash_bits:1
msgid "Ensure getting first n bits of a base32-encoded DAG hash works."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: of spack.test.spec_dag.TestSpecDag.test_normalize_diamond_deptypes:1
msgid ""
"Ensure that dependency types are preserved even if the same thing is "
"depended on in two different ways."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: of spack.test.spec_dag.TestSpecDag.test_normalize_twice:1
msgid ""
"Make sure normalize can be run twice on the same spec, and that it is "
"idempotent."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: of spack.test.spec_dag.saved_deps:1
msgid "Returns a dictionary to save the dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: of spack.test.spec_dag.set_dependency:1
msgid ""
"Returns a function that alters the dependency information for a package in "
"the ``saved_deps`` fixture."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: of spack.test.spec_dag.test_conditional_dep_with_user_constraints:1
msgid ""
"This sets up packages X->Y such that X depends on Y conditionally. It then "
"constructs a Spec with X but with no constraints on X, so that the initial "
"normalization pass cannot determine whether the constraints are met to add "
"the dependency; this checks whether a user-specified constraint on Y is "
"applied properly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: of spack.test.spec_dag.test_test_deptype:1
msgid ""
"Ensure that test-only dependencies are only included for specified packages "
"in the following spec DAG::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_dag.py:docstring
#: of spack.test.spec_dag.test_test_deptype:10
msgid "w->y deptypes are (link, build), w->x and y->z deptypes are (test)"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:328
msgid "spack.test.spec\\_semantics module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_semantics.py:docstring
#: of spack.test.spec_semantics.TestSpecSematics:1
msgid ""
"This tests satisfies(), constrain() and other semantic operations on specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_semantics.py:docstring
#: of
#: spack.test.spec_semantics.TestSpecSematics.test_satisfies_namespaced_dep:1
msgid ""
"Ensure spec from same or unspecified namespace satisfies namespace "
"constraint."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_semantics.py:docstring
#: of
#: spack.test.spec_semantics.TestSpecSematics.test_satisfies_same_spec_with_different_hash:1
msgid "Ensure that concrete specs are matched *exactly* by hash."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_semantics.py:docstring
#: of
#: spack.test.spec_semantics.TestSpecSematics.test_satisfies_single_valued_variant:1
msgid ""
"Tests that the case reported in https://github.com/spack/spack/"
"pull/2386#issuecomment-282147639 is handled correctly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_semantics.py:docstring
#: of
#: spack.test.spec_semantics.TestSpecSematics.test_satisfies_virtual_dep_with_virtual_constraint:1
msgid ""
"Ensure we can satisfy virtual constraints when there are multiple vdep "
"providers in the specs."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:336
msgid "spack.test.spec\\_set module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_set.py:docstring
#: of spack.test.spec_set.test_spec_set_basic:1
msgid ""
"The \"include\" isn't required, but if it is present, we should only see "
"specs mentioned there.  Also, if we include cdash and project properties, "
"those should be captured and stored on the resulting CombinatorialSpecSet as "
"attributes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_set.py:docstring
#: of spack.test.spec_set.test_spec_set_exclude:1
msgid ""
"The exclude property isn't required, but if it appears, any specs mentioned "
"there should not appear in the output specs"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_set.py:docstring
#: of spack.test.spec_set.test_spec_set_get_cdash_array:1
msgid "Make sure we can handle multiple cdash sites in a list"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_set.py:docstring
#: of spack.test.spec_set.test_spec_set_include_exclude_conflict:1
msgid "Exclude should override include"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_set.py:docstring
#: of spack.test.spec_set.test_spec_set_include_limited_packages:1
msgid ""
"If we see the include key, it is a filter and only the specs mentioned there "
"should actually be included."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_set.py:docstring
#: of spack.test.spec_set.test_spec_set_no_include:1
msgid ""
"Make sure that without any exclude or include, we get the full cross- "
"product of specs/versions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_set.py:docstring
#: of spack.test.spec_set.test_spec_set_packages_no_matrix:1
msgid ""
"The matrix property is required, make sure we error out if it is missing"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_set.py:docstring
#: of spack.test.spec_set.test_spec_set_simple_spec_list:1
msgid ""
"Make sure we can handle the slightly more concise syntax where we include "
"the package name/version together and skip the extra keys in the dictionary."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_set.py:docstring
#: of spack.test.spec_set.test_spec_set_with_specs:1
msgid "Make sure we only see the specs mentioned in the include"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:344
msgid "spack.test.spec\\_syntax module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_syntax.py:docstring
#: of spack.test.spec_syntax.TestSpecSyntax.check_lex:1
msgid "Check that the provided spec parses to the provided token list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_syntax.py:docstring
#: of spack.test.spec_syntax.TestSpecSyntax.check_parse:1
msgid "Assert that the provided spec is able to be parsed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_syntax.py:docstring
#: of spack.test.spec_syntax.TestSpecSyntax.check_parse:3
msgid ""
"If this is called with one argument, it assumes that the string is canonical "
"(i.e., no spaces and ~ instead of - for variants) and that it will convert "
"back to the string it came from."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_syntax.py:docstring
#: of spack.test.spec_syntax.TestSpecSyntax.check_parse:8
msgid ""
"If this is called with two arguments, the first argument is the expected "
"canonical form and the second is a non-canonical input to be parsed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_syntax.py:docstring
#: of spack.test.spec_syntax.TestSpecSyntax.test_nonexistent_hash:1
msgid "Ensure we get errors for nonexistant hashes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_syntax.py:docstring
#: of spack.test.spec_syntax.TestSpecSyntax.test_redundant_spec:1
msgid "Check that redundant spec constraints raise errors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_syntax.py:docstring
#: of spack.test.spec_syntax.TestSpecSyntax.test_redundant_spec:3
msgid ""
"TODO (TG): does this need to be an error? Or should concrete specs only "
"raise errors if constraints cause a contradiction?"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:352
msgid "spack.test.spec\\_yaml module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_yaml.py:docstring
#: of spack.test.spec_yaml:1
msgid "Test YAML serialization for specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_yaml.py:docstring
#: of spack.test.spec_yaml:3
msgid "YAML format preserves DAG information in the spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_yaml.py:docstring
#: of spack.test.spec_yaml.reverse_all_dicts:1
msgid "Descend into data and reverse all the dictionaries"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_yaml.py:docstring
#: of
#: spack.test.spec_yaml.test_ordered_read_not_required_for_consistent_dag_hash:1
msgid "Make sure ordered serialization isn't required to preserve hashes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_yaml.py:docstring
#: of
#: spack.test.spec_yaml.test_ordered_read_not_required_for_consistent_dag_hash:3
msgid ""
"For consistent hashes, we require that YAML and json documents have their "
"keys serialized in a deterministic order. However, we don't want to require "
"them to be serialized in order. This ensures that is not required."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_yaml.py:docstring
#: of spack.test.spec_yaml.test_using_ordered_dict:1
msgid "Checks that dicts are ordered"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/spec_yaml.py:docstring
#: of spack.test.spec_yaml.test_using_ordered_dict:3
msgid ""
"Necessary to make sure that dag_hash is stable across python versions and "
"processes."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:360
msgid "spack.test.stage module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/stage.py:docstring
#: of spack.test.stage:1
msgid "Test that the Stage class works correctly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/stage.py:docstring
#: of spack.test.stage.check_destroy:1
msgid "Figure out whether a stage was destroyed correctly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/stage.py:docstring
#: of spack.test.stage.check_setup:1
msgid "Figure out whether a stage was set up correctly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/stage.py:docstring
#: of spack.test.stage.failing_fetch_strategy:1
msgid "Returns a fetch strategy that fails."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/stage.py:docstring
#: of spack.test.stage.failing_search_fn:1
msgid "Returns a search function that fails! Always!"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/stage.py:docstring
#: of spack.test.stage.get_stage_path:1
msgid ""
"Figure out where a stage should be living. This depends on whether it's "
"named."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/stage.py:docstring
#: of spack.test.stage.mock_archive:1
msgid "Creates a mock archive with the structure expected by the tests"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/stage.py:docstring
#: of spack.test.stage.search_fn:1
msgid "Returns a search function that always succeeds."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/stage.py:docstring
#: of spack.test.stage.tmpdir_for_stage:1
msgid "Uses a temporary directory for staging"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:368
msgid "spack.test.svn\\_fetch module"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:376
msgid "spack.test.tengine module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/tengine.py:docstring
#: of spack.test.tengine.TestContext.C:1
msgid "Bases: :class:`spack.test.tengine.A`, :class:`spack.test.tengine.B`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/tengine.py:docstring
#: of spack.test.tengine.TestContext.test_to_dict:1
msgid ""
"Tests that all the context properties in a hierarchy are considered when "
"building the context dictionary."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/tengine.py:docstring
#: of spack.test.tengine.TestTengineEnvironment.test_template_retrieval:1
msgid "Tests the template retrieval mechanism hooked into config files"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:384
msgid "spack.test.test\\_activations module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/test_activations.py:docstring
#: of spack.test.test_activations.test_python_ignore_namespace_init_conflict:1
msgid ""
"Test the view update logic in PythonPackage ignores conflicting instances of "
"__init__ for packages which are in the same namespace."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/test_activations.py:docstring
#: of spack.test.test_activations.test_python_keep_namespace_init:1
msgid ""
"Test the view update logic in PythonPackage keeps the namespace __init__ "
"file as long as one package in the namespace still exists."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/test_activations.py:docstring
#: of spack.test.test_activations.test_python_namespace_conflict:1
msgid ""
"Test the view update logic in PythonPackage reports an error when two python "
"extensions with different namespaces have a conflicting __init__ file."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:392
msgid "spack.test.url\\_fetch module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/url_fetch.py:docstring
#: of spack.test.url_fetch.test_fetch:1
msgid "Fetch an archive and make sure we can checksum it."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:400
msgid "spack.test.url\\_parse module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/url_parse.py:docstring
#: of spack.test.url_parse:1
msgid ""
"Tests Spack's ability to parse the name and version of a package based on "
"its URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/url_parse.py:docstring
#: of spack.test.url_parse.test_url_parse_offset:1
msgid "Tests that the name, version and offsets are computed correctly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/url_parse.py:docstring
#: of spack.test.url_parse.test_url_parse_offset:3
msgid "expected name"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/url_parse.py:docstring
#: of spack.test.url_parse.test_url_parse_offset:5
msgid "name offset"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/url_parse.py:docstring
#: of spack.test.url_parse.test_url_parse_offset:7
msgid "expected version"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/url_parse.py:docstring
#: of spack.test.url_parse.test_url_parse_offset:9
msgid "version offset"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/url_parse.py:docstring
#: of spack.test.url_parse.test_url_parse_offset:11
msgid "url to be parsed"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:408
msgid "spack.test.url\\_substitution module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/url_substitution.py:docstring
#: of spack.test.url_substitution:1
msgid "Tests Spack's ability to substitute a different version into a URL."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:416
msgid "spack.test.variant module"
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:424
msgid "spack.test.versions module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/versions.py:docstring
#: of spack.test.versions:1
msgid ""
"These version tests were taken from the RPM source code. We try to maintain "
"compatibility with RPM's version semantics where it makes sense."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/versions.py:docstring
#: of spack.test.versions.assert_canonical:1
msgid "Asserts that a redundant list is reduced to canonical form."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/versions.py:docstring
#: of spack.test.versions.assert_does_not_satisfy:1
msgid "Asserts that 'v1' does not satisfy 'v2'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/versions.py:docstring
#: of spack.test.versions.assert_in:1
msgid "Asserts that 'needle' is in 'haystack'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/versions.py:docstring
#: of spack.test.versions.assert_no_overlap:1
msgid "Asserts that two version ranges do not overlap."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/versions.py:docstring
#: of spack.test.versions.assert_not_in:1
msgid "Asserts that 'needle' is not in 'haystack'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/versions.py:docstring
#: of spack.test.versions.assert_overlaps:1
msgid "Asserts that two version ranges overlaps."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/versions.py:docstring
#: of spack.test.versions.assert_satisfies:1
msgid "Asserts that 'v1' satisfies 'v2'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/versions.py:docstring
#: of spack.test.versions.assert_ver_eq:1
msgid "Asserts the results of comparisons when 'a' is equal to 'b'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/versions.py:docstring
#: of spack.test.versions.assert_ver_gt:1
msgid "Asserts the results of comparisons when 'a' is greater than 'b'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/versions.py:docstring
#: of spack.test.versions.assert_ver_lt:1
msgid "Asserts the results of comparisons when 'a' is less than 'b'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/versions.py:docstring
#: of spack.test.versions.check_intersection:1
msgid "Asserts that 'a' intersect 'b' == 'expected'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/versions.py:docstring
#: of spack.test.versions.check_union:1
msgid "Asserts that 'a' union 'b' == 'expected'."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:432
msgid "spack.test.views module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/views.py:docstring
#: of spack.test.views.test_global_activation:1
msgid ""
"This test ensures that views which are maintained inside of an extendee "
"package's prefix are maintained as expected and are compatible with global "
"activations prior to #7152."
msgstr ""

#: ../spack/lib/spack/docs/spack.test.rst:440
msgid "spack.test.web module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/test/web.py:docstring of
#: spack.test.web:1
msgid "Tests for web.py."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.imp.rst:2
msgid "spack.util.imp package"
msgstr ""

#: ../spack/lib/spack/docs/spack.util.imp.rst:8
msgid "spack.util.imp.imp\\_importer module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/imp_importer.py:docstring
#: of spack.util.imp.imp_importer:1
msgid "Implementation of Spack imports that uses imp underneath."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/imp_importer.py:docstring
#: of spack.util.imp.imp_importer:3
msgid ""
"``imp`` is deprecated in newer versions of Python, but is the only option in "
"Python 2.6."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/imp_importer.py:docstring
#: of spack.util.imp.imp_importer.load_source:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/importlib_importer.py:docstring
#: spack.util.imp.importlib_importer.load_source:1
msgid "Import a Python module from source."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/imp_importer.py:docstring
#: of spack.util.imp.imp_importer.load_source:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/importlib_importer.py:docstring
#: spack.util.imp.importlib_importer.load_source:3
msgid "Load the source file and add it to ``sys.modules``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/imp_importer.py:docstring
#: of spack.util.imp.imp_importer.load_source:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/importlib_importer.py:docstring
#: spack.util.imp.importlib_importer.load_source:5
msgid "full name of the module to be loaded"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/imp_importer.py:docstring
#: of spack.util.imp.imp_importer.load_source:7
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/importlib_importer.py:docstring
#: spack.util.imp.importlib_importer.load_source:7
msgid "path to the file that should be loaded"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/imp_importer.py:docstring
#: of spack.util.imp.imp_importer.load_source:9
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/importlib_importer.py:docstring
#: spack.util.imp.importlib_importer.load_source:9
msgid ""
"some optional code to prepend to the loaded module; e.g., can be used to "
"inject import statements"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/imp_importer.py:docstring
#: of spack.util.imp.imp_importer.load_source:13
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/importlib_importer.py:docstring
#: spack.util.imp.importlib_importer.load_source:13
msgid "the loaded module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/imp_importer.py:docstring
#: of spack.util.imp.imp_importer.prepend_open:1
msgid "Open a file for reading, but prepend with some text prepended"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/imp_importer.py:docstring
#: of spack.util.imp.imp_importer.prepend_open:3
msgid ""
"Arguments are same as for ``open()``, with one keyword argument, ``text``, "
"specifying the text to prepend."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/imp_importer.py:docstring
#: of spack.util.imp.imp_importer.prepend_open:6
msgid ""
"We have to write and read a tempfile for the ``imp``-based importer, as the "
"``file`` argument to ``imp.load_source()`` requires a low-level file handle."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/imp_importer.py:docstring
#: of spack.util.imp.imp_importer.prepend_open:10
msgid ""
"See the ``importlib``-based importer for a faster way to do this in later "
"versions of python."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.imp.rst:16
msgid "spack.util.imp.importlib\\_importer module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/importlib_importer.py:docstring
#: of spack.util.imp.importlib_importer:1
msgid "Implementation of Spack imports that uses importlib underneath."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/importlib_importer.py:docstring
#: of spack.util.imp.importlib_importer:3
msgid "``importlib`` is only fully implemented in Python 3."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/importlib_importer.py:docstring
#: of spack.util.imp.importlib_importer.PrependFileLoader:1
msgid "Bases: :class:`_frozen_importlib_external.SourceFileLoader`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/importlib_importer.py:docstring
#: of spack.util.imp.importlib_importer.PrependFileLoader.get_data:1
msgid "Return the data from path as raw bytes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/__init__.py:docstring
#: of spack.util.imp:1
msgid "Consolidated module for all imports done by Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/__init__.py:docstring
#: of spack.util.imp:3
msgid ""
"Many parts of Spack have to import Python code. This utility package wraps "
"Spack's interface with Python's import system."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/__init__.py:docstring
#: of spack.util.imp:6
msgid ""
"We do this because Python's import system is confusing and changes from "
"Python version to Python version, and we should be able to adapt our "
"approach to the underlying implementation."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/imp/__init__.py:docstring
#: of spack.util.imp:10
msgid ""
"Currently, this uses ``importlib.machinery`` where available and ``imp`` "
"when ``importlib`` is not completely usable."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:2
msgid "spack.util package"
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:15
msgid "spack.util.compression module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/compression.py:docstring
#: of spack.util.compression.decompressor_for:1
msgid "Get the appropriate decompressor for a path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/compression.py:docstring
#: of spack.util.compression.extension:1
msgid "Get the archive extension for a path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/compression.py:docstring
#: of spack.util.compression.strip_extension:1
msgid ""
"Get the part of a path that does not include its compressed type extension."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:23
msgid "spack.util.crypto module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/crypto.py:docstring
#: of spack.util.crypto.Checker:1
msgid ""
"A checker checks files against one particular hex digest. It will "
"automatically determine what hashing algorithm to used based on the length "
"of the digest it's initialized with.  e.g., if the digest is 32 hex "
"characters long this will use md5."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/crypto.py:docstring
#: of spack.util.crypto.Checker:7
msgid ""
"Example: know your tarball should hash to 'abc123'.  You want to check files "
"against this.  You would use this class like so::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/crypto.py:docstring
#: of spack.util.crypto.Checker:14
msgid ""
"After the call to check, the actual checksum is available in checker.sum, in "
"case it's needed for error output."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/crypto.py:docstring
#: of spack.util.crypto.Checker:17
msgid ""
"You can trade read performance and memory usage by adjusting the block_size "
"optional arg.  By default it's a 1MB (2**20 bytes) buffer."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/crypto.py:docstring
#: of spack.util.crypto.Checker.check:1
msgid ""
"Read the file with the specified name and check its checksum against self."
"hexdigest.  Return True if they match, False otherwise.  Actual checksum is "
"stored in self.sum."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/crypto.py:docstring
#: of spack.util.crypto.Checker.hash_name:1
msgid "Get the name of the hash function this Checker is using."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/crypto.py:docstring
#: of spack.util.crypto.bit_length:1
msgid "Number of bits required to represent an integer in binary."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/crypto.py:docstring
#: of spack.util.crypto.checksum:1
msgid ""
"Returns a hex digest of the filename generated using an algorithm from "
"hashlib."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/crypto.py:docstring
#: of spack.util.crypto.hash_algo_for_digest:1
msgid "Gets name of the hash algorithm for a hex digest."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/crypto.py:docstring
#: of spack.util.crypto.hash_fun_for_algo:1
msgid "Get a function that can perform the specified hash algorithm."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/crypto.py:docstring
#: of spack.util.crypto.hash_fun_for_digest:1
msgid "Gets a hash function corresponding to a hex digest."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/crypto.py:docstring
#: of spack.util.crypto.hashes:1
msgid ""
"Set of hash algorithms that Spack can use, mapped to digest size in bytes"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/crypto.py:docstring
#: of spack.util.crypto.prefix_bits:1
msgid "Return the first <bits> bits of a byte array as an integer."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:31
msgid "spack.util.debug module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/debug.py:docstring
#: of spack.util.debug:1
msgid "Debug signal handler: prints a stack trace and enters interpreter."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/debug.py:docstring
#: of spack.util.debug:3
msgid ""
"``register_interrupt_handler()`` enables a ctrl-C handler that prints a "
"stack trace and drops the user into an interpreter."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/debug.py:docstring
#: of spack.util.debug.debug_handler:1
msgid ""
"Interrupt running process, and provide a python prompt for interactive "
"debugging."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/debug.py:docstring
#: of spack.util.debug.register_interrupt_handler:1
msgid "Print traceback and enter an interpreter on Ctrl-C"
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:39
msgid "spack.util.editor module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/editor.py:docstring
#: of spack.util.editor:1
msgid "Module for finding the user's preferred text editor."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/editor.py:docstring
#: of spack.util.editor:3
msgid ""
"Defines one function, editor(), which invokes the editor defined by the "
"user's VISUAL environment variable if set. We fall back to the editor "
"defined by the EDITOR environment variable if VISUAL is not set or the "
"specified editor fails (e.g. no DISPLAY for a graphical editor). If neither "
"variable is set, we fall back to one of several common editors, raising an "
"EnvironmentError if we are unable to find one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/editor.py:docstring
#: of spack.util.editor.editor:1
msgid "Invoke the user's editor."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/editor.py:docstring
#: of spack.util.editor.editor:3
msgid "This will try to execute the following, in order:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/editor.py:docstring
#: of spack.util.editor.editor:5
msgid "$VISUAL <args>    # the \"visual\" editor (per POSIX)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/editor.py:docstring
#: of spack.util.editor.editor:6
msgid "$EDITOR <args>    # the regular editor (per POSIX)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/editor.py:docstring
#: of spack.util.editor.editor:7
msgid "some default editor (see ``_default_editors``) with <args>"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/editor.py:docstring
#: of spack.util.editor.editor:9
msgid ""
"If an environment variable isn't defined, it is skipped.  If it points to "
"something that can't be executed, we'll print a warning. And if we can't "
"find anything that can be executed after searching the full list above, "
"we'll raise an error."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/editor.py:docstring
#: of spack.util.editor.editor:14
msgid "args to pass to editor"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/editor.py:docstring
#: of spack.util.editor.editor:18
msgid "_exec_func (function): invoke this function instead of ``os.execv()``"
msgstr ""

# 3a8d6f12cb9f4c20814ced54e413d7b2
#: ../spack/lib/spack/docs/spack.util.rst:47
msgid "spack.util.environment module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment:1
msgid "Utilities for setting and modifying environment variables."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.AppendFlagsEnv:1
#: spack.util.environment.AppendPath:1 spack.util.environment.PrependPath:1
#: spack.util.environment.RemovePath:1 spack.util.environment.SetEnv:1
#: spack.util.environment.SetPath:1
msgid "Bases: :class:`spack.util.environment.NameValueModifier`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.DeprioritizeSystemPaths:1
#: spack.util.environment.PruneDuplicatePaths:1
#: spack.util.environment.UnsetEnv:1
msgid "Bases: :class:`spack.util.environment.NameModifier`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications:1
msgid "Keeps track of requests to modify the current environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications:3
msgid ""
"Each call to a method to modify the environment stores the extra information "
"on the caller in the request:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications:6
msgid "'filename' : filename of the module where the caller is defined"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications:7
msgid "'lineno': line number where the request occurred"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications:8
msgid "'context' : line of code that issued the request that failed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.append_flags:1
msgid "Stores in the current object a request to append to an env variable"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.append_flags:3
msgid "name of the environment variable to be appended to"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.append_flags:4
msgid "value to append to the environment variable"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.append_flags:6
msgid "Appends with spaces separating different additions to the variable"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.append_path:1
msgid "Stores a request to append a path to a path list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.append_path:3
#: spack.util.environment.EnvironmentModifications.prepend_path:3
#: spack.util.environment.EnvironmentModifications.remove_path:3
msgid "name of the path list in the environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.append_path:4
msgid "path to be appended"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.apply_modifications:1
msgid "Applies the modifications and clears the list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.clear:1
msgid "Clears the current list of modifications"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of
#: spack.util.environment.EnvironmentModifications.deprioritize_system_paths:1
msgid ""
"Stores a request to deprioritize system paths in a path list, otherwise "
"preserving the order."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of
#: spack.util.environment.EnvironmentModifications.deprioritize_system_paths:4
#: spack.util.environment.EnvironmentModifications.prune_duplicate_paths:4
msgid "name of the path list in the environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.from_sourcing_file:1
msgid "Returns modifications that would be made by sourcing a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.from_sourcing_file:3
msgid "The file to source"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.from_sourcing_file:5
msgid "Arguments to pass on the command line"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.from_sourcing_file:8
msgid "The shell to use (default: ``bash``)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.from_sourcing_file:10
msgid "Options passed to the shell (default: ``-c``)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.from_sourcing_file:12
msgid "The command to run (default: ``source``)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.from_sourcing_file:14
msgid "Redirect used to suppress output of command (default: ``&> /dev/null``)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.from_sourcing_file:17
msgid ""
"Operator used to execute a command only when the previous command succeeds "
"(default: ``&&``)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.from_sourcing_file:20
msgid "Ignore any modifications of these variables (default: [])"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.from_sourcing_file:23
msgid ""
"Always respect modifications of these variables (default: []). Has "
"precedence over blacklist."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.from_sourcing_file:26
msgid ""
"In addition to removing empty entries, also remove duplicate entries "
"(default: False)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.from_sourcing_file:30
msgid ""
"an object that, if executed, has     the same effect on the environment as "
"sourcing the file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.from_sourcing_file:32
msgid "an object that, if executed, has"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.from_sourcing_file:33
msgid "the same effect on the environment as sourcing the file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.group_by_name:1
msgid "Returns a dict of the modifications grouped by variable name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.group_by_name:3
msgid ""
"dict mapping the environment variable name to the modifications to be done "
"on it"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.prepend_path:1
msgid "Same as `append_path`, but the path is pre-pended."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.prepend_path:4
msgid "path to be pre-pended"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.prune_duplicate_paths:1
msgid ""
"Stores a request to remove duplicates from a path list, otherwise preserving "
"the order."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.remove_path:1
msgid "Stores a request to remove a path from a path list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.remove_path:4
msgid "path to be removed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.set:1
msgid "Stores a request to set an environment variable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.set:3
#: spack.util.environment.EnvironmentModifications.unset:3
msgid "name of the environment variable to be set"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.set:4
msgid "value of the environment variable"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.set_path:1
msgid "Stores a request to set a path generated from a list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.set_path:3
msgid "name o the environment variable to be set."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.set_path:4
msgid "elements of the path to set."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.shell_modifications:1
msgid "Return shell code to apply the modifications and clears the list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.EnvironmentModifications.unset:1
msgid "Stores a request to unset an environment variable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.concatenate_paths:1
msgid ""
"Concatenates an iterable of paths into a string of paths separated by "
"separator, defaulting to colon."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.concatenate_paths:4
msgid "iterable of paths"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.concatenate_paths:5
msgid "the separator to use, default ':'"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.concatenate_paths:7
msgid "string"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.deprioritize_system_paths:1
msgid "Put system paths at the end of paths, otherwise preserving order."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.dump_environment:1
msgid "Dump an environment dictionary to a source-able file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.filter_environment_blacklist:1
msgid ""
"Generator that filters out any change to environment variables present in "
"the input list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.filter_environment_blacklist:4
#: spack.util.environment.validate:7
msgid "list of environment modifications"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.filter_environment_blacklist:5
msgid "list of variable names to be filtered"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.filter_environment_blacklist:7
msgid "items in env if they are not in variables"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.filter_system_paths:1
msgid "Return only paths that are not system paths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.inspect_path:1
msgid ""
"Inspects ``root`` to search for the subdirectories in ``inspections``. Adds "
"every path found to a list of prepend-path commands and returns it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.inspect_path:4
msgid "absolute path where to search for subdirectories"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.inspect_path:6
msgid ""
"maps relative paths to a list of environment variables that will be modified "
"if the path exists. The modifications are not performed immediately, but "
"stored in a command object that is returned to client"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.inspect_path:11
msgid ""
"optional callable. If present it must accept an absolute path and return "
"True if it should be excluded from the inspection"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.inspect_path:18
msgid ""
"The following lines execute an inspection in ``/usr`` to search for ``/usr/"
"include`` and ``/usr/lib64``. If found we want to prepend ``/usr/include`` "
"to ``CPATH`` and ``/usr/lib64`` to ``MY_LIB64_PATH``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.inspect_path:36
msgid ""
"instance of EnvironmentModifications containing the requested modifications"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.is_system_path:1
msgid ""
"Predicate that given a path returns True if it is a system path, False "
"otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.is_system_path:4
msgid "path to a directory"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.path_put_first:1
msgid ""
"Puts the provided directories first in the path, adding them if they're not "
"already there."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.pickle_environment:1
msgid "Pickle an environment dictionary to a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.preserve_environment:1
msgid ""
"Ensures that the value of the environment variables passed as arguments is "
"the same before entering to the context manager and after exiting it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.preserve_environment:5
msgid ""
"Variables that are unset before entering the context manager will be "
"explicitly unset on exit."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.preserve_environment:8
msgid "list of environment variables to be preserved"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.prune_duplicate_paths:1
msgid "Returns the paths with duplicates removed, order preserved."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.set_env:1
msgid "Temporarily sets and restores environment variables."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.set_env:3
msgid "Variables can be set as keyword arguments to this function."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.set_or_unset_not_first:1
msgid ""
"Check if we are going to set or unset something after other modifications "
"have already been requested."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.validate:1
msgid ""
"Validates the environment modifications to check for the presence of "
"suspicious patterns. Prompts a warning for everything that was found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/environment.py:docstring
#: of spack.util.environment.validate:4
msgid ""
"Current checks: - set or unset variables after other changes on the same "
"variable"
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:55
msgid "spack.util.executable module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.Executable:1
msgid "Class representing a program that can be run on the command line."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.Executable.add_default_arg:1
msgid "Add a default argument to the command."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.Executable.add_default_env:1
msgid "Set an environment variable when the command is run."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.Executable.add_default_env:3
msgid "The environment variable to set"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.Executable.add_default_env:4
msgid "The value to set it to"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.Executable.command:1
msgid "The command-line string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.Executable.command:3
msgid "The executable and default arguments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.Executable.name:1
msgid "The executable name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.Executable.name:3
msgid "The basename of the executable"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.Executable.path:1
msgid "The path to the executable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.Executable.path:3
msgid "The path to the executable"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.which:1
msgid "Finds an executable in the path like command-line which."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.which:3
msgid ""
"If given multiple executables, returns the first one that is found. If no "
"executables are found, returns None."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.which:6
msgid "One or more executables to search for"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.which:9
msgid "The path to search. Defaults to ``PATH``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.which:11
msgid "If set to True, raise an error if executable not found"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.which:14
msgid "The first executable that is found in the path"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/executable.py:docstring
#: of spack.util.executable.ProcessError:1
msgid "ProcessErrors are raised when Executables exit with an error code."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:63
msgid "spack.util.file\\_cache module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: of spack.util.file_cache.FileCache:1
msgid "This class manages cached data in the filesystem."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: of spack.util.file_cache.FileCache:3
msgid ""
"Cache files are fetched and stored by unique keys.  Keys can be relative "
"paths, so that there can be some hierarchy in the cache."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: of spack.util.file_cache.FileCache:6
msgid ""
"The FileCache handles locking cache files for reading and writing, so client "
"code need not manage locks for cache entries."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: of spack.util.file_cache.FileCache.cache_path:1
msgid "Path to the file in the cache for a particular key."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: of spack.util.file_cache.FileCache.destroy:1
msgid "Remove all files under the cache root."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: of spack.util.file_cache.FileCache.init_entry:1
msgid "Ensure we can access a cache file. Create a lock for it if needed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: of spack.util.file_cache.FileCache.init_entry:3
msgid "Return whether the cache file exists yet or not."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: of spack.util.file_cache.FileCache.mtime:1
msgid "Return modification time of cache file, or 0 if it does not exist."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: of spack.util.file_cache.FileCache.mtime:3
msgid ""
"Time is in units returned by os.stat in the mtime field, which is platform-"
"dependent."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: of spack.util.file_cache.FileCache.read_transaction:1
msgid "Get a read transaction on a file cache item."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: of spack.util.file_cache.FileCache.read_transaction:3
msgid ""
"Returns a ReadTransaction context manager and opens the cache file for "
"reading.  You can use it like this:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: of spack.util.file_cache.FileCache.read_transaction:6
msgid "with file_cache_object.read_transaction(key) as cache_file:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: of spack.util.file_cache.FileCache.read_transaction:7
msgid "cache_file.read()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: of spack.util.file_cache.FileCache.write_transaction:1
msgid "Get a write transaction on a file cache item."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/file_cache.py:docstring
#: of spack.util.file_cache.FileCache.write_transaction:3
msgid ""
"Returns a WriteTransaction context manager that opens a temporary file for "
"writing.  Once the context manager finishes, if nothing went wrong, moves "
"the file into place on top of the old file atomically."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:71
msgid "spack.util.gpg module"
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:79
msgid "spack.util.lock module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/lock.py:docstring
#: of spack.util.lock:1
msgid "Wrapper for ``llnl.util.lock`` allows locking to be enabled/disabled."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/lock.py:docstring
#: of spack.util.lock.Lock:1
msgid "Bases: :class:`llnl.util.lock.Lock`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/lock.py:docstring
#: of spack.util.lock.Lock:1
msgid "Lock that can be disabled."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/lock.py:docstring
#: of spack.util.lock.Lock:3
msgid ""
"This overrides the ``_lock()`` and ``_unlock()`` methods from ``llnl.util."
"lock`` so that all the lock API calls will succeed, but the actual locking "
"mechanism can be disabled via ``_enable_locks``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/lock.py:docstring
#: of spack.util.lock.check_lock_safety:1
msgid "Do some extra checks to ensure disabling locks is safe."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/lock.py:docstring
#: of spack.util.lock.check_lock_safety:3
msgid ""
"This will raise an error if ``path`` can is group- or world-writable AND the "
"current user can write to the directory (i.e., if this user AND others could "
"write to the path)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/lock.py:docstring
#: of spack.util.lock.check_lock_safety:7
msgid ""
"This is intended to run on the Spack prefix, but can be run on any path for "
"testing."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:87
msgid "spack.util.log\\_parse module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: of spack.util.log_parse.parse_log_events:1
msgid "Extract interesting events from a log file as a list of LogEvent."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: of spack.util.log_parse.parse_log_events:3
msgid "build log name or file object"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: of spack.util.log_parse.parse_log_events:5
msgid "lines of context to extract around each log event"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: of spack.util.log_parse.parse_log_events:7
msgid "number of jobs to parse with; default ncpus"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: of spack.util.log_parse.parse_log_events:9
msgid "print out profile information for parsing"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: of spack.util.log_parse.parse_log_events:12
msgid "two lists containig ``BuildError`` and     ``BuildWarning`` objects."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: of spack.util.log_parse.parse_log_events:14
msgid "two lists containig ``BuildError`` and"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: of spack.util.log_parse.parse_log_events:15
msgid "``BuildWarning`` objects."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: of spack.util.log_parse.parse_log_events:18
msgid ""
"This is a wrapper around ``ctest_log_parser.CTestLogParser`` that lazily "
"constructs a single ``CTestLogParser`` object.  This ensures that all the "
"regex compilation is only done once."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: of spack.util.log_parse.make_log_context:1
msgid "Get error context from a log file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: of spack.util.log_parse.make_log_context:3
msgid "list of events created by ``ctest_log_parser.parse()``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: of spack.util.log_parse.make_log_context:6
msgid "wrap width; ``0`` for no limit; ``None`` to auto-size for terminal"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: of spack.util.log_parse.make_log_context:10
msgid "context from the build log with errors highlighted"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: of spack.util.log_parse.make_log_context:13
msgid ""
"Parses the log file for lines containing errors, and prints them out with "
"line numbers and context.  Errors are highlighted with '>>' and with red "
"highlighting (if color is enabled)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/log_parse.py:docstring
#: of spack.util.log_parse.make_log_context:17
msgid "Events are sorted by line number before they are displayed."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:95
msgid "spack.util.module\\_cmd module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/module_cmd.py:docstring
#: of spack.util.module_cmd:1
msgid ""
"This module contains routines related to the module command for accessing "
"and parsing environment modules."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/module_cmd.py:docstring
#: of spack.util.module_cmd.get_path_from_module:1
msgid ""
"Inspects a TCL module for entries that indicate the absolute path at which "
"the library supported by said module can be found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/module_cmd.py:docstring
#: of spack.util.module_cmd.load_module:1
msgid ""
"Takes a module name and removes modules until it is possible to load that "
"module. It then loads the provided module. Depends on the modulecmd "
"implementation of modules used in cray and lmod."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:103
msgid "spack.util.naming module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.mod_to_class:1
msgid ""
"Convert a name from module style to class name style.  Spack mostly follows "
"`PEP-8 <http://legacy.python.org/dev/peps/pep-0008/>`_:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.mod_to_class:4
msgid "Module and package names use lowercase_with_underscores."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.mod_to_class:5
msgid "Class names use the CapWords convention."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.mod_to_class:7
msgid ""
"Regular source code follows these convetions.  Spack is a bit more liberal "
"with its Package names and Compiler names:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.mod_to_class:10
msgid "They can contain '-' as well as '_', but cannot start with '-'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.mod_to_class:11
msgid "They can start with numbers, e.g. \"3proxy\"."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.mod_to_class:13
msgid ""
"This function converts from the module convention to the class convention by "
"removing _ and - and converting surrounding lowercase text to CapWords.  If "
"mod_name starts with a number, the class name returned will be prepended "
"with '_' to make a valid Python identifier."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.spack_module_to_python_module:1
msgid ""
"Given a Spack module name, returns the name by which it can be imported in "
"Python."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.valid_module_name:1
msgid "Return whether mod_name is valid for use in Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.valid_fully_qualified_module_name:1
msgid "Return whether mod_name is a valid namespaced module name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.validate_fully_qualified_module_name:1
msgid "Raise an exception if mod_name is not a valid namespaced module name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.validate_module_name:1
msgid "Raise an exception if mod_name is not valid."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.possible_spack_module_names:1
msgid ""
"Given a Python module name, return a list of all possible spack module names "
"that could correspond to it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.simplify_name:1
msgid "Simplify package name to only lowercase, digits, and dashes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.simplify_name:3
msgid ""
"Simplifies a name which may include uppercase letters, periods, underscores, "
"and pluses. In general, we want our package names to only contain lowercase "
"letters, digits, and dashes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.simplify_name:7
msgid "The original name of the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.simplify_name:10
msgid "The new name of the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.NamespaceTrie.has_value:1
msgid "True if there is a value set for the given namespace."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.NamespaceTrie.is_leaf:1
msgid "True if this namespace has no children in the trie."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/naming.py:docstring
#: of spack.util.naming.NamespaceTrie.is_prefix:1
msgid ""
"True if the namespace has a value, or if it's the prefix of one that does."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:111
msgid "spack.util.package\\_hash module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/package_hash.py:docstring
#: of spack.util.package_hash.PackageHashError:1
msgid "Raised for all errors encountered during package hashing."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/package_hash.py:docstring
#: of spack.util.package_hash.RemoveDirectives:1
#: spack.util.package_hash.RemoveDocstrings:1
#: spack.util.package_hash.ResolveMultiMethods:1
msgid "Bases: :class:`ast.NodeTransformer`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/package_hash.py:docstring
#: of spack.util.package_hash.RemoveDirectives:1
msgid "Remove Spack directives from a package AST."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/package_hash.py:docstring
#: of spack.util.package_hash.RemoveDocstrings:1
msgid "Transformer that removes docstrings from a Python AST."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/package_hash.py:docstring
#: of spack.util.package_hash.ResolveMultiMethods:1
msgid "Remove methods which do not exist if their @when is not satisfied."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/package_hash.py:docstring
#: of spack.util.package_hash.TagMultiMethods:1
msgid "Bases: :class:`ast.NodeVisitor`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/package_hash.py:docstring
#: of spack.util.package_hash.TagMultiMethods:1
msgid "Tag @when-decorated methods in a spec."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:119
msgid "spack.util.path module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/path.py:docstring
#: of spack.util.path:1
msgid "Utilities for managing paths in Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/path.py:docstring
#: of spack.util.path:3
msgid "TODO: this is really part of spack.config. Consolidate it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/path.py:docstring
#: of spack.util.path.substitute_config_variables:1
msgid "Substitute placeholders into paths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/path.py:docstring
#: of spack.util.path.substitute_config_variables:3
msgid "Spack allows paths in configs to have some placeholders, as follows:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/path.py:docstring
#: of spack.util.path.substitute_config_variables:5
msgid "$spack     The Spack instance's prefix"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/path.py:docstring
#: of spack.util.path.substitute_config_variables:6
msgid "$user      The current user's username"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/path.py:docstring
#: of spack.util.path.substitute_config_variables:7
msgid ""
"$tempdir   Default temporary directory returned by tempfile.gettempdir()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/path.py:docstring
#: of spack.util.path.substitute_config_variables:9
msgid ""
"These are substituted case-insensitively into the path, and users can use "
"either ``$var`` or ``${var}`` syntax for the variables."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/path.py:docstring
#: of spack.util.path.canonicalize_path:1
msgid ""
"Substitute config vars, expand environment vars, expand user home, take "
"abspath."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:127
msgid "spack.util.pattern module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/pattern.py:docstring
#: of spack.util.pattern.Args:1
msgid "Bases: :class:`spack.util.pattern.Bunch`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/pattern.py:docstring
#: of spack.util.pattern.Args:1
msgid "Subclass of Bunch to write argparse args more naturally."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/pattern.py:docstring
#: of spack.util.pattern.Bunch:1
msgid "Carries a bunch of named attributes (from Alex Martelli bunch)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/pattern.py:docstring
#: of spack.util.pattern.composite:1
msgid "Decorator implementing the GoF composite pattern."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/pattern.py:docstring
#: of spack.util.pattern.composite:3
msgid ""
"class exposing the interface to which the composite object must conform. "
"Only non-private and non-special methods will be taken into account"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/pattern.py:docstring
#: of spack.util.pattern.composite:7
msgid "names of methods that should be part of the composite"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/pattern.py:docstring
#: of spack.util.pattern.composite:10
msgid ""
"container for the composite object (default = list).  Must fulfill the "
"MutableSequence contract. The composite class will expose the container API "
"to manage object composition"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/pattern.py:docstring
#: of spack.util.pattern.composite:16
msgid ""
"a class decorator that patches a class adding all the methods it needs to be "
"a composite for a given interface."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:135
msgid "spack.util.prefix module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/prefix.py:docstring
#: of spack.util.prefix:1
msgid ""
"This file contains utilities for managing the installation prefix of a "
"package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/prefix.py:docstring
#: of spack.util.prefix.Prefix:1
msgid "Bases: :class:`str`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/prefix.py:docstring
#: of spack.util.prefix.Prefix:1
msgid ""
"This class represents an installation prefix, but provides useful attributes "
"for referring to directories inside the prefix."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/prefix.py:docstring
#: of spack.util.prefix.Prefix:4
msgid ""
"Attributes of this object are created on the fly when you request them, so "
"any of the following is valid:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/prefix.py:docstring
#: of spack.util.prefix.Prefix:19
msgid ""
"Prefix objects behave identically to strings. In fact, they subclass "
"``str``. So operators like ``+`` are legal::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/prefix.py:docstring
#: of spack.util.prefix.Prefix:24
msgid ""
"This prints ``foobar /usr``. All of this is meant to make custom installs "
"easy."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/prefix.py:docstring
#: of spack.util.prefix.Prefix.join:1
msgid "Concatenates a string to a prefix."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/prefix.py:docstring
#: of spack.util.prefix.Prefix.join:3
msgid "the string to append to the prefix"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/prefix.py:docstring
#: of spack.util.prefix.Prefix.join:6
msgid "the newly created installation prefix"
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:143
msgid "spack.util.spack\\_json module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/spack_json.py:docstring
#: of spack.util.spack_json:1
msgid "Simple wrapper around JSON to guarantee consistent use of load/dump."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/spack_json.py:docstring
#: of spack.util.spack_json.load:1
msgid "Spack JSON needs to be ordered to support specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/spack_json.py:docstring
#: of spack.util.spack_json.dump:1
msgid "Dump JSON with a reasonable amount of indentation and separation."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/spack_json.py:docstring
#: of spack.util.spack_json.SpackJSONError:1
msgid "Raised when there are issues with JSON parsing."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:151
msgid "spack.util.spack\\_yaml module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/spack_yaml.py:docstring
#: of spack.util.spack_yaml:1
msgid "Enhanced YAML parsing for Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/spack_yaml.py:docstring
#: of spack.util.spack_yaml:3
msgid ""
"``load()`` preserves YAML Marks on returned objects -- this allows us to "
"access file and line information later."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/spack_yaml.py:docstring
#: of spack.util.spack_yaml:6
msgid ""
"``Our load methods use ``OrderedDict`` class instead of YAML's default "
"unorderd dict."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/spack_yaml.py:docstring
#: of spack.util.spack_yaml.load:1
msgid ""
"Load but modify the loader instance so that it will add __line__ atrributes "
"to the returned object."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/spack_yaml.py:docstring
#: of spack.util.spack_yaml.SpackYAMLError:1
msgid "Raised when there are issues with YAML parsing."
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:159
msgid "spack.util.string module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/string.py:docstring
#: of spack.util.string.plural:1
msgid "Pluralize <singular> word by adding an s if n != 1."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/string.py:docstring
#: of spack.util.string.plural:3
msgid "number of things there are"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/string.py:docstring
#: of spack.util.string.plural:5
msgid "singular form of word"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/string.py:docstring
#: of spack.util.string.plural:7
msgid "optional plural form, for when it's not just singular + 's'"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/string.py:docstring
#: of spack.util.string.plural:10
msgid "whether to include n in the result string (default True)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/string.py:docstring
#: of spack.util.string.plural:13
msgid "\"1 thing\" if n == 1 or \"n things\" if n != 1"
msgstr ""

#: ../spack/lib/spack/docs/spack.util.rst:167
msgid "spack.util.web module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.LinkParser:1
msgid "Bases: :class:`html.parser.HTMLParser`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.LinkParser:1
msgid ""
"This parser just takes an HTML page and strips out the hrefs on the links.  "
"Good enough for a really simple spider."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.NoNetworkConnectionError:1 spack.util.web.VersionFetchError:1
msgid "Bases: :class:`spack.util.web.SpackWebError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.NoNetworkConnectionError:1
msgid "Raised when an operation can't get an internet connection."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.NonDaemonContext:1
msgid "Bases: :class:`multiprocessing.context.ForkContext`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.NonDaemonPool:1
msgid "Bases: :class:`multiprocessing.pool.Pool`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.NonDaemonPool:1
msgid "Pool that uses non-daemon processes"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.NonDaemonProcess:1
msgid "Bases: :class:`multiprocessing.context.Process`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.NonDaemonProcess:1
msgid "Process tha allows sub-processes, so pools can have sub-pools."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.NonDaemonProcess.daemon:1
msgid "Return whether process is a daemon"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.SpackWebError:1
msgid "Superclass for Spack web spidering errors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.VersionFetchError:1
msgid "Raised when we can't determine a URL to fetch a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.find_versions_of_archive:1
msgid "Scrape web pages for new versions of a tarball."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.find_versions_of_archive:3
msgid ""
"URL or sequence of URLs for different versions of a package. Typically these "
"are just the tarballs from the package file itself.  By default, this "
"searches the parent directories of archives."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.find_versions_of_archive:8
msgid ""
"URL for a listing of archives.  Spack wills scrape these pages for download "
"links that look like the archive URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.find_versions_of_archive:10
msgid "Max depth to follow links on list_url pages. Default 0."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.get_checksums_for_versions:1
msgid "Fetches and checksums archives from URLs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.get_checksums_for_versions:3
msgid ""
"This function is called by both ``spack checksum`` and ``spack create``.  "
"The ``first_stage_function`` argument allows the caller to inspect the first "
"downloaded archive, e.g., to determine the build system."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.get_checksums_for_versions:8
msgid "A dictionary of the form: version -> URL"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.get_checksums_for_versions:12
msgid ""
"function that takes a Stage and a URL; this is run on the stage of the first "
"URL downloaded"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.get_checksums_for_versions:15
msgid "whether to keep staging area when command completes"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.get_checksums_for_versions:18
msgid "A multi-line string containing versions and corresponding hashes"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.spider:1
msgid "Gets web pages from a root URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.spider:3
msgid ""
"If depth is specified (e.g., depth=2), then this will also follow up to "
"<depth> levels of links from the root."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/util/web.py:docstring of
#: spack.util.web.spider:6
msgid ""
"This will spawn processes to fetch the children, for much improved "
"performance over a sequential fetch."
msgstr ""

# 67d46174815c4140ab8c1182d05fa8ec
#: ../spack/lib/spack/docs/tutorial.rst:10
msgid "Tutorial: Spack 101"
msgstr "チュートリアル: Spack 101"

# 884fc1aa2bb9416d80ed51f5ae39b3fb
#: ../spack/lib/spack/docs/tutorial.rst:12
msgid ""
"This is a full-day introduction to Spack with lectures and live demos. It "
"was presented as a tutorial for staff at the `RIKEN Center for Computational "
"Science (R-CCS) <http://www.riken.jp/en/research/labs/r-ccs/>`_.  You can "
"use these materials to teach a course on Spack at your own site, or you can "
"just skip ahead and read the live demo scripts to see how Spack is used in "
"practice."
msgstr ""

# a359a1833b3b40488c4424f0c23ba46e
#: ../spack/lib/spack/docs/tutorial.rst:23
msgid "Slides"
msgstr ""

# 515c4c744f854dbebbdc62e894ced9fe
#: ../spack/lib/spack/docs/tutorial.rst:30
msgid ""
"`Download Slides <https://spack.io/slides/Spack-RIKEN19-Tutorial.pdf>`_."
msgstr ""

# e92b67297a49412eae683214112648f8
#: ../spack/lib/spack/docs/tutorial.rst:32
msgid ""
"**Full citation:** Todd Gamblin, Gregory Becker, and Peter Scheibel. "
"Managing HPC Software Complexity with Spack.  Tutorial presented at RIKEN "
"Center for Computational Science. April 23, 2019.  Kobe, Japan."
msgstr ""

# b68d0d05bd224f1b9ba0d4c592f54dd8
#: ../spack/lib/spack/docs/tutorial.rst:39
msgid "Live Demos"
msgstr ""

# 4412713f0d24446a860c1064a8ff1f0b
#: ../spack/lib/spack/docs/tutorial.rst:40
msgid ""
"We provide scripts that take you step-by-step through basic Spack tasks. "
"They correspond to sections in the slides above. You can use one of the "
"following methods to run through the scripts:"
msgstr ""

# 1ed469ff445240c5b8d68244c657f5f4
#: ../spack/lib/spack/docs/tutorial.rst:44
msgid ""
"We provide the `spack/tutorial <https://hub.docker.com/r/spack/tutorial>`_ "
"container image on Docker Hub that you can use to do the tutorial on your "
"local machine.  You can invoke ``docker run -it spack/tutorial`` to start "
"using the container."
msgstr ""

# 58d3d47e7db94343a4fff46f1d955f80
#: ../spack/lib/spack/docs/tutorial.rst:50
msgid ""
"When we host the tutorial, we also provision VM instances in `AWS <https://"
"aws.amazon.com/>`_, so that users who are unfamiliar with Docker can simply "
"log into a VPM to do the demo exercises."
msgstr ""

# 83546a6b98504d46b3862b1084a9ebd1
#: ../spack/lib/spack/docs/tutorial.rst:54
msgid "You should now be ready to run through our demo scripts:"
msgstr ""

# 69426f5ecafd44ec86e58b8fdc6686bd
#: ../spack/lib/spack/docs/tutorial.rst:56
msgid ":ref:`basics-tutorial`"
msgstr ""

# 9b5a867e34dc48cb92429714eaa9f6cd
#: ../spack/lib/spack/docs/tutorial.rst:57
msgid ":ref:`configs-tutorial`"
msgstr ""

# 04b1cef620f944a8a9caadc15f66ad07
#: ../spack/lib/spack/docs/tutorial.rst:58
msgid ":ref:`packaging-tutorial`"
msgstr ""

# 67fb24ebded244f89399983373c354c9
#: ../spack/lib/spack/docs/tutorial.rst:59
msgid ":ref:`environments-tutorial`"
msgstr ""

# c0141d6f45644739bf48e05d26a9c9fc
#: ../spack/lib/spack/docs/tutorial.rst:60
msgid ":ref:`modules-tutorial`"
msgstr ""

# a358043760ae4994afb53f55f6b3d62d
#: ../spack/lib/spack/docs/tutorial.rst:61
msgid ":ref:`build-systems-tutorial`"
msgstr ""

# 3eab821c783a426b839fc4716080a965
#: ../spack/lib/spack/docs/tutorial.rst:62
msgid ":ref:`advanced-packaging-tutorial`"
msgstr ""

# ab82c4548ec04a6eb27e8516ae48d294
#: ../spack/lib/spack/docs/tutorial.rst:64
msgid "Full contents:"
msgstr ""

# f0deede7064c43a1bf1ff47b90e0ffea
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:10
msgid "Advanced Topics in Packaging"
msgstr ""

# 34ef37d275a5467aa69d382e5b9fa359
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:12
msgid ""
"Spack tries to automatically configure packages with information from "
"dependencies such that all you need to do is to list the dependencies (i.e., "
"with the ``depends_on`` directive) and the build system (for example by "
"deriving from :code:`CmakePackage`)."
msgstr ""

# 7be41b83be114fde841f3e1a75dd2f46
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:17
msgid ""
"However, there are many special cases. Often you need to retrieve details "
"about dependencies to set package-specific configuration options, or to "
"define package-specific environment variables used by the package's build "
"system. This tutorial covers how to retrieve build information from "
"dependencies, and how you can automatically provide important information to "
"dependents in your package."
msgstr ""

# #-#-#-#-#  tutorial_advanced_packaging.pot (Spack 0.12)  #-#-#-#-#
# fed065b2f5b141e2a8a2ea47267e60b8
# #-#-#-#-#  tutorial_modules.pot (Spack 0.12)  #-#-#-#-#
# 0dfe2f3a0edc49b0a3768fbd08d64c4f
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:26
#: ../spack/lib/spack/docs/tutorial_modules.rst:140
msgid "Setup for the tutorial"
msgstr ""

# d584f805652d409db7ecb192dd137207
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:30
msgid ""
"We do not recommend doing this section of the tutorial in a production Spack "
"instance."
msgstr ""

# 0eb0941635f54893abd64cca423fc66d
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:33
msgid ""
"The tutorial uses custom package definitions with missing sections that will "
"be filled in during the tutorial. These package definitions are stored in a "
"separate package repository, which can be enabled with:"
msgstr ""

# f9d1a2fd50404c3487d65bc6ef1af051
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:41
msgid ""
"This section of the tutorial may also require a newer version of gcc. If you "
"have not already installed gcc@7.2.0 and added it to your configuration, you "
"can do so with:"
msgstr ""

# 72268dcc29b048b09df49f87cb186c55
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:50
msgid ""
"If you are using the tutorial docker image, all dependency packages will "
"have been installed. Otherwise, to install these packages you can use the "
"following commands:"
msgstr ""

# 8e24fa4be81c49bf879c6de422d2cdc9
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:60
msgid ""
"Now, you are ready to set your preferred ``EDITOR`` and continue with the "
"rest of the tutorial."
msgstr ""

# 24a7f7f0038943de9911871b743b8551
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:65
msgid ""
"Several of these packages depend on an MPI implementation. You can use "
"OpenMPI if you install it from scratch, but this is slow (>10 min.). A "
"binary cache of MPICH may be provided, in which case you can force the "
"package to use it and install quickly. All tutorial examples with packages "
"that depend on MPICH include the spec syntax for building with it"
msgstr ""

# 54f2f54dd7174cd3ba02b90a5ca444a6
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:75
msgid "Modifying a package's build environment"
msgstr ""

# 495ece09da8b472e916efde9e3fde545
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:77
msgid ""
"Spack sets up several environment variables like ``PATH`` by default to aid "
"in building a package, but many packages make use of environment variables "
"which convey specific information about their dependencies (e.g., "
"``MPICC``). This section covers how to update your Spack packages so that "
"package-specific environment variables are defined at build-time."
msgstr ""

# 29650e44b187418099e6f838511846ab
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:85
msgid "Set environment variables in dependent packages at build-time"
msgstr ""

# ff3ef742325b483180e50e29f895d591
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:87
msgid ""
"Dependencies can set environment variables that are required when their "
"dependents build. For example, when a package depends on a python extension "
"like py-numpy, Spack's ``python`` package will add it to ``PYTHONPATH`` so "
"it is available at build time; this is required because the default setup "
"that spack does is not sufficient for python to import modules."
msgstr ""

# 20cca0ff403b42568935387bb5e94e88
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:93
msgid ""
"To provide environment setup for a dependent, a package can implement the :"
"py:func:`setup_dependent_environment <spack.package.PackageBase."
"setup_dependent_environment>` function. This function takes as a parameter "
"a :py:class:`EnvironmentModifications <spack.util.environment."
"EnvironmentModifications>` object which includes convenience methods to "
"update the environment. For example, an MPI implementation can set ``MPICC`` "
"for packages that depend on it:"
msgstr ""

# 6b0421ffe79f4801a16f56bcd8e72025
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:104
msgid ""
"In this case packages that depend on ``mpi`` will have ``MPICC`` defined in "
"their environment when they build. This section is focused on modifying the "
"build-time environment represented by ``spack_env``, but it's worth noting "
"that modifications to ``run_env`` are included in Spack's automatically-"
"generated module files."
msgstr ""

# c9caf8a681e549be9a278ccacd13f60e
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:110
msgid ""
"We can practice by editing the ``mpich`` package to set the ``MPICC`` "
"environment variable in the build-time environment of dependent packages."
msgstr ""

# d4ede8fa8f624dccaca98de121a20dbd
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:117
msgid "Once you're finished, the method should look like this:"
msgstr ""

# 6eb75c5e373249f580b1cbcac505f0a0
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:133
msgid ""
"At this point we can, for instance, install ``netlib-scalapack`` with "
"``mpich``:"
msgstr ""

# 8c8a070dd4804ba7b4bdc7f9438369af
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:151
msgid ""
"and double check the environment logs to verify that every variable was set "
"to the correct value."
msgstr ""

# 5a1d564e57714c14b3773106f5dea3cf
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:156
msgid "Set environment variables in your own package"
msgstr ""

# 47ba4771ceb44fec8392b980d740e38f
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:158
msgid ""
"Packages can modify their own build-time environment by implementing the :py:"
"func:`setup_environment <spack.package.PackageBase.setup_environment>` "
"function. For ``qt`` this looks like:"
msgstr ""

# e551ae11b3394eed9ab85c7bfa776217
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:168
msgid "When ``qt`` builds, ``MAKEFLAGS`` will be defined in the environment."
msgstr ""

# b4897f61dfec421eaf3e898dfc3d9b09
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:170
msgid ""
"To contrast with ``qt``'s :py:func:`setup_dependent_environment <spack."
"package.PackageBase.setup_dependent_environment>` function:"
msgstr ""

# a4a1721e6f8143abb068a7c7284b35f4
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:178
msgid "Let's see how it works by completing the ``elpa`` package:"
msgstr ""

# 112e9251bb984ec989e592f2156285b0
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:184
msgid "In the end your method should look like:"
msgstr ""

# fde29e2e0d444973a4dfa7d1db66cbea
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:199
msgid ""
"At this point it's possible to proceed with the installation of ``elpa "
"^mpich``"
msgstr ""

# 4669e90cc3dd438e9ecf396caed7c3ea
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:203
msgid "Retrieving library information"
msgstr ""

# 8ddb94853e8e4ceeaf81881d552c4279
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:205
msgid ""
"Although Spack attempts to help packages locate their dependency libraries "
"automatically (e.g. by setting ``PKG_CONFIG_PATH`` and "
"``CMAKE_PREFIX_PATH``), a package may have unique configuration options that "
"are required to locate libraries. When a package needs information about "
"dependency libraries, the general approach in Spack is to query the "
"dependencies for the locations of their libraries and set configuration "
"options accordingly. By default most Spack packages know how to "
"automatically locate their libraries. This section covers how to retrieve "
"library information from dependencies and how to locate libraries when the "
"default logic doesn't work."
msgstr ""

# 94e58dca94c9407a8b61d0a02355c03a
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:217
msgid "Accessing dependency libraries"
msgstr ""

# 9affd4f0d87d4e349107551cd5c52928
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:219
msgid ""
"If you need to access the libraries of a dependency, you can do so via the "
"``libs`` property of the spec, for example in the ``arpack-ng`` package:"
msgstr ""

# dfda8fcb203a441ba16ce45764218c81
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:234
msgid ""
"Note that ``arpack-ng`` is querying virtual dependencies, which Spack "
"automatically resolves to the installed implementation (e.g. ``openblas`` "
"for ``blas``)."
msgstr ""

# bcd7e80a38894f938783382e00f53958
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:238
msgid ""
"We've started work on a package for ``armadillo``. You should open it, read "
"through the comment that starts with ``# TUTORIAL:`` and complete the "
"``cmake_args`` section:"
msgstr ""

# 9764554f48e14dc1bb12b5384b1ad4e0
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:246
msgid ""
"If you followed the instructions in the package, when you are finished your "
"``cmake_args`` method should look like:"
msgstr ""

# 76c930e8b3e441419116a11d7fe6d90d
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:268
msgid ""
"As you can see, getting the list of libraries that your dependencies provide "
"is as easy as accessing the their ``libs`` attribute. Furthermore, the "
"interface remains the same whether you are querying regular or virtual "
"dependencies."
msgstr ""

# f051763d826046cbbf6c40903af0ba27
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:272
msgid ""
"At this point you can complete the installation of ``armadillo`` using "
"``openblas`` as a LAPACK provider (``armadillo ^openblas ^mpich``):"
msgstr ""

# b2df5ecbc20d4284920ece6a7fb8aa4f
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:294
msgid ""
"Hopefully the installation went fine and the code we added expanded to the "
"right list of semicolon separated libraries (you are encouraged to open "
"``armadillo``'s build logs to double check)."
msgstr ""

# e0c36e5f7dd64929a6065f247491f79d
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:300
msgid "Providing libraries to dependents"
msgstr ""

# cc6c43c6af9746369c12f8abe421e30f
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:302
msgid ""
"Spack provides a default implementation for ``libs`` which often works out "
"of the box. A user can write a package definition without having to "
"implement a ``libs`` property and dependents can retrieve its libraries as "
"shown in the above section. However, the default implementation assumes that "
"libraries follow the naming scheme ``lib<package name>.so`` (or e.g. "
"``lib<package name>.a`` for static libraries). Packages which don't follow "
"this naming scheme must implement this function themselves, e.g. ``opencv``:"
msgstr ""

# 974ca9f76d85490d8b9399e7591808ab
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:320
msgid ""
"This issue is common for packages which implement an interface (i.e. virtual "
"package providers in Spack). If we try to build another version of "
"``armadillo`` tied to ``netlib-lapack`` (``armadillo ^netlib-lapack "
"^mpich``) we'll notice that this time the installation won't complete:"
msgstr ""

# bee549a7fedc439f9b94933907bcf4c7
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:352
msgid ""
"Unlike ``openblas`` which provides a library named ``libopenblas.so``, "
"``netlib-lapack`` provides ``liblapack.so``, so it needs to implement "
"customized library search logic. Let's edit it:"
msgstr ""

# d2a32ef1a6a54c479591321c8f8fb15b
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:360
msgid ""
"and follow the instructions in the ``# TUTORIAL:`` comment as before. What "
"we need to implement is:"
msgstr ""

# dcf750bb6343481fa2f6374f6780107a
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:372
msgid ""
"i.e., a property that returns the correct list of libraries for the LAPACK "
"interface."
msgstr ""

# 58fc5f12351347ee82bd27a45528067f
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:374
msgid ""
"We use the name ``lapack_libs`` rather than ``libs`` because ``netlib-"
"lapack`` can also provide ``blas``, and when it does it is provided as a "
"separate library file. Using this name ensures that when dependents ask for "
"``lapack`` libraries, ``netlib-lapack`` will retrieve only the libraries "
"associated with the ``lapack`` interface. Now we can finally install "
"``armadillo ^netlib-lapack ^mpich``:"
msgstr ""

# fe3e53480d3c4408ba78dff6ddf02029
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:394
msgid ""
"Since each implementation of a virtual package is responsible for locating "
"the libraries associated with the interfaces it provides, dependents do not "
"need to include special-case logic for different implementations and for "
"example need only ask for :code:`spec['blas'].libs`."
msgstr ""

# 6258aab184524cf1b7c87060d1e2ae70
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:401
msgid "Other Packaging Topics"
msgstr ""

# 442b76741f124effb930a76c790f58e1
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:405
msgid "Attach attributes to other packages"
msgstr ""

# da254464d0af4125a5ee73e06b81b877
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:407
msgid ""
"Build tools usually also provide a set of executables that can be used when "
"another package is being installed. Spack gives you the opportunity to "
"monkey-patch dependent modules and attach attributes to them. This helps "
"make the packager experience as similar as possible to what would have been "
"the manual installation of the same package."
msgstr ""

# 2c046422660a4e3d975c40506e3ae8bd
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:413
msgid ""
"An example here is the ``automake`` package, which overrides :py:func:"
"`setup_dependent_package <spack.package.PackageBase."
"setup_dependent_package>`:"
msgstr ""

# 6f1ffe82e3f8451c9c1a4d1f73bbd351
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:425
msgid ""
"so that every other package that depends on it can use directly ``aclocal`` "
"and ``automake`` with the usual function call syntax of :py:class:"
"`Executable <spack.util.executable.Executable>`:"
msgstr ""

# 4f2c6c6a658f49178a5da763b6753d20
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:434
msgid "Extra query parameters"
msgstr ""

# b6016abbf1364dbf9c4616c62557ec6e
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:436
msgid ""
"An advanced feature of the Spec's build-interface protocol is the support "
"for extra parameters after the subscript key. In fact, any of the keys used "
"in the query can be followed by a comma-separated list of extra parameters "
"which can be inspected by the package receiving the request to fine-tune a "
"response."
msgstr ""

# 7b101ef2ed284584a09105cb21de8f6c
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:441
msgid "Let's look at an example and try to install ``netcdf ^mpich``:"
msgstr ""

# e90de408c3b543b480e788e66990dccc
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:464
msgid ""
"We can see from the error that ``netcdf`` needs to know how to link the "
"*high-level interface* of ``hdf5``, and thus passes the extra parameter "
"``hl`` after the request to retrieve it. Clearly the implementation in the "
"``hdf5`` package is not complete, and we need to fix it:"
msgstr ""

# 5c036fec56b445a09721c154160f79f7
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:472
msgid ""
"If you followed the instructions correctly, the code added to the ``lib`` "
"property should be similar to:"
msgstr ""

# a1d6e111434e464889226cec10483920
#: ../spack/lib/spack/docs/tutorial_advanced_packaging.rst:486
msgid ""
"where we highlighted the line retrieving the extra parameters. Now we can "
"successfully complete the installation of ``netcdf ^mpich``:"
msgstr ""

# e8a029a4b447410d824e61d1abb25b7a
#: ../spack/lib/spack/docs/tutorial_basics.rst:10
msgid "Basic Installation Tutorial"
msgstr ""

# 221ff1ce4b654d43870d999ea42e8633
#: ../spack/lib/spack/docs/tutorial_basics.rst:12
msgid ""
"This tutorial will guide you through the process of installing software "
"using Spack. We will first cover the `spack install` command, focusing on "
"the power of the spec syntax and the flexibility it gives to users. We will "
"also cover the `spack find` command for viewing installed packages and the "
"`spack uninstall` command. Finally, we will touch on how Spack manages "
"compilers, especially as it relates to using Spack-built compilers within "
"Spack. We will include full output from all of the commands demonstrated, "
"although we will frequently call attention to only small portions of that "
"output (or merely to the fact that it succeeded). The provided output is all "
"from an AWS instance running Ubuntu 16.04"
msgstr ""

# 1604ca5d3da04e47b5b5e77bf018b49b
#: ../spack/lib/spack/docs/tutorial_basics.rst:28
msgid "Installing Spack"
msgstr ""

# 6d0d86965f574c898062bde41516e1a8
#: ../spack/lib/spack/docs/tutorial_basics.rst:30
msgid ""
"Spack works out of the box. Simply clone spack and get going. We will clone "
"Spack and immediately checkout the most recent release, v0.12."
msgstr ""

# 235596d2fc2c475dafba4952ecbe3e77
#: ../spack/lib/spack/docs/tutorial_basics.rst:50
msgid ""
"Next add Spack to your path. Spack has some nice command line integration "
"tools, so instead of simply appending to your ``PATH`` variable, source the "
"spack setup script.  Then add Spack to your path."
msgstr ""

# 80f38211b5d14260afafe74d6929ac9d
#: ../spack/lib/spack/docs/tutorial_basics.rst:58
msgid "You're good to go!"
msgstr ""

# 61c90bcf4a6a41bda183e5b04b6907f2
#: ../spack/lib/spack/docs/tutorial_basics.rst:62
msgid "What is in Spack?"
msgstr ""

# a39b5535543c49ea9d58dde5487a94ff
#: ../spack/lib/spack/docs/tutorial_basics.rst:64
msgid "The ``spack list`` command shows available packages."
msgstr ""

# fdf6293375154128826c7b53de389ab1
#: ../spack/lib/spack/docs/tutorial_basics.rst:75
msgid ""
"The ``spack list`` command can also take a query string. Spack automatically "
"adds wildcards to both ends of the string. For example, we can view all "
"available python packages."
msgstr ""

# f9749d84db294311a1f3e462efb7ef76
#: ../spack/lib/spack/docs/tutorial_basics.rst:90
msgid "Installing Packages"
msgstr ""

# e4d1b6d98e0f40b981c042eabc9a34de
#: ../spack/lib/spack/docs/tutorial_basics.rst:92
msgid ""
"Installing a package with Spack is very simple. To install a piece of "
"software, simply type ``spack install <package_name>``."
msgstr ""

# 6c88ce97719a48a29e7703c66b6cfd0b
#: ../spack/lib/spack/docs/tutorial_basics.rst:113
msgid ""
"Spack can install software either from source or from a binary cache. "
"Packages in the binary cache are signed with GPG for security. For the "
"tutorial we have prepared a binary cache so you don't have to wait on slow "
"compilation from source. To be able to install from the binary cache, we "
"will need to configure Spack with the location of the binary cache and trust "
"the GPG key that the binary cache was signed with."
msgstr ""

# 0651e043c5044832955f0b45104be9e6
#: ../spack/lib/spack/docs/tutorial_basics.rst:131
msgid ""
"You'll learn more about configuring Spack later in the tutorial, but for now "
"you will be able to install the rest of the packages in the tutorial from a "
"binary cache using the same ``spack install`` command. By default this will "
"install the binary cached version if it exists and fall back on installing "
"from source."
msgstr ""

# d7d7b51b9ce0431682a5f737c614dede
#: ../spack/lib/spack/docs/tutorial_basics.rst:137
msgid ""
"Spack's spec syntax is the interface by which we can request specific "
"configurations of the package. The ``%`` sigil is used to specify compilers."
msgstr ""

# 65f7bbc18c0446f9b5882fdb4ce89aaf
#: ../spack/lib/spack/docs/tutorial_basics.rst:166
msgid ""
"Note that this installation is located separately from the previous one. We "
"will discuss this in more detail later, but this is part of what allows "
"Spack to support arbitrarily versioned software."
msgstr ""

# 4889b2cdc83243ee80717a7ff850585f
#: ../spack/lib/spack/docs/tutorial_basics.rst:170
msgid ""
"You can check for particular versions before requesting them. We will use "
"the ``spack versions`` command to see the available versions, and then "
"install a different version of ``zlib``."
msgstr ""

# 72bf8644650e4170aa5d8e62e605a13b
#: ../spack/lib/spack/docs/tutorial_basics.rst:183
msgid ""
"The ``@`` sigil is used to specify versions, both of packages and of "
"compilers."
msgstr ""

# 74dcdceeafe2451490ab5348acf3887b
#: ../spack/lib/spack/docs/tutorial_basics.rst:218
msgid ""
"The spec syntax also includes compiler flags. Spack accepts ``cppflags``, "
"``cflags``, ``cxxflags``, ``fflags``, ``ldflags``, and ``ldlibs`` "
"parameters.  The values of these fields must be quoted on the command line "
"if they include spaces. These values are injected into the compile line "
"automatically by the Spack compiler wrappers."
msgstr ""

# 247cb55de1f046af877a0889ffe06966
#: ../spack/lib/spack/docs/tutorial_basics.rst:241
msgid ""
"The ``spack find`` command is used to query installed packages. Note that "
"some packages appear identical with the default output. The ``-l`` flag "
"shows the hash of each package, and the ``-f`` flag shows any non-empty "
"compiler flags of those packages."
msgstr ""

# 0a95f22b068946ff9ce442490cde2779
#: ../spack/lib/spack/docs/tutorial_basics.rst:277
msgid ""
"Spack generates a hash for each spec. This hash is a function of the full "
"provenance of the package, so any change to the spec affects the hash. Spack "
"uses this value to compare specs and to generate unique installation "
"directories for every combinatorial version. As we move into more "
"complicated packages with software dependencies, we can see that Spack "
"reuses existing packages to satisfy a dependency only when the existing "
"package's hash matches the desired spec."
msgstr ""

# 285c38177ecb41018d43311332bd671a
#: ../spack/lib/spack/docs/tutorial_basics.rst:303
msgid ""
"Dependencies can be explicitly requested using the ``^`` sigil. Note that "
"the spec syntax is recursive. Anything we could specify about the top-level "
"package, we can also specify about a dependency using ``^``."
msgstr ""

# 10f2ef808a1f40ab8ffd797ba38f66f0
#: ../spack/lib/spack/docs/tutorial_basics.rst:336
msgid ""
"Packages can also be referred to from the command line by their package "
"hash. Using the ``spack find -lf`` command earlier we saw that the hash of "
"our optimized installation of zlib (``cppflags=\"-O3\"``) began with "
"``64mns5m``. We can now explicitly build with that package without typing "
"the entire spec, by using the ``/`` sigil to refer to it by hash. As with "
"other tools like git, you do not need to specify an *entire* hash on the "
"command line.  You can specify just enough digits to identify a hash "
"uniquely.  If a hash prefix is ambiguous (i.e., two or more installed "
"packages share the prefix) then spack will report an error."
msgstr ""

# 3671c8841d9742dc9be228e62cc1d244
#: ../spack/lib/spack/docs/tutorial_basics.rst:364
msgid ""
"The ``spack find`` command can also take a ``-d`` flag, which can show "
"dependency information. Note that each package has a top-level entry, even "
"if it also appears as a dependency."
msgstr ""

# f7d5197c313a4b79b2f09c552a66edf1
#: ../spack/lib/spack/docs/tutorial_basics.rst:399
msgid ""
"Let's move on to slightly more complicated packages. ``HDF5`` is a good "
"example of a more complicated package, with an MPI dependency. If we install "
"it \"out of the box,\" it will build with ``openmpi``."
msgstr ""

# 1b90514557514a6597755d1752a77806
#: ../spack/lib/spack/docs/tutorial_basics.rst:625
msgid ""
"Spack packages can also have build options, called variants. Boolean "
"variants can be specified using the ``+`` and ``~`` or ``-`` sigils. There "
"are two sigils for ``False`` to avoid conflicts with shell parsing in "
"different situations. Variants (boolean or otherwise) can also be specified "
"using the same syntax as compiler flags.  Here we can install HDF5 without "
"MPI support."
msgstr ""

# 6d1b32d9ceed4fd3976072f48b026bde
#: ../spack/lib/spack/docs/tutorial_basics.rst:650
msgid ""
"We might also want to install HDF5 with a different MPI implementation. "
"While MPI is not a package itself, packages can depend on abstract "
"interfaces like MPI. Spack handles these through \"virtual dependencies.\" A "
"package, such as HDF5, can depend on the MPI interface. Other packages "
"(``openmpi``, ``mpich``, ``mvapich``, etc.) provide the MPI interface.  Any "
"of these providers can be requested for an MPI dependency. For example, we "
"can build HDF5 with MPI support provided by mpich by specifying a dependency "
"on ``mpich``. Spack also supports versioning of virtual dependencies. A "
"package can depend on the MPI interface at version 3, and provider packages "
"specify what version of the interface *they* provide. The partial spec "
"``^mpi@3`` can be safisfied by any of several providers."
msgstr ""

# 99c99f0acaf54d148e129c2144cd0abb
#: ../spack/lib/spack/docs/tutorial_basics.rst:727
msgid "We'll do a quick check in on what we have installed so far."
msgstr ""

# ed13467fc8dd4ced927fc7a3defde4b8
#: ../spack/lib/spack/docs/tutorial_basics.rst:850
msgid ""
"Spack models the dependencies of packages as a directed acyclic graph (DAG). "
"The ``spack find -d`` command shows the tree representation of that graph.  "
"We can also use the ``spack graph`` command to view the entire DAG as a "
"graph."
msgstr ""

# 3c6574770bb3474db5fcf640fd1d1286
#: ../spack/lib/spack/docs/tutorial_basics.rst:888
msgid ""
"You may also have noticed that there are some packages shown in the ``spack "
"find -d`` output that we didn't install explicitly. These are dependencies "
"that were installed implicitly. A few packages installed implicitly are not "
"shown as dependencies in the ``spack find -d`` output. These are build "
"dependencies. For example, ``libpciaccess`` is a dependency of openmpi and "
"requires ``m4`` to build. Spack will build ``m4`` as part of the "
"installation of ``openmpi``, but it does not become a part of the DAG "
"because it is not linked in at run time. Spack handles build dependencies "
"differently because of their different (less strict) consistency "
"requirements. It is entirely possible to have two packages using different "
"versions of a dependency to build, which obviously cannot be done with "
"linked dependencies."
msgstr ""

# 9ad5fa0425f64a76915cd113a915e36d
#: ../spack/lib/spack/docs/tutorial_basics.rst:901
msgid ""
"``HDF5`` is more complicated than our basic example of zlib and openssl, but "
"it's still within the realm of software that an experienced HPC user could "
"reasonably expect to install given a bit of time. Now let's look at an even "
"more complicated package."
msgstr ""

# 40aebee8d571498a8ee8c86987fa89f7
#: ../spack/lib/spack/docs/tutorial_basics.rst:1132
msgid ""
"Now we're starting to see the power of Spack. Trilinos in its default "
"configuration has 23 top level dependecies, many of which have dependencies "
"of their own. Installing more complex packages can take days or weeks even "
"for an experienced user. Although we've done a binary installation for the "
"tutorial, a source installation of trilinos using Spack takes about 3 hours "
"(depending on the system), but only 20 seconds of programmer time."
msgstr ""

# 9447d678d15c4a0eb2373a60c841385b
#: ../spack/lib/spack/docs/tutorial_basics.rst:1140
msgid ""
"Spack manages constistency of the entire DAG. Every MPI dependency will be "
"satisfied by the same configuration of MPI, etc. If we install ``trilinos`` "
"again specifying a dependency on our previous HDF5 built with ``mpich``:"
msgstr ""

# bbe1329509fe4fb68932101788e6eeef
#: ../spack/lib/spack/docs/tutorial_basics.rst:1259
msgid ""
"We see that every package in the trilinos DAG that depends on MPI now uses "
"``mpich``."
msgstr ""

# 67d810ae83104aa783a51e1bf3faa257
#: ../spack/lib/spack/docs/tutorial_basics.rst:1307
msgid ""
"As we discussed before, the ``spack find -d`` command shows the dependency "
"information as a tree. While that is often sufficient, many complicated "
"packages, including trilinos, have dependencies that cannot be fully "
"represented as a tree. Again, the ``spack graph`` command shows the full DAG "
"of the dependency information."
msgstr ""

# c6be4f94ad134493880dcb83b2189a8b
#: ../spack/lib/spack/docs/tutorial_basics.rst:1436
msgid "You can control how the output is displayed with a number of options."
msgstr ""

# 48d638fc20f3427eb3b1cfe62205710c
#: ../spack/lib/spack/docs/tutorial_basics.rst:1438
msgid ""
"The ASCII output from ``spack graph`` can be difficult to parse for "
"complicated packages. The output can be changed to the ``graphviz`` ``.dot`` "
"format using the ``--dot`` flag."
msgstr ""

# ed1cc3b4e4d74c4a95ae49292bb546ad
#: ../spack/lib/spack/docs/tutorial_basics.rst:1450
msgid "Uninstalling Packages"
msgstr ""

# 306a2fbac89f4bba8b005c3741ef6bd1
#: ../spack/lib/spack/docs/tutorial_basics.rst:1452
msgid ""
"Earlier we installed many configurations each of zlib and tcl. Now we will "
"go through and uninstall some of those packages that we didn't really need."
msgstr ""

# 8785fb3af97245a5aa429053d150e623
#: ../spack/lib/spack/docs/tutorial_basics.rst:1484
msgid "We can uninstall packages by spec using the same syntax as install."
msgstr ""

# 038b3fea86404c558cf77199df9f34c7
#: ../spack/lib/spack/docs/tutorial_basics.rst:1509
msgid "We can also uninstall packages by referring only to their hash."
msgstr ""

# 2df52cb5a741417ab6b2c0d45e386d53
#: ../spack/lib/spack/docs/tutorial_basics.rst:1511
msgid ""
"We can use either ``-f`` (force) or ``-R`` (remove dependents as well) to "
"remove packages that are required by another installed package."
msgstr ""

# b59179c79bee4543a744a8c527cc1933
#: ../spack/lib/spack/docs/tutorial_basics.rst:1535
msgid ""
"Spack will not uninstall packages that are not sufficiently specified. The "
"``-a`` (all) flag can be used to uninstall multiple packages at once."
msgstr ""

# e3242161732a4df58108d8eee3c964be
#: ../spack/lib/spack/docs/tutorial_basics.rst:1563
msgid "Advanced ``spack find`` Usage"
msgstr ""

# 599c49821ef94c269ea9a3b35b919c52
#: ../spack/lib/spack/docs/tutorial_basics.rst:1565
msgid ""
"We will go over some additional uses for the ``spack find`` command not "
"already covered in the :ref:`basics-tutorial-install` and :ref:`basics-"
"tutorial-uninstall` sections."
msgstr ""

# a5dff872bf7b4b2387886201b9dc27f0
#: ../spack/lib/spack/docs/tutorial_basics.rst:1569
msgid ""
"The ``spack find`` command can accept what we call \"anonymous specs.\" "
"These are expressions in spec syntax that do not contain a package name. For "
"example, ``spack find ^mpich`` will return every installed package that "
"depends on mpich, and ``spack find cppflags=\"-O3\"`` will return every "
"package which was built with ``cppflags=\"-O3\"``."
msgstr ""

# 26b56fe7297c4df699ccd017fb64ee4d
#: ../spack/lib/spack/docs/tutorial_basics.rst:1588
msgid ""
"The ``find`` command can also show which packages were installed explicitly "
"(rather than pulled in as a dependency) using the ``-x`` flag. The ``-X`` "
"flag shows implicit installs only. The ``find`` command can also show the "
"path to which a spack package was installed using the ``-p`` command."
msgstr ""

# fa152db4310f4a79b1455b722d4e77fb
#: ../spack/lib/spack/docs/tutorial_basics.rst:1614
msgid "Customizing Compilers"
msgstr ""

# e112bfd8f9ca42cb9259ce6076bf10ba
#: ../spack/lib/spack/docs/tutorial_basics.rst:1617
msgid ""
"Spack manages a list of available compilers on the system, detected "
"automatically from from the user's ``PATH`` variable. The ``spack "
"compilers`` command is an alias for the command ``spack compiler list``."
msgstr ""

# e6680d30f6974be99225bb694a582dfc
#: ../spack/lib/spack/docs/tutorial_basics.rst:1631
msgid ""
"The compilers are maintained in a YAML file. Later in the tutorial you will "
"learn how to configure compilers by hand for special cases. Spack also has "
"tools to add compilers, and compilers built with Spack can be added to the "
"configuration."
msgstr ""

# e2363bddab1f4b2ea5e57b88a90b9c46
#: ../spack/lib/spack/docs/tutorial_basics.rst:1719
msgid ""
"We can add gcc to Spack as an available compiler using the ``spack compiler "
"add`` command. This will allow future packages to build with gcc@7.2.0."
msgstr ""

# 54204fc68ee44ed6839341e012b6fcb4
#: ../spack/lib/spack/docs/tutorial_basics.rst:1731
msgid ""
"We can also remove compilers from our configuration using ``spack compiler "
"remove <compiler_spec>``"
msgstr ""

# 3c6c8d1964cf42eca3492f0eb9d541b6
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:10
msgid "Spack Package Build Systems"
msgstr ""

# 2aa20964a8d84f22bce015d06bad67f7
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:12
msgid ""
"You may begin to notice after writing a couple of package template files a "
"pattern emerge for some packages. For example, you may find yourself writing "
"an :code:`install()` method that invokes: :code:`configure`, :code:`cmake`, :"
"code:`make`, :code:`make install`. You may also find yourself writing :code:`"
"\"prefix=\" + prefix` as an argument to :code:`configure` or :code:`cmake`. "
"Rather than having you repeat these lines for all packages, Spack has "
"classes that can take care of these patterns. In addition, these package "
"files allow for finer grained control of these build systems. In this "
"section, we will describe each build system and give examples on how these "
"can be manipulated to install a package."
msgstr ""

# 9bb3a37b1e714f9c8c1cfe0cfbfe4016
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:25
msgid "Package Class Hierarchy"
msgstr ""

# f5b568e1526f427e80240bafc5d27b17
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:45
msgid ""
"The above diagram gives a high level view of the class hierarchy and how "
"each package relates. Each subclass inherits from the :code:"
"`PackageBaseClass` super class. The bulk of the work is done in this super "
"class which includes fetching, extracting to a staging directory and "
"installing. Each subclass then adds additional build-system-specific "
"functionality. In the following sections, we will go over examples of how to "
"utilize each subclass and to see how powerful these abstractions are when "
"packaging."
msgstr ""

# 34fb86e7f29d4bf69305054f4ea2f669
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:55
msgid "Package"
msgstr ""

# cb2a8258bdd1466eb5177f969d95bd2b
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:57
msgid ""
"We've already seen examples of a :code:`Package` class in our walkthrough "
"for writing package files, so we won't be spending much time with them here. "
"Briefly, the Package class allows for abitrary control over the build "
"process, whereas subclasses rely on certain patterns (e.g. :code:"
"`configure` :code:`make` :code:`make install`) to be useful. :code:`Package` "
"classes are particularly useful for packages that have a non-conventional "
"way of being built since the packager can utilize some of Spack's helper "
"functions to customize the building and installing of a package."
msgstr ""

# 5fce917cdfd747329874edc5bea86840
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:68
msgid "Autotools"
msgstr ""

# 000e4c6fbb794f9ba36b25160a35a773
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:70
msgid ""
"As we have seen earlier, packages using :code:`Autotools` use :code:"
"`configure`, :code:`make` and :code:`make install` commands to execute the "
"build and install process. In our :code:`Package` class, your typical build "
"incantation will consist of the following:"
msgstr ""

# eb3380bf15a94ac295d39685896aeba5
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:82
msgid ""
"You'll see that this looks similar to what we wrote in our packaging "
"tutorial."
msgstr ""

# d3fc6e4d9f0f4010a0d6faf7fdfeb3dc
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:84
msgid ""
"The :code:`Autotools` subclass aims to simplify writing package files and "
"provides convenience methods to manipulate each of the different phases for "
"a :code:`Autotools` build system."
msgstr ""

# f5fea3e19eee4aaf87c8c51b7e266215
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:88
msgid ":code:`Autotools` packages consist of four phases:"
msgstr ""

# 032add6983174a198be5fb0aaea7a6d4
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:90
msgid ":code:`autoreconf()`"
msgstr ""

# 46f14ff8d6af4b9f8c77503af1e11bb6
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:91
msgid ":code:`configure()`"
msgstr ""

# 1d57fb5c075444189d347d0b908980f8
# 53ff588e03c6476f93b517184e715d6c
# 2f9fe3bc9798481fb262461ca486567f
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:92
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:195
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:485
msgid ":code:`build()`"
msgstr ""

# c7e9a0a5e38541e69607c7c18d2aec9c
# 8d38440954c041d48c5a20611f5dfd37
# 3db427d731434c94a57c17bac4a72a62
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:93
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:196
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:486
msgid ":code:`install()`"
msgstr ""

# aa74ce9d8193476db396608ac6a24704
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:96
msgid ""
"Each of these phases have sensible defaults. Let's take a quick look at some "
"the internals of the :code:`Autotools` class:"
msgstr ""

# e06f5d207c494990ac8ca4d51ed2e4d6
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:104
msgid "This will open the :code:`AutotoolsPackage` file in your text editor."
msgstr ""

# f3c04bf97fea4275b42225e7803ee7ad
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:107
msgid ""
"The examples showing code for these classes is abridged to avoid having long "
"examples. We only show what is relevant to the packager."
msgstr ""

# e6ee40b03d104b1a96110a60414c34c0
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:118
msgid ""
"Important to note are the highlighted lines. These properties allow the "
"packager to set what build targets and install targets they want for their "
"package. If, for example, we wanted to add as our build target :code:`foo` "
"then we can append to our :code:`build_targets` property:"
msgstr ""

# 928507f4e9264f128495678357745eed
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:127
msgid "Which is similiar to invoking make in our Package"
msgstr ""

# 6e9b3472fca34960a983d03f1e322684
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:133
msgid ""
"This is useful if we have packages that ignore environment variables and "
"need a command-line argument."
msgstr ""

# 327f1e695c5b4c5cb7a7f423661320f5
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:136
msgid ""
"Another thing to take note of is in the :code:`configure()` method. Here we "
"see that the :code:`prefix` argument is already included since it is a "
"common pattern amongst packages using :code:`Autotools`. We then only have "
"to override :code:`configure_args()`, which will then return it's output to "
"to :code:`configure()`. Then, :code:`configure()` will append the common "
"arguments"
msgstr ""

# 8b876fcba09e461583c84c5839796ec9
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:143
msgid ""
"Packagers also have the option to run :code:`autoreconf` in case a package "
"needs to update the build system and generate a new :code:`configure`. "
"Though, for the most part this will be unnecessary."
msgstr ""

# 4cb734e1568944af9299d2bfa23455c4
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:147
msgid ""
"Let's look at the :code:`mpileaks` package.py file that we worked on earlier:"
msgstr ""

# e6a014bcdb4f41799715b1c092639136
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:153
msgid ""
"Notice that mpileaks is a :code:`Package` class but uses the :code:"
"`Autotools` build system. Although this package is acceptable let's make "
"this into an :code:`AutotoolsPackage` class and simplify it further."
msgstr ""

# ad2ab7cb8086400fa4a3ab90d48f747a
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:162
msgid "We first inherit from the :code:`AutotoolsPackage` class."
msgstr ""

# c3fc41dd63af4391a319cd1057f2f1d7
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:165
msgid ""
"Although we could keep the :code:`install()` method, most of it can be "
"handled by the :code:`AutotoolsPackage` base class. In fact, the only thing "
"that needs to be overridden is :code:`configure_args()`."
msgstr ""

# 06e5548f1d7044c2bdc0b75246f98e4c
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:174
msgid ""
"Since Spack takes care of setting the prefix for us we can exclude that as "
"an argument to :code:`configure`. Our packages look simpler, and the "
"packager does not need to worry about whether they have properly included :"
"code:`configure` and :code:`make`."
msgstr ""

# 8c7eb79a9a2b4502ad1cd498df8f0993
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:179
msgid ""
"This version of the :code:`mpileaks` package installs the same as the "
"previous, but the :code:`AutotoolsPackage` class lets us do it with a "
"cleaner looking package file."
msgstr ""

# 196ffbae220445f481d555bd525e31f3
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:185
msgid "Makefile"
msgstr ""

# 9c46784ce3db45eabaee92c79fa9de67
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:187
msgid ""
"Packages that utilize :code:`Make` or a :code:`Makefile` usually require you "
"to edit a :code:`Makefile` to set up platform and compiler specific "
"variables. These packages are handled by the :code:`Makefile` subclass which "
"provides convenience methods to help write these types of packages."
msgstr ""

# b502c79d08c04feb8ed7bb38c737682b
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:192
msgid ""
"A :code:`MakefilePackage` class has three phases that can be overridden. "
"These include:"
msgstr ""

# c6c5bb480d6241fdb5cc9a17b2f4a241
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:194
msgid ":code:`edit()`"
msgstr ""

# 15865ddf170249ee8bdf4bb46200b825
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:198
msgid ""
"Packagers then have the ability to control how a :code:`Makefile` is edited, "
"and what targets to include for the build phase or install phase."
msgstr ""

# ec51e6219c2b4a139d5b59b5b4cb33e9
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:201
msgid "Let's also take a look inside the :code:`MakefilePackage` class:"
msgstr ""

# ff352d29f2ec49be8d23c990823d44d4
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:207
msgid "Take note of the following:"
msgstr ""

# 0bfc4bc57ad1430c97262f6a9c08e1cf
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:216
msgid ""
"Similar to :code:`Autotools`, :code:`MakefilePackage` class has properties "
"that can be set by the packager. We can also override the different methods "
"highlighted."
msgstr ""

# 58c316073d0d4810af5a3fcf8fc87e9a
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:221
msgid "Let's try to recreate the Bowtie_ package:"
msgstr ""

# 60374a1748f94f4d8fa75608edc4c182
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:243
msgid ""
"Once the fetching is completed, Spack will open up your text editor in the "
"usual fashion and create a template of a :code:`MakefilePackage` package.py."
msgstr ""

# be8de61c31734c0f8db0496372802009
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:250
msgid ""
"Spack was successfully able to detect that :code:`Bowtie` uses :code:`Make`. "
"Let's add in the rest of our details for our package:"
msgstr ""

# c70cb4e0aa97420d9c591967934bf0c2
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:258
msgid ""
"As we mentioned earlier, most packages using a :code:`Makefile` have hard-"
"coded variables that must be edited. These variables are fine if you happen "
"to not care about setup or types of compilers used but Spack is designed to "
"work with any compiler. The :code:`MakefilePackage` subclass makes it easy "
"to edit these :code:`Makefiles` by having an :code:`edit()` method that can "
"be overridden."
msgstr ""

# 85588a8fe57d4f1c8eca6d3b81e152bc
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:265
msgid ""
"Let's take a look at the default :code:`Makefile` that :code:`Bowtie` "
"provides. If we look inside, we see that :code:`CC` and :code:`CXX` point to "
"our GNU compiler:"
msgstr ""

# 4291e4ab9f1a492fb0cf187d82e9203c
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:274
msgid "As usual make sure you have shell support activated with spack:"
msgstr ""

# d8d4f635e51b432a94acbc005cd74cd2
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:275
msgid ":code:`source /path/to/spack_root/spack/share/spack/setup-env.sh`"
msgstr ""

# 1f7ae2ac6a164dc0a3b03bfe7649c074
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:292
msgid ""
"To fix this, we need to use the :code:`edit()` method to write our custom :"
"code:`Makefile`."
msgstr ""

# b2e93b9c8396468898965caa2f74c532
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:300
msgid ""
"Here we use a :code:`FileFilter` object to edit our :code:`Makefile`. It "
"takes in a regular expression and then replaces :code:`CC` and :code:`CXX` "
"to whatever Spack sets :code:`CC` and :code:`CXX` environment variables to. "
"This allows us to build :code:`Bowtie` with whatever compiler we specify "
"through Spack's :code:`spec` syntax."
msgstr ""

# 3e2a1f1956a048029083462e61496610
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:306
msgid "Let's change the build and install phases of our package:"
msgstr ""

# dccf17b8e1144446b6b0e3d5222f5605
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:313
msgid ""
"Here demonstrate another strategy that we can use to manipulate our package "
"We can provide command-line arguments to :code:`make()`. Since :code:"
"`Bowtie` can use :code:`tbb` we can either add :code:`NO_TBB=1` as a "
"argument to prevent :code:`tbb` support or we can just invoke :code:`make` "
"with no arguments."
msgstr ""

# 535e08e7e37f49e09393579d77eeb76e
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:318
msgid ""
":code:`Bowtie` requires our :code:`install_target` to provide a path to the "
"install directory. We can do this by providing :code:`prefix=` as a command "
"line argument to :code:`make()`."
msgstr ""

# 54a58ec27ab84c1f89d26cc1f0a87447
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:322
msgid "Let's look at a couple of other examples and go through them:"
msgstr ""

# aba1f78a5db24074a64f454bcf71c0db
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:328
msgid ""
"Some packages allow environment variables to be set and will honor them. "
"Packages that use :code:`?=` for assignment in their :code:`Makefile` can be "
"set using environment variables. In our :code:`esmf` example we set two "
"environment variables in our :code:`edit()` method:"
msgstr ""

# eeecb52debe7419ba8b9371e8b8bd8e4
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:357
msgid ""
"As you may have noticed, we didn't really write anything to the :code:"
"`Makefile` but rather we set environment variables that will override "
"variables set in the :code:`Makefile`."
msgstr ""

# 07b1ea51b24a410c9148dd7b4772f9ca
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:361
msgid ""
"Some packages include a configuration file that sets certain compiler "
"variables, platform specific variables, and the location of dependencies or "
"libraries. If the file is simple and only requires a couple of changes, we "
"can overwrite those entries with our :code:`FileFilter` object. If the "
"configuration involves complex changes, we can write a new configuration "
"file from scratch."
msgstr ""

# d34c6c2e084e47c19022d38ffdafd463
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:367
msgid "Let's look at an example of this in the :code:`elk` package:"
msgstr ""

# 09f9e9d6e2504c65babde1aef13e2aca
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:455
msgid ""
":code:`config` is just a dictionary that we can add key-value pairs to. By "
"the end of the :code:`edit()` method we write the contents of our dictionary "
"to :code:`make.inc`."
msgstr ""

# faf12e29bfb444e3856f0c5d8973ed34
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:461
msgid "CMake"
msgstr ""

# 996ffd8b1c9946a1b66adfb62aba021c
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:463
msgid ""
"CMake_ is another common build system that has been gaining popularity. It "
"works in a similar manner to :code:`Autotools` but with differences in "
"variable names, the number of configuration options available, and the "
"handling of shared libraries. Typical build incantations look like this:"
msgstr ""

# 1b1041d1974e41ada65da0ed328f5072
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:477
msgid ""
"As you can see from the example above, it's very similar to invoking :code:"
"`configure` and :code:`make` in an :code:`Autotools` build system. However, "
"the variable names and options differ. Most options in CMake are prefixed "
"with a :code:`'-D'` flag to indicate a configuration setting."
msgstr ""

# 1b219eff551d4faa867c600fe6b3fc12
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:482
msgid "In the :code:`CMakePackage` class we can override the following phases:"
msgstr ""

# 5974489d57bc44878a8e50da2cb9a2a5
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:484
msgid ":code:`cmake()`"
msgstr ""

# 14d26486f0f644cf990a673b8fde65c0
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:488
msgid ""
"The :code:`CMakePackage` class also provides sensible defaults so we only "
"need to override :code:`cmake_args()`."
msgstr ""

# d717fbc7d03942beb49545c364088599
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:491
msgid ""
"Let's look at these defaults in the :code:`CMakePackage` class in the :code:"
"`_std_args()` method:"
msgstr ""

# 5238ba03f3ce4be5ae14000deaab8685
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:503
msgid ""
"Some :code:`CMake` packages use different generators. Spack is able to "
"support Unix-Makefile_ generators as well as Ninja_ generators."
msgstr ""

# 47fe36ba1cd14a3191d934d7e0fe5daf
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:509
msgid ""
"If no generator is specified Spack will default to :code:`Unix Makefiles`."
msgstr ""

# fdde2aa4a10b4212bd60f8e07a843c72
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:511
msgid ""
"Next we setup the build type. In :code:`CMake` you can specify the build "
"type that you want. Options include:"
msgstr ""

# ee5a1bdba1de44f7903e85281b3a6232
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:514
msgid ":code:`empty`"
msgstr ""

# 6b24511dae214120a7b02c1ecd45a81c
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:515
msgid ":code:`Debug`"
msgstr ""

# a1d36de04b944f018a7202cf5e57f06d
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:516
msgid ":code:`Release`"
msgstr ""

# cd3fcc023d0c464fbbb00d19ab39d9b4
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:517
msgid ":code:`RelWithDebInfo`"
msgstr ""

# f381dadbe6fb4fd08b4beefc8e58b183
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:518
msgid ":code:`MinSizeRel`"
msgstr ""

# af920332fa4241ccaf5ebebf38e05c05
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:520
msgid ""
"With these options you can specify whether you want your executable to have "
"the debug version only, release version or the release with debug "
"information. Release executables tend to be more optimized than Debug. In "
"Spack, we set the default as RelWithDebInfo unless otherwise specified "
"through a variant."
msgstr ""

# 4d33ce24c51e43baae66605529bf7e50
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:525
msgid ""
"Spack then automatically sets up the :code:`-DCMAKE_INSTALL_PREFIX` path, "
"appends the build type (:code:`RelWithDebInfo` default), and then specifies "
"a verbose :code:`Makefile`."
msgstr ""

# a2d2159432c74579a0a91b94756c6ae6
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:529
msgid "Next we add the :code:`rpaths` to :code:`-DCMAKE_INSTALL_RPATH:STRING`."
msgstr ""

# 3da6e16716fd4037b5d09f9b3a3c17f6
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:532
msgid ""
"Finally we add to :code:`-DCMAKE_PREFIX_PATH:STRING` the locations of all "
"our dependencies so that :code:`CMake` can find them."
msgstr ""

# 3a292bce1c394ae0a9611f5d0a2a63ef
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:535
msgid ""
"In the end our :code:`cmake` line will look like this (example is :code:"
"`xrootd`):"
msgstr ""

# 979c065397eb4eba878dc9a2fd4dba50
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:541
msgid ""
"We can see now how :code:`CMake` takes care of a lot of the boilerplate code "
"that would have to be otherwise typed in."
msgstr ""

# cf08c7ea022c42128e77dab2ec7315a8
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:544
msgid "Let's try to recreate callpath_:"
msgstr ""

# 3bbdc65961db43de9df5109e622c3a39
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:569
msgid "which then produces the following template:"
msgstr ""

# 2cd7f2e4f61745ea8a043cb36b0c9246
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:575
msgid "Again we fill in the details:"
msgstr ""

# 56bc21d73b554e12a75d9585fee4d8db
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:582
msgid ""
"As mentioned earlier, Spack will use sensible defaults to prevent repeated "
"code and to make writing :code:`CMake` package files simpler."
msgstr ""

# 11c1d866bff24ffeb57f27fe7f1dc49d
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:585
msgid ""
"In callpath, we want to add options to :code:`CALLPATH_WALKER` as well as "
"add compiler flags. We add the following options like so:"
msgstr ""

# b8d92476333f42af850f76d9e713cc25
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:593
msgid ""
"Now we can control our build options using :code:`cmake_args()`. If defaults "
"are sufficient enough for the package, we can leave this method out."
msgstr ""

# 1fdf34bc40384284a35c9df2aa083db8
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:596
msgid ""
":code:`CMakePackage` classes allow for control of other features in the "
"build system. For example, you can specify the path to the \"out of source\" "
"build directory and also point to the root of the :code:`CMakeLists.txt` "
"file if it is placed in a non-standard location."
msgstr ""

# d61daadbbae64c9d8f613012a115e634
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:601
msgid ""
"A good example of a package that has its :code:`CMakeLists.txt` file located "
"at a different location is found in :code:`spades`."
msgstr ""

# be5ea25c719641c4bb86b3d44c9ae168
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:612
msgid ""
"Here :code:`root_cmakelists_dir` will tell Spack where to find the location "
"of :code:`CMakeLists.txt`. In this example, it is located a directory level "
"below in the :code:`src` directory."
msgstr ""

# d8db548130d44b8ba34e03d4c9e60d91
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:616
msgid ""
"Some :code:`CMake` packages also require the :code:`install` phase to be "
"overridden. For example, let's take a look at :code:`sniffles`."
msgstr ""

# c22e22d320e54ea295c05cc053faf8db
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:623
msgid ""
"In the :code:`install()` method, we have to manually install our targets so "
"we override the :code:`install()` method to do it for us:"
msgstr ""

# a8efb3cc046e4c3e8f5f204f8e3b9bc6
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:641
msgid ""
"Python extensions and modules are built differently from source than most "
"applications. Python uses a :code:`setup.py` script to install Python "
"modules. The script consists of a call to :code:`setup()` which provides the "
"information required to build a module to Distutils. If you're familiar with "
"pip or easy_install, setup.py does the same thing."
msgstr ""

# 7479a6317fd04576871c26ca17171746
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:647
msgid "These modules are usually installed using the following line:"
msgstr ""

# 717b5457000d41a9a9534ec4d4b672b9
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:653
msgid ""
"There are also a list of commands and phases that you can call. To see the "
"full list you can run:"
msgstr ""

# c40abe6abb434a509bcddba2e0acdd1f
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:681
msgid ""
"We can write package files for Python packages using the :code:`Package` "
"class, but the class brings with it a lot of methods that are useless for "
"Python packages. Instead, Spack has a :code:`PythonPackage` subclass that "
"allows packagers of Python modules to be able to invoke :code:`setup.py` and "
"use :code:`Distutils`, which is much more familiar to a typical python user."
msgstr ""

# 89f4aa2cd5154683b1ac3f3b3cdde76f
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:687
msgid ""
"To see the defaults that Spack has for each a methods, we will take a look "
"at the :code:`PythonPackage` class:"
msgstr ""

# cfef6e8eb2bf4c9faaff9eb1363c8e5d
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:694
msgid "We see the following:"
msgstr ""

# 52cd5589111741dcaeadd081eae1132b
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:702
msgid "Each of these methods have sensible defaults or they can be overridden."
msgstr ""

# c25c7f19029743c08c93331fcb89c9dc
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:704
msgid "We will write a package file for Pandas_:"
msgstr ""

# 25f4c4ee0aae43a29d08e468469ebc66
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:727
msgid "And we are left with the following template:"
msgstr ""

# 20b32b644873423496cda6dcfabe5692
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:733
msgid ""
"As you can see this is not any different than any package template that we "
"have written. We have the choice of providing build options or using the "
"sensible defaults"
msgstr ""

# 07bdc959fc7741bab53f000ce3103034
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:737
msgid "Luckily for us, there is no need to provide build args."
msgstr ""

# 5cd99a80b7654180812d69d7dd02e95f
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:739
msgid ""
"Next we need to find the dependencies of a package. Dependencies are usually "
"listed in :code:`setup.py`. You can find the dependencies by searching for :"
"code:`install_requires` keyword in that file. Here it is for :code:`Pandas`:"
msgstr ""

# 74d43a81807e4534a16e6b032a4fe592
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:761
msgid "You can find a more comprehensive list at the Pandas documentation_."
msgstr ""

# 08e21eaf841f4403a2179842c3da6f5f
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:766
msgid ""
"By reading the documentation and :code:`setup.py` we found that :code:"
"`Pandas` depends on :code:`python-dateutil`, :code:`pytz`, and :code:"
"`numpy`, :code:`numexpr`, and finally :code:`bottleneck`."
msgstr ""

# cbba644b7ecc41bfaa4e43a3eaa47ccb
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:770
msgid "Here is the completed :code:`Pandas` script:"
msgstr ""

# 9626db35990c4f529a3a46b0323386ef
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:776
msgid ""
"It is quite important to declare all the dependencies of a Python package. "
"Spack can \"activate\" Python packages to prevent the user from having to "
"load each dependency module explictly. If a dependency is missed, Spack will "
"be unable to properly activate the package and it will cause an issue. To "
"learn more about extensions go to :ref:`cmd-spack-extensions`."
msgstr ""

# 57d5f622dce847399656ade6c222eddd
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:782
msgid ""
"From this example, you can see that building Python modules is made easy "
"through the :code:`PythonPackage` class."
msgstr ""

# #-#-#-#-#  tutorial_buildsystems.pot (Spack 0.12)  #-#-#-#-#
# d4346689344341f0827a6416b0efed74
# #-#-#-#-#  workflows.pot (Spack 0.12)  #-#-#-#-#
# a71befd7d6ce4a6fbc7da6787a09ed3d
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:787
#: ../spack/lib/spack/docs/workflows.rst:1058
msgid "Other Build Systems"
msgstr ""

# eae374ebea854deabb251d42fbcba7ec
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:789
msgid ""
"Although we won't get in depth with any of the other build systems that "
"Spack supports, it is worth mentioning that Spack does provide subclasses "
"for the following build systems:"
msgstr ""

# ae002b909ef24f08ac9bee1c89f0d8f3
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:793
msgid ":code:`IntelPackage`"
msgstr ""

# ebdaead0a54b4d96866dd2e7789e32f6
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:794
msgid ":code:`SconsPackage`"
msgstr ""

# 83562a28e5c44efd95f0885abe482821
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:795
msgid ":code:`WafPackage`"
msgstr ""

# 3d24f93c36c94e1bbd849c575d292ab7
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:796
msgid ":code:`RPackage`"
msgstr ""

# 2e022510f96c4f6e831d1040af12d95f
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:797
msgid ":code:`PerlPackage`"
msgstr ""

# 06ed9694e75d48dda32c3b79aae04203
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:798
msgid ":code:`QMakePackage`"
msgstr ""

# 1ceb5c9417524086b24404a71e94f676
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:801
msgid ""
"Each of these classes have their own abstractions to help assist in writing "
"package files. For whatever doesn't fit nicely into the other build-systems, "
"you can use the :code:`Package` class."
msgstr ""

# b54be01898404dd4925788429ade7eda
#: ../spack/lib/spack/docs/tutorial_buildsystems.rst:805
msgid ""
"Hopefully by now you can see how we aim to make packaging simple and robust "
"through these classes. If you want to learn more about these build systems, "
"check out :ref:`installation_procedure` in the Packaging Guide."
msgstr ""

# 6da9efc837e346e7930e4182d77a2324
#: ../spack/lib/spack/docs/tutorial_configuration.rst:10
msgid "Configuration Tutorial"
msgstr ""

# 9f1163ce6be64fbda070a8997c89d6dc
#: ../spack/lib/spack/docs/tutorial_configuration.rst:12
msgid ""
"This tutorial will guide you through various configuration options that "
"allow you to customize Spack's behavior with respect to software "
"installation. We will first cover the configuration file hierarchy. Then, we "
"will cover configuration options for compilers, focusing on how they can be "
"used to extend Spack's compiler auto-detection. Next, we will cover the "
"packages configuration file, focusing on how it can be used to override "
"default build options as well as specify external package installations to "
"use. Finally, we will briefly touch on the config configuration file, which "
"manages more high-level Spack configuration options."
msgstr ""

# b5029220b1604c5b9d29d195772e9ece
#: ../spack/lib/spack/docs/tutorial_configuration.rst:23
msgid ""
"For all of these features we will demonstrate how we build up a full "
"configuration file. For some we will then demonstrate how the configuration "
"affects the install command, and for others we will use the ``spack spec`` "
"command to demonstrate how the configuration changes have affected Spack's "
"concretization algorithm. The provided output is all from a server running "
"Ubuntu version 16.04."
msgstr ""

# 44972701eca441ef8a350eb3f184cbb5
#: ../spack/lib/spack/docs/tutorial_configuration.rst:36
msgid ""
"Depending on your use case, you may want to provide configuration settings "
"common to everyone on your team, or you may want to set default behaviors "
"specific to a single user account. Spack provides six configuration *scopes* "
"to handle this customization. These scopes, in order of decreasing priority, "
"are:"
msgstr ""

# 9a7868bf85314fbf8ae00fb5d7a0c927
#: ../spack/lib/spack/docs/tutorial_configuration.rst:43
msgid "Scope"
msgstr ""

# e219b3f4fc4b4967b8218bf226213d2d
#: ../spack/lib/spack/docs/tutorial_configuration.rst:43
msgid "Directory"
msgstr ""

# 15ecd01930534c3084a17abe55d583b8
#: ../spack/lib/spack/docs/tutorial_configuration.rst:45
msgid "Command-line"
msgstr ""

# 7fd1151aa9c54f4f8457908c8869c9e9
#: ../spack/lib/spack/docs/tutorial_configuration.rst:45
msgid "N/A"
msgstr ""

# 27bcfe358aae45d68a0599741f189969
#: ../spack/lib/spack/docs/tutorial_configuration.rst:46
msgid "Custom"
msgstr ""

# 8857d4eb802448d398fd59c9c56d3ec0
#: ../spack/lib/spack/docs/tutorial_configuration.rst:46
msgid "Custom directory, specified with ``--config-scope``"
msgstr ""

# c5767744914b419e8aa87900562d8fef
#: ../spack/lib/spack/docs/tutorial_configuration.rst:47
msgid "User"
msgstr ""

# 8194b697599e444bb5768aecf19c2a0c
#: ../spack/lib/spack/docs/tutorial_configuration.rst:47
msgid "``~/.spack/``"
msgstr ""

# c946bccee3674f8f8f653a907396df10
#: ../spack/lib/spack/docs/tutorial_configuration.rst:48
msgid "Site"
msgstr ""

# 04e18e55d75f4650b32406bbce0b9459
#: ../spack/lib/spack/docs/tutorial_configuration.rst:48
msgid "``$SPACK_ROOT/etc/spack/``"
msgstr ""

# deb88d98dfeb41cf807865e52824d080
#: ../spack/lib/spack/docs/tutorial_configuration.rst:49
msgid "``/etc/spack/``"
msgstr ""

# ae27590240544e1891762938338a9860
#: ../spack/lib/spack/docs/tutorial_configuration.rst:50
msgid "Defaults"
msgstr ""

# 1fbc9482927a434aa207beb079aa4830
#: ../spack/lib/spack/docs/tutorial_configuration.rst:50
msgid "``$SPACK_ROOT/etc/spack/defaults/``"
msgstr ""

# ddc9fa6958884ab3a9f0186bd5c16dde
#: ../spack/lib/spack/docs/tutorial_configuration.rst:53
msgid ""
"Spack's default configuration settings reside in ``$SPACK_ROOT/etc/spack/"
"defaults``. These are useful for reference, but should never be directly "
"edited. To override these settings, create new configuration files in any of "
"the higher-priority configuration scopes."
msgstr ""

# ebb0b515bf9a4b6c8cc1e6ff71a3947a
#: ../spack/lib/spack/docs/tutorial_configuration.rst:59
msgid ""
"A particular cluster may have multiple Spack installations associated with "
"different projects. To provide settings common to all Spack installations, "
"put your configuration files in ``/etc/spack``. To provide settings specific "
"to a particular Spack installation, you can use the ``$SPACK_ROOT/etc/"
"spack`` directory."
msgstr ""

# 9da049e0faf44cb9aabe76cc7b0083d6
#: ../spack/lib/spack/docs/tutorial_configuration.rst:65
msgid ""
"For settings specific to a particular user, you will want to add "
"configuration files to the ``~/.spack`` directory. When Spack first checked "
"for compilers on your system, you may have noticed that it placed your "
"compiler configuration in this directory."
msgstr ""

# a9404d1b2cf3433590ed489cf554d653
#: ../spack/lib/spack/docs/tutorial_configuration.rst:70
msgid ""
"Configuration settings can also be placed in a custom location, which is "
"then specified on the command line via ``--config-scope``. An example use "
"case is managing two sets of configurations, one for development and another "
"for production preferences."
msgstr ""

# 50485e96a8d94626a95665b5a80c788e
#: ../spack/lib/spack/docs/tutorial_configuration.rst:75
msgid ""
"Settings specified on the command line have precedence over all other "
"configuration scopes."
msgstr ""

# 7089887d7cce4630b497bd9a18fdc62a
#: ../spack/lib/spack/docs/tutorial_configuration.rst:82
msgid ""
"Some facilities manage multiple platforms from a single shared file system. "
"In order to handle this, each of the configuration scopes listed above has "
"two *sub-scopes*: platform-specific and platform-independent. For example, "
"compiler settings can be stored in ``compilers.yaml`` configuration files in "
"the following locations:"
msgstr ""

# 26be5b4e37ba40e09bb5b5ddc1d11c76
#: ../spack/lib/spack/docs/tutorial_configuration.rst:88
msgid "``~/.spack/<platform>/compilers.yaml``"
msgstr ""

# 5893e30d59c9475ea7a55489a48321b6
#: ../spack/lib/spack/docs/tutorial_configuration.rst:89
msgid "``~/.spack/compilers.yaml``"
msgstr ""

# d7ad2a3e9b8841aca0a64befc87200d8
#: ../spack/lib/spack/docs/tutorial_configuration.rst:90
msgid "``$SPACK_ROOT/etc/spack/<platform>/compilers.yaml``"
msgstr ""

# 946cff5388814feeaf47bc7c07bd2dd0
#: ../spack/lib/spack/docs/tutorial_configuration.rst:91
msgid "``$SPACK_ROOT/etc/spack/compilers.yaml``"
msgstr ""

# 4a3872b954f3406fb2e0f5c3b3b72eea
#: ../spack/lib/spack/docs/tutorial_configuration.rst:92
msgid "``/etc/spack/<platform>/compilers.yaml``"
msgstr ""

# f9118b7c29f14186880763ba51ba6721
#: ../spack/lib/spack/docs/tutorial_configuration.rst:93
msgid "``/etc/spack/compilers.yaml``"
msgstr ""

# ad3ddf7b97ae4223bcfd3aeb2ac5e155
#: ../spack/lib/spack/docs/tutorial_configuration.rst:94
msgid "``$SPACK_ROOT/etc/defaults/<platform>/compilers.yaml``"
msgstr ""

# 9085ad015b49404db044eeba09efb0e4
#: ../spack/lib/spack/docs/tutorial_configuration.rst:95
msgid "``$SPACK_ROOT/etc/defaults/compilers.yaml``"
msgstr ""

# ab07438326f94b608c773afae1cfea1a
#: ../spack/lib/spack/docs/tutorial_configuration.rst:97
msgid ""
"These files are listed in decreasing order of precedence, so files in ``~/."
"spack/<platform>`` will override settings in ``~/.spack``."
msgstr ""

# de0a2e112ddd488e9af2244820042f0f
#: ../spack/lib/spack/docs/tutorial_configuration.rst:104
msgid ""
"Spack configurations are YAML dictionaries. Every configuration file begins "
"with a top-level dictionary that tells Spack which configuration set it "
"modifies. When Spack checks it's configuration, the configuration scopes are "
"updated as dictionaries in increasing order of precedence, allowing higher "
"precedence files to override lower. YAML dictionaries use a colon \":\" to "
"specify key-value pairs. Spack extends YAML syntax slightly to allow a "
"double-colon \"::\" to specify a key-value pair. When a double-colon is used "
"to specify a key-value pair, instead of adding that section Spack replaces "
"what was in that section with the new value. For example, a user compilers "
"configuration file as follows:"
msgstr ""

# fe641668c674450493dd28a6e16986d3
#: ../spack/lib/spack/docs/tutorial_configuration.rst:134
msgid ""
"ensures that no other compilers are used, as the user configuration scope is "
"the last scope searched and the ``compilers::`` line replaces all previous "
"configuration files information. If the same configuration file had a single "
"colon instead of the double colon, it would add the GCC version 5.4.0 "
"compiler to whatever other compilers were listed in other configuration "
"files."
msgstr ""

# 04a02697227a49d593b2e1e42d2f455d
#: ../spack/lib/spack/docs/tutorial_configuration.rst:145
msgid "Compiler Configuration"
msgstr ""

# f1c31bf90bfc42339260dfba8fc714ee
#: ../spack/lib/spack/docs/tutorial_configuration.rst:147
msgid ""
"For most tasks, we can use Spack with the compilers auto-detected the first "
"time Spack runs on a system. As discussed in the basic installation "
"tutorial, we can also tell Spack where compilers are located using the "
"``spack compiler add`` command. However, in some circumstances we want even "
"more fine-grained control over the compilers available. This section will "
"teach you how to exercise that control using the compilers configuration "
"file."
msgstr ""

# 568b5b0c8b3e4ababc12789fa4394583
#: ../spack/lib/spack/docs/tutorial_configuration.rst:155
msgid "We will start by opening the compilers configuration file"
msgstr ""

# 382167b9df284dbd91cb2d3432b8296a
#: ../spack/lib/spack/docs/tutorial_configuration.rst:219
msgid ""
"This specifies two versions of the GCC compiler and two versions of the "
"Clang compiler with no Flang compiler. Now suppose we have a code that we "
"want to compile with the Clang compiler for C/C++ code, but with gfortran "
"for Fortran components. We can do this by adding another entry to the "
"``compilers.yaml`` file."
msgstr ""

# e5f633c45fac4ef0a346109df7e7e4d5
#: ../spack/lib/spack/docs/tutorial_configuration.rst:242
msgid ""
"Let's talk about the sections of this compiler entry that we've changed. The "
"biggest change we've made is to the ``paths`` section. This lists the paths "
"to the compilers to use for each language/specification. In this case, we "
"point to the clang compiler for C/C++ and the gfortran compiler for both "
"specifications of Fortran. We've also changed the ``spec`` entry for this "
"compiler. The ``spec`` entry is effectively the name of the compiler for "
"Spack. It consists of a name and a version number, separated by the ``@`` "
"sigil. The name must be one of the supported compiler names in Spack (gcc, "
"intel, pgi, xl, xl_r, clang, nag, cce, arm). The version number can be an "
"arbitrary string of alphanumeric characters, as well as ``-``, ``.``, and "
"``_``. The ``target`` and ``operating_system`` sections we leave unchanged. "
"These sections specify when Spack can use different compilers, and are "
"primarily useful for configuration files that will be used across multiple "
"systems."
msgstr ""

# 7a417a72188b4445ae00883d38aae2d5
#: ../spack/lib/spack/docs/tutorial_configuration.rst:257
msgid "We can verify that our new compiler works by invoking it now:"
msgstr ""

# 75af6f39b4144936bb132c48cdeb8d23
#: ../spack/lib/spack/docs/tutorial_configuration.rst:265
msgid "This new compiler also works on Fortran codes:"
msgstr ""

# 208e251b8f664530956ac164556d0a23
#: ../spack/lib/spack/docs/tutorial_configuration.rst:277
msgid ""
"Some compilers may require specific compiler flags to work properly in a "
"particular computing environment. Spack provides configuration options for "
"setting compiler flags every time a specific compiler is invoked. These "
"flags become part of the package spec and therefore of the build provenance. "
"As on the command line, the flags are set through the implicit build "
"variables ``cflags``, ``cxxflags``, ``cppflags``, ``fflags``, ``ldflags``, "
"and ``ldlibs``."
msgstr ""

# 2e85ae825bde4555bb2874c94a524294
#: ../spack/lib/spack/docs/tutorial_configuration.rst:285
msgid ""
"Let's open our compilers configuration file again and add a compiler flag."
msgstr ""

# 49c3402af2484e9e86dfb0dd25a16d20
#: ../spack/lib/spack/docs/tutorial_configuration.rst:305
msgid ""
"We can test this out using the ``spack spec`` command to show how the spec "
"is concretized."
msgstr ""

# 0a33b622a537454aa1abd50811b0b59d
#: ../spack/lib/spack/docs/tutorial_configuration.rst:325
msgid ""
"We can see that ``cppflags=\"-g\"`` has been added to every node in the DAG."
msgstr ""

# 70b604852bff491782d4574632c1dfe9
#: ../spack/lib/spack/docs/tutorial_configuration.rst:329
msgid "Advanced Compiler Configuration"
msgstr ""

# d4d83afbbe664823a6f45d02e19484bb
#: ../spack/lib/spack/docs/tutorial_configuration.rst:331
msgid ""
"There are three fields of the compiler configuration entry that we have not "
"yet talked about."
msgstr ""

# 095d7a7e969a4fd698bb1fb98ad97407
#: ../spack/lib/spack/docs/tutorial_configuration.rst:334
msgid ""
"The ``modules`` field of the compiler is used primarily on Cray systems, but "
"can be useful on any system that has compilers that are only useful when a "
"particular module is loaded. Any modules in the ``modules`` field of the "
"compiler configuration will be loaded as part of the build environment for "
"packages using that compiler."
msgstr ""

# 239d66b8f035476d985929928b76df92
#: ../spack/lib/spack/docs/tutorial_configuration.rst:340
msgid ""
"The ``extra_rpaths`` field of the compiler configuration is used for "
"compilers that do not rpath all of their dependencies by default. Since "
"compilers are often installed externally to Spack, Spack is unable to manage "
"compiler dependencies and enforce rpath usage. This can lead to packages not "
"finding link dependencies imposed by the compiler properly. For compilers "
"that impose link dependencies on the resulting executables that are not "
"rpath'ed into the executable automatically, the ``extra_rpaths`` field of "
"the compiler configuration tells Spack which dependencies to rpath into "
"every executable created by that compiler. The executables will then be able "
"to find the link dependencies imposed by the compiler. As an example, this "
"field can be set by"
msgstr ""

# 1491039874f243b9bac7bc4574bc9ffa
#: ../spack/lib/spack/docs/tutorial_configuration.rst:362
msgid ""
"The ``environment`` field of the compiler configuration is used for "
"compilers that require environment variables to be set during build time. "
"For example, if your Intel compiler suite requires the "
"``INTEL_LICENSE_FILE`` environment variable to point to the proper license "
"server, you can set this in ``compilers.yaml`` as follows:"
msgstr ""

# fe804e3f92e64fae8e3877df6d97e77c
#: ../spack/lib/spack/docs/tutorial_configuration.rst:377
msgid ""
"In addition to ``set``, ``environment`` also supports ``unset``, ``prepend-"
"path``, and ``append-path``."
msgstr ""

# 79da01eff5ca476680840774df3f0b04
#: ../spack/lib/spack/docs/tutorial_configuration.rst:384
msgid "Configuring Package Preferences"
msgstr ""

# 08d35e10b7c342b5a5c7680842a5e6cf
#: ../spack/lib/spack/docs/tutorial_configuration.rst:386
msgid ""
"Package preferences in Spack are managed through the ``packages.yaml`` "
"configuration file. First, we will look at the default ``packages.yaml`` "
"file."
msgstr ""

# 91e2079c59724381965eb690f39036d3
#: ../spack/lib/spack/docs/tutorial_configuration.rst:399
msgid ""
"This sets the default preferences for compilers and for providers of virtual "
"packages. To illustrate how this works, suppose we want to change the "
"preferences to prefer the Clang compiler and to prefer MPICH over OpenMPI. "
"Currently, we prefer GCC and OpenMPI."
msgstr ""

# 04610b420b71430ababa870d91b04518
#: ../spack/lib/spack/docs/tutorial_configuration.rst:434
msgid ""
"Now we will open the packages configuration file and update our preferences."
msgstr ""

# e863db2db77a497ab96713de777962a3
#: ../spack/lib/spack/docs/tutorial_configuration.rst:451
msgid ""
"Because of the configuration scoping we discussed earlier, this overrides "
"the default settings just for these two items."
msgstr ""

# 5cab9e65db614369bf9dc7f3282f7821
#: ../spack/lib/spack/docs/tutorial_configuration.rst:482
msgid "Variant Preferences"
msgstr ""

# f22fe60d561046228fc18be40506be6c
#: ../spack/lib/spack/docs/tutorial_configuration.rst:484
msgid ""
"The packages configuration file can also set variant preferences for package "
"variants. For example, let's change our preferences to build all packages "
"without shared libraries. We will accomplish this by turning off the "
"``shared`` variant on all packages that have one."
msgstr ""

# 3261fbed237042c69f75b43e8cce68d2
#: ../spack/lib/spack/docs/tutorial_configuration.rst:499
msgid "We can check the effect of this command with ``spack spec hdf5`` again."
msgstr ""

# 8a9d21e3e9a942d897b0baee79c2c5e4
#: ../spack/lib/spack/docs/tutorial_configuration.rst:527
msgid ""
"So far we have only made global changes to the package preferences. As we've "
"seen throughout this tutorial, hdf5 builds with MPI enabled by default in "
"Spack. If we were working on a project that would routinely need serial "
"hdf5, that might get annoying quickly, having to type ``hdf5~mpi`` all the "
"time. Instead, we'll update our preferences for hdf5."
msgstr ""

# 6f7d798998544678bf4b8d9180db7a36
#: ../spack/lib/spack/docs/tutorial_configuration.rst:546
msgid "Now hdf5 will concretize without an MPI dependency by default."
msgstr ""

# bdb7d09cb2184eb0ab7b93c243305144
#: ../spack/lib/spack/docs/tutorial_configuration.rst:561
msgid ""
"In general, every attribute that we can set for all packages we can set "
"separately for an individual package."
msgstr ""

# 5bfcbef7eef947abaafb7719751bb940
#: ../spack/lib/spack/docs/tutorial_configuration.rst:568
msgid ""
"The packages configuration file also controls when Spack will build against "
"an externally installed package. On these systems we have a pre-installed "
"zlib."
msgstr ""

# f0d09b2557db4aecbf511175705d972d
#: ../spack/lib/spack/docs/tutorial_configuration.rst:587
msgid ""
"Here, we've told Spack that zlib 1.2.8 is installed on our system. We've "
"also told it the installation prefix where zlib can be found. We don't know "
"exactly which variants it was built with, but that's okay."
msgstr ""

# fe3b81698aa142fb96f45dfd016e3ed0
#: ../spack/lib/spack/docs/tutorial_configuration.rst:605
msgid ""
"You'll notice that Spack is now using the external zlib installation, but "
"the compiler used to build zlib is now overriding our compiler preference of "
"clang. If we explicitly specify clang:"
msgstr ""

# 426c0ceb12b94b0cb9aa5a92cde93260
#: ../spack/lib/spack/docs/tutorial_configuration.rst:622
msgid ""
"Spack concretizes to both hdf5 and zlib being built with clang. This has a "
"side-effect of rebuilding zlib. If we want to force Spack to use the system "
"zlib, we have two choices. We can either specify it on the command line, or "
"we can tell Spack that it's not allowed to build its own zlib. We'll go with "
"the latter."
msgstr ""

# 5bd41043205d417d8c0b07f1d5a5dd3e
#: ../spack/lib/spack/docs/tutorial_configuration.rst:644
msgid "Now Spack will be forced to choose the external zlib."
msgstr ""

# 891226f640784bc9ad64fd3905fc2696
#: ../spack/lib/spack/docs/tutorial_configuration.rst:659
msgid ""
"This gets slightly more complicated with virtual dependencies. Suppose we "
"don't want to build our own MPI, but we now want a parallel version of hdf5? "
"Well, fortunately we have mpich installed on these systems."
msgstr ""

# 41109b026cd742ceadc27e5861b30cf4
#: ../spack/lib/spack/docs/tutorial_configuration.rst:683
msgid ""
"If we concretize ``hdf5+mpi`` with this configuration file, we will just "
"build with an alternate MPI implementation."
msgstr ""

# 232a7cb7cc3848a2bdba7415ba4e57b6
#: ../spack/lib/spack/docs/tutorial_configuration.rst:716
msgid ""
"We have only expressed a preference for mpich over other MPI "
"implementations, and Spack will happily build with one we haven't forbid it "
"from building. We could resolve this by requesting ``hdf5%clang+mpi^mpich`` "
"explicitly, or we can configure Spack not to use any other MPI "
"implementation. Since we're focused on configurations here and the former "
"can get tedious, we'll need to modify our ``packages.yaml`` file again."
msgstr ""

# 64be36d207404cdfabb49bd5c2295923
#: ../spack/lib/spack/docs/tutorial_configuration.rst:724
msgid ""
"While we're at it, we can configure hdf5 to build with MPI by default again."
msgstr ""

# 42af44fdf9de4b3889847e3b1c0f5de4
#: ../spack/lib/spack/docs/tutorial_configuration.rst:761
msgid ""
"Now that we have configured Spack not to build any of the possible providers "
"for MPI we can try again."
msgstr ""

# 96324c149362464e9f94139a5a929cb1
#: ../spack/lib/spack/docs/tutorial_configuration.rst:778
msgid ""
"By configuring most of our package preferences in ``packages.yaml``, we can "
"cut down on the amount of work we need to do when specifying a spec on the "
"command line. In addition to compiler and variant preferences, we can "
"specify version preferences as well. Anything that you can specify on the "
"command line can be specified in ``packages.yaml`` with the exact same spec "
"syntax."
msgstr ""

# b3184aa9a6704c20a6f656068661a403
#: ../spack/lib/spack/docs/tutorial_configuration.rst:787
msgid "Installation Permissions"
msgstr ""

# 93f8f3f8b62144d29957f23995f32587
#: ../spack/lib/spack/docs/tutorial_configuration.rst:789
msgid ""
"The ``packages.yaml`` file also controls the default permissions to use when "
"installing a package. You'll notice that by default, the installation prefix "
"will be world readable but only user writable."
msgstr ""

# f2e0f33178ab4bec88498dea7b44ea5d
#: ../spack/lib/spack/docs/tutorial_configuration.rst:793
msgid ""
"Let's say we need to install ``converge``, a licensed software package. "
"Since a specific research group, ``fluid_dynamics``, pays for this license, "
"we want to ensure that only members of this group can access the software. "
"We can do this like so:"
msgstr ""

# ef0128c16e454abd94eac6c68593a7ac
#: ../spack/lib/spack/docs/tutorial_configuration.rst:807
msgid ""
"Now, only members of the ``fluid_dynamics`` group can use any ``converge`` "
"installations."
msgstr ""

# e1f41516ea434f86ab303e7274260512
#: ../spack/lib/spack/docs/tutorial_configuration.rst:812
msgid ""
"Make sure to delete or move the ``packages.yaml`` you have been editing up "
"to this point. Otherwise, it will change the hashes of your packages, "
"leading to differences in the output of later tutorial sections."
msgstr ""

# 00fc44d004bb402ba2ae8725672f8345
#: ../spack/lib/spack/docs/tutorial_configuration.rst:820
msgid "High-level Config"
msgstr ""

# a4bbca230373488891360786808545c9
#: ../spack/lib/spack/docs/tutorial_configuration.rst:822
msgid ""
"In addition to compiler and package settings, Spack allows customization of "
"several high-level settings. These settings are stored in the generic "
"``config.yaml`` configuration file. You can see the default settings by "
"running:"
msgstr ""

# fc58c262385342e9b97962c4e89610ae
#: ../spack/lib/spack/docs/tutorial_configuration.rst:836
msgid ""
"As you can see, many of the directories Spack uses can be customized. For "
"example, you can tell Spack to install packages to a prefix outside of the ``"
"$SPACK_ROOT`` hierarchy. Module files can be written to a central location "
"if you are using multiple Spack instances. If you have a fast scratch file "
"system, you can run builds from this file system with the following ``config."
"yaml``:"
msgstr ""

# 27d9e93c57e8499f9698641a6f74da88
#: ../spack/lib/spack/docs/tutorial_configuration.rst:850
msgid ""
"On systems with compilers that absolutely *require* environment variables "
"like ``LD_LIBRARY_PATH``, it is possible to prevent Spack from cleaning the "
"build environment with the ``dirty`` setting:"
msgstr ""

# 1b6d3e07c38c40c4854ee1c91fda87c3
#: ../spack/lib/spack/docs/tutorial_configuration.rst:860
msgid ""
"However, this is strongly discouraged, as it can pull unwanted libraries "
"into the build."
msgstr ""

# ecf69b5b38664c97be2d1008d1aee042
#: ../spack/lib/spack/docs/tutorial_configuration.rst:863
msgid ""
"One last setting that may be of interest to many users is the ability to "
"customize the parallelism of Spack builds. By default, Spack installs all "
"packages in parallel with the number of jobs equal to the number of cores on "
"the node. For example, on a node with 16 cores, this will look like:"
msgstr ""

# e8f57db4fc384b30ab77fde85b3111aa
#: ../spack/lib/spack/docs/tutorial_configuration.rst:890
msgid ""
"As you can see, we are building with all 16 cores on the node. If you are on "
"a shared login node, this can slow down the system for other users. If you "
"have a strict ulimit or restriction on the number of available licenses, you "
"may not be able to build at all with this many cores. On nodes with 64+ "
"cores, you may not see a significant speedup of the build anyway. To limit "
"the number of cores our build uses, set ``build_jobs`` like so:"
msgstr ""

# 526e8f644de74038a56582aa991db09f
#: ../spack/lib/spack/docs/tutorial_configuration.rst:903
msgid ""
"If we uninstall and reinstall zlib, we see that it now uses only 4 cores:"
msgstr ""

# bc8e7996bceb4474841ec49fa52a5a25
#: ../spack/lib/spack/docs/tutorial_configuration.rst:926
msgid ""
"Obviously, if you want to build everything in serial for whatever reason, "
"you would set ``build_jobs`` to 1."
msgstr ""

# 9cd26e096eff4044bc56d5014181bb03
#: ../spack/lib/spack/docs/tutorial_configuration.rst:933
msgid ""
"For examples of how other sites configure Spack, see https://github.com/"
"spack/spack-configs. If you use Spack at your site and want to share your "
"config files, feel free to submit a pull request!"
msgstr ""

# 194983743ccf40b0aeffa9a66ed77cf6
#: ../spack/lib/spack/docs/tutorial_environments.rst:10
msgid "Environments, ``spack.yaml``, and ``spack.lock``"
msgstr ""

# b5046560417d43e9aa97ca5da923f16f
#: ../spack/lib/spack/docs/tutorial_environments.rst:12
msgid ""
"We've shown you how to install and remove packages with Spack.  You can use :"
"ref:`cmd-spack-install` to install packages, :ref:`cmd-spack-uninstall` to "
"remove them, and :ref:`cmd-spack-find` to look at and query what is "
"installed.  We've also shown you how to customize Spack's installation with "
"configuration files like :ref:`packages.yaml <build-settings>`."
msgstr ""

# f321395ab76b4b2484e525859789b746
#: ../spack/lib/spack/docs/tutorial_environments.rst:19
msgid ""
"If you build a lot of software, or if you work on multiple projects, "
"managing everything in one place can be overwhelming. The default ``spack "
"find`` output may contain many packages, but you may want to *just* focus on "
"packages a particular project.  Moreover, you may want to include special "
"configuration with your package groups, e.g., to build all the packages in "
"the same group the same way."
msgstr ""

# 4dcb0e9d9685448abd1f5d8f377c4bd1
#: ../spack/lib/spack/docs/tutorial_environments.rst:26
msgid "Spack **environments** provide a way to handle these problems."
msgstr ""

# 219d654cbfb94d3daf91fe7b43339266
#: ../spack/lib/spack/docs/tutorial_environments.rst:30
msgid "Environment basics"
msgstr ""

# 279b53f292be46a399f387b1939b5774
#: ../spack/lib/spack/docs/tutorial_environments.rst:32
msgid ""
"Let's look at the output of ``spack find`` at this point in the tutorial."
msgstr ""

# 939ddbfa9ce64b5f8b958de6b7f59e7d
#: ../spack/lib/spack/docs/tutorial_environments.rst:64
msgid ""
"This is a complete, but cluttered view.  There are packages built with both "
"``openmpi`` and ``mpich``, as well as multiple variants of other packages, "
"like ``zlib``.  The query mechanism we learned about in ``spack find`` can "
"help, but it would be nice if we could start from a clean slate without "
"losing what we've already done."
msgstr ""

# 1f039ad145b54ca6a43919d58e16fdae
#: ../spack/lib/spack/docs/tutorial_environments.rst:73
msgid "Creating and activating environments"
msgstr ""

# e1261e07a5124284b0392ad5cc027989
#: ../spack/lib/spack/docs/tutorial_environments.rst:75
msgid "The ``spack env`` command can help.  Let's create a new environment:"
msgstr ""

# 0a2a0ea5b9e447769598dc99412ef2e3
#: ../spack/lib/spack/docs/tutorial_environments.rst:82
msgid ""
"An environment is a virtualized ``spack`` instance that you can use for a "
"specific purpose.  You can see the environments we've created so far like "
"this:"
msgstr ""

# 4917b2aa57e8465f9faadb7e2c97a616
#: ../spack/lib/spack/docs/tutorial_environments.rst:91
msgid "And you can **activate** an environment with ``spack env activate``:"
msgstr ""

# 2a2d6bb799c941879d1849605d8c0411
#: ../spack/lib/spack/docs/tutorial_environments.rst:97
msgid ""
"Once you enter an environment, ``spack find`` shows only what is in the "
"current environment.  That's nothing, so far:"
msgstr ""

# f16aa9b666684df1ba83ad1f0e87c3fb
#: ../spack/lib/spack/docs/tutorial_environments.rst:108
msgid ""
"The ``spack find`` output is still *slightly* different.  It tells you that "
"you're in the ``myproject`` environment, so that you don't panic when you "
"see that there is nothing installed.  It also says that there are *no root "
"specs*.  We'll get back to what that means later."
msgstr ""

# dfb6585d48bb4ca0a4ad57f333995708
#: ../spack/lib/spack/docs/tutorial_environments.rst:113
msgid ""
"If you *only* want to check what environment you are in, you can use ``spack "
"env status``:"
msgstr ""

# 2ddc1909367540a78f0bbe2f603c84b6
#: ../spack/lib/spack/docs/tutorial_environments.rst:121
msgid ""
"And, if you want to leave this environment and go back to normal Spack, you "
"can use ``spack env deactivate``.  We like to use the ``despacktivate`` "
"alias (which Spack sets up automatically) for short:"
msgstr ""

# d37c6dd442824d86a40039918fdbed00
#: ../spack/lib/spack/docs/tutorial_environments.rst:141
msgid "Installing packages"
msgstr ""

# b324a0d1bbb144d3989c77b031aaffca
#: ../spack/lib/spack/docs/tutorial_environments.rst:143
msgid ""
"Ok, now that we understand how creation and activation work, let's go back "
"to ``myproject`` and *install* a few packages:"
msgstr ""

# ecd8ae276cef497cb24c0f90f66f9553
#: ../spack/lib/spack/docs/tutorial_environments.rst:165
msgid ""
"We've installed ``tcl`` and ``trilinos`` in our environment, along with all "
"of their dependencies.  We call ``tcl`` and ``trilinos`` the **roots** "
"because we asked for them explicitly.  The other 20 packages listed under "
"\"installed packages\" are present because they were needed as "
"dependencies.  So, these are the roots of the packages' dependency graph."
msgstr ""

# 26e1fd229b284e8a83343cf2ab5da38e
#: ../spack/lib/spack/docs/tutorial_environments.rst:171
msgid ""
"The \"<package> is already installed\" messages above are generated because "
"we already installed these packages in previous steps of the tutorial, and "
"we don't have to rebuild them to put them in an environment."
msgstr ""

# 6a58ace4a19448319a26079fbc3e23aa
#: ../spack/lib/spack/docs/tutorial_environments.rst:175
msgid ""
"Now let's create *another* project.  We'll call this one ``myproject2``:"
msgstr ""

# df2383d986b048a693492b9bc2b012b6
#: ../spack/lib/spack/docs/tutorial_environments.rst:198
msgid ""
"Now we have two environments: one with ``tcl`` and ``trilinos``, and another "
"with ``hdf5`` and ``trilinos``."
msgstr ""

# 0d8b14f54de7454bbe371e7c412c6121
#: ../spack/lib/spack/docs/tutorial_environments.rst:201
msgid "We can uninstall trilinos from ``myproject2`` as you would expect:"
msgstr ""

# 454a07ad98b74a5cb5d26f6fee6beae6
#: ../spack/lib/spack/docs/tutorial_environments.rst:221
msgid ""
"Now there is only one root spec, ``hdf5``, which requires fewer additional "
"dependencies."
msgstr ""

# 2a4ed70408f242b087aebaa502e706cd
#: ../spack/lib/spack/docs/tutorial_environments.rst:224
msgid ""
"However, we still needed ``trilinos`` for the ``myproject`` environment! "
"What happened to it?  Let's switch back and see."
msgstr ""

# db3274df3b0241b3a51c14980032c170
#: ../spack/lib/spack/docs/tutorial_environments.rst:244
msgid ""
"Spack is smart enough to realize that ``trilinos`` is still present in the "
"other environment.  Trilinos won't *actually* be uninstalled unless it is no "
"longer needed by any environments or packages.  If it is still needed, it is "
"only removed from the environment."
msgstr ""

# 77dcc6377d1443d9b9075728756284dc
#: ../spack/lib/spack/docs/tutorial_environments.rst:251
msgid "Dealing with many specs at once"
msgstr ""

# cacce46f33724a61a7b206679a0699c6
#: ../spack/lib/spack/docs/tutorial_environments.rst:253
msgid ""
"In the above examples, we just used ``install`` and ``uninstall``.  There "
"are other ways to deal with groups of packages, as well."
msgstr ""

# 83be0d27348c4b0a9d5e76490d54c862
#: ../spack/lib/spack/docs/tutorial_environments.rst:258
msgid "Adding specs"
msgstr ""

# be8507bb3b034740a64ba6c2c2f7df91
#: ../spack/lib/spack/docs/tutorial_environments.rst:260
msgid ""
"Let's go back to our first ``myproject`` environment and *add* a few specs "
"instead of installing them:"
msgstr ""

# fc197aca003641b3bebfab3eca4b767b
#: ../spack/lib/spack/docs/tutorial_environments.rst:280
msgid ""
"Let's take a close look at what happened.  The two packages we added, "
"``hdf5`` and ``gmp``, are present, but they're not installed in the "
"environment yet.  ``spack add`` just adds *roots* to the environment, but it "
"does not automatically install them."
msgstr ""

# f306de88ee3d47048a205c1c90c7629d
#: ../spack/lib/spack/docs/tutorial_environments.rst:285
msgid ""
"We can install *all* the as-yet uninstalled packages in an environment by "
"simply running ``spack install`` with no arguments:"
msgstr ""

# 1030b6f8f9934548b36228e1a08afb57
#: ../spack/lib/spack/docs/tutorial_environments.rst:329
msgid ""
"Spack will concretize the new roots, and install everything you added to the "
"environment.  Now we can see the installed roots in the output of ``spack "
"find``:"
msgstr ""

# 348dd613dd2e43179cb9bbcfb8f3b62e
#: ../spack/lib/spack/docs/tutorial_environments.rst:347
msgid ""
"We can build whole environments this way, by adding specs and installing all "
"at once, or we can install them with the usual ``install`` and ``uninstall`` "
"portions.  The advantage to doing them all at once is that we don't have to "
"write a script outside of Spack to automate this, and we can kick off a "
"large build of many packages easily."
msgstr ""

# 7d14e0c87ee547509ca007e1e763cb08
#: ../spack/lib/spack/docs/tutorial_environments.rst:357
msgid ""
"So far, ``myproject`` does not have any special configuration associated "
"with it.  The specs concretize using Spack's defaults:"
msgstr ""

# 57422891cd874ad7893e8adc719c3157
#: ../spack/lib/spack/docs/tutorial_environments.rst:390
msgid ""
"You may want to add extra configuration to your environment.  You can see "
"how your environment is configured using ``spack config get``:"
msgstr ""

# 521a112355fa45e399f0f23c3a29d3aa
#: ../spack/lib/spack/docs/tutorial_environments.rst:404
msgid ""
"It turns out that this is a special configuration format where Spack stores "
"the state for the environment. Currently, the file is just a ``spack:`` "
"header and a list of ``specs``.  These are the roots."
msgstr ""

# d8a1b88b9de846c3ba28f6e5b0164b91
#: ../spack/lib/spack/docs/tutorial_environments.rst:408
msgid ""
"You can edit this file to add your own custom configuration.  Spack provides "
"a shortcut to do that:"
msgstr ""

# ee736a4f36f5411f9809abfe2bafbe0a
#: ../spack/lib/spack/docs/tutorial_environments.rst:415
msgid "You should now see the same file, and edit it to look like this:"
msgstr ""

# 719ddb796a2541eb979bb20c702772f9
#: ../spack/lib/spack/docs/tutorial_environments.rst:432
msgid ""
"Now if we run ``spack spec`` again in the environment, specs will concretize "
"with ``mpich`` as the MPI implementation:"
msgstr ""

# e442b4467f154e909665e0f02d027342
#: ../spack/lib/spack/docs/tutorial_environments.rst:459
msgid ""
"In addition to the ``specs`` section, an environment's configuration can "
"contain any of the configuration options from Spack's various config "
"sections. You can add custom repositories, a custom install location, custom "
"compilers, or custom external packages, in addition to the ``package`` "
"preferences we show here."
msgstr ""

# e958cf8ce5ad499287ba40387e849e91
#: ../spack/lib/spack/docs/tutorial_environments.rst:465
msgid ""
"But now we have a problem.  We already installed part of this environment "
"with openmpi, but now we want to install it with ``mpich``."
msgstr ""

# 7cb59fd083464f3694683e4d8f7ae842
#: ../spack/lib/spack/docs/tutorial_environments.rst:468
msgid ""
"You can run ``spack concretize`` inside of an environment to concretize all "
"of its specs.  We can run it here:"
msgstr ""

# 338f16bde5ea446e9a18f5feffff0f6b
#: ../spack/lib/spack/docs/tutorial_environments.rst:538
msgid ""
"Now, all the specs in the environment are concrete and ready to be installed "
"with ``mpich`` as the MPI implementation."
msgstr ""

# fc6b4af77fe34aa5a00df6ee4f0b76a1
#: ../spack/lib/spack/docs/tutorial_environments.rst:541
msgid ""
"Normally, we could just run ``spack config edit``, edit the environment "
"configuration, ``spack add`` some specs, and ``spack install``."
msgstr ""

# 3970e19cceb444ee98af7f8d9981c6d7
#: ../spack/lib/spack/docs/tutorial_environments.rst:544
msgid ""
"But, when we already have installed packages in the environment, we have to "
"force everything in the environment to be re-concretized using ``spack "
"concretize -f``.  *Then* we can re-run ``spack install``."
msgstr ""

# 0be2bf59841f4b47a50d4a8bf947af1d
#: ../spack/lib/spack/docs/tutorial_environments.rst:551
msgid "``spack.yaml`` and ``spack.lock``"
msgstr ""

# 182eeb691bf2495b9be3810c1a6c8486
#: ../spack/lib/spack/docs/tutorial_environments.rst:553
msgid ""
"So far we've shown you how to interact with environments from the command "
"line, but they also have a file-based interface that can be used by "
"developers and admins to manage workflows for projects."
msgstr ""

# 82998a7eca1c4917bc88c444b0dbe62f
#: ../spack/lib/spack/docs/tutorial_environments.rst:557
msgid ""
"In this section we'll dive a little deeper to see how environments are "
"implemented, and how you could use this in your day-to-day development."
msgstr ""

# a2835f34aa8b404497ad2e890031b4f7
#: ../spack/lib/spack/docs/tutorial_environments.rst:562
msgid "``spack.yaml``"
msgstr ""

# 848852acda414753b933f457e261def1
#: ../spack/lib/spack/docs/tutorial_environments.rst:564
msgid ""
"Earlier, we changed an environment's configuration using ``spack config "
"edit``.  We were actually editing a special file called ``spack.yaml``. "
"Let's take a look."
msgstr ""

# f744416e07734ff1ad3d4b3d1b88eed4
#: ../spack/lib/spack/docs/tutorial_environments.rst:568
msgid ""
"We can get directly to the current environment's location using ``spack cd``:"
msgstr ""

# f2c44eb742704a6988068d970d6bb77d
#: ../spack/lib/spack/docs/tutorial_environments.rst:578
msgid ""
"We notice two things here.  First, the environment is just a directory "
"inside of ``var/spack/environments`` within the Spack installation. Second, "
"it contains two important files: ``spack.yaml`` and ``spack.lock``."
msgstr ""

# 97e9441ee5e84f56b976cc39fd2d58df
#: ../spack/lib/spack/docs/tutorial_environments.rst:583
msgid ""
"``spack.yaml`` is the configuration file for environments that we've already "
"seen, but it does not *have* to live inside Spack.  If you create an "
"environment using ``spack env create``, it is *managed* by Spack in the "
"``var/spack/environments`` directory, and you can refer to it by name."
msgstr ""

# b79e4cba0fc94e0d87a5f6ea4d73986a
#: ../spack/lib/spack/docs/tutorial_environments.rst:589
msgid ""
"You can actually put a ``spack.yaml`` file *anywhere*, and you can use it to "
"bundle an environment, or a list of dependencies to install, with your "
"project.  Let's make a simple project:"
msgstr ""

# 05917b81a26145429c98b6c68a68a73a
#: ../spack/lib/spack/docs/tutorial_environments.rst:601
msgid ""
"Here, we made a new directory called *code*, and we used the ``-d`` option "
"to create an environment in it."
msgstr ""

# 8e2c0e3b6e5b473a928d22666648cd2f
#: ../spack/lib/spack/docs/tutorial_environments.rst:604
msgid "What really happened?"
msgstr ""

# 9aef509d540a48fb9d56f56cfc4c7f1a
#: ../spack/lib/spack/docs/tutorial_environments.rst:619
msgid ""
"Spack just created a ``spack.yaml`` file in the code directory, with an "
"empty list of root specs.  Now we have a Spack environment, *in a "
"directory*, that we can use to manage dependencies.  Suppose your project "
"depends on ``boost``, ``trilinos``, and ``openmpi``.  You can add these to "
"your spec list:"
msgstr ""

# ba7825b2863c491da3128ef75e6a2e5c
#: ../spack/lib/spack/docs/tutorial_environments.rst:638
msgid ""
"And now *anyone* who uses the *code* repository can use this format to "
"install the project's dependencies.  They need only clone the repository, "
"``cd`` into it, and type ``spack install``:"
msgstr ""

# 3380eac3e5e64f0b9a2cb2751ddce6f9
#: ../spack/lib/spack/docs/tutorial_environments.rst:711
msgid ""
"Spack concretizes the specs in the ``spack.yaml`` file and installs them."
msgstr ""

# c19e9a3d810449299ba2ec83e00545c4
#: ../spack/lib/spack/docs/tutorial_environments.rst:713
msgid ""
"What happened here?  If you ``cd`` into a directory tha has a ``spack.yaml`` "
"file in it, Spack considers this directory's environment to be activated.  "
"The directory does not have to live within Spack; it can be anywhere."
msgstr ""

# e3eb5739e9da4a078802f71d49d5bef3
#: ../spack/lib/spack/docs/tutorial_environments.rst:718
msgid ""
"So, from ``~/code``, we can actually manipulate ``spack.yaml`` using ``spack "
"add`` and ``spack remove`` (just like managed environments):"
msgstr ""

# 57693b0d53a2499ba15d6448f85b112a
#: ../spack/lib/spack/docs/tutorial_environments.rst:755
msgid "``spack.lock``"
msgstr ""

# 6f72f0993c234e6aa0f181a36c391dab
#: ../spack/lib/spack/docs/tutorial_environments.rst:757
msgid ""
"Ok, we've covered managed environments, environments in directories, and the "
"last thing we'll cover is ``spack.lock``. You may remember that when we ran "
"``spack install``, Spack concretized all the specs in the ``spack.yaml`` "
"file and installed them."
msgstr ""

# b609ab232b2b49c199ee1c6e55019ec7
#: ../spack/lib/spack/docs/tutorial_environments.rst:762
msgid ""
"Whenever we concretize Specs in an environment, all concrete specs in the "
"environment are written out to a ``spack.lock`` file *alongside* ``spack."
"yaml``.  The ``spack.lock`` file is not really human-readable like the "
"``spack.yaml`` file.  It is a ``json`` format that contains all the "
"information that we need to ``reproduce`` the build of an environment:"
msgstr ""

# 4cae33669148448db145be9acbb10f13
#: ../spack/lib/spack/docs/tutorial_environments.rst:784
msgid ""
"``spack.yaml`` and ``spack.lock`` correspond to two fundamental concepts in "
"Spack, but for environments:"
msgstr ""

# a4e565b7fc7a4c47b66360755d604656
#: ../spack/lib/spack/docs/tutorial_environments.rst:787
msgid ""
"``spack.yaml`` is the set of *abstract* specs and configuration that you "
"want to install."
msgstr ""

# 6b0d9c377f944074827e4c95f5037407
#: ../spack/lib/spack/docs/tutorial_environments.rst:789
msgid ""
"``spack.lock`` is the set of all fully *concretized* specs generated from "
"concretizing ``spack.yaml``"
msgstr ""

# 9e39d39b6d2740198d0c4f7f1c311db3
#: ../spack/lib/spack/docs/tutorial_environments.rst:792
msgid ""
"Using either of these, you can recreate an environment that someone else "
"built.  ``spack env create`` takes an extra optional argument, which can be "
"either a ``spack.yaml`` or a ``spack.lock`` file:"
msgstr ""

# 5e01f001817443649bc9837ebe3935c9
#: ../spack/lib/spack/docs/tutorial_environments.rst:802
msgid ""
"Both of these create a new environment called ``my-project``, but which one "
"you choose to use depends on your needs:"
msgstr ""

# 05f03de2d8cb40d699e16db323e3c9d5
#: ../spack/lib/spack/docs/tutorial_environments.rst:805
msgid ""
"copying the yaml file allows someone else to build your *requirements*, "
"potentially a different way."
msgstr ""

# 6eb8da69e6084be5a674a7172ece8552
#: ../spack/lib/spack/docs/tutorial_environments.rst:808
msgid ""
"copying the lock file allows someone else to rebuild your *installation* "
"exactly as you built it."
msgstr ""

# 9a77e356f3a34a6399cea9d61542987a
#: ../spack/lib/spack/docs/tutorial_environments.rst:811
msgid ""
"The first use case can *re-concretize* the same specs on new platforms in "
"order to build, but it will preserve the abstract requirements.  The second "
"use case (currently) requires you to be on the same machine, but it retains "
"all decisions made during concretization and is faithful to a prior install."
msgstr ""

# 4e8b6560c7ae4a818612502f09a7d19e
#: ../spack/lib/spack/docs/tutorial_modules.rst:10
msgid "Module Files"
msgstr ""

# 6e5a32970d034ed4a06bfda0e479efdf
#: ../spack/lib/spack/docs/tutorial_modules.rst:12
msgid ""
"In this tutorial, we'll introduce a few concepts that are fundamental to the "
"generation of module files with Spack, and we'll guide you through the "
"customization of both module files content and their layout on disk. In the "
"end you should have a clear understanding of:"
msgstr ""

# 3303e924f4f14471924ccb7958512748
#: ../spack/lib/spack/docs/tutorial_modules.rst:17
msgid "What are module files and how they work"
msgstr ""

# 58e193b86bd44b578e96492b4bcbc898
#: ../spack/lib/spack/docs/tutorial_modules.rst:18
msgid "How Spack generates them"
msgstr ""

# 6f2db0bcf88642449c62402d59c4d10a
#: ../spack/lib/spack/docs/tutorial_modules.rst:19
msgid "Which commands are available to ease their maintenance"
msgstr ""

# b49dc0ce388b449694d3ac43e0007c4c
#: ../spack/lib/spack/docs/tutorial_modules.rst:20
msgid "How it is possible to customize them in all aspects"
msgstr ""

# be102b71e2904ee29823b0869cfa65d1
#: ../spack/lib/spack/docs/tutorial_modules.rst:26
msgid "Modules at a glance"
msgstr ""

# 1e767e620bb44ea6b95339d66f573cf3
#: ../spack/lib/spack/docs/tutorial_modules.rst:28
msgid ""
"Let's start by summarizing what module files are and how you can use them to "
"modify your environment. The idea is to give enough information so that "
"people without any previous exposure to them will be able to follow the "
"tutorial later on. We'll also give a high-level view of how module files are "
"generated in Spack. If you are already familiar with these topics you can "
"quickly skim through this section or move directly to :ref:"
"`module_file_tutorial_prerequisites`."
msgstr ""

# 4fde977563834ad98dbf43ee3a768c97
#: ../spack/lib/spack/docs/tutorial_modules.rst:39
msgid "What are module files?"
msgstr ""

# 218d1a6c05144a46bc31776ce423634d
#: ../spack/lib/spack/docs/tutorial_modules.rst:41
msgid ""
"Module files are an easy way to modify your environment in a controlled "
"manner during a shell session. In general, they contain the information "
"needed to run an application or use a library, and they work in conjunction "
"with a tool that interprets them. Typical module files instruct this tool to "
"modify the environment variables when a module file is loaded:"
msgstr ""

# 637285e1eb7f4de9aab5eb58537b50e6
#: ../spack/lib/spack/docs/tutorial_modules.rst:69
msgid "and to undo the modifications when the same module file is unloaded:"
msgstr ""

# 0436bfd97d044d65aa5b0d6ceab57fc4
#: ../spack/lib/spack/docs/tutorial_modules.rst:78
msgid ""
"Different formats exist for module files, and different tools provide "
"various levels of support for them. Spack can natively generate:"
msgstr ""

# 4e376540ff0d41c8a52a504743b51ad6
#: ../spack/lib/spack/docs/tutorial_modules.rst:81
msgid "Non-hierarchical module files written in TCL"
msgstr ""

# ada38a4770eb43c2a507469d8dd08d85
#: ../spack/lib/spack/docs/tutorial_modules.rst:82
msgid "Hierarchical module files written in Lua"
msgstr ""

# 9cea323147594c0db279c63414bc3812
#: ../spack/lib/spack/docs/tutorial_modules.rst:84
msgid ""
"and can build `environment-modules <http://modules.sourceforge.net/>`_ and "
"`lmod <http://lmod.readthedocs.io/en/latest>`_ as support tools. Which of "
"the formats or tools best suits one's needs depends on each particular use-"
"case. For the sake of illustration, we'll be working on both formats using "
"``lmod``."
msgstr ""

# 2be8001697284ca58ae79d6f99e9fc88
#: ../spack/lib/spack/docs/tutorial_modules.rst:97
msgid "Environment modules"
msgstr ""

# f922689dc93649f0b0eece0a52eb57b4
#: ../spack/lib/spack/docs/tutorial_modules.rst:92
msgid ""
"This is the original tool that provided modules support. Its first version "
"was coded in C in the early '90s and was later substituted by a version "
"completely coded in TCL - the one Spack is distributing. More details on its "
"features are given in the `homepage of the project <http://modules."
"sourceforge.net/>`_ or in its `github page <https://github.com/cea-hpc/"
"modules>`_. The tool is able to interpret the non-hierarchical TCL "
"modulefiles written by Spack."
msgstr ""

# e0f6130fe18f41fb99011cc3e6336bd4
#: ../spack/lib/spack/docs/tutorial_modules.rst:106
msgid "Lmod"
msgstr ""

# 10a3ba546d964556bdd4639499fc78f9
#: ../spack/lib/spack/docs/tutorial_modules.rst:100
msgid ""
"Lmod is a module system written in Lua, designed to easily handle "
"hierarchies of module files. It's a drop-in replacement of Environment "
"Modules and works with both of the module file formats generated by Spack. "
"Despite being fully compatible with Environment Modules there are many "
"features that are unique to Lmod. These features are either `targeted "
"towards safety <http://lmod.readthedocs.io/en/latest/010_user.html#safety-"
"features>`_ or meant to `extend the module system functionality <http://lmod."
"readthedocs.io/en/latest/010_user.html#module-hierarchy>`_."
msgstr ""

# e5f2c5c079604bb095768b8aa3d9733a
#: ../spack/lib/spack/docs/tutorial_modules.rst:112
msgid "How do we generate module files?"
msgstr ""

# b189a0f368bd402ab07721dce3e886a9
#: ../spack/lib/spack/docs/tutorial_modules.rst:114
msgid ""
"Before  we dive into the hands-on sections it's worth spending a couple of "
"words to explain how module files are generated by Spack. The following "
"diagram provides a high-level view of the process:"
msgstr ""

# 3010b9c93d7749eda0dda4f5f3cdd67a
#: ../spack/lib/spack/docs/tutorial_modules.rst:121
msgid ""
"The red dashed line above represents Spack's boundaries, the blue one "
"Spack's dependencies [#f1]_. Module files are generated by combining:"
msgstr ""

# d204b86554fd427182c33497d52b5d56
#: ../spack/lib/spack/docs/tutorial_modules.rst:124
msgid "the configuration details in ``config.yaml`` and ``modules.yaml``"
msgstr ""

# 7b30d7e7b3ed4543b70df5b85eff4b67
#: ../spack/lib/spack/docs/tutorial_modules.rst:125
msgid ""
"the information contained in Spack packages (and processed by the module "
"subpackage)"
msgstr ""

# 0b2752c519aa46cbaa22413ba6f88ee2
#: ../spack/lib/spack/docs/tutorial_modules.rst:126
msgid "a set of template files"
msgstr ""

# 80d2751572e04c2a806fe80f4566eb98
#: ../spack/lib/spack/docs/tutorial_modules.rst:128
msgid ""
"with `Jinja2 <http://jinja.pocoo.org/docs/2.9/>`_, an external template "
"engine that stamps out each particular module file. As Spack serves very "
"diverse needs this process has many points of customization, and we'll "
"explore most of them in the next sections."
msgstr ""

# bf1069aeea304b5492cc1d8dbc77d942
#: ../spack/lib/spack/docs/tutorial_modules.rst:133
msgid ""
"Spack vendors its dependencies! This means that Spack comes with a copy of "
"each one of its dependencies, including ``Jinja2``, and is already "
"configured to use them."
msgstr ""

# b88b5b1dfbd7463e9817052bfc7cf0ea
#: ../spack/lib/spack/docs/tutorial_modules.rst:142
msgid ""
"In order to showcase the capabilities of Spack's module file generation, we "
"need a representative set of software to work with. This set must include "
"different flavors of the same packages installed alongside each other and "
"some :ref:`external packages <sec-external-packages>`."
msgstr ""

# 19cb3ca911424507b32f13edc547783e
#: ../spack/lib/spack/docs/tutorial_modules.rst:147
msgid ""
"The purpose of this setup is not to make our life harder but to demonstrate "
"how Spack can help with similar situations, as they will happen on real HPC "
"clusters. For instance, it's often preferable for Spack to use vendor-"
"provided MPI implementations than to build one itself."
msgstr ""

# 036020b5b1f642aabdd5a77094d51e5b
#: ../spack/lib/spack/docs/tutorial_modules.rst:152
msgid ""
"To keep the set of software we're dealing with manageable, we're going to "
"uninstall everything from earlier in the tutorial."
msgstr ""

# 58c86a8eb67249648e72bd18bca00f5a
#: ../spack/lib/spack/docs/tutorial_modules.rst:161
msgid "Build a module tool"
msgstr ""

# 87706898333c4322a501a11a2937772c
#: ../spack/lib/spack/docs/tutorial_modules.rst:163
msgid ""
"The first thing that we need is the module tool. In this case we choose "
"``lmod`` as it can work with both hierarchical and non-hierarchical module "
"file layouts."
msgstr ""

# 49c471c0fca44841a92e33cb11a6594b
#: ../spack/lib/spack/docs/tutorial_modules.rst:171
msgid ""
"Once the module tool is installed we need to have it available in the "
"current shell. As the installation directories are definitely not easy to "
"remember, we'll employ the command ``spack location`` to retrieve the "
"``lmod`` prefix directly from Spack:"
msgstr ""

# 94cd8df2a896484ebc639c04ac99a282
#: ../spack/lib/spack/docs/tutorial_modules.rst:180
msgid ""
"Now we can re-source the setup file and Spack modules will be put in our "
"module path."
msgstr ""

# 760c3c74c7d545a6a61c2b5cf374ffc2
#: ../spack/lib/spack/docs/tutorial_modules.rst:196
msgid "Add a new compiler"
msgstr ""

# b28fd6ea706f4730a29c74eee72a6abd
#: ../spack/lib/spack/docs/tutorial_modules.rst:198
msgid ""
"The second step is to build a recent compiler. On first use, Spack scans the "
"environment and automatically locates the compiler(s) already available on "
"the system. For this tutorial, however, we want to use ``gcc@7.2.0``."
msgstr ""

# 1da2078d3d764159b12ad872b61ca8bf
#: ../spack/lib/spack/docs/tutorial_modules.rst:211
msgid ""
"Once ``gcc`` is installed we can use shell support to load it and make it "
"readily available:"
msgstr ""

# fc7a11e294f44ffcb5f057b42f6e5312
#: ../spack/lib/spack/docs/tutorial_modules.rst:218
msgid ""
"It may not be apparent, but the last command employed the module files "
"generated automatically by Spack. What happens under the hood when you use "
"the ``spack load`` command is:"
msgstr ""

# d701d7d95e4d468c92020772b6beb174
#: ../spack/lib/spack/docs/tutorial_modules.rst:222
msgid "the spec passed as argument is translated into a module file name"
msgstr ""

# 1f89ae0cd8374a50ac9db6b2da95aa60
#: ../spack/lib/spack/docs/tutorial_modules.rst:223
msgid "the current module tool is used to load that module file"
msgstr ""

# ee3172ce18204464b9eac05f758cfdb3
#: ../spack/lib/spack/docs/tutorial_modules.rst:225
msgid "You can use this command to double check:"
msgstr ""

# 8ff3f7e2624242639297b47855c93939
#: ../spack/lib/spack/docs/tutorial_modules.rst:233
msgid ""
"Note that the 7-digit hash at the end of the generated module may vary "
"depending on architecture or package version. Now that we have ``gcc@7.2.0`` "
"in ``PATH`` we can finally add it to the list of compilers known to Spack:"
msgstr ""

# aa8ce2de6b304a058751415af2913cf1
#: ../spack/lib/spack/docs/tutorial_modules.rst:256
msgid "Build the software that will be used in the tutorial"
msgstr ""

# 464cd55823164e69a954a7496bd3eec5
#: ../spack/lib/spack/docs/tutorial_modules.rst:258
msgid ""
"Finally, we should use Spack to install the packages used in the examples:"
msgstr ""

# 785bba9496d34642b597a3c8245b08d1
#: ../spack/lib/spack/docs/tutorial_modules.rst:273
msgid "Non-hierarchical module files"
msgstr ""

# 83c67dc8e5974f2cb2fe08c0bf722110
#: ../spack/lib/spack/docs/tutorial_modules.rst:275
msgid ""
"If you arrived to this point you should have an environment that looks "
"similar to:"
msgstr ""

# 3313ad808ef6445898c18828e0d83ce6
#: ../spack/lib/spack/docs/tutorial_modules.rst:313
msgid ""
"The non-hierarchical module files that have been generated so far follow :"
"ref:`the default rules for module generation <modules-yaml>`. Taking a look "
"at the ``gcc`` module you'll see, for example:"
msgstr ""

# 5d5af2b9f16b426aa8a9e87370c154d7
#: ../spack/lib/spack/docs/tutorial_modules.rst:341
msgid ""
"As expected, a few environment variables representing paths will be modified "
"by the module file according to the default prefix inspection rules."
msgstr ""

# 6ce56a5930b14a56adbcc01f1aa67e80
#: ../spack/lib/spack/docs/tutorial_modules.rst:347
msgid "Filter unwanted modifications to the environment"
msgstr ""

# e7c2b9443c104152bf549b6116a4f391
#: ../spack/lib/spack/docs/tutorial_modules.rst:349
msgid ""
"Now consider the case that your site has decided that ``CPATH`` and "
"``LIBRARY_PATH`` modifications should not be present in module files. What "
"you can do to abide by the rules is to create a configuration file ``~/."
"spack/modules.yaml`` with the following content:"
msgstr ""

# 244e720a2b064572938c4ff3663ddfbb
#: ../spack/lib/spack/docs/tutorial_modules.rst:362
msgid "Next you should regenerate all the module files:"
msgstr ""

# 833760eb4ee64f53b2d21a2973d9c01e
#: ../spack/lib/spack/docs/tutorial_modules.rst:390
msgid ""
"If you take a look now at the module for ``gcc`` you'll see that the "
"unwanted paths have disappeared:"
msgstr ""

# 8fa52762f9234818ae7aec2c776165dd
#: ../spack/lib/spack/docs/tutorial_modules.rst:416
msgid "Prevent some module files from being generated"
msgstr ""

# 992f4b1b89854b889ac1fabd7d787660
#: ../spack/lib/spack/docs/tutorial_modules.rst:418
msgid ""
"Another common request at many sites is to avoid exposing software that is "
"only needed as an intermediate step when building a newer stack. Let's try "
"to prevent the generation of module files for anything that is compiled with "
"``gcc@5.4.0`` (the OS provided compiler)."
msgstr ""

# c7d608a512a94c7dbb9b14809c0f10e9
#: ../spack/lib/spack/docs/tutorial_modules.rst:423
msgid ""
"To do this you should add a ``blacklist`` keyword to ``~/.spack/modules."
"yaml``:"
msgstr ""

# e1e2a9d8f23542aea3ae161d7f155409
#: ../spack/lib/spack/docs/tutorial_modules.rst:436
msgid "and regenerate the module files:"
msgstr ""

# 051dd27de1684be780e6d27fc6a525d4
#: ../spack/lib/spack/docs/tutorial_modules.rst:438
msgid ""
"This time it is convenient to pass the option ``--delete-tree`` to the "
"command that regenerates the module files to instruct it to delete the "
"existing tree and regenerate a new one instead of overwriting the files in "
"the existing directory."
msgstr ""

# 2a4cf9eb7dd64a0aa8db3f988b9b7668
#: ../spack/lib/spack/docs/tutorial_modules.rst:487
msgid ""
"If you look closely you'll see though that we went too far in blacklisting "
"modules: the module for ``gcc@7.2.0`` disappeared as it was bootstrapped "
"with ``gcc@5.4.0``. To specify exceptions to the blacklist rules you can use "
"``whitelist``:"
msgstr ""

# 7ae137945ddd4a9ea3a45133849d7e31
#: ../spack/lib/spack/docs/tutorial_modules.rst:504
msgid ""
"``whitelist`` rules always have precedence over ``blacklist`` rules. If you "
"regenerate the modules again:"
msgstr ""

# 5c6417dd65514e34b0156f8734c32541
#: ../spack/lib/spack/docs/tutorial_modules.rst:512
msgid "you'll see that now the module for ``gcc@7.2.0`` has reappeared:"
msgstr ""

# 6dd80208fbd7417ea413b7432bc3f346
#: ../spack/lib/spack/docs/tutorial_modules.rst:524
msgid ""
"An additional possibility that you can leverage to unclutter the environment "
"is that of preventing the generation of module files for implicitly "
"installed packages. In this case all one needs to do is to add the following "
"line:"
msgstr ""

# aeb8aea78087489eacc7efa5523e089b
#: ../spack/lib/spack/docs/tutorial_modules.rst:542
msgid "to ``modules.yaml`` and regenerate the module file tree as above."
msgstr ""

# 70e28ef714074f80876ff47629cd74c1
#: ../spack/lib/spack/docs/tutorial_modules.rst:546
msgid "Change module file naming"
msgstr ""

# 6cfa5f31f0624ab09ca1ed5442d86625
#: ../spack/lib/spack/docs/tutorial_modules.rst:548
msgid ""
"The next step in making  module files more user-friendly is to improve their "
"naming scheme. To reduce the length of the hash or remove it altogether you "
"can use the ``hash_length`` keyword in the configuration file:"
msgstr ""

# 25b3c68efec148dc95a9c2dbfdf89449
#: ../spack/lib/spack/docs/tutorial_modules.rst:567
msgid "If you try to regenerate the module files now you will get an error:"
msgstr ""

# f0564812c83d473e95c4b53f0982c2d0
#: ../spack/lib/spack/docs/tutorial_modules.rst:584
msgid "We try to check for errors upfront!"
msgstr ""

# 7666a909c39243f28b5d6adb3f41c13f
#: ../spack/lib/spack/docs/tutorial_modules.rst:584
msgid ""
"In Spack we check for errors upfront whenever possible, so don't worry about "
"your module files: as a name clash was detected nothing has been changed on "
"disk."
msgstr ""

# 4f526cfce68045158a353136ef053185
#: ../spack/lib/spack/docs/tutorial_modules.rst:587
msgid ""
"The problem here is that without the hashes the four different flavors of "
"``netlib-scalapack`` map to the same module file name. We can add suffixes "
"to differentiate them:"
msgstr ""

# bb9cae4ba5f6434a81e39c1d69574d16
#: ../spack/lib/spack/docs/tutorial_modules.rst:612
msgid ""
"As you can see it is possible to specify rules that apply only to a "
"restricted set of packages using :ref:`anonymous specs <anonymous_specs>`. "
"Regenerating module files now we obtain:"
msgstr ""

# c552db582f4c4fa1a74cb3194a040442
#: ../spack/lib/spack/docs/tutorial_modules.rst:640
msgid ""
"Finally we can set a ``naming_scheme`` to prevent users from loading modules "
"that refer to different flavors of the same library/application:"
msgstr ""

# 595069cfb5ec4783b3d111f677c00957
#: ../spack/lib/spack/docs/tutorial_modules.rst:667
msgid "The final result should look like:"
msgstr ""

# c187c8b2a3c744e9a02faeaf92f5f46b
#: ../spack/lib/spack/docs/tutorial_modules.rst:698
msgid "TCL specific directive"
msgstr ""

# 4400541aba6041969408d803ce2f7ede
#: ../spack/lib/spack/docs/tutorial_modules.rst:698
msgid ""
"The directives ``naming_scheme`` and ``conflict`` are TCL specific and can't "
"be used in the ``lmod`` section of the configuration file."
msgstr ""

# 62ef1f6d6f9f4af1962f1434cf051113
#: ../spack/lib/spack/docs/tutorial_modules.rst:703
msgid "Add custom environment modifications"
msgstr ""

# 30c711ded7284e7997745e29a2fdd202
#: ../spack/lib/spack/docs/tutorial_modules.rst:705
msgid ""
"At many sites it is customary to set an environment variable in a package's "
"module file that points to the folder in which the package is installed. You "
"can achieve this with Spack by adding an ``environment`` directive to the "
"configuration file:"
msgstr ""

# 1ed52e0f7fb2459aa7bc9fe2a17ea909
#: ../spack/lib/spack/docs/tutorial_modules.rst:737
msgid ""
"Under the hood Spack uses the :meth:`~spack.spec.Spec.format` API to "
"substitute tokens in either environment variable names or values. There are "
"two caveats though:"
msgstr ""

# f5254c4072e547e9821d0946489c0976
#: ../spack/lib/spack/docs/tutorial_modules.rst:740
msgid ""
"The set of allowed tokens in variable names is restricted to ``name``, "
"``version``, ``compiler``, ``compiler.name``, ``compiler.version``, "
"``architecture``"
msgstr ""

# 6ceceabb76dc4251ac74812d577e5280
#: ../spack/lib/spack/docs/tutorial_modules.rst:743
msgid ""
"Any token expanded in a variable name is made uppercase, but other than that "
"case sensitivity is preserved"
msgstr ""

# 1ca75cd6b15f4d17bf27c3e2039dbf82
#: ../spack/lib/spack/docs/tutorial_modules.rst:746
msgid "Regenerating the module files results in something like:"
msgstr ""

# 70e4b7ebd0184777bc67e1dea12ecf8b
#: ../spack/lib/spack/docs/tutorial_modules.rst:775
msgid ""
"As you can see, the ``gcc`` module has the environment variable ``GCC_ROOT`` "
"set."
msgstr ""

# 932102d36c254c13a0ea0a97a864cb23
#: ../spack/lib/spack/docs/tutorial_modules.rst:777
msgid ""
"Sometimes it's also useful to apply environment modifications selectively "
"and target only certain packages. You can, for instance set the common "
"variables ``CC``, ``CXX``, etc. in the ``gcc`` module file and apply other "
"custom modifications to the ``openmpi`` modules as follows:"
msgstr ""

# 222a0516a7fd42ccb319b4b28d760c0f
#: ../spack/lib/spack/docs/tutorial_modules.rst:822
msgid ""
"This time we will be more selective and regenerate only the ``gcc`` and "
"``openmpi`` module files:"
msgstr ""

# fe50269b3612422bad60464c395efbd4
#: ../spack/lib/spack/docs/tutorial_modules.rst:888
msgid ""
"Spack can also generate module files that contain code to load the "
"dependencies automatically. You can, for instance generate python modules "
"that load their dependencies by adding the ``autoload`` directive and "
"assigning it the value ``direct``:"
msgstr ""

# 4f20a72e9c7a4199921853ef0eac8f1c
#: ../spack/lib/spack/docs/tutorial_modules.rst:936
msgid ""
"and regenerating the module files for every package that depends on "
"``python``:"
msgstr ""

# 90f0c51f544549f1a1ae2162ecc14967
#: ../spack/lib/spack/docs/tutorial_modules.rst:943
msgid "Now the ``py-scipy`` module will be:"
msgstr ""

# 611b7720b7f04bb79b30161c1e2e1b2e
#: ../spack/lib/spack/docs/tutorial_modules.rst:981
msgid "and will contain code to autoload all the dependencies:"
msgstr ""

# 28cabaf2227c4cde9a85ac9b6d521ee1
#: ../spack/lib/spack/docs/tutorial_modules.rst:990
msgid ""
"In case messages are unwanted during the autoload procedure, it will be "
"sufficient to omit the line setting ``verbose: True`` in the configuration "
"file above."
msgstr ""

# 0878950399d4447383d4784dd1740851
#: ../spack/lib/spack/docs/tutorial_modules.rst:995
msgid "Hierarchical module files"
msgstr ""

# 21fe2cba900948678cca2cb11e7dfcc6
#: ../spack/lib/spack/docs/tutorial_modules.rst:997
msgid ""
"So far we worked with non-hierarchical module files, i.e. with module files "
"that are all generated in the same root directory and don't attempt to "
"dynamically modify the ``MODULEPATH``. This results in a flat module "
"structure where all the software is visible at the same time:"
msgstr ""

# 465f9855fa174f7fa7c64f32ac16671f
#: ../spack/lib/spack/docs/tutorial_modules.rst:1028
msgid ""
"This layout is quite simple to deploy, but you can see from the above "
"snippet that nothing prevents users from loading incompatible sets of "
"modules:"
msgstr ""

# a5e6a727909a434781e1f624450e154d
#: ../spack/lib/spack/docs/tutorial_modules.rst:1040
msgid ""
"Even if ``conflicts`` directives are carefully placed in module files, they:"
msgstr ""

# d2e0d2fc15144731be70d2c3d9640059
#: ../spack/lib/spack/docs/tutorial_modules.rst:1042
msgid "won't enforce a consistent environment, but will just report an error"
msgstr ""

# b01068773cf546529468f7b36803127d
#: ../spack/lib/spack/docs/tutorial_modules.rst:1043
msgid ""
"need constant updates, for instance as soon as a new compiler or MPI library "
"is installed"
msgstr ""

# 8be92ffcd007464dad5612125d5d8a2f
#: ../spack/lib/spack/docs/tutorial_modules.rst:1045
msgid ""
"`Hierarchical module files <http://lmod.readthedocs.io/en/"
"latest/080_hierarchy.html>`_ try to overcome these shortcomings by showing "
"at start-up only a restricted view of what is available on the system: more "
"specifically only the software that has been installed with OS provided "
"compilers. Among this software there will be other - usually more recent - "
"compilers that, once loaded, will prepend new directories to ``MODULEPATH`` "
"unlocking all the software that was compiled with them. This \"unlocking\" "
"idea can then be extended arbitrarily to virtual dependencies, as we'll see "
"in the following section."
msgstr ""

# 4f103cd25b024c57ab03c03b87877e9d
#: ../spack/lib/spack/docs/tutorial_modules.rst:1055
msgid "Core/Compiler/MPI"
msgstr ""

# 55c7b3a2af1449559faecb1a4ba5ca78
#: ../spack/lib/spack/docs/tutorial_modules.rst:1057
msgid ""
"The most widely used hierarchy is the so called ``Core/Compiler/MPI`` where, "
"on top of the compilers, different MPI libraries also unlock software linked "
"to them. There are just a few steps needed to adapt the ``modules.yaml`` "
"file we used previously:"
msgstr ""

# bcaac917ed3147d189f42193e00b8aa7
#: ../spack/lib/spack/docs/tutorial_modules.rst:1061
msgid "enable the ``lmod`` file generator"
msgstr ""

# 93fa590c49354e95b6da7c5dd9359e52
#: ../spack/lib/spack/docs/tutorial_modules.rst:1062
msgid "change the ``tcl`` tag to ``lmod``"
msgstr ""

# f9be94e459d64f4e9239ce0b58416da3
#: ../spack/lib/spack/docs/tutorial_modules.rst:1063
msgid "remove ``tcl`` specific directives (``naming_scheme`` and ``conflict``)"
msgstr ""

# 330d17a9e15d45de9f89a9ee6549f0ae
#: ../spack/lib/spack/docs/tutorial_modules.rst:1064
msgid "declare which compilers are considered ``core_compilers``"
msgstr ""

# 441e0507a8ab4b04b529f8dd6e91ce86
#: ../spack/lib/spack/docs/tutorial_modules.rst:1065
msgid ""
"remove the ``mpi`` related suffixes (as they will be substituted by "
"hierarchies)"
msgstr ""

# 11551636044742e2bd0c981f7bfbab3f
#: ../spack/lib/spack/docs/tutorial_modules.rst:1067
msgid "After these modifications your configuration file should look like:"
msgstr ""

# cc60a0be8da54186a723f0644fcecde4
#: ../spack/lib/spack/docs/tutorial_modules.rst:1113
msgid "Double colon in configuration files"
msgstr ""

# 41d17e5d7cd3429c833c7886fc92f3ca
#: ../spack/lib/spack/docs/tutorial_modules.rst:1111
msgid ""
"The double colon after ``enable`` is intentional and it serves the purpose "
"of overriding the default list of enabled generators so that only ``lmod`` "
"will be active (see :ref:`config-overrides` for more details)."
msgstr ""

# b57993a2eaa24681acda2f68ef2ae024
#: ../spack/lib/spack/docs/tutorial_modules.rst:1116
msgid ""
"The directive ``core_compilers`` accepts a list of compilers. Everything "
"built using these compilers will create a module in the ``Core`` part of the "
"hierarchy, which is the entry point for hierarchical module files. It is "
"common practice to put the OS provided compilers in the list and only build "
"common utilities and other compilers with them."
msgstr ""

# 48c81e94c1b641ffb8718c2c9defff7e
#: ../spack/lib/spack/docs/tutorial_modules.rst:1122
msgid "If we now regenerate the module files:"
msgstr ""

# e2db2bcc86514d1680fd97bfee519d75
#: ../spack/lib/spack/docs/tutorial_modules.rst:1129
msgid "and update ``MODULEPATH`` to point to the ``Core``:"
msgstr ""

# c19cc9812ee04a6981f06ca92009bb96
#: ../spack/lib/spack/docs/tutorial_modules.rst:1137
msgid "asking for the available modules will return:"
msgstr ""

# 70b3078154ef4d19ac05b6b211a4f548
#: ../spack/lib/spack/docs/tutorial_modules.rst:1149
msgid ""
"Unsurprisingly, the only visible module is ``gcc``. Loading that we'll "
"unlock the ``Compiler`` part of the hierarchy:"
msgstr ""

# 298bdc2cfdba42d980d0ddf3efc0dcce
#: ../spack/lib/spack/docs/tutorial_modules.rst:1173
msgid ""
"The same holds true also for the ``MPI`` part, that you can enable by "
"loading either ``mpich`` or ``openmpi``. Let's start by loading ``mpich``:"
msgstr ""

# b51127c7acf34bee8bfcef86b7652332
#: ../spack/lib/spack/docs/tutorial_modules.rst:1208
msgid ""
"At this point we can showcase the improved consistency that a hierarchical "
"layout provides over a non-hierarchical one:"
msgstr ""

# f6c31d5f203f4a03a8e969fa06268f4f
#: ../spack/lib/spack/docs/tutorial_modules.rst:1221
msgid ""
"``Lmod`` took care of swapping the MPI provider for us, and it also "
"substituted the ``netlib-scalapack`` module to conform to the change in the "
"MPI. In this way we can't accidentally pull-in two different MPI providers "
"at the same time or load a module file for a package linked to ``openmpi`` "
"when ``mpich`` is also loaded. Consistency for compilers and MPI is ensured "
"by the tool."
msgstr ""

# 3ab5be96ce0542efb423fe7828c9a794
#: ../spack/lib/spack/docs/tutorial_modules.rst:1230
msgid "Add LAPACK to the hierarchy"
msgstr ""

# 033d9de9886545949752d6405ec93cf0
#: ../spack/lib/spack/docs/tutorial_modules.rst:1232
msgid ""
"The hierarchy just shown is already a great improvement over non-"
"hierarchical layouts, but it still has an asymmetry: ``LAPACK`` providers "
"cover the same semantic role as ``MPI`` providers, but yet they are not part "
"of the hierarchy."
msgstr ""

# 283801df208f4ca6b4325e2517750823
#: ../spack/lib/spack/docs/tutorial_modules.rst:1236
msgid ""
"To be more practical, this means that although we have gained an improved "
"consistency in our environment when it comes to ``MPI``, we still have the "
"same problems as we had before for ``LAPACK`` implementations:"
msgstr ""

# 2982da150d414cdba372eb5b7a2a2738
#: ../spack/lib/spack/docs/tutorial_modules.rst:1257
msgid ""
"Hierarchies that are deeper than ``Core``/``Compiler``/``MPI`` are probably "
"still considered \"unusual\" or \"impractical\" at many sites, mainly "
"because module files are written manually and keeping track of the "
"combinations among multiple providers quickly becomes quite involved."
msgstr ""

# 52a6237550ca49a58d6979da6e2a7ad3
#: ../spack/lib/spack/docs/tutorial_modules.rst:1262
msgid ""
"For instance, having both ``MPI`` and ``LAPACK`` in the hierarchy means we "
"must classify software into one of four categories:"
msgstr ""

# 8d129e67648c440b9172e6d75b76c377
#: ../spack/lib/spack/docs/tutorial_modules.rst:1265
msgid "Software that doesn't depend on ``MPI`` or ``LAPACK``"
msgstr ""

# 711b4a887ed74ecbbb73583d900ff91c
#: ../spack/lib/spack/docs/tutorial_modules.rst:1266
msgid "Software that depends only on ``MPI``"
msgstr ""

# d1bded9082454da9a09ccc35695d4607
#: ../spack/lib/spack/docs/tutorial_modules.rst:1267
msgid "Software that depends only on ``LAPACK``"
msgstr ""

# f0bb44e19d404797839a5884b9e02fbf
#: ../spack/lib/spack/docs/tutorial_modules.rst:1268
msgid "Software that depends on both"
msgstr ""

# 9e248bec50644a74a1da7ed35950d489
#: ../spack/lib/spack/docs/tutorial_modules.rst:1270
msgid ""
"to decide when to show it to the user. The situation becomes more involved "
"as the number of virtual dependencies in the hierarchy increases."
msgstr ""

# 669c7b31430945378ead96402319349e
#: ../spack/lib/spack/docs/tutorial_modules.rst:1273
msgid ""
"We can take advantage of the DAG that Spack maintains for the installed "
"software and solve this combinatorial problem in a clean and automated way. "
"In some sense Spack's ability to manage this combinatorial complexity makes "
"deeper hierarchies feasible."
msgstr ""

# 141aa558e00d4ed0886e8901f9c14695
#: ../spack/lib/spack/docs/tutorial_modules.rst:1278
msgid ""
"Coming back to our example, let's add ``lapack`` to the hierarchy and remove "
"any remaining suffix:"
msgstr ""

# dc83f7172b1247b389df89369f348aec
#: ../spack/lib/spack/docs/tutorial_modules.rst:1317
msgid "After module files have been regenerated as usual:"
msgstr ""

# efc72c78be804f21b8c5a59b6259e9f5
#: ../spack/lib/spack/docs/tutorial_modules.rst:1326
msgid "we can see that now we have additional components in the hierarchy:"
msgstr ""

# 0f0fc8dd563042689612a7e4058adb42
#: ../spack/lib/spack/docs/tutorial_modules.rst:1379
msgid ""
"Both ``MPI`` and ``LAPACK`` providers will now benefit from the same safety "
"features:"
msgstr ""

# faeec5315b77401a907df471ccc231f8
#: ../spack/lib/spack/docs/tutorial_modules.rst:1403
msgid ""
"Because we only compiled ``py-numpy`` with ``openblas`` the module is made "
"inactive when we switch the ``LAPACK`` provider. The user environment is now "
"consistent by design!"
msgstr ""

# a5ce1585ee1e44c8a4779a0d85f44c43
#: ../spack/lib/spack/docs/tutorial_modules.rst:1409
msgid "Working with templates"
msgstr ""

# 92c68bcbe4e24363ab31fc71d7ba880f
#: ../spack/lib/spack/docs/tutorial_modules.rst:1411
msgid ""
"As briefly mentioned in the introduction, Spack uses `Jinja2 <http://jinja."
"pocoo.org/docs/2.9/>`_ to generate each individual module file. This means "
"that you have all of its flexibility and power when it comes to customizing "
"what gets generated!"
msgstr ""

# ee63bd78cfe146b8a3f9ec27df599cf1
#: ../spack/lib/spack/docs/tutorial_modules.rst:1418
msgid "Module file templates"
msgstr ""

# 726e2d8e6acc4fdd97a10bdaddf8e081
#: ../spack/lib/spack/docs/tutorial_modules.rst:1420
msgid ""
"The templates that Spack uses to generate module files are stored in the "
"``share/spack/templates/module`` directory within the Spack prefix, and they "
"all share the same common structure.  Usually, they start with a header that "
"identifies the type of module being generated. In the case of hierarchical "
"module files it's:"
msgstr ""

# f5c5493507014ae4a49335758ffc2cb6
#: ../spack/lib/spack/docs/tutorial_modules.rst:1430
msgid ""
"The statements within double curly brackets ``{{ ... }}`` denote "
"`expressions <http://jinja.pocoo.org/docs/2.9/templates/#expressions>`_ that "
"will be evaluated and substituted at module generation time. The rest of the "
"file is then divided into `blocks <http://jinja.pocoo.org/docs/2.9/templates/"
"#template-inheritance>`_ that can be overridden or extended by users, if "
"need be. `Control structures <http://jinja.pocoo.org/docs/2.9/templates/"
"#list-of-control-structures>`_ , delimited by ``{% ... %}``, are also "
"permitted in the template language:"
msgstr ""

# b9ba9e73450049aa941f30549ee15cb8
#: ../spack/lib/spack/docs/tutorial_modules.rst:1444
msgid ""
"The locations where Spack looks for templates are specified in ``config."
"yaml``:"
msgstr ""

# 30f749595ae24586be4eae67914ba40c
#: ../spack/lib/spack/docs/tutorial_modules.rst:1451
msgid ""
"and can be extended by users to employ custom templates, as we'll see next."
msgstr ""

# 8f5ea98b30c24fc198a4ec6b2c2b889a
#: ../spack/lib/spack/docs/tutorial_modules.rst:1455
msgid "Extend the default templates"
msgstr ""

# c816f55ff6324a29848b0a5689d49757
#: ../spack/lib/spack/docs/tutorial_modules.rst:1457
msgid ""
"Let's assume one of our software is protected by group membership: allowed "
"users belong to the same linux group, and access is granted at group level. "
"Wouldn't it be nice if people that are not yet entitled to use it could "
"receive a helpful message at module load time that tells them who to contact "
"in your organization to be inserted in the group?"
msgstr ""

# 1c8aadccfa5141d2b7a158e0c505ddfe
#: ../spack/lib/spack/docs/tutorial_modules.rst:1463
msgid ""
"To automate the generation of module files with such site-specific behavior "
"we'll start by extending the list of locations where Spack looks for module "
"files. Let's create the file ``~/.spack/config.yaml`` with the content:"
msgstr ""

# aba180d7a52246408dc658afdb258e0a
#: ../spack/lib/spack/docs/tutorial_modules.rst:1473
msgid ""
"This tells Spack to also search another location when looking for template "
"files. Next, we need to create our custom template extension in the folder "
"listed above:"
msgstr ""

# 08ca9a0749854bf3bb2aee0e16d5e79e
#: ../spack/lib/spack/docs/tutorial_modules.rst:1489
msgid "Let's name this file ``group-restricted.lua``. The line:"
msgstr ""

# b297219cea2d49c79f71b8dda10b1005
#: ../spack/lib/spack/docs/tutorial_modules.rst:1495
msgid ""
"tells Jinja2 that we are reusing the standard template for hierarchical "
"module files. The section:"
msgstr ""

# 0f9201de7fb94c9ba09ce97f147229f3
#: ../spack/lib/spack/docs/tutorial_modules.rst:1510
msgid ""
"overrides the ``footer`` block. Finally, we need to add a couple of lines in "
"``modules.yaml`` to tell Spack which specs need to use the new custom "
"template. For the sake of illustration let's assume it's ``netlib-"
"scalapack``:"
msgstr ""

# 4bd9f3a98b8b4446b00194601df616e0
#: ../spack/lib/spack/docs/tutorial_modules.rst:1555
msgid "If we regenerate the module files one last time:"
msgstr ""

# 2f7bd11a7f69449c94af2d617333e159
#: ../spack/lib/spack/docs/tutorial_modules.rst:1562
msgid ""
"we'll find the following at the end of each ``netlib-scalapack`` module file:"
msgstr ""

# 146a82151e3843d8a243dc3d3c3ba671
#: ../spack/lib/spack/docs/tutorial_modules.rst:1574
msgid ""
"and every user that doesn't have access to the software will now be "
"redirected to the right e-mail address where to ask for it!"
msgstr ""

# d83e24cc10bc4b4db491b99d902b97e1
#: ../spack/lib/spack/docs/tutorial_packaging.rst:10
msgid "Package Creation Tutorial"
msgstr ""

# 7cbc0416ada64d7f8bb1f76dc1b15024
#: ../spack/lib/spack/docs/tutorial_packaging.rst:12
msgid ""
"This tutorial will walk you through the steps behind building a simple "
"package installation script.  We'll focus building an mpileaks package, "
"which is a MPI debugging tool.  By creating a package file we're essentially "
"giving Spack a recipe for how to build a particular piece of software.  "
"We're describing some of the software's dependencies, where to find the "
"package, what commands and options are used to build the package from "
"source, and more.  Once we've specified a package's recipe, we can ask Spack "
"to build that package in many different ways."
msgstr ""

# 18da81bec8ec43bd84aae5e6be8c7507
#: ../spack/lib/spack/docs/tutorial_packaging.rst:21
msgid ""
"This tutorial assumes you have a basic familiarity with some of the Spack "
"commands, and that you have a working version of Spack installed.  If not, "
"we suggest looking at Spack's *Getting Started* guide.  This tutorial also "
"assumes you have at least a beginner's-level familiarity with Python."
msgstr ""

# 3590b8ca9d4743e89894fe7f7dd7e490
#: ../spack/lib/spack/docs/tutorial_packaging.rst:27
msgid ""
"Also note that this document is a tutorial.  It can help you get started "
"with packaging, but is not intended to be complete.  See Spack's :ref:"
"`packaging-guide` for more complete documentation on this topic."
msgstr ""

# bdf862b702e84789ab17642191e1cb3d
#: ../spack/lib/spack/docs/tutorial_packaging.rst:35
msgid "A few things before we get started:"
msgstr ""

# 3d8f22d14ba14d42b159c747a8449820
#: ../spack/lib/spack/docs/tutorial_packaging.rst:37
msgid ""
"We'll refer to the Spack installation location via the environment variable "
"``SPACK_ROOT``.  You should point ``SPACK_ROOT`` at wherever you have Spack "
"installed."
msgstr ""

# c92b4c58eb324f3987a65b9a783924f7
#: ../spack/lib/spack/docs/tutorial_packaging.rst:40
msgid "Add ``$SPACK_ROOT/bin`` to your ``PATH`` before you start."
msgstr ""

# e2325b93f7a74f2685d668ff7792dae0
#: ../spack/lib/spack/docs/tutorial_packaging.rst:41
msgid ""
"Make sure your ``EDITOR`` environment variable is set to some text editor "
"you like."
msgstr ""

# 9e49701aae2b4b638a8cb720d6a7a301
#: ../spack/lib/spack/docs/tutorial_packaging.rst:43
msgid ""
"We'll be writing Python code as part of this tutorial.  You can find "
"successive versions of the Python code in ``$SPACK_ROOT/lib/spack/docs/"
"tutorial/examples``."
msgstr ""

# 091c33e2054b453eaab8b5b605ef6e4c
#: ../spack/lib/spack/docs/tutorial_packaging.rst:49
msgid "Creating the Package File"
msgstr ""

# 7411740299114364b5b28d40aef35809
#: ../spack/lib/spack/docs/tutorial_packaging.rst:51
msgid ""
"We will use a separate package repository for the tutorial. Package "
"repositories allow you to separate sets of packages that take precedence "
"over one another. We will use the tutorial repo that ships with Spack to "
"avoid breaking the builtin Spack packages."
msgstr ""

# 8ea89a018c384bc192e9512f2ad7b1e7
#: ../spack/lib/spack/docs/tutorial_packaging.rst:61
msgid ""
"Spack comes with a handy command to create a new package: ``spack create``."
msgstr ""

# 669c0d9b0eb84155ad1b36a6ed881398
#: ../spack/lib/spack/docs/tutorial_packaging.rst:63
msgid ""
"This command is given the location of a package's source code, downloads the "
"code, and sets up some basic packaging infrastructure for you.  The mpileaks "
"source code can be found on GitHub, and here's what happens when we run "
"``spack create`` on it:"
msgstr ""

# d09d242b7eb24a4e9d22d9e72c9160f7
#: ../spack/lib/spack/docs/tutorial_packaging.rst:85
msgid "And Spack should spawn a text editor with this file:"
msgstr ""

# 6456ece2d2ca4ae6894a7060e5129dee
#: ../spack/lib/spack/docs/tutorial_packaging.rst:90
msgid ""
"Spack has created this file in ``/home/spack1/spack/var/spack/repos/builtin/"
"packages/mpileaks/package.py``.  Take a moment to look over the file.  "
"There's a few placeholders that Spack has created, which we'll fill in as "
"part of this tutorial:"
msgstr ""

# 765233dbcf694bf09dd3837b9f5560e5
#: ../spack/lib/spack/docs/tutorial_packaging.rst:95
msgid "We'll document some information about this package in the comments."
msgstr ""

# d4766ecc21e94e8bb2684141ca744838
#: ../spack/lib/spack/docs/tutorial_packaging.rst:96
msgid "We'll fill in the dependency list for this package."
msgstr ""

# ae032e5a8c5949219ecda728cec8ae0c
#: ../spack/lib/spack/docs/tutorial_packaging.rst:97
msgid ""
"We'll fill in some of the configuration arguments needed to build this "
"package."
msgstr ""

# 14bf6b6c23d9421591d7c1901adbedff
#: ../spack/lib/spack/docs/tutorial_packaging.rst:100
msgid ""
"For the moment, exit your editor and let's see what happens when we try to "
"build this package:"
msgstr ""

# e9c8567aacaa4287a79e00c37275fec0
#: ../spack/lib/spack/docs/tutorial_packaging.rst:128
msgid ""
"This obviously didn't work; we need to fill in the package-specific "
"information.  Specifically, Spack didn't try to build any of mpileaks' "
"dependencies, nor did it use the proper configure arguments.  Let's start "
"fixing things"
msgstr ""

# 7485fd3e182b45938e3eb384115986de
#: ../spack/lib/spack/docs/tutorial_packaging.rst:135
msgid "Package Documentation"
msgstr ""

# 1b29dac3e59a4f209f61a090bb8ee121
#: ../spack/lib/spack/docs/tutorial_packaging.rst:137
msgid ""
"We can bring the ``package.py`` file back into our ``EDITOR`` with the "
"``spack edit`` command:"
msgstr ""

# e7dd2ac2d404452a86d5cd1259111117
#: ../spack/lib/spack/docs/tutorial_packaging.rst:144
msgid ""
"Let's remove some of the ``FIXME`` comments, and add links to the mpileaks "
"homepage and document what mpileaks does.  I'm also going to cut out the "
"Copyright clause at this point to keep this tutorial document shorter, but "
"you shouldn't do that normally.  The results of these changes can be found "
"in ``$SPACK_ROOT/lib/spack/docs/tutorial/examples/1.package.py`` and are "
"below.  Make these changes to your ``package.py``:"
msgstr ""

# e0b0b53a520e47989c629b863793d9a3
#: ../spack/lib/spack/docs/tutorial_packaging.rst:155
msgid ""
"We've filled in the comment that describes what this package does and added "
"a link to the web site.  That won't help us build yet, but it will allow "
"Spack to provide some documentation on this package to other users:"
msgstr ""

# 6f31cf68dd6d4243aad2a100c929d1ab
#: ../spack/lib/spack/docs/tutorial_packaging.rst:197
msgid ""
"As we fill in more information about this package the ``spack info`` command "
"will become more informative.  Now let's start making this package build."
msgstr ""

# e99a4cf487924e2d9a0f99249ff59041
#: ../spack/lib/spack/docs/tutorial_packaging.rst:204
msgid ""
"The mpileaks packages depends on three other package: ``MPI``, ``adept-"
"utils``, and ``callpath``.  Let's add those via the ``depends_on`` command "
"in our ``package.py`` (this version is in ``$SPACK_ROOT/lib/spack/docs/"
"tutorial/examples/2.package.py``):"
msgstr ""

# 25eaa7dd16004a09b5d4e1f57eeae4f9
#: ../spack/lib/spack/docs/tutorial_packaging.rst:213
msgid ""
"Now when we go to build mpileaks, Spack will fetch and build these "
"dependencies before building mpileaks.  Note that the mpi dependency is a "
"different kind of beast than the adept-utils and callpath dependencies; "
"there is no mpi package available in Spack.  Instead mpi is a virtual "
"dependency.  Spack may satisfy that dependency by installing packages such "
"as ``openmpi`` or ``mvapich``.  See the :ref:`packaging-guide` for more "
"information on virtual dependencies."
msgstr ""

# c92af088647c47f1ad08f37cf4f90a9b
#: ../spack/lib/spack/docs/tutorial_packaging.rst:221
msgid "Now when we try to install this package a lot more happens:"
msgstr ""

# 82c6b2cbedcb43568168091dadb72b8a
#: ../spack/lib/spack/docs/tutorial_packaging.rst:261
msgid ""
"Note that this command may take a while to run and produce more output if "
"you don't have an MPI already installed or configured in Spack."
msgstr ""

# 09a550846fcd438cac589436d43c9afe
#: ../spack/lib/spack/docs/tutorial_packaging.rst:264
msgid ""
"Now Spack has identified and made sure all of our dependencies have been "
"built.  It found the ``openmpi`` package that will satisfy our ``mpi`` "
"dependency, and the ``callpath`` and ``adept-utils`` package to satisfy our "
"concrete dependencies."
msgstr ""

# b5c2660072f543e7956b164c2fc3c2c1
#: ../spack/lib/spack/docs/tutorial_packaging.rst:271
msgid "Debugging Package Builds"
msgstr ""

# 3770fba4908a4a70928cc330e7b73e12
#: ../spack/lib/spack/docs/tutorial_packaging.rst:273
msgid ""
"Our ``mpileaks`` package is still not building.  It may be obvious to many "
"of you that we never ran the configure script.  Let's add a call to "
"``configure()`` to the top of the install routine. The resulting package.py "
"is in ``$SPACK_ROOT/lib/spack/docs/tutorial/examples/3.package.py``:"
msgstr ""

# ffbd61c06911415dbd5b71abae9e1c31
#: ../spack/lib/spack/docs/tutorial_packaging.rst:282
msgid "If we re-run we still get errors:"
msgstr ""

# c8ba012a54cf47459a1ad28a8464b2e8
#: ../spack/lib/spack/docs/tutorial_packaging.rst:324
msgid ""
"Again, the problem may be obvious.  But let's pretend we're not all "
"intelligent developers and use this opportunity spend some time debugging.  "
"We have a few options that can tell us about what's going wrong:"
msgstr ""

# 8e39c393549d4d94acbc055b8e67477c
#: ../spack/lib/spack/docs/tutorial_packaging.rst:329
msgid ""
"As per the error message, Spack has given us a ``spack-build.out`` debug log:"
msgstr ""

# c3e8f3695f434127ab047e8fbafaa7ca
#: ../spack/lib/spack/docs/tutorial_packaging.rst:361
msgid ""
"This gives us the output from the build, and mpileaks isn't finding its "
"``adept-utils`` package.  Spack has automatically added the include and "
"library directories of ``adept-utils`` to the compiler's search path, but "
"some packages like mpileaks can sometimes be picky and still want things "
"spelled out on their command line.  But let's continue to pretend we're not "
"brilliant developers, and explore some other debugging paths:"
msgstr ""

# 6687a9a90fc64e04ad6b8d9ed7768700
#: ../spack/lib/spack/docs/tutorial_packaging.rst:369
msgid "We can also enter the build area and try to manually run the build:"
msgstr ""

# 22b61f462d7f4ba28b5f1e7f17ae8064
#: ../spack/lib/spack/docs/tutorial_packaging.rst:376
msgid ""
"The ``spack env`` command spawned a new shell that contains the same "
"environment that Spack used to build the mpileaks package (you can "
"substitute bash for your favorite shell).  The ``spack cd`` command changed "
"our working dirctory to the last attempted build for mpileaks. From here we "
"can manually re-run the build:"
msgstr ""

# 56a7a844b57d40708e972ecc56ccae2f
#: ../spack/lib/spack/docs/tutorial_packaging.rst:411
msgid ""
"We're seeing the same error, but now we're in a shell where we can run the "
"command ourselves and debug as needed.  We could, for example, run ``./"
"configure --help`` to see what options we can use to specify dependencies."
msgstr ""

# 61aea101566f4243a323481c630831ae
#: ../spack/lib/spack/docs/tutorial_packaging.rst:416
msgid ""
"We can use the ``exit`` command to leave the shell spawned by ``spack env``."
msgstr ""

# 53210a3ce2a14e0cb83981fd458ef8e6
#: ../spack/lib/spack/docs/tutorial_packaging.rst:421
msgid "Specifying Configure Arguments"
msgstr ""

# 6d05f7ee3e174bc3bf9d048234ef2a09
#: ../spack/lib/spack/docs/tutorial_packaging.rst:423
msgid ""
"Let's add the configure arguments to the mpileaks' ``package.py``.  This "
"version can be found in ``$SPACK_ROOT/lib/spack/docs/tutorial/examples/4."
"package.py``:"
msgstr ""

# 50740339d21b45d1b503e514c61965ec
#: ../spack/lib/spack/docs/tutorial_packaging.rst:431
msgid "This is all we need for working mpileaks!  If we install now we'll see:"
msgstr ""

# 56fe7fbd439a412c88bf575780c1c8da
#: ../spack/lib/spack/docs/tutorial_packaging.rst:451
msgid ""
"There are some special circumstances in package that are worth highlighting. "
"Normally spack would have automatically detected that mpileaks was an "
"Autotools-based package when we ran ``spack create`` and made it an "
"``AutoToolsPackage`` class (except we added the ``-t generic`` option to "
"skip this).  Instead of a full install routine we would have just written:"
msgstr ""

# 551329b6b6ae4f939f76a20dd43245b3
#: ../spack/lib/spack/docs/tutorial_packaging.rst:463
msgid ""
"Similarly, if this had been a CMake-based package we would have been filling "
"in a ``cmake_args`` function instead of ``configure_args``.  There are "
"similar default package types for many build environments that will be "
"discussed later in the tutorial."
msgstr ""

# f798f7b1927e48a0bcef2c7e08ea5d0f
#: ../spack/lib/spack/docs/tutorial_packaging.rst:472
msgid ""
"We have a successful mpileaks build, but let's take some time to improve "
"it.  ``mpileaks`` has a build-time option to truncate parts of the stack "
"that it walks.  Let's add a variant to allow users to set this when they "
"build in Spack."
msgstr ""

# f3bad25a00f9416e85327406b6d550d9
#: ../spack/lib/spack/docs/tutorial_packaging.rst:477
msgid ""
"To do this, we'll add a variant to our package, as per the following (see ``"
"$SPACK_ROOT/lib/spack/docs/tutorial/examples/5.package.py``):"
msgstr ""

# 356d8bfb3269424e98b0cf7fe0d2440c
#: ../spack/lib/spack/docs/tutorial_packaging.rst:484
msgid ""
"We've added the variant ``stackstart``, and given it a default value of "
"``0``.  If we install now we can see the stackstart variant added to the "
"configure line (output truncated for length):"
msgstr ""

# 007dc1fdcee542b8bc3692f723ace659
#: ../spack/lib/spack/docs/tutorial_packaging.rst:506
msgid "The Spec Object"
msgstr ""

# 296514987b0c439a8ec5c353f7f34d18
#: ../spack/lib/spack/docs/tutorial_packaging.rst:508
msgid ""
"This tutorial has glossed over a few important features, which weren't too "
"relevant for mpileaks but may be useful for other packages.  There were "
"several places we references the ``self.spec`` object.  This is a powerful "
"class for querying information about what we're building.  For example, you "
"could use the spec to query information about how a package's dependencies "
"were built, or what compiler was being used, or what version of a package is "
"being installed.  Full documentation can be found in the :ref:`packaging-"
"guide`, but here's some quick snippets with common queries:"
msgstr ""

# eb365684c6cf414e9cbf6d93aa146aa2
#: ../spack/lib/spack/docs/tutorial_packaging.rst:518
msgid "Am I building ``mpileaks`` version ``1.1`` or greater?"
msgstr ""

# 96095e90a84345e1884eddd740bd6ee6
#: ../spack/lib/spack/docs/tutorial_packaging.rst:525
msgid "Is ``openmpi`` the MPI I'm building with?"
msgstr ""

# 08d8e997daf04bbc8d29900438eee838
#: ../spack/lib/spack/docs/tutorial_packaging.rst:532
msgid "Am I building with ``gcc`` version less than ``5.0.0``:"
msgstr ""

# 98303eff30ec4b5fb3f9aa0330e6c851
#: ../spack/lib/spack/docs/tutorial_packaging.rst:539
msgid "Am I built with the ``debug`` variant:"
msgstr ""

# 6ef40ab3f3ea45edb32f46db8049f18d
#: ../spack/lib/spack/docs/tutorial_packaging.rst:546
msgid "Is my ``dyninst`` dependency greater than version ``8.0``?"
msgstr ""

# 202e2fdfffed4a25b4264902eec19848
#: ../spack/lib/spack/docs/tutorial_packaging.rst:553
msgid ""
"More examples can be found in the thousands of packages already added to "
"Spack in ``$SPACK_ROOT/var/spack/repos/builtin/packages``."
msgstr ""

# ba4a3d2c1ce54720a458671d35e40fee
#: ../spack/lib/spack/docs/tutorial_packaging.rst:556
msgid "Good Luck!"
msgstr ""

# c7d5bed15aed4e3a807daaa33e917ab9
#: ../spack/lib/spack/docs/tutorial_packaging.rst:558
msgid ""
"To ensure that future sections of the tutorial run properly, please "
"uninstall mpileaks and remove the tutorial repo from your configuration."
msgstr ""

# b642ca3f81464d4199e73e031ca1ff02
#: ../spack/lib/spack/docs/workflows.rst:8
msgid "Workflows"
msgstr "ワークフロー"

# 4df6a10c45aa435e93c43ec7c1cca3de
#: ../spack/lib/spack/docs/workflows.rst:10
msgid ""
"The process of using Spack involves building packages, running binaries from "
"those packages, and developing software that depends on those packages.  For "
"example, one might use Spack to build the ``netcdf`` package, use ``spack "
"load`` to run the ``ncdump`` binary, and finally, write a small C program to "
"read/write a particular NetCDF file."
msgstr ""

# 0a122cf486594b028c328aadb08e7f8d
#: ../spack/lib/spack/docs/workflows.rst:16
msgid ""
"Spack supports a variety of workflows to suit a variety of situations and "
"user preferences, there is no single way to do all these things. This "
"chapter demonstrates different workflows that have been developed, pointing "
"out the pros and cons of them."
msgstr ""

# c9472a86669949d889a76c54088541bb
#: ../spack/lib/spack/docs/workflows.rst:23
msgid "Definitions"
msgstr ""

# 702aebf08f9f47fea5038e759dfec2a9
#: ../spack/lib/spack/docs/workflows.rst:25
msgid "First some basic definitions."
msgstr ""

# b8cc1d68589d4b3493db8b16efdc84d3
#: ../spack/lib/spack/docs/workflows.rst:29
msgid "Package, Concrete Spec, Installed Package"
msgstr ""

# 2d3571309fe4410782303a3ec392c98d
#: ../spack/lib/spack/docs/workflows.rst:31
msgid ""
"In Spack, a package is an abstract recipe to build one piece of software. "
"Spack packages may be used to build, in principle, any version of that "
"software with any set of variants.  Examples of packages include ``curl`` "
"and ``zlib``."
msgstr ""

# 493ea91db17b48738a94daccaea3417c
#: ../spack/lib/spack/docs/workflows.rst:36
msgid ""
"A package may be *instantiated* to produce a concrete spec; one possible "
"realization of a particular package, out of combinatorially many other "
"realizations.  For example, here is a concrete spec instantiated from "
"``curl``:"
msgstr ""

# 99b539dd1419458096a6cbf439365e7b
#: ../spack/lib/spack/docs/workflows.rst:43
msgid ""
"Spack's core concretization algorithm generates concrete specs by "
"instantiating packages from its repo, based on a set of \"hints\", including "
"user input and the ``packages.yaml`` file.  This algorithm may be accessed "
"at any time with the ``spack spec`` command."
msgstr ""

# 329c39b9191b4664a8b0fe902bce059a
#: ../spack/lib/spack/docs/workflows.rst:48
msgid ""
"Every time Spack installs a package, that installation corresponds to a "
"concrete spec.  Only a vanishingly small fraction of possible concrete specs "
"will be installed at any one Spack site."
msgstr ""

# b7d3a4fe3e524fb381d396026e9f899b
#: ../spack/lib/spack/docs/workflows.rst:54
msgid "Consistent Sets"
msgstr ""

# f9c12786b3e14eb298bc5f7c40a4307b
#: ../spack/lib/spack/docs/workflows.rst:56
msgid ""
"A set of Spack specs is said to be *consistent* if each package is only "
"instantiated one way within it --- that is, if two specs in the set have the "
"same package, then they must also have the same version, variant, compiler, "
"etc.  For example, the following set is consistent:"
msgstr ""

# c7639dd26e19485b9054bd89d4bad297
#: ../spack/lib/spack/docs/workflows.rst:68
msgid "The following set is not consistent:"
msgstr ""

# d2bc75fc58b24a689f750d8ee8b91079
#: ../spack/lib/spack/docs/workflows.rst:77
msgid ""
"The compatibility of a set of installed packages determines what may be done "
"with it.  It is always possible to ``spack load`` any set of installed "
"packages, whether or not they are consistent, and run their binaries from "
"the command line.  However, a set of installed packages can only be linked "
"together in one binary if it is consistent."
msgstr ""

# 384f501da80d4ba39b0d39f84e0df38f
#: ../spack/lib/spack/docs/workflows.rst:83
msgid ""
"If the user produces a series of ``spack spec`` or ``spack load`` commands, "
"in general there is no guarantee of consistency between them.  Spack's "
"concretization procedure guarantees that the results of any *single* ``spack "
"spec`` call will be consistent.  Therefore, the best way to ensure a "
"consistent set of specs is to create a Spack package with dependencies, and "
"then instantiate that package.  We will use this technique below."
msgstr ""

# 8c0010afe2e546d8995722b9bd903088
#: ../spack/lib/spack/docs/workflows.rst:93
msgid "Building Packages"
msgstr ""

# 3fe3d52f9da24f48a419a160944bfbe1
#: ../spack/lib/spack/docs/workflows.rst:95
msgid ""
"Suppose you are tasked with installing a set of software packages on a "
"system in order to support one application -- both a core application "
"program, plus software to prepare input and analyze output.  The required "
"software might be summed up as a series of ``spack install`` commands placed "
"in a script.  If needed, this script can always be run again in the future.  "
"For example:"
msgstr ""

# 18ad4579c9b54ea6b6793866cfa92766
#: ../spack/lib/spack/docs/workflows.rst:112
msgid ""
"In most cases, this script will not correctly install software according to "
"your specific needs: choices need to be made for variants, versions and "
"virtual dependency choices may be needed.  It *is* possible to specify these "
"choices by extending specs on the command line; however, the same choices "
"must be specified repeatedly. For example, if you wish to use ``openmpi`` to "
"satisfy the ``mpi`` dependency, then ``^openmpi`` will have to appear on "
"*every* ``spack install`` line that uses MPI.  It can get repetitive fast."
msgstr ""

# 48c4b01af16742b9a39a432fb9f456da
#: ../spack/lib/spack/docs/workflows.rst:121
msgid ""
"Customizing Spack installation options is easier to do in the ``~/.spack/"
"packages.yaml`` file.  In this file, you can specify preferred versions and "
"variants to use for packages.  For example:"
msgstr ""

# 6698e2ff107a4d1faa1c4d27676cad33
#: ../spack/lib/spack/docs/workflows.rst:148
msgid ""
"This approach will work as long as you are building packages for just one "
"application."
msgstr ""

# b247dc8ae8db4b38a375057e8ab95618
#: ../spack/lib/spack/docs/workflows.rst:153
msgid "Multiple Applications"
msgstr ""

# 719e92e5401140919bbed7ee1c9bcc6b
#: ../spack/lib/spack/docs/workflows.rst:155
msgid ""
"Suppose instead you're building multiple inconsistent applications. For "
"example, users want package A to be built with ``openmpi`` and package B "
"with ``mpich`` --- but still share many other lower-level dependencies.  In "
"this case, a single ``packages.yaml`` file will not work.  Plans are to "
"implement *per-project* ``packages.yaml`` files. In the meantime, one could "
"write shell scripts to switch ``packages.yaml`` between multiple versions as "
"needed, using symlinks."
msgstr ""

# 02cbdcddf8a54d23909e9a096660c423
#: ../spack/lib/spack/docs/workflows.rst:165
msgid "Combinatorial Sets of Installs"
msgstr ""

# fda1ea74a5aa402d82d955d2956d9bac
#: ../spack/lib/spack/docs/workflows.rst:167
msgid ""
"Suppose that you are now tasked with systematically building many "
"incompatible versions of packages.  For example, you need to build ``petsc`` "
"9 times for 3 different MPI implementations on 3 different compilers, in "
"order to support user needs.  In this case, you will need to either create 9 "
"different ``packages.yaml`` files; or more likely, create 9 different "
"``spack install`` command lines with the correct options in the spec.  Here "
"is a real-life example of this kind of usage:"
msgstr ""

# 70a0f8b1e567411baf70fed434c02a2f
#: ../spack/lib/spack/docs/workflows.rst:215
msgid "Running Binaries from Packages"
msgstr ""

# d6872004ad544e45af460185c65e57a2
#: ../spack/lib/spack/docs/workflows.rst:217
msgid ""
"Once Spack packages have been built, the next step is to use them.  As with "
"building packages, there are many ways to use them, depending on the use "
"case."
msgstr ""

# 32bc30ac37d54e41ac75141b711249b4
#: ../spack/lib/spack/docs/workflows.rst:223
msgid "Find and Run"
msgstr ""

# bf547aba26c246cbb6c35930d29425d0
#: ../spack/lib/spack/docs/workflows.rst:225
msgid ""
"The simplest way to run a Spack binary is to find it and run it! In many "
"cases, nothing more is needed because Spack builds binaries with RPATHs.  "
"Spack installation directories may be found with ``spack location --install-"
"dir`` commands.  For example:"
msgstr ""

# 53606c0237d44818b40f98894d2af24d
#: ../spack/lib/spack/docs/workflows.rst:235
msgid ""
"This gives the root of the Spack package; relevant binaries may be found "
"within it.  For example:"
msgstr ""

# 2d0724f9845e4bb7bfd014bca00a1230
#: ../spack/lib/spack/docs/workflows.rst:243
msgid "Standard UNIX tools can find binaries as well.  For example:"
msgstr ""

# a980e859eae74637a70e8cf45142785f
#: ../spack/lib/spack/docs/workflows.rst:250
msgid ""
"These methods are suitable, for example, for setting up build processes or "
"GUIs that need to know the location of particular tools. However, other more "
"powerful methods are generally preferred for user environments."
msgstr ""

# c488c0a9a33f4ad3b4346a7cb660ae61
#: ../spack/lib/spack/docs/workflows.rst:258
msgid "Spack-Generated Modules"
msgstr ""

# 4fadcafa937b4f5ab6997c625f0109f3
#: ../spack/lib/spack/docs/workflows.rst:260
msgid ""
"Suppose that Spack has been used to install a set of command-line programs, "
"which users now wish to use.  One can in principle put a number of ``spack "
"load`` commands into ``.bashrc``, for example, to load a set of Spack-"
"generated modules:"
msgstr ""

# d12caedc18a548608a2703b3e82addee
#: ../spack/lib/spack/docs/workflows.rst:273
msgid ""
"Although simple load scripts like this are useful in many cases, they have "
"some drawbacks:"
msgstr ""

# 03b8cbcc1ada45a2b1003fb38e8a2131
#: ../spack/lib/spack/docs/workflows.rst:276
msgid ""
"The set of modules loaded by them will in general not be consistent.  They "
"are a decent way to load commands to be called from command shells.  See "
"below for better ways to assemble a consistent set of packages for building "
"application programs."
msgstr ""

# a0dd7c9e30014f47b91031262ae9030f
#: ../spack/lib/spack/docs/workflows.rst:281
msgid ""
"The ``spack spec`` and ``spack install`` commands use a sophisticated "
"concretization algorithm that chooses the \"best\" among several options, "
"taking into account ``packages.yaml`` file. The ``spack load`` and ``spack "
"module tcl loads`` commands, on the other hand, are not very smart: if the "
"user-supplied spec matches more than one installed package, then ``spack "
"module tcl loads`` will fail. This may change in the future.  For now, the "
"workaround is to be more specific on any ``spack module tcl loads`` lines "
"that fail."
msgstr ""

# 8dd23323a16e45069cd95bd9aefa23d8
#: ../spack/lib/spack/docs/workflows.rst:293
msgid "Generated Load Scripts"
msgstr ""

# 8837325a5e334c7fa61f340fabaae004
#: ../spack/lib/spack/docs/workflows.rst:295
msgid ""
"Another problem with using `spack load` is, it is slow; a typical user "
"environment could take several seconds to load, and would not be appropriate "
"to put into ``.bashrc`` directly.  It is preferable to use a series of "
"``spack module tcl loads`` commands to pre-compute which modules to load.  "
"These can be put in a script that is run whenever installed Spack packages "
"change.  For example:"
msgstr ""

# 5c24520b656a4439b5e0c7229e0bbf7f
#: ../spack/lib/spack/docs/workflows.rst:318
msgid "The output of this file is written in ``~/env/spackenv``:"
msgstr ""

# 642a4c1f06d145e69886786afdd0986a
#: ../spack/lib/spack/docs/workflows.rst:347
msgid "Users may now put ``source ~/env/spackenv`` into ``.bashrc``."
msgstr ""

# 86c391aa2b724494833ef85698f512e5
#: ../spack/lib/spack/docs/workflows.rst:351
msgid ""
"Some module systems put a prefix on the names of modules created by Spack.  "
"For example, that prefix is ``linux-SuSE11-x86_64/`` in the above case.  If "
"a prefix is not needed, you may omit the ``--prefix`` flag from ``spack "
"module tcl loads``."
msgstr ""

# a7ec76d86a754a69856bd2b7dbd76cbf
#: ../spack/lib/spack/docs/workflows.rst:359
msgid "Transitive Dependencies"
msgstr ""

# 3de1c88d52ef47079c05ec52b238e763
#: ../spack/lib/spack/docs/workflows.rst:361
msgid ""
"In the script above, each ``spack module tcl loads`` command generates a "
"*single* ``module load`` line.  Transitive dependencies do not usually need "
"to be loaded, only modules the user needs in ``$PATH``.  This is because "
"Spack builds binaries with RPATH.  Spack's RPATH policy has some nice "
"features:"
msgstr ""

# a863569fd0dd4cebb35d2e9fe3dc589d
#: ../spack/lib/spack/docs/workflows.rst:367
msgid ""
"Modules for multiple inconsistent applications may be loaded "
"simultaneously.  In the above example (Multiple Applications), package A and "
"package B can coexist together in the user's $PATH, even though they use "
"different MPIs."
msgstr ""

# ae8f79edbd4c49bd98d5168c3c319f69
#: ../spack/lib/spack/docs/workflows.rst:372
msgid ""
"RPATH eliminates a whole class of strange errors that can happen in non-"
"RPATH binaries when the wrong ``LD_LIBRARY_PATH`` is loaded."
msgstr ""

# 7cab616b4bed4429b279828586782182
#: ../spack/lib/spack/docs/workflows.rst:376
msgid "Recursive module systems such as LMod are not necessary."
msgstr ""

# bc680bf05d074146bf26e750824c9fd0
#: ../spack/lib/spack/docs/workflows.rst:378
msgid ""
"Modules are not needed at all to execute binaries.  If a path to a binary is "
"known, it may be executed.  For example, the path for a Spack-built compiler "
"can be given to an IDE without requiring the IDE to load that compiler's "
"module."
msgstr ""

# 678881aabdf9443bbc088a2ac867881d
#: ../spack/lib/spack/docs/workflows.rst:383
msgid ""
"Unfortunately, Spack's RPATH support does not work in all case.  For example:"
msgstr ""

# e12c6218d75848a48d81e3e09f32efd6
#: ../spack/lib/spack/docs/workflows.rst:385
msgid ""
"Software comes in many forms --- not just compiled ELF binaries, but also as "
"interpreted code in Python, R, JVM bytecode, etc. Those systems almost "
"universally use an environment variable analogous to ``LD_LIBRARY_PATH`` to "
"dynamically load libraries."
msgstr ""

# 7379a85f65d54df78a5396de9a7d0abf
#: ../spack/lib/spack/docs/workflows.rst:390
msgid ""
"Although Spack generally builds binaries with RPATH, it does not currently "
"do so for compiled Python extensions (for example, ``py-numpy``).  Any "
"libraries that these extensions depend on (``blas`` in this case, for "
"example) must be specified in the ``LD_LIBRARY_PATH``.`"
msgstr ""

# 27d78ad1e2c54258a0bb6fc5caa3ef5c
#: ../spack/lib/spack/docs/workflows.rst:396
msgid ""
"In some cases, Spack-generated binaries end up without a functional RPATH "
"for no discernible reason."
msgstr ""

# a981f84b60fe4230a38687773474e61d
#: ../spack/lib/spack/docs/workflows.rst:399
msgid ""
"In cases where RPATH support doesn't make things \"just work,\" it can be "
"necessary to load a module's dependencies as well as the module itself.  "
"This is done by adding the ``--dependencies`` flag to the ``spack module tcl "
"loads`` command.  For example, the following line, added to the script "
"above, would be used to load SciPy, along with Numpy, core Python, BLAS/"
"LAPACK and anything else needed:"
msgstr ""

# bac5e1d5f9e4415dae2a4fb58d7cf4a8
#: ../spack/lib/spack/docs/workflows.rst:412
msgid "Dummy Packages"
msgstr ""

# d70c4d603ba344838d9f65a2834e5ee6
#: ../spack/lib/spack/docs/workflows.rst:414
msgid ""
"As an alternative to a series of ``module load`` commands, one might "
"consider dummy packages as a way to create a *consistent* set of packages "
"that may be loaded as one unit.  The idea here is pretty simple:"
msgstr ""

# 489c695377c1412997b744864399dade
#: ../spack/lib/spack/docs/workflows.rst:419
msgid ""
"Create a package (say, ``mydummy``) with no URL and no ``install()`` method, "
"just dependencies."
msgstr ""

# 62169b1a87da4570aa28d617e42a39d3
#: ../spack/lib/spack/docs/workflows.rst:422
msgid "Run ``spack install mydummy`` to install."
msgstr ""

# e084b8e436224f758cc427d9f0d347c3
#: ../spack/lib/spack/docs/workflows.rst:424
msgid ""
"An advantage of this method is the set of packages produced will be "
"consistent.  This means that you can reliably build software against it.  A "
"disadvantage is the set of packages will be consistent; this means you "
"cannot load up two applications this way if they are not consistent with "
"each other."
msgstr ""

# 316fdb791b7a47ac93396394ee34a674
#: ../spack/lib/spack/docs/workflows.rst:434
msgid "Filesystem Views"
msgstr ""

# 8d5c39906ad24a7a9bac6eb4f1c7b03a
#: ../spack/lib/spack/docs/workflows.rst:436
msgid ""
"Filesystem views offer an alternative to environment modules, another way to "
"assemble packages in a useful way and load them into a user's environment."
msgstr ""

# bb2a8dde3a1048c8aaf6f9d14bbd3ee4
#: ../spack/lib/spack/docs/workflows.rst:440
msgid ""
"A single-prefix filesystem view is a single directory tree that is the union "
"of the directory hierarchies of a number of installed packages; it is "
"similar to the directory hiearchy that might exist under ``/usr/local``.  "
"The files of the view's installed packages are brought into the view by "
"symbolic or hard links, referencing the original Spack installation."
msgstr ""

# 673b922aaa02428391230b392b74aa32
#: ../spack/lib/spack/docs/workflows.rst:447
msgid ""
"A combinatorial filesystem view can contain more software than a single-"
"prefix view. Combinatorial filesystem views are created by defining a "
"projection for each spec or set of specs. The syntax for this will be "
"discussed in the section for the ``spack view`` command under "
"`adding_projections_to_views`_."
msgstr ""

# 5eb0628f28db4f1dbe6cc91822ea99d3
#: ../spack/lib/spack/docs/workflows.rst:453
msgid ""
"The projection for a spec or set of specs specifies the naming scheme for "
"the directory structure under the root of the view into which the package "
"will be linked. For example, the spec ``zlib@1.2.8%gcc@4.4.7`` could be "
"projected to ``MYVIEW/zlib-1.2.8-gcc``."
msgstr ""

# 8aad900fc9894d099ecaf7ea2f741ab8
#: ../spack/lib/spack/docs/workflows.rst:458
msgid ""
"When software is built and installed, absolute paths are frequently \"baked "
"into\" the software, making it non-relocatable.  This happens not just in "
"RPATHs, but also in shebangs, configuration files, and assorted other "
"locations."
msgstr ""

# ead6b2a1718848be8df931505a38c8e0
#: ../spack/lib/spack/docs/workflows.rst:463
msgid ""
"Therefore, programs run out of a Spack view will typically still look in the "
"original Spack-installed location for shared libraries and other resources.  "
"This behavior is not easily changed; in general, there is no way to know "
"where absolute paths might be written into an installed package, and how to "
"relocate it.  Therefore, the original Spack tree must be kept in place for a "
"filesystem view to work, even if the view is built with hardlinks."
msgstr ""

# 1837f712581e45ceabed2ca133bd8413
#: ../spack/lib/spack/docs/workflows.rst:477
msgid "``spack view``"
msgstr ""

# 46131d2d15234904be9b447a8add2db3
#: ../spack/lib/spack/docs/workflows.rst:479
msgid ""
"A filesystem view is created, and packages are linked in, by the ``spack "
"view`` command's ``symlink`` and ``hardlink`` sub-commands.  The ``spack "
"view remove`` command can be used to unlink some or all of the filesystem "
"view."
msgstr ""

# b0b474e75f15413988c9683fc7cbe4e7
#: ../spack/lib/spack/docs/workflows.rst:484
msgid ""
"The following example creates a filesystem view based on an installed "
"``cmake`` package and then removes from the view the files in the ``cmake`` "
"package while retaining its dependencies."
msgstr ""

# 7254bc3b761b4bc6a355e1d68ea39042
#: ../spack/lib/spack/docs/workflows.rst:512
msgid ""
"If the set of packages being included in a view is inconsistent, then it is "
"possible that two packages will provide the same file.  Any conflicts of "
"this type are handled on a first-come-first-served basis, and a warning is "
"printed."
msgstr ""

# 01a42a5004474aa4a22864cce3f7ca15
#: ../spack/lib/spack/docs/workflows.rst:519
msgid "When packages are removed from a view, empty directories are purged."
msgstr ""

# d3a9857e4fd242049205c545a29b257f
#: ../spack/lib/spack/docs/workflows.rst:526
msgid "Controlling View Projections"
msgstr ""

# 0d8b024c1cf3448fa0ced9885562a08a
#: ../spack/lib/spack/docs/workflows.rst:528
msgid ""
"The default projection into a view is to link every package into the root of "
"the view. This can be changed by adding a ``projections.yaml`` configuration "
"file to the view. The projection configuration file for a view located at ``/"
"my/view`` is stored in ``/my/view/.spack/projections.yaml``."
msgstr ""

# 76f15bce603b4606a935e54a70cde0d6
#: ../spack/lib/spack/docs/workflows.rst:534
msgid ""
"When creating a view, the projection configuration file can also be "
"specified from the command line using the ``--projection-file`` option to "
"the ``spack view`` command."
msgstr ""

# e274bfb2e41e45d3bdfd73b78c8fb6ee
#: ../spack/lib/spack/docs/workflows.rst:538
msgid ""
"The projections configuration file is a mapping of partial specs to spec "
"format strings, as shown in the example below."
msgstr ""

# a044dfe2113a4819964e8912dcf1ee53
#: ../spack/lib/spack/docs/workflows.rst:548
msgid ""
"The entries in the projections configuration file must all be either specs "
"or the keyword ``all``. For each spec, the projection used will be the first "
"non-``all`` entry that the spec satisfies, or ``all`` if there is an entry "
"for ``all`` and no other entry is satisfied by the spec. Where the keyword "
"``all`` appears in the file does not matter. Given the example above, any "
"spec satisfying ``zlib@1.2.8`` will be linked into ``/my/view/zlib-1.2.8/``, "
"any spec satisfying ``hdf5@1.8.10+mpi %gcc@4.9.3 ^mvapich2@2.2`` will be "
"linked into ``/my/view/hdf5-1.8.10/mvapich2-2.2-gcc-4.9.3``, and any spec "
"satisfying ``hdf5@1.8.10~mpi %gcc@4.9.3`` will be linked into ``/my/view/"
"hdf5-1.8.10/gcc-4.9.3``."
msgstr ""

# 789cf8c237c9416386ac8159553c7ae2
#: ../spack/lib/spack/docs/workflows.rst:560
msgid ""
"If the keyword ``all`` does not appear in the projections configuration "
"file, any spec that does not satisfy any entry in the file will be linked "
"into the root of the view as in a single-prefix view. Any entries that "
"appear below the keyword ``all`` in the projections configuration file will "
"not be used, as all specs will use the projection under ``all`` before "
"reaching those entries."
msgstr ""

# 595090e6118748ad8ad915b36664c835
#: ../spack/lib/spack/docs/workflows.rst:569
msgid "Fine-Grain Control"
msgstr ""

# 4177063021434901b1b3324346685f2d
#: ../spack/lib/spack/docs/workflows.rst:571
msgid ""
"The ``--exclude`` and ``--dependencies`` option flags allow for fine-grained "
"control over which packages and dependencies do or not get included in a "
"view.  For example, suppose you are developing the ``appsy`` package.  You "
"wish to build against a view of all ``appsy`` dependencies, but not "
"``appsy`` itself:"
msgstr ""

# e608f929bb954747aa73c2de9c6af431
#: ../spack/lib/spack/docs/workflows.rst:581
msgid ""
"Alternately, you wish to create a view whose purpose is to provide binary "
"executables to end users.  You only need to include applications they might "
"want, and not those applications' dependencies.  In this case, you might use:"
msgstr ""

# 35843bf7be9b4f649c8ffa8361fc6dc1
#: ../spack/lib/spack/docs/workflows.rst:593
msgid "Hybrid Filesystem Views"
msgstr ""

# 268b1b5e47824fe48d78fdbf61d5eddb
#: ../spack/lib/spack/docs/workflows.rst:595
msgid ""
"Although filesystem views are usually created by Spack, users are free to "
"add to them by other means.  For example, imagine a filesystem view, created "
"by Spack, that looks something like:"
msgstr ""

# c845df1cd51d4c66b826b0a9aebb1f36
#: ../spack/lib/spack/docs/workflows.rst:604
msgid ""
"Now, the user may add to this view by non-Spack means; for example, by "
"running a classic install script.  For example:"
msgstr ""

# bbb12c0c007347c8ac6c7b3b60b81d28
#: ../spack/lib/spack/docs/workflows.rst:615
msgid "The result is a hybrid view:"
msgstr ""

# ac07b2352fdd43f496f3edac1ec8e0ad
#: ../spack/lib/spack/docs/workflows.rst:624
msgid ""
"In this case, real files coexist, interleaved with the \"view\" symlinks.  "
"At any time one can delete ``/path/to/MYVIEW`` or use ``spack view`` to "
"manage it surgically.  None of this will affect the real Spack install area."
msgstr ""

# 56d0c798a560441ba69e35c5e31e31b6
#: ../spack/lib/spack/docs/workflows.rst:631
msgid "Global Activations"
msgstr ""

# 72efea5049c04bfa9b14099426014a04
#: ../spack/lib/spack/docs/workflows.rst:633
msgid ""
":ref:`cmd-spack-activate` may be used as an alternative to loading Python "
"(and similar systems) packages directly or creating a view. If extensions "
"are globally activated, then ``spack load python`` will also load all the "
"extensions activated for the given ``python``. This reduces the need for "
"users to load a large number of modules."
msgstr ""

# 9092a0a0d17e41a3a40f30cc6ff2a3a7
#: ../spack/lib/spack/docs/workflows.rst:639
msgid "However, Spack global activations have two potential drawbacks:"
msgstr ""

# 93fd68ba9ee646ed8335f4dfd6e24d20
#: ../spack/lib/spack/docs/workflows.rst:641
msgid ""
"Activated packages that involve compiled C extensions may still need their "
"dependencies to be loaded manually.  For example, ``spack load openblas`` "
"might be required to make ``py-numpy`` work."
msgstr ""

# 661a91636f634a52be6152c74657f04d
#: ../spack/lib/spack/docs/workflows.rst:646
msgid ""
"Global activations \"break\" a core feature of Spack, which is that multiple "
"versions of a package can co-exist side-by-side.  For example, suppose you "
"wish to run a Python package in two different environments but the same "
"basic Python --- one with ``py-numpy@1.7`` and one with ``py-numpy@1.8``.  "
"Spack extensions will not support this potential debugging use case."
msgstr ""

# 253ee9010d8f4e94bf117d99410e9efa
#: ../spack/lib/spack/docs/workflows.rst:655
msgid "Discussion: Running Binaries"
msgstr ""

# 3f78eb76c0bd4a44a5a765a721f56d4c
#: ../spack/lib/spack/docs/workflows.rst:657
msgid ""
"Modules, extension packages and filesystem views are all ways to assemble "
"sets of Spack packages into a useful environment.  They are all semantically "
"similar, in that conflicting installed packages cannot simultaneously be "
"loaded, activated or included in a view."
msgstr ""

# 3075c73f83d4410ca9dbbc76b1a27882
#: ../spack/lib/spack/docs/workflows.rst:662
msgid ""
"With all of these approaches, there is no guarantee that the environment "
"created will be consistent.  It is possible, for example, to simultaneously "
"load application A that uses OpenMPI and application B that uses MPICH.  "
"Both applications will run just fine in this inconsistent environment "
"because they rely on RPATHs, not the environment, to find their dependencies."
msgstr ""

# c55deff6981b4b4faa30644482494985
#: ../spack/lib/spack/docs/workflows.rst:669
msgid ""
"In general, environments set up using modules vs. views will work "
"similarly.  Both can be used to set up ephemeral or long-lived testing/"
"development environments.  Operational differences between the two "
"approaches can make one or the other preferable in certain environments:"
msgstr ""

# c516b27f6627441bb8bd296607c48529
#: ../spack/lib/spack/docs/workflows.rst:675
msgid ""
"Filesystem views do not require environment module infrastructure. Although "
"Spack can install ``environment-modules``, users might be hostile to its "
"use.  Filesystem views offer a good solution for sysadmins serving users who "
"just \"want all the stuff I need in one place\" and don't want to hear about "
"Spack."
msgstr ""

# 0a23320368cd4234829296407f515653
#: ../spack/lib/spack/docs/workflows.rst:681
msgid ""
"Although modern build systems will find dependencies wherever they might be, "
"some applications with hand-built make files expect their dependencies to be "
"in one place.  One common problem is makefiles that assume that ``netcdf`` "
"and ``netcdf-fortran`` are installed in the same tree.  Or, one might use an "
"IDE that requires tedious configuration of dependency paths; and it's easier "
"to automate that administration in a view-building script than in the IDE "
"itself. For all these cases, a view will be preferable to other ways to "
"assemble an environment."
msgstr ""

# eff3c5f467174c648cf51559f17f4876
#: ../spack/lib/spack/docs/workflows.rst:691
msgid ""
"On systems with I-node quotas, modules might be preferable to views and "
"extension packages."
msgstr ""

# 1ecc64cb7ab049a0a274780dcda951b7
#: ../spack/lib/spack/docs/workflows.rst:694
msgid ""
"Views and activated extensions maintain state that is semantically "
"equivalent to the information in a ``spack module tcl loads`` script. "
"Administrators might find things easier to maintain without the added "
"\"heavyweight\" state of a view."
msgstr ""

# 2dc06fa83eb74067a28a6bce095fece0
#: ../spack/lib/spack/docs/workflows.rst:701
msgid "Developing Software with Spack"
msgstr ""

# a4be97f59405448e8c661a28d869b760
#: ../spack/lib/spack/docs/workflows.rst:703
msgid ""
"For any project, one needs to assemble an environment of that application's "
"dependencies.  You might consider loading a series of modules or creating a "
"filesystem view.  This approach, while obvious, has some serious drawbacks:"
msgstr ""

# d3cd851aba524f0baa2f96ce2b241c43
#: ../spack/lib/spack/docs/workflows.rst:708
msgid ""
"There is no guarantee that an environment created this way will be "
"consistent.  Your application could end up with dependency A expecting one "
"version of MPI, and dependency B expecting another. The linker will not be "
"happy..."
msgstr ""

# e82fc1ac1eb04fe7b4c23322492167b0
#: ../spack/lib/spack/docs/workflows.rst:713
msgid ""
"Suppose you need to debug a package deep within your software DAG. If you "
"build that package with a manual environment, then it becomes difficult to "
"have Spack auto-build things that depend on it.  That could be a serious "
"problem, depending on how deep the package in question is in your dependency "
"DAG."
msgstr ""

# 094c4d77ff5944d3b3519f5d9000bdd4
#: ../spack/lib/spack/docs/workflows.rst:719
msgid ""
"At its core, Spack is a sophisticated concretization algorithm that matches "
"up packages with appropriate dependencies and creates a *consistent* "
"environment for the package it's building.  Writing a list of ``spack load`` "
"commands for your dependencies is at least as hard as writing the same list "
"of ``depends_on()`` declarations in a Spack package.  But it makes no use of "
"Spack concretization and is more error-prone."
msgstr ""

# b9b37d45d1b94a20be4fcf4fce02cbc4
#: ../spack/lib/spack/docs/workflows.rst:727
msgid ""
"Spack provides an automated, systematic way not just to find a packages's "
"dependencies --- but also to build other packages on top.  Any Spack package "
"can become a dependency for another Spack package, offering a powerful "
"vision of software re-use.  If you build your package A outside of Spack, "
"then your ability to use it as a building block for other packages in an "
"automated way is diminished: other packages depending on package A will not "
"be able to use Spack to fulfill that dependency."
msgstr ""

# 1cf13f0ea12c4cf1a5d9e6b8746ee8d1
#: ../spack/lib/spack/docs/workflows.rst:736
msgid ""
"If you are reading this manual, you probably love Spack.  You're probably "
"going to write a Spack package for your software so prospective users can "
"install it with the least amount of pain. Why should you go to additional "
"work to find dependencies in your development environment?  Shouldn't Spack "
"be able to help you build your software based on the package you've already "
"written?"
msgstr ""

# 70f214c7e786434cbf8a9c6bdb8c1d2d
#: ../spack/lib/spack/docs/workflows.rst:743
msgid ""
"In this section, we show how Spack can be used in the software development "
"process to greatest effect, and how development packages can be seamlessly "
"integrated into the Spack ecosystem.  We will show how this process works by "
"example, assuming the software you are creating is called ``mylib``."
msgstr ""

# a75878e591f44d9e88bcb6fd0c386af3
#: ../spack/lib/spack/docs/workflows.rst:751
msgid "Write the CMake Build"
msgstr ""

# 24cf947589a14c52b8159ccbcde7dbf8
#: ../spack/lib/spack/docs/workflows.rst:753
msgid ""
"For now, the techniques in this section only work for CMake-based projects, "
"although they could be easily extended to other build systems in the "
"future.  We will therefore assume you are using CMake to build your project."
msgstr ""

# 1672c8fb3de541c1b21e17f0bffc53ee
#: ../spack/lib/spack/docs/workflows.rst:758
msgid ""
"The ``CMakeLists.txt`` file should be written as normal.  A few caveats:"
msgstr ""

# 1e1a832b0ed548eda15b494e5cc95e2f
#: ../spack/lib/spack/docs/workflows.rst:760
msgid ""
"Your project should produce binaries with RPATHs.  This will ensure that "
"they work the same whether built manually or automatically by Spack.  For "
"example:"
msgstr ""

# a94c1a893d364752941891ba45031dfc
#: ../spack/lib/spack/docs/workflows.rst:792
msgid ""
"Spack provides a CMake variable called ``SPACK_TRANSITIVE_INCLUDE_PATH``, "
"which contains the ``include/`` directory for all of your project's "
"transitive dependencies.  It can be useful if your project ``#include``s "
"files from package B, which ``#include`` files from package C, but your "
"project only lists project B as a dependency.  This works in traditional "
"single-tree build environments, in which B and C's include files live in the "
"same place.  In order to make it work with Spack as well, you must add the "
"following to ``CMakeLists.txt``.  It will have no effect when building "
"without Spack:"
msgstr ""

# bee8fd074b4e414fb38c2e199c67c9bf
#: ../spack/lib/spack/docs/workflows.rst:811
msgid ""
"Note that this feature is controversial and could break with future versions "
"of GNU ld.  The best practice is to make sure anything you ``#include`` is "
"listed as a dependency in your CMakeLists.txt (and Spack package)."
msgstr ""

# 9d1aa849a80f4a1ca9d8ac91ee12f328
#: ../spack/lib/spack/docs/workflows.rst:820
msgid "Write the Spack Package"
msgstr ""

# ed5640d7496044ffa27fe2fd73c373a7
#: ../spack/lib/spack/docs/workflows.rst:822
msgid ""
"The Spack package also needs to be written, in tandem with setting up the "
"build (for example, CMake).  The most important part of this task is "
"declaring dependencies.  Here is an example of the Spack package for the "
"``mylib`` package (ellipses for brevity):"
msgstr ""

# 19988b7febb74e96903b2f79fbd34a2f
#: ../spack/lib/spack/docs/workflows.rst:861
msgid ""
"This is a standard Spack package that can be used to install ``mylib`` in a "
"production environment.  The list of dependencies in the Spack package will "
"generally be a repeat of the list of CMake dependencies.  This package also "
"has some features that allow it to be used for development:"
msgstr ""

# 1b882c190c604e81bb182e2682ee0bbc
#: ../spack/lib/spack/docs/workflows.rst:867
msgid ""
"It subclasses ``CMakePackage`` instead of ``Package``.  This eliminates the "
"need to write an ``install()`` method, which is defined in the superclass.  "
"Instead, one just needs to write the ``configure_args()`` method.  That "
"method should return the arguments needed for the ``cmake`` command (beyond "
"the standard CMake arguments, which Spack will include already).  These "
"arguments are typically used to turn features on/off in the build."
msgstr ""

# 6c9273ed0d584a7c924fa3a3b1fcca48
#: ../spack/lib/spack/docs/workflows.rst:875
msgid ""
"It specifies a non-checksummed version ``develop``.  Running ``spack install "
"mylib@develop`` the ``@develop`` version will install the latest version off "
"the develop branch.  This method of download is useful for the developer of "
"a project while it is in active development; however, it should only be used "
"by developers who control and trust the repository in question!"
msgstr ""

# 57025e4e4bb3403eac114b70189b1510
#: ../spack/lib/spack/docs/workflows.rst:882
msgid ""
"The ``url``, ``url_for_version()`` and ``homepage`` attributes are not used "
"in development.  Don't worry if you don't have any, or if they are behind a "
"firewall."
msgstr ""

# 36b66c33e3404811916703836f94870d
#: ../spack/lib/spack/docs/workflows.rst:888
msgid "Build with Spack"
msgstr ""

# e74c52ad02f846af91b029add0019fa6
#: ../spack/lib/spack/docs/workflows.rst:890
msgid ""
"Now that you have a Spack package, you can use Spack to find its "
"dependencies automatically.  For example:"
msgstr ""

# 3ba19f57c6404bd0b5b7ed31a78370c5
#: ../spack/lib/spack/docs/workflows.rst:898
msgid ""
"The result will be a file ``spconfig.py`` in the top-level ``mylib/`` "
"directory.  It is a short script that calls CMake with the dependencies and "
"options determined by Spack --- similar to what happens in ``spack "
"install``, but now written out in script form. From a developer's point of "
"view, you can think of ``spconfig.py`` as a stand-in for the ``cmake`` "
"command."
msgstr ""

# 4566f7badbea4183bc561969932db3ee
#: ../spack/lib/spack/docs/workflows.rst:907
msgid ""
"You can invent any \"version\" you like for the ``spack setup`` command."
msgstr ""

# 71bd767de7c04c84a3d1c81c83291c1c
#: ../spack/lib/spack/docs/workflows.rst:912
msgid ""
"Although ``spack setup`` does not build your package, it does create and "
"install a module file, and mark in the database that your package has been "
"installed.  This can lead to errors, of course, if you don't subsequently "
"install your package. Also... you will need to ``spack uninstall`` before "
"you run ``spack setup`` again."
msgstr ""

# e50bb3522ced40ffb9b32fcc9f1ebb01
#: ../spack/lib/spack/docs/workflows.rst:920
msgid "You can now build your project as usual with CMake:"
msgstr ""

# dce457d1eba14d26b46552eaace08070
#: ../spack/lib/spack/docs/workflows.rst:929
msgid ""
"Once your ``make install`` command is complete, your package will be "
"installed, just as if you'd run ``spack install``.  Except you can now edit, "
"re-build and re-install as often as needed, without checking into Git or "
"downloading tarballs."
msgstr ""

# b0529a06696441a68bf84bd4fe8ac36f
#: ../spack/lib/spack/docs/workflows.rst:936
msgid ""
"The build you get this way will be *almost* the same as the build from "
"``spack install``.  The only difference is, you will not be using Spack's "
"compiler wrappers.  This difference has not caused problems in our "
"experience, as long as your project sets RPATHs as shown above.  You DO use "
"RPATHs, right?"
msgstr ""

# c1284d4de4a84e6faa6202823c74b1df
#: ../spack/lib/spack/docs/workflows.rst:944
msgid "Build Other Software"
msgstr ""

# 25242bb252914941bf2b0991e39168aa
#: ../spack/lib/spack/docs/workflows.rst:946
msgid ""
"Now that you've built ``mylib`` with Spack, you might want to build another "
"package that depends on it --- for example, ``myapp``.  This is accomplished "
"easily enough:"
msgstr ""

# c35def5f4ebb4a579b10da1c37a10f92
#: ../spack/lib/spack/docs/workflows.rst:954
msgid ""
"Note that auto-built software has now been installed *on top of* manually-"
"built software, without breaking Spack's \"web.\"  This property is useful "
"if you need to debug a package deep in the dependency hierarchy of your "
"application.  It is a *big* advantage of using ``spack setup`` to build your "
"package's environment."
msgstr ""

# b4bfdf286e714cdabb11aa820220b140
#: ../spack/lib/spack/docs/workflows.rst:960
msgid ""
"If you feel your software is stable, you might wish to install it with "
"``spack install`` and skip the source directory.  You can just use, for "
"example:"
msgstr ""

# 9495d72b4e384db188b4b94ddb716d9b
#: ../spack/lib/spack/docs/workflows.rst:972
msgid "Release Your Software"
msgstr ""

# 1a176ea42961435e95ca9f3716c72e52
#: ../spack/lib/spack/docs/workflows.rst:974
msgid ""
"You are now ready to release your software as a tarball with a numbered "
"version, and a Spack package that can build it.  If you're hosted on GitHub, "
"this process will be a bit easier."
msgstr ""

# c0fd0e7ce7ef4417b41b6ccd2069c154
#: ../spack/lib/spack/docs/workflows.rst:978
msgid ""
"Put tag(s) on the version(s) in your GitHub repo you want to be release "
"versions.  For example, a tag ``v0.1.0`` for version 0.1.0."
msgstr ""

# b3c3db09dbb94d768efde8599cb4302a
#: ../spack/lib/spack/docs/workflows.rst:981
msgid ""
"Set the ``url`` in your ``package.py`` to download a tarball for the "
"appropriate version.  GitHub will give you a tarball for any commit in the "
"repo, if you tickle it the right way.  For example:"
msgstr ""

# b80fd4ed037444bda3745ddb1476a9cf
#: ../spack/lib/spack/docs/workflows.rst:989
msgid ""
"Use Spack to determine your version's hash, and cut'n'paste it into your "
"``package.py``:"
msgstr ""

# 007f41cc654f49288d02ffba16e6523f
#: ../spack/lib/spack/docs/workflows.rst:1005
msgid ""
"You should now be able to install released version 0.1.2 of your package "
"with:"
msgstr ""

# 9f1e65fbd06746f793659d73f1764f12
#: ../spack/lib/spack/docs/workflows.rst:1011
msgid ""
"There is no need to remove the `develop` version from your package. Spack "
"concretization will always prefer numbered version to non-numeric versions.  "
"Users will only get it if they ask for it."
msgstr ""

# ceb6307cfc1249d18babcbae9ab4e50d
#: ../spack/lib/spack/docs/workflows.rst:1017
msgid "Distribute Your Software"
msgstr ""

# 2bb13e36a59b4bd7b6cef97d6cb6f570
#: ../spack/lib/spack/docs/workflows.rst:1019
msgid ""
"Once you've released your software, other people will want to build it; and "
"you will need to tell them how.  In the past, that has meant a few "
"paragraphs of prose explaining which dependencies to install.  But now you "
"use Spack, and those instructions are written in executable Python code.  "
"But your software has many dependencies, and you know Spack is the best way "
"to install it:"
msgstr ""

# ffa1578d46cf46a3ad397f3fef0ae7fb
#: ../spack/lib/spack/docs/workflows.rst:1026
msgid ""
"First, you will want to fork Spack's ``develop`` branch.  Your aim is to "
"provide a stable version of Spack that you KNOW will install your software.  "
"If you make changes to Spack in the process, you will want to submit pull "
"requests to Spack core."
msgstr ""

# 3bba1a81d0dd44f28781a2f573e4f6b2
#: ../spack/lib/spack/docs/workflows.rst:1031
msgid ""
"Add your software's ``package.py`` to that fork.  You should submit a pull "
"request for this as well, unless you don't want the public to know about "
"your software."
msgstr ""

# 67a52673f9184a3891b8b5a7ac72a9cf
#: ../spack/lib/spack/docs/workflows.rst:1035
msgid "Prepare instructions that read approximately as follows:"
msgstr ""

# 4cdff5a134f642dc965f8f4613121503
#: ../spack/lib/spack/docs/workflows.rst:1037
msgid "Download Spack from your forked repo."
msgstr ""

# 2bf2bbf05d8e42fc94d38a7ee49b7447
#: ../spack/lib/spack/docs/workflows.rst:1039
msgid "Install Spack; see :ref:`getting_started`."
msgstr ""

# 7b03d7a391fb433ba3fada25fc258fca
#: ../spack/lib/spack/docs/workflows.rst:1041
msgid ""
"Set up an appropriate ``packages.yaml`` file.  You should tell your users to "
"include in this file whatever versions/variants are needed to make your "
"software work correctly (assuming those are not already in your ``packages."
"yaml``)."
msgstr ""

# 1fc7394e22264d2a9b7e9e5b472d14d4
#: ../spack/lib/spack/docs/workflows.rst:1046
msgid "Run ``spack install mylib``."
msgstr ""

# 0f8896e0f37d4d0293d2ebd3fcd9404e
#: ../spack/lib/spack/docs/workflows.rst:1048
msgid ""
"Run this script to generate the ``module load`` commands or filesystem view "
"needed to use this software."
msgstr ""

# fb60f164159f44ab84eef4bda71dfe29
#: ../spack/lib/spack/docs/workflows.rst:1051
msgid ""
"Be aware that your users might encounter unexpected bootstrapping issues on "
"their machines, especially if they are running on older systems.  The :ref:"
"`getting_started` section should cover this, but there could always be "
"issues."
msgstr ""

# 4e6f6e71dd954da99d93a9adeb6c6ee3
#: ../spack/lib/spack/docs/workflows.rst:1060
msgid ""
"``spack setup`` currently only supports CMake-based builds, in packages that "
"subclass ``CMakePackage``.  The intent is that this mechanism should support "
"a wider range of build systems; for example, GNU Autotools.  Someone well-"
"versed in Autotools is needed to develop this patch and test it out."
msgstr ""

# 28c9a5665b3549c1b96bde4b7b499b0e
#: ../spack/lib/spack/docs/workflows.rst:1066
msgid ""
"Python Distutils is another popular build system that should get ``spack "
"setup`` support.  For non-compiled languages like Python, ``spack diy`` may "
"be used.  Even better is to put the source directory directly in the user's "
"``PYTHONPATH``.  Then, edits in source files are immediately available to "
"run without any install process at all!"
msgstr ""

# a25db30ce8144751addf6555f5033db6
#: ../spack/lib/spack/docs/workflows.rst:1074
msgid "Conclusion"
msgstr ""

# 43037617d9a74ba9bcc3ebb00ed18214
#: ../spack/lib/spack/docs/workflows.rst:1076
msgid ""
"The ``spack setup`` development workflow provides better automation, "
"flexibility and safety than workflows relying on environment modules or "
"filesystem views.  However, it has some drawbacks:"
msgstr ""

# 37fb23021023411e9fe7396e56188fd3
#: ../spack/lib/spack/docs/workflows.rst:1080
msgid ""
"It currently works only with projects that use the CMake build system.  "
"Support for other build systems is not hard to build, but will require a "
"small amount of effort for each build system to be supported.  It might not "
"work well with some IDEs."
msgstr ""

# 9d067703c01d49ea843740f55df327d9
#: ../spack/lib/spack/docs/workflows.rst:1085
msgid ""
"It only works with packages that sub-class ``StagedPackage``. Currently, "
"most Spack packages do not.  Converting them is not hard; but must be done "
"on a package-by-package basis."
msgstr ""

# c6cbb1e467b5452698a1f6350255ccf8
#: ../spack/lib/spack/docs/workflows.rst:1089
msgid ""
"It requires that users are comfortable with Spack, as they integrate Spack "
"explicitly in their workflow.  Not all users are willing to do this."
msgstr ""

# 6a8104fb360a4a9ca922dd95949a019b
#: ../spack/lib/spack/docs/workflows.rst:1095
msgid "Using Spack on Travis-CI"
msgstr ""

# 2b50495a706f4986a20c3fa6d3621eb2
#: ../spack/lib/spack/docs/workflows.rst:1097
msgid ""
"Spack can be deployed as a provider for userland software in `Travis-CI "
"<https://http://travis-ci.org>`_."
msgstr ""

# 8fbfe5740d2a4d878828d9fa205fe77a
#: ../spack/lib/spack/docs/workflows.rst:1100
msgid ""
"A starting-point for a ``.travis.yml`` file can look as follows. It uses "
"`caching <https://docs.travis-ci.com/user/caching/>`_ for already built "
"environments, so make sure to clean the Travis cache if you run into "
"problems."
msgstr ""

# 9efcd1c22daf439c9f2e651578e09ffa
#: ../spack/lib/spack/docs/workflows.rst:1105
msgid "The main points that are implemented below:"
msgstr ""

# 113a63f08bbe4413b13a3210f68c7fa3
#: ../spack/lib/spack/docs/workflows.rst:1107
msgid ""
"Travis is detected as having up to 34 cores available, but only 2 are "
"actually allocated for the user. We limit the parallelism of the spack "
"builds in the config. (The Travis yaml parser is a bit buggy on the echo "
"command.)"
msgstr ""

# 43c84f88aded4f2fb5f02e49f66a8051
#: ../spack/lib/spack/docs/workflows.rst:1112
msgid ""
"Builds over 10 minutes need to be prefixed with ``travis_wait``. "
"Alternatively, generate output once with ``spack install -v``."
msgstr ""

# dbb7eb315606419e83499d378caac7a2
#: ../spack/lib/spack/docs/workflows.rst:1115
msgid ""
"Travis builds are non-interactive. This prevents using bash aliases and "
"functions for modules. We fix that by sourcing ``/etc/profile`` first (or "
"running everything in a subshell with ``bash -l -c '...'``)."
msgstr ""

# 0dcf6086d8e349a994aa7ccb998a3178
#: ../spack/lib/spack/docs/workflows.rst:1175
msgid "Using Spack to Create Docker Images"
msgstr ""

# e853274d896443549d58aabfcbe42120
#: ../spack/lib/spack/docs/workflows.rst:1177
msgid ""
"Spack can be the ideal tool to set up images for Docker (and Singularity)."
msgstr ""

# 836e106c2b904a0588d22c921986c8aa
#: ../spack/lib/spack/docs/workflows.rst:1179
msgid ""
"An example ``Dockerfile`` is given below, downloading the latest spack "
"version."
msgstr ""

# 7fabb3fda69241b89cdc02a3fb68336d
#: ../spack/lib/spack/docs/workflows.rst:1182
msgid "The following functionality is prepared:"
msgstr ""

# 5aaf3548337d429f91d20b7ca3359e03
#: ../spack/lib/spack/docs/workflows.rst:1184
msgid "Base image: the example starts from a minimal ubuntu."
msgstr ""

# f9c8bedf33b447abb3649b8976e8b9bf
#: ../spack/lib/spack/docs/workflows.rst:1186
msgid ""
"Installing as root: docker images are usually set up as root. Since some "
"autotools scripts might complain about this being unsafe, we set "
"``FORCE_UNSAFE_CONFIGURE=1`` to avoid configure errors."
msgstr ""

# 7cf0f3254d96429d9f008426d23ff149
#: ../spack/lib/spack/docs/workflows.rst:1190
msgid ""
"Pre-install the spack dependencies, including modules from the packages. "
"This avoids needing to build those from scratch via ``spack bootstrap``. "
"Package installs are followed by a clean-up of the system package index, to "
"avoid outdated information and it saves space."
msgstr ""

# 93d307c7c6334e88a0fe781467121a94
#: ../spack/lib/spack/docs/workflows.rst:1195
msgid ""
"Install spack in ``/usr/local``. Add ``setup-env.sh`` to profile scripts, so "
"commands in *login* shells can use the whole spack functionality, including "
"modules."
msgstr ""

# 1a8da7f013694ccda8fa55dac411fbd1
#: ../spack/lib/spack/docs/workflows.rst:1199
msgid ""
"Install an example package (``tar``). As with system package managers above, "
"``spack install`` commands should be concatenated with a ``&& spack clean -"
"a`` in order to keep image sizes small."
msgstr ""

# 5256888bb22e4d2b9a230416320acc6d
#: ../spack/lib/spack/docs/workflows.rst:1203
msgid ""
"Add a startup hook to an *interactive login shell* so spack modules will be "
"usable."
msgstr ""

# 797147480cf4446792eea79faeef7a8b
#: ../spack/lib/spack/docs/workflows.rst:1206
msgid "In order to build and run the image, execute:"
msgstr ""

# 5190c527b2914348a89bb6e8ddf6cc4c
#: ../spack/lib/spack/docs/workflows.rst:1267
msgid "Best Practices"
msgstr ""

# c7c06fe9595949f088c3ffbd79e893fd
#: ../spack/lib/spack/docs/workflows.rst:1272
msgid ""
"Due to the dependency on Fortran for OpenMPI, which is the spack default "
"implementation, consider adding ``gfortran`` to the ``apt-get install`` list."
msgstr ""

# d5efabfe839c44a79ca18ad071666e90
#: ../spack/lib/spack/docs/workflows.rst:1275
msgid ""
"Recent versions of OpenMPI will require you to pass ``--allow-run-as-root`` "
"to your ``mpirun`` calls if started as root user inside Docker."
msgstr ""

# d39a59584b91432ca25d1aef9a892760
#: ../spack/lib/spack/docs/workflows.rst:1278
msgid ""
"For execution on HPC clusters, it can be helpful to import the docker image "
"into Singularity in order to start a program with an *external* MPI. "
"Otherwise, also add ``openssh-server`` to the ``apt-get install`` list."
msgstr ""

# eecc8f69966c4926a5d0f24f4db50b28
#: ../spack/lib/spack/docs/workflows.rst:1284
msgid "CUDA"
msgstr ""

# 6fb09a429cbf40dc9aff9fd60e4fe46e
#: ../spack/lib/spack/docs/workflows.rst:1285
msgid ""
"Starting from CUDA 9.0, Nvidia provides minimal CUDA images based on Ubuntu. "
"Please see `their instructions <https://hub.docker.com/r/nvidia/cuda/>`_. "
"Avoid double-installing CUDA by adding, e.g."
msgstr ""

# ac566c1b36364106bcf58686e04ade4e
#: ../spack/lib/spack/docs/workflows.rst:1298
msgid ""
"to your ``packages.yaml``. Then ``COPY`` in that file into the image as in "
"the example above."
msgstr ""

# b96625a8511e402ab6a0391bd3496da2
#: ../spack/lib/spack/docs/workflows.rst:1301
msgid ""
"Users will either need ``nvidia-docker`` or e.g. Singularity to *execute* "
"device kernels."
msgstr ""

# 328cb849bd9a4f77b7e84df8612b9697
#: ../spack/lib/spack/docs/workflows.rst:1306
msgid "Singularity"
msgstr ""

# 870f025f20c24403a5056eb6892276f7
#: ../spack/lib/spack/docs/workflows.rst:1307
msgid ""
"Importing and running the image created above into `Singularity <http://"
"singularity.lbl.gov/>`_ works like a charm. Just use the `docker "
"bootstraping mechanism <http://singularity.lbl.gov/quickstart#bootstrap-"
"recipes>`_:"
msgstr ""

# 944f954252f340379c4efed203c7a5c4
#: ../spack/lib/spack/docs/workflows.rst:1321
msgid "Docker for Development"
msgstr ""

# 270281ea1f994a03b2880f35502d7ad3
#: ../spack/lib/spack/docs/workflows.rst:1323
msgid ""
"For examples of how we use docker in development, see :ref:"
"`docker_for_developers`."
msgstr ""

# 04369e5abfc0472b9fd26e52ba1f1314
#: ../spack/lib/spack/docs/workflows.rst:1328
msgid "Docker on Windows and OSX"
msgstr ""

# 19613dcca5b4466aa7fb0644b2f0a47f
#: ../spack/lib/spack/docs/workflows.rst:1330
msgid ""
"On Mac OS and Windows, docker runs on a hypervisor that is not allocated "
"much memory by default, and some spack packages may fail to build due to "
"lack of memory. To work around this issue, consider configuring your docker "
"installation to use more of your host memory. In some cases, you can also "
"ease the memory pressure on parallel builds by limiting the parallelism in "
"your config.yaml."
msgstr ""

# db2708ec46a74800ad64154a494f9cc3
#: ../spack/lib/spack/docs/workflows.rst:1343
msgid "Upstream Bug Fixes"
msgstr ""

# aca47073c1df4ccea982bcca8c9e1b21
#: ../spack/lib/spack/docs/workflows.rst:1345
msgid ""
"It is not uncommon to discover a bug in an upstream project while trying to "
"build with Spack.  Typically, the bug is in a package that serves a "
"dependency to something else.  This section describes procedure to work "
"around and ultimately resolve these bugs, while not delaying the Spack "
"user's main goal."
msgstr ""

# a67b74a728d145418dd8a52c00c5e7a8
#: ../spack/lib/spack/docs/workflows.rst:1353
msgid "Buggy New Version"
msgstr ""

# 43cf20559ba84d088d10df8a51c383c4
#: ../spack/lib/spack/docs/workflows.rst:1355
msgid ""
"Sometimes, the old version of a package works fine, but a new version is "
"buggy.  For example, it was once found that `Adios did not build with "
"hdf5@1.10 <https://github.com/spack/spack/issues/1683>`_.  If the old "
"version of ``hdf5`` will work with ``adios``, the suggested procedure is:"
msgstr ""

# 1049624094394f22900ea1855a1cd185
#: ../spack/lib/spack/docs/workflows.rst:1361
msgid ""
"Revert ``adios`` to the old version of ``hdf5``.  Put in its ``adios/package."
"py``:"
msgstr ""

# 7b477315198840a6a0360558083bb112
#: ../spack/lib/spack/docs/workflows.rst:1370
msgid ""
"Determine whether the problem is with ``hdf5`` or ``adios``, and report the "
"problem to the appropriate upstream project.  In this case, the problem was "
"with ``adios``."
msgstr ""

# d3d6f5f6de4a47e6817d1b9ec161cac1
#: ../spack/lib/spack/docs/workflows.rst:1374
msgid ""
"Once a new version of ``adios`` comes out with the bugfix, modify ``adios/"
"package.py`` to reflect it:"
msgstr ""

# f8c6a2b3d76d482fafa951b77b25a371
#: ../spack/lib/spack/docs/workflows.rst:1386
msgid "No Version Works"
msgstr ""

# 43cf778e6d4f4e42827827f900902185
#: ../spack/lib/spack/docs/workflows.rst:1388
msgid ""
"Sometimes, *no* existing versions of a dependency work for a build. This "
"typically happens when developing a new project: only then does the "
"developer notice that existing versions of a dependency are all buggy, or "
"the non-buggy versions are all missing a critical feature."
msgstr ""

# 446fdbd2723048fab8775a0e6fac29c3
#: ../spack/lib/spack/docs/workflows.rst:1393
msgid ""
"In the long run, the upstream project will hopefully fix the bug and release "
"a new version.  But that could take a while, even if a bugfix has already "
"been pushed to the project's repository.  In the meantime, the Spack user "
"needs things to work."
msgstr ""

# c08256ffc9cb46b59bf8df5cce17e055
#: ../spack/lib/spack/docs/workflows.rst:1398
msgid ""
"The solution is to create an unofficial Spack release of the project, as "
"soon as the bug is fixed in *some* repository.  A study of the `Git history "
"<https://github.com/citibeth/spack/commits/efischer/develop/var/spack/repos/"
"builtin/packages/py-proj/package.py>`_ of ``py-proj/package.py`` is "
"instructive here:"
msgstr ""

# 9bd42b30499448fa87f44247a11fb41f
#: ../spack/lib/spack/docs/workflows.rst:1403
msgid ""
"On `April 1 <https://github.com/citibeth/spack/"
"commit/44a1d6a96706affe6ef0a11c3a780b91d21d105a>`_, an initial bugfix was "
"identified for the PyProj project and a pull request submitted to PyProj.  "
"Because the upstream authors had not yet fixed the bug, the ``py-proj`` "
"Spack package downloads from a forked repository, set up by the package's "
"author. A non-numeric version number is used to make it easy to upgrade the "
"package without recomputing checksums; however, this is an untrusted "
"download method and should not be distributed.  The package author has now "
"become, temporarily, a maintainer of the upstream project:"
msgstr ""

# e761c29e00ca4b139bbd62c3c9206081
#: ../spack/lib/spack/docs/workflows.rst:1422
msgid ""
"By May 14, the upstream project had accepted a pull request with the "
"required bugfix.  At this point, the forked repository was deleted.  "
"However, the upstream project still had not released a new version with a "
"bugfix.  Therefore, a Spack-only release was created by specifying the "
"desired hash in the main project repository.  The version number "
"``@1.9.5.1.1`` was chosen for this \"release\" because it's a descendent of "
"the officially released version ``@1.9.5.1``.  This is a trusted download "
"method, and can be released to the Spack community:"
msgstr ""

# 77a5ca039bd14a77935ab290776a3966
#: ../spack/lib/spack/docs/workflows.rst:1441
msgid ""
"It would have been simpler to use Spack's Git download method, which is also "
"a trusted download in this case:"
msgstr ""

# 6b3da32dbb974e23bae219f37730a21d
#: ../spack/lib/spack/docs/workflows.rst:1454
msgid ""
"In this case, the upstream project fixed the bug in its repository in a "
"relatively timely manner.  If that had not been the case, the numbered "
"version in this step could have been released from the forked repository."
msgstr ""

# 2cc8483bc21240289e861413575e2c0c
#: ../spack/lib/spack/docs/workflows.rst:1460
msgid ""
"The author of the Spack package has now become an unofficial release "
"engineer for the upstream project.  Depending on the situation, it may be "
"advisable to put ``preferred=True`` on the latest *officially released* "
"version."
msgstr ""

# bff47150b1874951bdddc45a4f704c5c
#: ../spack/lib/spack/docs/workflows.rst:1465
msgid ""
"As of August 31, the upstream project still had not made a new release with "
"the bugfix.  In the meantime, Spack-built ``py-proj`` provides the bugfix "
"needed by packages depending on it.  As long as this works, there is no "
"particular need for the upstream project to make a new official release."
msgstr ""

# 315c0b51e36645c7976d5b9e14417da3
#: ../spack/lib/spack/docs/workflows.rst:1471
msgid ""
"If the upstream project releases a new official version with the bugfix, "
"then the unofficial ``version()`` line should be removed from the Spack "
"package."
msgstr ""

# 6e5f14f82d174027b8e6e85e80b40279
#: ../spack/lib/spack/docs/workflows.rst:1479
msgid ""
"Spack's source patching mechanism provides another way to fix bugs in "
"upstream projects.  This has advantages and disadvantages compared to the "
"procedures above."
msgstr ""

# e04f054a41b34e24b255110aea584a90
#: ../spack/lib/spack/docs/workflows.rst:1482
msgid "Advantages:"
msgstr ""

# eccd524e05454cdea962107cc79cc390
#: ../spack/lib/spack/docs/workflows.rst:1484
msgid ""
"It can fix bugs in existing released versions, and (probably) future "
"releases as well."
msgstr ""

# fde60842847c45cb8cdba8ed50e70ecc
#: ../spack/lib/spack/docs/workflows.rst:1487
msgid "It is lightweight, does not require a new fork to be set up."
msgstr ""

# 93de19595139470e948313a229f69e6e
#: ../spack/lib/spack/docs/workflows.rst:1489
msgid "Disadvantages:"
msgstr ""

# 184d9079cb154008b5d28239d29c56b7
#: ../spack/lib/spack/docs/workflows.rst:1491
msgid ""
"It is harder to develop and debug a patch, vs. a branch in a repository.  "
"The user loses the automation provided by version control systems."
msgstr ""

# b738a78e7b4649da97d898572db4ab08
#: ../spack/lib/spack/docs/workflows.rst:1495
msgid ""
"Although patches of a few lines work OK, large patch files can be hard to "
"create and maintain."
msgstr ""
