# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-17 09:38+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/spack.rst:2
msgid "spack package"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:5
msgid "Subpackages"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:22
msgid "Submodules"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:25
msgid "spack.abi module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/abi.py:docstring of spack.abi.ABI:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.Arch:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.OperatingSystem:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.Platform:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.Target:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/caches.py:docstring of spack.caches.MirrorCache:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compiler.py:docstring of spack.compiler.Compiler:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.ConfigScope:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.Database:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.ForbiddenLock:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring of spack.dependency.Dependency:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FsCache:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph.AsciiGraph:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.SpackCommand:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.when:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.InstallPhase:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageViewMixin:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.Lexer:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.Parser:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.Token:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.Patch:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Indexer:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of spack.report.collect_info:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/reporter.py:docstring of spack.reporter.Reporter:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/resource.py:docstring of spack.resource.Resource:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec_set.py:docstring of spack.spec_set.CombinatorialSpecSet:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.DIYStage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store.Store:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of spack.tengine.Context:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionRange:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionList:1
msgid "Bases: :class:`object`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/abi.py:docstring of spack.abi.ABI:1
msgid "This class provides methods to test ABI compatibility between specs. The current implementation is rather rough and could be improved."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/abi.py:docstring of spack.abi.ABI.architecture_compatible:1
msgid "Return true if parent and child have ABI compatible targets."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/abi.py:docstring of spack.abi.ABI.compatible:1
msgid "Returns true iff a parent and child spec are ABI compatible"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/abi.py:docstring of spack.abi.ABI.compiler_compatible:1
msgid "Return true if compilers for parent and child are ABI compatible."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:33
msgid "spack.architecture module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture:1
msgid "This module contains all the elements that are required to create an architecture object. These include, the target processor, the operating system, and the architecture platform (i.e. cray, darwin, linux, bgq, etc) classes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture:5
msgid "On a multiple architecture machine, the architecture spec field can be set to build a package against any target and operating system that is present on the platform. On Cray platforms or any other architecture that has different front and back end environments, the operating system will determine the method of compiler detection."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture:14
msgid "There are two different types of compiler detection:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture:13
msgid "Through the $PATH env variable (front-end detection)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture:14
msgid "Through the tcl module system. (back-end detection)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture:16
msgid "Depending on which operating system is specified, the compiler will be detected using one of those methods."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture:19
msgid "For platforms such as linux and darwin, the operating system is autodetected and the target is set to be x86_64."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture:22
msgid "The command line syntax for specifying an architecture is as follows:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture:24
msgid "target=<Target name> os=<OperatingSystem name>"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture:26
msgid "If the user wishes to use the defaults, either target or os can be left out of the command line and Spack will concretize using the default. These defaults are set in the 'platforms/' directory which contains the different subclasses for platforms. If the machine has multiple architectures, the user can also enter front-end, or fe or back-end or be. These settings will concretize to their respective front-end and back-end targets and operating systems. Additional platforms can be added by creating a subclass of Platform and adding it inside the platform directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture:35
msgid "Platforms are an abstract class that are extended by subclasses. If the user wants to add a new type of platform (such as cray_xe), they can create a subclass and set all the class attributes such as priority, front_target, back_target, front_os, back_os. Platforms also contain a priority class attribute. A lower number signifies higher priority. These numbers are arbitrarily set and can be changed though often there isn't much need unless a new platform is added and the user wants that to be detected first."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture:43
msgid "Targets are created inside the platform subclasses. Most architecture (like linux, and darwin) will have only one target (x86_64) but in the case of Cray machines, there is both a frontend and backend processor. The user can specify which targets are present on front-end and back-end architecture"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture:48
msgid "Depending on the platform, operating systems are either auto-detected or are set. The user can set the front-end and back-end operating setting by the class attributes front_os and back_os. The operating system as described earlier, will be responsible for compiler detection."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.Arch:1
msgid "Architecture is now a class to help with setting attributes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.Arch:3
msgid "TODO: refactor so that we don't need this class."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.NoPlatformError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NewLayoutException:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoChecksumException:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoGpgException:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoKeyException:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoVerifyException:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.PickKeyException:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.InstallError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.InsufficientArchitectureInfoError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.NoBuildError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.NoCompilersForArchError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.NoValidVersionError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.UnavailableCompilerVersionError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.ConfigError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.CorruptDatabaseError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.ForbiddenLockError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.InvalidDatabaseVersionError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.MissingDependenciesError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.NonConcreteSpecAddError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.UpstreamDatabaseLockingError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayoutError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.SpackEnvironmentError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.error.NoHeadersError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.error.NoLibrariesError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.error.SpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.error.UnsupportedPlatformError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.MirrorError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.MultiMethodError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.NoSuchMethodError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.DependencyConflictError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.FetchError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.InstallError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.VirtualInPackagesYAMLError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.ParseError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.NoSuchPatchError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.PatchDirectiveError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndexError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.InstallRootStringException:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.spec.SpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.StageError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.UrlParseError:1
msgid "Bases: :class:`spack.error.SpackError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.OperatingSystem:1
msgid "Operating System will be like a class similar to platform extended by subclasses for the specifics. Operating System will contain the compiler finding logic. Instead of calling two separate methods to find compilers we call find_compilers method for each operating system"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.OperatingSystem.find_compiler:1
msgid "Try to find the given type of compiler in the user's environment. For each set of compilers found, this returns compiler objects with the cc, cxx, f77, fc paths and the version filled in."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.OperatingSystem.find_compiler:6
msgid "This will search for compilers with the names in cc_names, cxx_names, etc. and it will group them if they have common prefixes, suffixes, and versions.  e.g., gcc-mp-4.7 would be grouped with g++-mp-4.7 and gfortran-mp-4.7."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.OperatingSystem.find_compilers:1
msgid "Return a list of compilers found in the supplied paths. This invokes the find() method for each Compiler class, and appends the compilers detected to a list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.Platform:1
msgid "Abstract class that each type of Platform will subclass. Will return a instance of it once it is returned."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.Platform.add_operating_system:1
msgid "Add the operating_system class object into the platform.operating_sys dictionary"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.Platform.add_target:1
msgid "Used by the platform specific subclass to list available targets. Raises an error if the platform specifies a name that is reserved by spack as an alias."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.Platform.detect:1
msgid "Subclass is responsible for implementing this method. Returns True if the Platform class detects that it is the current platform and False if it's not."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.Platform.setup_platform_environment:1
msgid "Subclass can override this method if it requires any platform-specific build environment modifications."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.Platform.target:1
msgid "This is a getter method for the target dictionary that handles defaulting based on the values provided by default, front-end, and back-end. This can be overwritten by a subclass for which we want to provide further aliasing options."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.Target:1
msgid "Target is the processor of the host machine. The host machine may have different front-end and back-end targets, especially if it is a Cray machine. The target will have a name and also the module_name (e.g craype-compiler). Targets will also recognize which platform they came from using the set_platform method. Targets will have compiler finding strategies"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.arch_for_spec:1
msgid "Transforms the given architecture spec into an architecture objct."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.get_platform:1
msgid "Returns a platform object that corresponds to the given name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.platform:1
msgid "Detects the platform for this machine."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.platform:3
msgid "Gather a list of all available subclasses of platforms. Sorts the list according to their priority looking. Priority is an arbitrarily set number. Detects platform either using uname or a file path (/opt/cray...)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.sys_type:1
msgid "Print out the \"default\" platform-os-target tuple for this machine."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.sys_type:3
msgid "On machines with only one target OS/target, prints out the platform-os-target for the frontend.  For machines with a frontend and a backend, prints the default backend."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.sys_type:7
msgid "TODO: replace with use of more explicit methods to get *all* the backends, as client code should really be aware of cross-compiled architectures."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/architecture.py:docstring of spack.architecture.verify_platform:1
msgid "Determines whether or not the platform with the given name is supported in Spack.  For more information, see the 'spack.platforms' submodule."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:41
msgid "spack.binary\\_distribution module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NewLayoutException:1
msgid "Raised if directory layout is different from buildcache."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoChecksumException:1
msgid "Raised if file fails checksum verification."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoGpgException:1
msgid "Raised when gpg2 is not in PATH"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoKeyException:1
msgid "Raised when gpg has no default key added."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoOverwriteException:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.error.SpackError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.SpackCommandError:1
msgid "Bases: :class:`Exception`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoOverwriteException:1
msgid "Raised when a file exists and must be overwritten."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.NoVerifyException:1
msgid "Raised if file fails signature verification."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.PickKeyException:1
msgid "Raised when multiple keys can be used to sign."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.build_tarball:1
msgid "Build a tarball from given spec and put it into the directory structure used at the mirror (following <tarball_directory_name>)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.buildinfo_file_name:1
msgid "Filename of the binary package meta-data file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.check_specs_against_mirrors:1
msgid "Check all the given specs against buildcaches on the given mirrors and determine if any of the specs need to be rebuilt.  Reasons for needing to rebuild include binary cache for spec isn't present on a mirror, or it is present but the full_hash has changed since last time spec was built."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.check_specs_against_mirrors:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_package_context:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.load_external_modules:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.set_build_environment_variables:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.concretize_specs_together:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.override:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.validate:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring of spack.dependency.canonical_deptype:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.conflicts:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.depends_on:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.patch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.variant:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.concretize:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.activate:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.deactivate:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.get_env:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.extension_name:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.get_module:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.load_command_extension:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.path_for_extension:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.SpackArgumentParser.format_help_sections:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.main:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.print_setup_info:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.create:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.check_for_unfinished_installation:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.possible_dependencies:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.on_package_attributes:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.Patch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.Patch.apply:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.Patch.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache.patch_for_package:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.apply_patch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.file_is_relocatable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.is_binary:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.is_relocatable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.mime_type:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex.add_indexer:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get_repo:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.TagIndex.update_package:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.additional_repository:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of spack.report.collect_info:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concretize:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store.Store:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.color_url:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.compatible:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.constrain:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.satisfies:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant.satisfies:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.compatible:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.constrain:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.satisfies:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_variant:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.constrain:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.satisfies:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.substitute:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.any_combination_of:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.auto_or_any_combination_of:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.disjoint_sets:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.implicit_variant_conversion:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.substitute_abstract_variants:0
msgid "Parameters"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.check_specs_against_mirrors:6
msgid "Mirrors to check against"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.check_specs_against_mirrors:8
msgid "Specs to check against mirrors"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.check_specs_against_mirrors:10
msgid "Path to output file to be written.  If provided, mirrors with missing or out-of-date specs will be formatted as a JSON object and written to this file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.check_specs_against_mirrors:14
msgid "Treat any errors encountered while checking specs as a signal to rebuild package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.check_specs_against_mirrors:18
msgid "Returns: 1 if any spec was out-of-date on any mirror, 0 otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.download_tarball:1
msgid "Download binary tarball for given package into stage area Return True if successful"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.extract_tarball:1
msgid "extract binary tarball for given package into install area"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.get_keys:1
msgid "Get pgp public keys available on mirror"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.get_specs:1
msgid "Get spec.yaml's for build caches available on mirror"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.make_package_placeholder:1
msgid "Change paths in binaries to placeholder paths"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.make_package_relative:1
msgid "Change paths in binaries to relative paths. Change absolute symlinks to relative symlinks."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.read_buildinfo_file:1
msgid "Read buildinfo file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.relocate_package:1
msgid "Relocate the given package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.tarball_directory_name:1
msgid "Return name of the tarball directory according to the convention <os>-<architecture>/<compiler>/<package>-<version>/"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.tarball_name:1
msgid "Return the name of the tarfile according to the convention <os>-<architecture>-<package>-<dag_hash><ext>"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.tarball_path_name:1
msgid "Return the full path+name for a given spec according to the convention <tarball_directory_name>/<tarball_name>"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/binary_distribution.py:docstring of spack.binary_distribution.write_buildinfo_file:1
msgid "Create a cache file containing information required for the relocation"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:49
msgid "spack.build\\_environment module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment:1
msgid "This module contains all routines related to setting up the package build environment.  All of this is set up by package.py just before install() is called."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment:5
msgid "There are two parts to the build environment:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment:7
msgid "Python build environment (i.e. install() method)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment:9
msgid "This is how things are set up when install() is called.  Spack takes advantage of each package being in its own module by adding a bunch of command-like functions (like configure(), make(), etc.) in the package's module scope.  Ths allows package writers to call them all directly in Package.install() without writing 'self.' everywhere.  No, this isn't Pythonic.  Yes, it makes the code more readable and more like the shell script from which someone is likely porting."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment:18
msgid "Build execution environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment:20
msgid "This is the set of environment variables, like PATH, CC, CXX, etc. that control the build.  There are also a number of environment variables used to pass information (like RPATHs and other information about dependencies) to Spack's compiler wrappers. All of these env vars are also set up here."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment:26
msgid "Skimming this module is a nice way to get acquainted with the types of calls you can make from within the install() function."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:1
msgid "Bases: :class:`spack.build_environment.InstallError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:2
msgid "Special exception class for wrapping exceptions from child processes"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:2
msgid "in Spack's build environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:4
msgid "The main features of a ChildError are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:6
msgid "They're serializable, so when a child build fails, we can send one of these to the parent and let the parent report what happened."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:9
msgid "They have a ``traceback`` field containing a traceback generated on the child immediately after failure.  Spack will print this on failure in lieu of trying to run sys.excepthook on the parent process, so users will see the correct stack trace from a child."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:14
msgid "They also contain context, which shows context in the Package implementation where the error happened.  This helps people debug Python code in their packages.  To get it, Spack searches the stack trace for the deepest frame where ``self`` is in scope and is an instance of PackageBase.  This will generally find a useful spot in the ``package.py`` file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:21
msgid "The long_message of a ChildError displays one of two things:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:23
msgid "If the original error was a ProcessError, indicating a command died during the build, we'll show context from the build log."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:26
msgid "If the original error was any other type of error, we'll show context from the Python code."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.ChildError:29
msgid "SpackError handles displaying the special traceback if we're in debug mode with spack -d."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.InstallError:1
msgid "Raised by packages when a package fails to install."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.InstallError:3
msgid "Any subclass of InstallError will be annotated by Spack wtih a ``pkg`` attribute on failure, which the caller can use to get the package for which the exception was raised."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.MakeExecutable:1
msgid "Bases: :class:`spack.util.executable.Executable`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.MakeExecutable:1
msgid "Special callable executable object for make so the user can specify parallelism options on a per-invocation basis.  Specifying 'parallel' to the call will override whatever the package's global setting is, so you can either default to true or false and override particular calls. Specifying 'jobs_env' to a particular call will name an environment variable which will be set to the parallelism level (without affecting the normal invocation with -j)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.MakeExecutable:10
msgid "Note that if the SPACK_NO_PARALLEL_MAKE env var is set it overrides everything."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:1
msgid "Fork a child process to do part of a spack build."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:3
msgid "package whose environment we should set up the forked process for."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:6
msgid "argless function to run in the child process."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:9
msgid "If True, do NOT clean the environment before building."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:12
msgid "If True, skip package setup b/c it's not a real build"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:15
msgid "Usage::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:21
msgid "Forked processes are run with the build environment set up by spack.build_environment.  This allows package authors to have full control over the environment, etc. without affecting other builds that might be executed in the same spack call."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.fork:26
msgid "If something goes wrong, the child process catches the error and passes it to the parent wrapped in a ChildError.  The parent is expected to handle (or re-raise) the ChildError."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_package_context:1
msgid "Return some context for an error message when the build fails."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_package_context:3
msgid "A traceback from some exception raised during install"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_package_context:6
msgid "Lines of context to show before and after the line where the error happened"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_package_context:10
msgid "This function inspects the stack to find where we failed in the package file, and it adds detailed context to the long_message from there."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_rpath_deps:1
msgid "Return immediate or transitive RPATHs depending on the package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_rpaths:1
msgid "Get a list of all the rpaths for a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:1
msgid "List of standard arguments used if a package is a CMakePackage."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.concretize_specs_together:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.add:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.activate:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.deactivate:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.get_env:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.extension_name:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.load_command_extension:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.path_for_extension:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.CacheURLFetchStrategy.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.cachable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.cachable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.cachable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.cachable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.cachable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.all_urls:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.check_for_unfinished_installation:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fetch_remote_versions:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.installed:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.unit_test_check:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.version_urls:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.file_is_relocatable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.is_binary:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.is_relocatable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.mime_type:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.needs_update:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.needs_update:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.compatible:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.constrain:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.copy:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.satisfies:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.value:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.yaml_entry:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant.satisfies:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.compatible:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.constrain:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.satisfies:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.yaml_entry:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.allowed_values:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_default:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_variant:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.concrete:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.constrain:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.copy:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.satisfies:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.any_combination_of:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.auto_or_any_combination_of:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.disjoint_sets:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.dashed:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.dotted:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.joined:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.underscored:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.up_to:0
msgid "Returns"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:3
msgid "standard arguments that would be used if this package were a CMakePackage instance."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.add:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.activate:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.deactivate:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.get_env:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.CacheURLFetchStrategy.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.cachable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.cachable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.cachable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.cachable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.cachable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.fetch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.all_urls:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fetch_remote_versions:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.unit_test_check:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.needs_update:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.needs_update:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.compatible:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.constrain:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.copy:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.satisfies:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.value:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.yaml_entry:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant.satisfies:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.compatible:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.constrain:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.satisfies:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.yaml_entry:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.allowed_values:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_default:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_variant:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.concrete:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.constrain:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.copy:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.satisfies:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.dashed:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.dotted:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.joined:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.underscored:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.up_to:0
msgid "Return type"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:7
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:7
msgid "package under consideration"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_cmake_args:10
msgid "arguments for cmake"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:1
msgid "List of standard arguments used if a package is a MesonPackage."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:3
msgid "standard arguments that would be used if this package were a MesonPackage instance."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.get_std_meson_args:10
msgid "arguments for meson"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.load_external_modules:1
msgid "Traverse a package's spec DAG and load any external modules."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.load_external_modules:3
msgid "Traverse a package's dependencies and load any external modules associated with them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.load_external_modules:6
msgid "package to load deps for"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.parent_class_modules:1
msgid "Get list of superclass modules that descend from spack.package.PackageBase"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.parent_class_modules:3
msgid "Includes cls.__module__"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.set_build_environment_variables:1
msgid "Ensure a clean install environment when we build packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.set_build_environment_variables:3
msgid "This involves unsetting pesky environment variables that may affect the build. It also involves setting environment variables used by Spack's compiler wrappers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.set_build_environment_variables:7
msgid "The package we are building"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.set_build_environment_variables:8
msgid "The build environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.set_build_environment_variables:9
msgid "Skip unsetting the user's environment settings"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.set_module_variables_for_package:1
msgid "Populate the module scope of install() with some useful functions. This makes things easier for package writers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/build_environment.py:docstring of spack.build_environment.setup_package:1
msgid "Execute all environment setup routines."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:57
msgid "spack.caches module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/caches.py:docstring of spack.caches:1
msgid "Caches used by Spack to store data"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/caches.py:docstring of spack.caches.fetch_cache:1
msgid "Spack's local cache for downloaded source archives"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/caches.py:docstring of spack.caches.misc_cache:1
msgid "Spack's cache for small data"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:65
msgid "spack.compiler module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compiler.py:docstring of spack.compiler.Compiler:1
msgid "This class encapsulates a Spack \"compiler\", which includes C, C++, and Fortran compilers.  Subclasses should implement support for specific compilers, their possible names, arguments, and how to identify the particular type of compiler."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compiler.py:docstring of spack.compiler.Compiler.default_version:1
msgid "Override just this to override all compiler version functions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compiler.py:docstring of spack.compiler.Compiler.extract_version_from_output:1
msgid "Extracts the version from compiler's output."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compiler.py:docstring of spack.compiler.Compiler.setup_custom_environment:1
msgid "Set any environment variables necessary to use the compiler."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compiler.py:docstring of spack.compiler.Compiler.version_argument:1
msgid "Compiler argument that produces version information"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/compiler.py:docstring of spack.compiler.Compiler.version_regex:1
msgid "Regex used to extract version from compiler's output"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:73
msgid "spack.concretize module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize:1
msgid "Functions here are used to take abstract specs and make them concrete. For example, if a spec asks for a version between 1.8 and 1.9, these functions might take will take the most recent 1.9 version of the package available.  Or, if the user didn't specify a compiler for a spec, then this will assign a compiler to the spec based on defaults or user preferences."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize:10
msgid "TODO: make this customizable and allow users to configure"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize:9
msgid "concretization  policies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer:1
msgid "You can subclass this class to override some of the default concretization strategies, or you can override all of them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.choose_virtual_or_external:1
msgid "Given a list of candidate virtual and external packages, try to find one that is most ABI compatible."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_architecture:1
msgid "If the spec is empty provide the defaults of the platform. If the architecture is not a string type, then check if either the platform, target or operating system are concretized. If any of the fields are changed then return True. If everything is concretized (i.e the architecture attribute is a namedtuple of classes) then return False. If the target is a string type, then convert the string into a concretized architecture. If it has no architecture and the root of the DAG has an architecture, then use the root otherwise use the defaults on the platform."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_compiler:1
msgid "If the spec already has a compiler, we're done.  If not, then take the compiler used for the nearest ancestor with a compiler spec and use that.  If the ancestor's compiler is not concrete, then used the preferred compiler as specified in spackconfig."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_compiler:7
msgid "Intuition: Use the spackconfig default if no package that depends on this one has a strict compiler requirement.  Otherwise, try to build with the compiler that will be used by libraries that link to this one, to maximize compatibility."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_compiler_flags:1
msgid "The compiler flags are updated to match those of the spec whose compiler is used, defaulting to no compiler flags in the spec. Default specs set at the compiler level will still be added later."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_variants:1
msgid "If the spec already has variants filled in, return.  Otherwise, add the user preferences from packages.yaml or the default variants from the package specification."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_version:1
msgid "If the spec is already concrete, return.  Otherwise take the preferred version from spackconfig, and default to the package's version if there are no available versions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_version:11
msgid "TODO: In many cases we probably want to look for installed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.Concretizer.concretize_version:6
msgid "versions of each package and use an installed version if we can link to it.  The policy implemented here will tend to rebuild a lot of stuff becasue it will prefer a compiler in the spec to any compiler already- installed things were built with.  There is likely some better policy that finds some middle ground between these two extremes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.InsufficientArchitectureInfoError:1
msgid "Raised when details on architecture cannot be collected from the system"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.NoBuildError:1
msgid "Raised when a package is configured with the buildable option False, but no satisfactory external versions can be found"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.NoValidVersionError:1
msgid "Raised when there is no way to have a concrete version for a particular spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.UnavailableCompilerVersionError:1
msgid "Raised when there is no available compiler that satisfies a compiler spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.concretize_specs_together:1
msgid "Given a number of specs as input, tries to concretize them together."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.concretize_specs_together:3
msgid "abstract specs to be concretized, given either as Specs or strings"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.concretize_specs_together:6
msgid "List of concretized specs"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.concretizer:1
msgid "Concretizer singleton"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/concretize.py:docstring of spack.concretize.find_spec:1
msgid "Searches the dag from spec in an intelligent order and looks for a spec that matches a condition"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:81
msgid "spack.config module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config:1
msgid "This module implements Spack's configuration file handling."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config:3
msgid "This implements Spack's configuration system, which handles merging multiple scopes with different levels of precedence.  See the documentation on :ref:`configuration-scopes` for details on how Spack's configuration system behaves.  The scopes are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config:8
msgid "``default``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config:9
msgid "``system``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config:10
msgid "``site``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config:11
msgid "``user``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config:13
msgid "And corresponding :ref:`per-platform scopes <platform-scopes>`. Important functions in this module are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config:16
msgid ":py:func:`get_config`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config:17
msgid ":py:func:`update_config`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config:19
msgid "``get_config`` reads in YAML data for a particular scope and returns it. Callers can then modify the data and write it back with ``update_config``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config:23
msgid "When read in, Spack validates configurations with jsonschemas.  The schemas are in submodules of :py:mod:`spack.schema`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.ConfigError:1
msgid "Superclass for all Spack config related errors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.ConfigFileError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.ConfigFormatError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.ConfigSectionError:1
msgid "Bases: :class:`spack.config.ConfigError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.ConfigFileError:1
msgid "Issue reading or accessing a configuration file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.ConfigFormatError:1
msgid "Raised when a configuration format does not match its schema."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.ConfigScope:1
msgid "This class represents a configuration scope."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.ConfigScope:3
msgid "A scope is one directory containing named configuration files. Each file is a config \"section\" (e.g., mirrors, compilers, etc)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.ConfigScope.clear:1
msgid "Empty cached config information."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.ConfigSectionError:1
msgid "Error for referring to a bad config section name in a configuration."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration:1
msgid "A full Spack configuration, from a hierarchy of config files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration:3
msgid "This class makes it easy to add a new scope on top of an existing one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.clear_caches:1
msgid "Clears the caches for configuration files,"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.clear_caches:3
msgid "This will cause files to be re-read upon the next request."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.file_scopes:1
msgid "List of writable scopes with an associated file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.get:1
msgid "Get a config section or a single value from one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.get:3
msgid "Accepts a path syntax that allows us to grab nested config map entries.  Getting the 'config' section would look like::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.get:8
msgid "and the ``dirty`` section in the ``config`` scope would be::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.get:12
msgid "We use ``:`` as the separator, like YAML objects."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.get_config:1
msgid "Get configuration settings for a section."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.get_config:3
msgid "If ``scope`` is ``None`` or not provided, return the merged contents of all of Spack's configuration scopes.  If ``scope`` is provided, return only the confiugration as specified in that scope."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.get_config:7
msgid "This off the top-level name from the YAML section.  That is, for a YAML config file that looks like this::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.get_config:15
msgid "``get_config('config')`` will return::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.get_config_filename:1
msgid "For some scope and section, get the name of the configuration file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.highest_precedence_scope:1
msgid "Non-internal scope with highest precedence."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.pop_scope:1
msgid "Remove the highest precedence scope and return it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.print_section:1
msgid "Print a configuration to stdout."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.push_scope:1
msgid "Add a higher precedence scope to the Configuration."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.set:1
msgid "Convenience function for setting single values in config files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.set:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.set:3
msgid "Accepts the path syntax described in ``get()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.update_config:1
msgid "Update the configuration file for a particular scope."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.update_config:3
msgid "Overwrites contents of a section in a scope with update_data, then writes out the config file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.Configuration.update_config:6
msgid "update_data should have the top-level section name stripped off (it will be re-added).  Data itself can be a list, dict, or any other yaml-ish structure."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.ImmutableConfigScope:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.InternalConfigScope:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.SingleFileScope:1
msgid "Bases: :class:`spack.config.ConfigScope`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.ImmutableConfigScope:1
msgid "A configuration scope that cannot be written to."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.ImmutableConfigScope:3
msgid "This is used for ConfigScopes passed on the command line."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.InternalConfigScope:1
msgid "An internal configuration scope that is not persisted to a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.InternalConfigScope:3
msgid "This is for spack internal use so that command-line options and config file settings are accessed the same way, and Spack can easily override settings from files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.InternalConfigScope.get_section:1
msgid "Just reads from an internal dictionary."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.InternalConfigScope.write_section:1
msgid "This only validates, as the data is already in memory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.SingleFileScope:1
msgid "This class represents a configuration scope in a single YAML file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.command_line_scopes:1
msgid "configuration scopes added on the command line set by ``spack.main.main()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.config:1
msgid "This is the singleton configuration instance for Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.config_defaults:1
msgid "Hard-coded default values for some key configuration options. This ensures that Spack will still work even if config.yaml in the defaults scope is removed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.configuration_paths:1
msgid "Builtin paths to configuration files in Spack"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.default_list_scope:1
msgid "Return the config scope that is listed by default."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.default_list_scope:3
msgid "Commands that list configuration list *all* scopes (merged) by default."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.default_modify_scope:1
msgid "Return the config scope that commands should modify by default."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.default_modify_scope:3
msgid "Commands that modify configuration by default modify the *highest* priority scope."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.first_existing:1
msgid "Get the value of the first key in keys that is in the dictionary."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.get:1
msgid "Module-level wrapper for ``Configuration.get()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.override:1
msgid "Simple way to override config settings within a context."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.override:3
msgid "scope or single option to override"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.override:5
msgid "value for the single option"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.override:8
msgid "Temporarily push a scope on the current configuration, then remove it after the context completes. If a single option is provided, create an internal config scope for it and push/pop that scope."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.scopes:1
msgid "Convenience function to get list of configuration scopes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.scopes_metavar:1
msgid "metavar to use for commands that accept scopes this is shorter and more readable than listing all choices"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.section_schemas:1
msgid "Dict from section names -> schema for that section"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.set:1
msgid "Convenience function for getting single values in config files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.validate:1
msgid "Validate data read in from a Spack YAML file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.validate:3
msgid "data read from a Spack YAML file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.validate:5
msgid "jsonschema to validate data"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.validate:7
msgid "whether to set defaults based on the schema"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/config.py:docstring of spack.config.validate:10
msgid "This leverages the line information (start_mark, end_mark) stored on Spack YAML structures."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:89
msgid "spack.database module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database:1
msgid "Spack's installation tracking database."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database:3
msgid "The database serves two purposes:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database:5
msgid "It implements a cache on top of a potentially very large Spack directory hierarchy, speeding up many operations that would otherwise require filesystem access."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database:9
msgid "It will allow us to track external installations as well as lost packages and their dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database:12
msgid "Prior to the implementation of this store, a directory layout served as the authoritative database of packages in Spack.  This module provides a cache and a sanity checking mechanism for what is in the filesystem."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.CorruptDatabaseError:1
msgid "Raised when errors are found while reading the database."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.Database:1
msgid "Per-process lock objects for each install prefix."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.Database.prefix_lock:1
msgid "Get a lock on a particular spec's installation directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.Database.prefix_lock:3
msgid "NOTE: The installation directory **does not** need to exist."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.Database.prefix_lock:5
msgid "Prefix lock is a byte range lock on the nth byte of a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.Database.prefix_lock:7
msgid "The lock file is ``spack.store.db.prefix_lock`` -- the DB tells us what to call it and it lives alongside the install DB."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.Database.prefix_lock:10
msgid "n is the sys.maxsize-bit prefix of the DAG hash.  This makes likelihood of collision is very low AND it gives us readers-writer lock semantics with just a single lockfile, so no cleanup required."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.Database.query_one:1
msgid "Query for exactly one spec that matches the query spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.Database.query_one:3
msgid "Raises an assertion error if more than one spec matches the query. Returns None if no installed package matches."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.Database.read_transaction:1
msgid "Get a read lock context manager for use in a `with` block."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.Database.reindex:1
msgid "Build database index from scratch based on a directory layout."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.Database.reindex:3
msgid "Locks the DB if it isn't locked already."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.Database.write_transaction:1
msgid "Get a write lock context manager for use in a `with` block."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.ForbiddenLockError:1
msgid "Raised when an upstream DB attempts to acquire a lock"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:1
msgid "A record represents one installation in the DB."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:3
msgid "The record keeps track of the spec for the installation, its install path, AND whether or not it is installed.  We need the installed flag in case a user either:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:7
msgid "blew away a directory, or"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:8
msgid "used spack uninstall -f to get rid of it"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:10
msgid "If, in either case, the package was removed but others still depend on it, we still need to track its spec, so we don't actually remove from the database until a spec has no installed dependents left."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:15
msgid "spec tracked by the install record"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:17
msgid "path where the spec has been installed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:19
msgid "whether or not the spec is currently installed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:21
msgid "number of specs that depend on this one"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:23
msgid "whether or not this spec was explicitly installed, or pulled-in as a dependency of something else"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.InstallRecord:26
msgid "time of the installation"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.MissingDependenciesError:1
msgid "Raised when DB cannot find records for dependencies"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.NonConcreteSpecAddError:1
msgid "Raised when attemptint to add non-concrete spec to DB."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/database.py:docstring of spack.database.UpstreamDatabaseLockingError:1
msgid "Raised when an operation would need to lock an upstream database"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:97
msgid "spack.dependency module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring of spack.dependency:1
msgid "Data structures that represent Spack's dependency relationships."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring of spack.dependency.Dependency:1
msgid "Class representing metadata for a dependency on a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring of spack.dependency.Dependency:3
msgid "This class differs from ``spack.spec.DependencySpec`` because it represents metadata at the ``Package`` level. ``spack.spec.DependencySpec`` is a descriptor for an actual package configuration, while ``Dependency`` is a descriptor for a package's dependency *requirements*."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring of spack.dependency.Dependency:9
msgid "A dependency is a requirement for a configuration of another package that satisfies a particular spec.  The dependency can have *types*, which determine *how* that package configuration is required, e.g. whether it is required for building the package, whether it needs to be linked to, or whether it is needed at runtime so that Spack can call commands from it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring of spack.dependency.Dependency:16
msgid "A package can also depend on another package with *patches*. This is for cases where the maintainers of one package also maintain special patches for their dependencies.  If one package depends on another with patches, a special version of that dependency with patches applied will be built for use by the dependent package.  The patches are included in the new version's spec hash to differentiate it from unpatched versions of the same package, so that unpatched versions of the dependency package can coexist with the patched version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring of spack.dependency.Dependency.merge:1
msgid "Merge constraints, deptypes, and patches of other into self."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring of spack.dependency.Dependency.name:1
msgid "Get the name of the dependency package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring of spack.dependency.all_deptypes:1
msgid "The types of dependency relationships that Spack understands."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring of spack.dependency.canonical_deptype:1
msgid "Convert deptype to a canonical sorted tuple, or raise ValueError."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring of spack.dependency.canonical_deptype:3
msgid "string representing dependency type, or a list/tuple of such strings.  Can also be the builtin function ``all`` or the string 'all', which result in a tuple of all dependency types known to Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/dependency.py:docstring of spack.dependency.default_deptype:1
msgid "Default dependency type if none is specified"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:105
msgid "spack.directives module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives:1
msgid "This package contains directives that can be used within a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives:3
msgid "Directives are functions that can be called inside a package definition to modify the package, for example:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives:9
msgid "class OpenMpi(Package):"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives:7
msgid "depends_on(\"hwloc\") provides(\"mpi\") ..."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives:11
msgid "``provides`` and ``depends_on`` are spack directives."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives:13
msgid "The available directives are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives:15
msgid "``version``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives:16
msgid "``depends_on``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives:17
msgid "``provides``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives:18
msgid "``extends``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives:19
msgid "``patch``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives:20
msgid "``variant``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives:21
msgid "``resource``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.version:1
msgid "Adds a version and metadata describing how to fetch its source code."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.version:3
msgid "Metadata is stored as a dict of ``kwargs`` in the package class's ``versions`` dictionary."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.version:6
msgid "The ``dict`` of arguments is turned into a valid fetch strategy later. See ``spack.fetch_strategy.for_package_version()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.conflicts:1
msgid "Allows a package to define a conflict."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.conflicts:3
msgid "Currently, a \"conflict\" is a concretized configuration that is known to be non-valid. For example, a package that is known not to be buildable with intel compilers can declare::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.conflicts:9
msgid "To express the same constraint only when the 'foo' variant is activated::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.conflicts:14
msgid "constraint defining the known conflict"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.conflicts:16
msgid "optional constraint that triggers the conflict"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.conflicts:18
msgid "optional user defined message"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.depends_on:1
msgid "Creates a dict of deps with specs defining when they apply."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.depends_on:3
msgid "the package and constraints depended on"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.depends_on:5
msgid "when the dependent satisfies this, it has the dependency represented by ``spec``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.depends_on:8
msgid "str or tuple of legal Spack deptypes"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.depends_on:10
msgid "single result of ``patch()`` directive, a ``str`` to be passed to ``patch``, or a list of these"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.depends_on:14
msgid "This directive is to be used inside a Package definition to declare that the package requires other packages to be built first. @see The section \"Dependency specs\" in the Spack Packaging Guide."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.extends:1
msgid "Same as depends_on, but allows symlinking into dependency's prefix tree."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.extends:4
msgid "This is for Python and other language modules where the module needs to be installed into the prefix of the Python installation. Spack handles this by installing modules into their own prefix, but allowing ONE module version to be symlinked into a parent Python install at a time, using ``spack activate``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.extends:10
msgid "keyword arguments can be passed to extends() so that extension packages can pass parameters to the extendee's extension mechanism."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.provides:1
msgid "Allows packages to provide a virtual dependency.  If a package provides 'mpi', other packages can declare that they depend on \"mpi\", and spack can use the providing package to satisfy the dependency."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.patch:1
msgid "Packages can declare patches to apply to source.  You can optionally provide a when spec to indicate that a particular patch should only be applied when the package's spec meets certain conditions (e.g. a particular version)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.patch:6
msgid "url or relative filename of the patch"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.patch:8
msgid "patch level (as in the patch shell command)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.patch:10
msgid "optional anonymous spec that specifies when to apply the patch"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.patch:13
msgid "dir to change to before applying"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.patch:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.create:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:0
msgid "Keyword Arguments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.patch:16
msgid "sha256 sum of the patch, used to verify the patch (only required for URL patches)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.patch:19
msgid "sha256 sum of the *archive*, if the patch is compressed (only required for compressed URL patches)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.variant:1
msgid "Define a variant for the package. Packager can specify a default value as well as a text description."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.variant:4
msgid "name of the variant"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.variant:6
msgid "default value for the variant, if not specified otherwise the default will be False for a boolean variant and 'nothing' for a multi-valued variant"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.variant:10
msgid "description of the purpose of the variant"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.variant:12
msgid "either a tuple of strings containing the allowed values, or a callable accepting one value and returning True if it is valid"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.variant:16
msgid "if False only one value per spec is allowed for this variant"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.variant:19
msgid "optional group validator to enforce additional logic. It receives the package name, the variant name and a tuple of values and should raise an instance of SpackError if the group doesn't meet the additional constraints"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.variant:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.suggest_archive_basename:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.file_is_relocatable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.is_relocatable:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of spack.report.collect_info:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:0
msgid "Raises"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.variant:25
msgid "if arguments passed to the directive are invalid"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.resource:1
msgid "Define an external resource to be fetched and staged when building the package. Based on the keywords present in the dictionary the appropriate FetchStrategy will be used for the resource. Resources are fetched and staged in their own folder inside spack stage area, and then moved into the stage area of the package that needs them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.resource:7
msgid "List of recognized keywords:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.resource:9
msgid "'when' : (optional) represents the condition upon which the resource is needed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.resource:11
msgid "'destination' : (optional) path where to move the resource. This path must be relative to the main package stage area."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directives.py:docstring of spack.directives.resource:13
msgid "'placement' : (optional) gives the possibility to fine tune how the resource is moved into the main package stage area."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:113
msgid "spack.directory\\_layout module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout:1
msgid "A directory layout is used to associate unique paths with specs. Different installations are going to want differnet layouts for their install, and they can use this to customize the nesting structure of spack installs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.all_specs:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.all_specs:1
msgid "To be implemented by subclasses to traverse all specs for which there is a directory within the root."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.check_installed:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.check_installed:1
msgid "Checks whether a spec is installed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.check_installed:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.check_installed:3
msgid "Return the spec's prefix, if it is installed, None otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.check_installed:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.check_installed:5
msgid "Raise an exception if the install is inconsistent or corrupt."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.create_install_directory:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.create_install_directory:1
msgid "Creates the installation directory for a spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.hidden_file_paths:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.hidden_file_paths:1
msgid "Return a list of hidden files used by the directory layout."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.hidden_file_paths:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.hidden_file_paths:3
msgid "Paths are relative to the root of an install directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.hidden_file_paths:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.hidden_file_paths:5
msgid "If the directory layout uses no hidden files to maintain state, this should return an empty container, e.g. [] or (,)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.path_for_spec:1
msgid "Return absolute path from the root to a directory for the spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.relative_path_for_spec:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.relative_path_for_spec:1
msgid "Implemented by subclasses to return a relative path from the install root to a unique location for the provided spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayout.remove_install_directory:1
msgid "Removes a prefix and any empty parent directories from the root. Raised RemoveFailedError if something goes wrong."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.DirectoryLayoutError:1
msgid "Superclass for directory layout errors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionAlreadyInstalledError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionConflictError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InconsistentInstallDirectoryError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InstallDirectoryAlreadyExistsError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InvalidDirectoryLayoutParametersError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InvalidExtensionSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.NoSuchExtensionError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.RemoveFailedError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.SpecHashCollisionError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.SpecReadError:1
msgid "Bases: :class:`spack.directory_layout.DirectoryLayoutError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionAlreadyInstalledError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionConflictError:1
msgid "Raised when an extension is added to a package that already has it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout:1
msgid "A directory layout is used to associate unique paths with specs for package extensions. Keeps track of which extensions are activated for what package. Depending on the use case, this can mean globally activated extensions directly in the installation folder - or extensions activated in filesystem views."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.add_extension:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.add_extension:1
msgid "Add to the list of currently installed extensions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.check_activated:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.check_activated:1
msgid "Ensure that ext_spec can be removed from spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.check_activated:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.check_activated:3
msgid "If not, raise NoSuchExtensionError."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.check_extension_conflict:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.check_extension_conflict:1
msgid "Ensure that ext_spec can be activated in spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.check_extension_conflict:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.check_extension_conflict:3
msgid "If not, raise ExtensionAlreadyInstalledError or ExtensionConflictError."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.extendee_target_directory:1
msgid "Specify to which full path extendee should link all files from extensions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.extension_map:1
msgid "Get a dict of currently installed extension packages for a spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.extension_map:3
msgid "Dict maps { name : extension_spec } Modifying dict does not affect internals of this layout."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.ExtensionsLayout.remove_extension:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.remove_extension:1
msgid "Remove from the list of currently installed extensions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InconsistentInstallDirectoryError:1
msgid "Raised when a package seems to be installed to the wrong place."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InstallDirectoryAlreadyExistsError:1
msgid "Raised when create_install_directory is called unnecessarily."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InvalidDirectoryLayoutParametersError:1
msgid "Raised when a invalid directory layout parameters are supplied"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.InvalidExtensionSpecError:1
msgid "Raised when an extension file has a bad spec in it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.NoSuchExtensionError:1
msgid "Raised when an extension isn't there on deactivate."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.RemoveFailedError:1
msgid "Raised when a DirectoryLayout cannot remove an install prefix."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.SpecHashCollisionError:1
msgid "Raised when there is a hash collision in an install layout."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.SpecReadError:1
msgid "Raised when directory layout can't read a spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:1
msgid "Bases: :class:`spack.directory_layout.DirectoryLayout`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:5
msgid "By default lays out installation directories like this::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:5
msgid "<install root>/"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:5
msgid "<platform-os-target>/"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:5
msgid "<compiler>-<compiler version>/"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:5
msgid "<name>-<version>-<hash>"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:7
msgid "The hash here is a SHA-1 hash for the full DAG plus the build spec.  TODO: implement the build spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout:10
msgid "The installation directory scheme can be modified with the arguments hash_len and path_scheme."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.read_spec:1
msgid "Read the contents of a file and parse them as a spec"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.spec_file_path:1
msgid "Gets full path to spec file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlDirectoryLayout.write_spec:1
msgid "Write a spec out to a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout:1
msgid "Bases: :class:`spack.directory_layout.ExtensionsLayout`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout:1
msgid "Maintain extensions within a view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.extension_file_path:1
msgid "Gets full path to an installed package's extension file, which keeps track of all the extensions for that package which have been added to this view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/directory_layout.py:docstring of spack.directory_layout.YamlViewExtensionsLayout.extension_map:1
msgid "Defensive copying version of _extension_map() for external API."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:121
msgid "spack.environment module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.active:1
msgid "True if this environment is currently active."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.add:1
msgid "Add a single user_spec (non-concretized) to the Environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.add:3
msgid "True if the spec was added, False if it was already     present and did not need to be added"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.add:5
msgid "True if the spec was added, False if it was already"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.add:6
msgid "present and did not need to be added"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.added_specs:1
msgid "Specs that are not yet installed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.added_specs:3
msgid "Yields the user spec for non-concretized specs, and the concrete spec for already concretized but not yet installed specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.all_hashes:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.all_specs:1
msgid "Return all specs, even those a user spec would shadow."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.all_specs_by_hash:1
msgid "Map of hashes to spec for all specs in this environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.concretize:1
msgid "Concretize user_specs in this environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.concretize:3
msgid "Only concretizes specs that haven't been concretized yet unless force is ``True``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.concretize:6
msgid "This only modifies the environment in memory. ``write()`` will write out a lockfile containing concretized specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.concretize:9
msgid "re-concretize ALL specs, even those that were already concretized"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.concretized_specs:1
msgid "Tuples of (user spec, concrete spec) for all concrete specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.config_scopes:1
msgid "A list of all configuration scopes for this environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.destroy:1
msgid "Remove this environment from Spack entirely."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.env_file_config_scope:1
msgid "Get the configuration scope for the environment's manifest file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.env_file_config_scope_name:1
msgid "Name of the config scope of this environment's manifest file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.env_subdir_path:1
msgid "Path to directory where the env stores repos, logs, views."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.included_config_scopes:1
msgid "List of included configuration scopes from the environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.included_config_scopes:3
msgid "Scopes are listed in the YAML file in order from highest to lowest precedence, so configuration from earlier scope will take precedence over later ones."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.included_config_scopes:7
msgid "This routine returns them in the order they should be pushed onto the internal scope stack (so, in reverse, from lowest to highest)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.install:1
msgid "Install a single spec into an environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.install:3
msgid "This will automatically concretize the single spec, but it won't affect other as-yet unconcretized specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.install_all:1
msgid "Install all concretized specs in an environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.internal:1
msgid "Whether this environment is managed by Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.lock_path:1
msgid "Path to spack.lock file in this environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.manifest_path:1
msgid "Path to spack.yaml file in this environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.name:1
msgid "Human-readable representation of the environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.name:3
msgid "This is the path for directory environments, and just the name for named environments."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.remove:1
msgid "Remove specs from an environment that match a query_spec"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.removed_specs:1
msgid "Tuples of (user spec, concrete spec) for all specs that will be removed on nexg concretize."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.roots:1
msgid "Specs explicitly requested by the user *in this environment*."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.roots:3
msgid "Yields both added and installed specs that have user specs in `spack.yaml`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.write:1
msgid "Writes an in-memory environment to its location on disk."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.Environment.write:3
msgid "This will also write out package files for each newly concretized spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.SpackEnvironmentError:1
msgid "Superclass for all errors to do with Spack environments."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.activate:1
msgid "Activate an environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.activate:3
msgid "To activate an environment, we add its configuration scope to the existing Spack configuration, and we set active to the current environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.activate:7
msgid "the environment to activate"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.activate:9
msgid "use the packages exactly as they appear in the environment's repository"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.activate:12
msgid "generate commands to add view to path variables"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.activate:14
msgid "One of `sh`, `csh`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.activate:16
msgid "string to add to the users prompt, or None"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.activate:19
msgid "Shell commands to activate environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.activate:22
msgid "TODO: environment to use the activated spack environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.active:1
msgid "True if the named environment is active."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.all_environment_names:1
msgid "List the names of environments that currently exist."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.all_environments:1
msgid "Generator for all named Environments."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.config_dict:1
msgid "Get the configuration scope section out of an spack.yaml"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.create:1
msgid "Create a named environment in Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.deactivate:1
msgid "Undo any configuration or repo settings modified by ``activate()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.deactivate:3
msgid "One of `sh`, `csh`. Shell style to use."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.deactivate:6
msgid "shell commands for `shell` to undo environment variables"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.deactivate_config_scope:1
msgid "Remove any scopes from env from the global config path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.default_manifest_yaml:1
msgid "default spack.yaml file to put in new environments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.env_path:1
msgid "path where environments are stored in the spack tree"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.env_schema_keys:1
msgid "legal first keys in the spack.yaml manifest file"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.env_subdir_name:1
msgid "Name of the directory where environments store repos, logs, views"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.exists:1
msgid "Whether an environment with this name exists or not."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:1
msgid "Find active environment from args, spack.yaml, or environment variable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:3
msgid "This is called in ``spack.main`` to figure out which environment to activate."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:9
msgid "Check for an environment in this order:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:7
msgid "via ``spack -e ENV`` or ``spack -D DIR`` (arguments)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:8
msgid "as a spack.yaml file in the current directory, or"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:9
msgid "via a path in the SPACK_ENV environment variable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:11
msgid "If an environment is found, read it in.  If not, return None."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:13
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.get_env:15
msgid "argparse namespace wtih command arguments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.find_environment:16
msgid "a found environment, or ``None``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.get_env:1
msgid "Used by commands to get the active environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.get_env:3
msgid "This first checks for an ``env`` argument, then looks at the ``active`` environment.  We check args first because Spack's subcommand arguments are parsed *after* the ``-e`` and ``-D`` arguments to ``spack``.  So there may be an ``env`` argument that is *not* the active environment, and we give it precedence."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.get_env:9
msgid "This is used by a number of commands for determining whether there is an active environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.get_env:12
msgid "If an environment is not found *and* is required, print an error message that says the calling command *needs* an active environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.get_env:17
msgid "name of calling command"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.get_env:19
msgid "if ``True``, raise an exception when no environment is found; if ``False``, just return ``None``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.get_env:23
msgid "if there is an arg or active environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.is_env_dir:1
msgid "Whether a directory contains a spack environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.lockfile_format_version:1
msgid "version of the lockfile format. Must increase monotonically."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.lockfile_name:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.manifest_name:1
msgid "Name of the input yaml file for an environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.make_repo_path:1
msgid "Make a RepoPath from the repo subdirectories in an environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.prepare_config_scope:1
msgid "Add env's scope to the global configuration search path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.read:1
msgid "Get an environment with the supplied name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.root:1
msgid "Get the root directory for an environment by name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.spack_env_var:1
msgid "environment variable used to indicate the active environment"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/environment.py:docstring of spack.environment.valid_environment_name_re:1
msgid "regex for validating enviroment names"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:129
msgid "spack.error module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.error.NoHeadersError:1
msgid "Raised when package headers are requested but cannot be found"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.error.NoLibrariesError:1
msgid "Raised when package libraries are requested but cannot be found"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.error.SpackError:1
msgid "This is the superclass for all Spack errors. Subclasses can be found in the modules they have to do with."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.error.SpackError.print_context:1
msgid "Print extended debug information about this exception."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.error.SpackError.print_context:3
msgid "This is usually printed when the top-level Spack error handler calls ``die()``, but it can be called separately beforehand if a lower-level error handler needs to print error context and continue without raising the exception to the top level."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.error.SpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.spec.SpecError:1
msgid "Superclass for all errors that occur while constructing specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.error.UnsatisfiableSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.SpecParseError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.DuplicateDependencyError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.spec.DuplicateVariantError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.DuplicateCompilerSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsupportedCompilerError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.spec.UnknownVariantError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.DuplicateArchitectureError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.InconsistentSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.InvalidDependencyError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.NoProviderError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.MultipleProviderError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.spec.UnsatisfiableSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.AmbiguousHashError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.InvalidHashError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.NoSuchHashError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.RedundantSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.DuplicateVariantError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.InconsistentValidationError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.InvalidVariantValueError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.UnknownVariantError:1
msgid "Bases: :class:`spack.error.SpecError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.error.UnsatisfiableSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.spec.UnsatisfiableSpecError:1
msgid "Raised when a spec conflicts with package constraints. Provide the requirement that was violated when raising."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.error.UnsupportedPlatformError:1
msgid "Raised by packages when a platform is not supported"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/error.py:docstring of spack.error.debug:1
msgid "whether we should write stack traces or short error messages this is module-scoped because it needs to be set very early"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:137
msgid "spack.extensions module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions:1
msgid "Service functions and classes to implement the hooks for Spack's command extensions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.extension_name:1
msgid "Returns the name of the extension in the path passed as argument."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.extension_name:3
msgid "path where the extension resides"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.extension_name:6
msgid "The extension name or None if path doesn't match the format for Spack's extension."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.get_command_paths:1
msgid "Return the list of paths where to search for command files."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.get_module:1
msgid "Imports the extension module for a particular command name and returns it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.get_module:4
msgid "name of the command for which to get a module (contains ``-``, not ``_``)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.get_template_dirs:1
msgid "Returns the list of directories where to search for templates in extensions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.load_command_extension:1
msgid "Loads a command extension from the path passed as argument."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.load_command_extension:3
msgid "name of the command"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.load_command_extension:5
msgid "base path of the command extension"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.load_command_extension:8
msgid "A valid module object if the command is found or None"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.path_for_extension:1
msgid "Return the test root dir for a given extension."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.path_for_extension:3
msgid "name of the extension to test"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.path_for_extension:5
msgid "paths where the extensions reside"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/extensions.py:docstring of spack.extensions.path_for_extension:7
msgid "Root directory where tests should reside or None"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:145
msgid "spack.fetch\\_strategy module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:1
msgid "Fetch strategies are used to download source code into a staging area in order to build it.  They need to define the following methods:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:4
msgid "fetch()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:5
msgid "This should attempt to download/check out source from somewhere."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:7
msgid "check()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:7
msgid "Apply a checksum to the downloaded source code, e.g. for an archive. May not do anything if the fetch method was safe to begin with."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:9
msgid "expand()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:10
msgid "Expand (e.g., an archive) downloaded file to source."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:13
msgid "reset()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:12
msgid "Restore original state of downloaded code.  Used by clean commands. This may just remove the expanded source and re-expand an archive, or it may run something like git reset --hard."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:17
msgid "archive()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy:16
msgid "Archive a source directory, e.g. for creating a mirror."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.CacheURLFetchStrategy:1
msgid "Bases: :class:`spack.fetch_strategy.URLFetchStrategy`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.CacheURLFetchStrategy:1
msgid "The resource associated with a cache URL may be out of date."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.CacheURLFetchStrategy.fetch:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.fetch:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.fetch:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.fetch:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.fetch:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.fetch:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.fetch:1
msgid "Fetch source code archive or repo."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.CacheURLFetchStrategy.fetch:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.fetch:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.fetch:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.fetch:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.fetch:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.fetch:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.fetch:3
msgid "True on success, False on failure."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.ChecksumError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.ExtrapolationError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FailedDownloadError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetcherConflict:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.InvalidArgsError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoArchiveFileError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoCacheError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoDigestError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoStageError:1
msgid "Bases: :class:`spack.fetch_strategy.FetchError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.ChecksumError:1
msgid "Raised when archive fails to checksum."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.ExtrapolationError:1
msgid "Raised when we can't extrapolate a version for a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FSMeta:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of spack.tengine.ContextMeta:1
msgid "Bases: :class:`type`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FSMeta:1
msgid "This metaclass registers all fetch strategies in a list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FailedDownloadError:1
msgid "Raised wen a download fails."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchError:1
msgid "Superclass fo fetcher errors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy:1
msgid "Superclass of all fetch strategies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.archive:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.archive:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.archive:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.archive:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.archive:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy.archive:1
msgid "Create an archive of the downloaded data for a mirror."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.archive:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.archive:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.archive:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.archive:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.archive:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy.archive:3
msgid "For downloaded files, this should preserve the checksum of the original file. For repositories, it should just create an expandable tarball out of the downloaded repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.cachable:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.cachable:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.cachable:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.cachable:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.cachable:1
msgid "Whether fetcher is capable of caching the resource it retrieves."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.cachable:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.cachable:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.cachable:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.cachable:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.cachable:3
msgid "This generally is determined by whether the resource is identifiably associated with a specific package version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.cachable:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.cachable:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.cachable:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.cachable:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.cachable:6
msgid "True if can cache, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.check:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy.check:1
msgid "Checksum the archive fetched by this FetchStrategy."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.expand:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.expand:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy.expand:1
msgid "Expand the downloaded archive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.optional_attrs:1
msgid "Optional attributes can be used to distinguish fetchers when: classes have multiple ``url_attrs`` at the top-level."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.reset:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.reset:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.reset:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.reset:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.reset:1
msgid "Revert to freshly downloaded state."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.reset:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.reset:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy.reset:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.reset:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.reset:3
msgid "For archive files, this may just re-expand the archive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.set_stage:1
msgid "This is called by Stage before any of the fetching methods are called on the stage."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.source_id:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.source_id:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.source_id:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.source_id:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.source_id:1
msgid "A unique ID for the source."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.source_id:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy.source_id:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.source_id:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy.source_id:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.source_id:3
msgid "The returned value is added to the content which determines the full hash for a package using `str()`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetchStrategy.url_attr:1
msgid "The URL attribute must be specified either at the package class level, or as a keyword argument to ``version()``.  It is used to distinguish fetchers for different versions in the package DSL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.FetcherConflict:1
msgid "Raised for packages with invalid fetch attributes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy:1
msgid "Bases: :class:`spack.fetch_strategy.VCSFetchStrategy`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:1
msgid "Fetch strategy that gets source code from a git repository. Use like this in a package:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:4
msgid "version('name', git='https://github.com/project/repo.git')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:6
msgid "Optionally, you can provide a branch, or commit to check out, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:8
msgid "version('1.1', git='https://github.com/project/repo.git', tag='v1.1')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:10
msgid "You can use these three optional attributes in addition to ``git``:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:12
msgid "``branch``: Particular branch to build from (default is the"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:13
msgid "repository's default branch)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:14
msgid "``tag``: Particular tag to check out"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GitFetchStrategy:15
msgid "``commit``: Particular commit hash in the repo"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy:1
msgid "Fetch strategy that employs the `go get` infrastructure."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy:3
msgid "Use like this in a package:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy:6
msgid "version('name',"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy:6
msgid "go='github.com/monochromegane/the_platinum_searcher/...')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.GoFetchStrategy:8
msgid "Go get does not natively support versions, they can be faked with git"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:1
msgid "Fetch strategy that gets source code from a Mercurial repository. Use like this in a package:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:4
msgid "version('name', hg='https://jay.grs.rwth-aachen.de/hg/lwm2')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:6
msgid "Optionally, you can provide a branch, or revision to check out, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:9
msgid "version('torus',"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:9
msgid "hg='https://jay.grs.rwth-aachen.de/hg/lwm2', branch='torus')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:11
msgid "You can use the optional 'revision' attribute to check out a branch, tag, or particular revision in hg.  To prevent non-reproducible builds, using a moving target like a branch is discouraged."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy:16
msgid "``revision``: Particular revision, branch, or tag."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.hg:1
msgid "The hg executable :rtype: Executable"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.hg:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fullname:0
msgid "type"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.HgFetchStrategy.hg:4
msgid "returns"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.InvalidArgsError:1
msgid "Raised when a version can't be deduced from a set of arguments."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoArchiveFileError:1
msgid "\"Raised when an archive file is expected but none exists."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoCacheError:1
msgid "Raised when there is no cached archive for a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoDigestError:1
msgid "Raised after attempt to checksum when URL has no digest."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.NoStageError:1
msgid "Raised when fetch operations are called before set_stage()."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy:1
msgid "Fetch strategy that gets source code from a subversion repository. Use like this in a package:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy:4
msgid "version('name', svn='http://www.example.com/svn/trunk')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy:6
msgid "Optionally, you can provide a revision for the URL:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy:10
msgid "version('name', svn='http://www.example.com/svn/trunk',"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.SvnFetchStrategy:9
msgid "revision='1641')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy:1
msgid "Bases: :class:`spack.fetch_strategy.FetchStrategy`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy:1
msgid "FetchStrategy that pulls source code from a URL for an archive, checks the archive against a checksum,and decompresses the archive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.archive:1
msgid "Just moves this archive to the destination."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.archive_file:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage.archive_file:1
msgid "Path to the source archive within this stage directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.check:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage.check:1
msgid "Check the downloaded archive against a checksum digest. No-op if this stage checks code out of a repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.URLFetchStrategy.reset:1
msgid "Removes the source path if it exists, then re-expands the archive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy:1
msgid "Superclass for version control system fetch strategies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy:3
msgid "Like all fetchers, VCS fetchers are identified by the attributes passed to the ``version`` directive.  The optional_attrs for a VCS fetch strategy represent types of revisions, e.g. tags, branches, commits, etc."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.VCSFetchStrategy:8
msgid "The required attributes (git, svn, etc.) are used to specify the URL and to distinguish a VCS fetch strategy from a URL fetch strategy."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.all_strategies:1
msgid "List of all fetch strategies, created by FetchStrategy metaclass."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.check_pkg_attributes:1
msgid "Find ambiguous top-level fetch attributes in a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.check_pkg_attributes:3
msgid "Currently this only ensures that two or more VCS fetch strategies are not specified at once."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.for_package_version:1
msgid "Determine a fetch strategy based on the arguments supplied to version() in the package description."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:1
msgid "Construct an appropriate FetchStrategy from the given keyword arguments."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:3
msgid "dictionary of keyword arguments, e.g. from a ``version()`` directive in a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:6
msgid "The fetch strategy that matches the args, based     on attribute names (e.g., ``git``, ``hg``, etc.)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:8
msgid "The fetch strategy that matches the args, based"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:9
msgid "on attribute names (e.g., ``git``, ``hg``, etc.)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_kwargs:12
msgid "If no ``fetch_strategy`` matches the args."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_list_url:1
msgid "If a package provides a URL which lists URLs for resources by version, this can can create a fetcher for a URL discovered for the specified package's version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_url:1
msgid "Given a URL, find an appropriate fetch strategy for it. Currently just gives you a URLFetchStrategy that uses curl."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_url:4
msgid "TODO: make this return appropriate fetch strategies for other"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/fetch_strategy.py:docstring of spack.fetch_strategy.from_url:5
msgid "types of URLs."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:153
msgid "spack.filesystem\\_view module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView:1
msgid "Governs a filesystem view that is located at certain root-directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView:3
msgid "Packages are linked from their install directories into a common file hierachy."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView:6
msgid "In distributed filesystems, loading each installed package seperately can lead to slow-downs due to too many directories being traversed. This can be circumvented by loading all needed modules into a common directory structure."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.add_extension:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.add_extension:1
msgid "Add (link) an extension in this view. Does not add dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.add_specs:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.add_specs:1
msgid "Add given specs to view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.add_specs:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.add_specs:3
msgid "The supplied specs might be standalone packages or extensions of other packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.add_specs:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.add_specs:6
msgid "Should accept `with_dependencies` as keyword argument (default True) to indicate wether or not dependencies should be activated as well."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.add_specs:10
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_specs:14
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.add_specs:10
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_specs:14
msgid "Should except an `exclude` keyword argument containing a list of regexps that filter out matching spec names."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.add_specs:13
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.add_specs:13
msgid "This method should make use of `activate_{extension,standalone}`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.add_standalone:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.add_standalone:1
msgid "Add (link) a standalone package into this view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.check_added:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.check_added:1
msgid "Check if the given concrete spec is active in this view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.get_all_specs:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_all_specs:1
msgid "Get all specs currently active in this view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.get_projection_for_spec:1
msgid "Get the projection in this view for a spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.get_spec:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_spec:1
msgid "Return the actual spec linked in this view (i.e. do not look it up in the database by name)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.get_spec:4
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_spec:4
msgid "`spec` can be a name or a spec from which the name is extracted."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.get_spec:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_spec:6
msgid "As there can only be a single version active for any spec the name is enough to identify the spec in the view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.get_spec:9
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_spec:9
msgid "If no spec is present, returns None."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.print_status:4
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.print_status:4
msgid "Print a short summary about the given specs, detailing whether.."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.print_status:2
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.print_status:2
msgid "..they are active in the view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.print_status:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.print_status:3
msgid "..they are active but the activated version differs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.print_status:4
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.print_status:4
msgid "..they are not activte in the view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.print_status:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.print_status:6
msgid "Takes `with_dependencies` keyword argument so that the status of dependencies is printed as well."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_extension:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_extension:1
msgid "Remove (unlink) an extension from this view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_specs:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_specs:1
msgid "Removes given specs from view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_specs:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_specs:3
msgid "The supplied spec might be a standalone package or an extension of another package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_specs:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_specs:6
msgid "Should accept `with_dependencies` as keyword argument (default True) to indicate wether or not dependencies should be deactivated as well."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_specs:10
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_specs:10
msgid "Should accept `with_dependents` as keyword argument (default True) to indicate wether or not dependents on the deactivated specs should be removed as well."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_specs:17
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_specs:17
msgid "This method should make use of `deactivate_{extension,standalone}`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.FilesystemView.remove_standalone:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.remove_standalone:1
msgid "Remove (unlink) a standalone package from this view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView:1
msgid "Bases: :class:`spack.filesystem_view.FilesystemView`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView:1
msgid "Filesystem view to work with a yaml based directory layout."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_conflicts:1
msgid "Return list of tuples (<spec>, <spec in view>) where the spec active in the view differs from the one to be activated."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_path_meta_folder:1
msgid "Get path to meta folder for either spec or spec name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_projection_for_spec:1
msgid "Return the projection for a spec in this view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.get_projection_for_spec:3
msgid "Relies on the ordering of projections to avoid ambiguity."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/filesystem_view.py:docstring of spack.filesystem_view.YamlFilesystemView.print_conflict:1
msgid "Singular print function for spec conflicts."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:161
msgid "spack.graph module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph:1
msgid "Functions for graphing DAGs of dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph:3
msgid "This file contains code for graphing DAGs of software packages (i.e. Spack specs).  There are two main functions you probably care about:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph:7
msgid "graph_ascii() will output a colored graph of a spec in ascii format, kind of like the graph git shows with \"git log --graph\", e.g.::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph:33
msgid "graph_dot() will output a graph of a spec (or multiple specs) in dot format."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph:36
msgid "Note that ``graph_ascii`` assumes a single spec while ``graph_dot`` can take a number of specs as input."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph.topological_sort:1
msgid "Topological sort for specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph.topological_sort:3
msgid "Return a list of dependency specs sorted topologically.  The spec argument is not modified in the process."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph.AsciiGraph.write:1
msgid "Write out an ascii graph of the provided spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph.AsciiGraph.write:3
msgid "Arguments: spec -- spec to graph.  This only handles one spec at a time."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph.AsciiGraph.write:6
msgid "Optional arguments:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph.AsciiGraph.write:8
msgid "out -- file object to write out to (default is sys.stdout)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph.AsciiGraph.write:10
msgid "color -- whether to write in color.  Default is to autodetect"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph.AsciiGraph.write:11
msgid "based on output file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph.graph_dot:1
msgid "Generate a graph in dot format of all provided specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/graph.py:docstring of spack.graph.graph_dot:3
msgid "Print out a dot formatted graph of all the dependencies between package.  Output can be passed to graphviz, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:169
msgid "spack.main module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main:1
msgid "This is the implementation of the Spack command line executable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main:3
msgid "In a normal Spack installation, this is invoked from the bin/spack script after the system path is set up."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.SpackArgumentParser:1
msgid "Bases: :class:`argparse.ArgumentParser`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.SpackArgumentParser.add_command:1
msgid "Add one subcommand to this parser."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.SpackArgumentParser.add_subparsers:1
msgid "Ensure that sensible defaults are propagated to subparsers"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.SpackArgumentParser.format_help_sections:1
msgid "Format help on sections for a particular verbosity level."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.SpackArgumentParser.format_help_sections:3
msgid "'short' or 'long' (more commands shown for long)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.SpackCommand:1
msgid "Callable object that invokes a spack command (for testing)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.SpackCommand:3
msgid "Example usage::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.SpackCommand:8
msgid "Use this to invoke Spack commands directly from Python and check their output."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.SpackCommandError:1
msgid "Raised when SpackCommand execution fails."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.SpackHelpFormatter:1
msgid "Bases: :class:`argparse.RawTextHelpFormatter`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.add_all_commands:1
msgid "Add all spack subcommands to the parser."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.aliases:1
msgid "top-level aliases for Spack commands"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.allows_unknown_args:1
msgid "Implements really simple argument injection for unknown arguments."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.allows_unknown_args:3
msgid "Commands may add an optional argument called \"unknown args\" to indicate they can handle unknonwn args, and we'll pass the unknown args in."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.index_commands:1
msgid "create an index of commands by section for this help level"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.intro_by_level:1
msgid "intro text for help at different levels"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.levels:1
msgid "help levels in order of detail (i.e., number of commands shown)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.main:1
msgid "This is the entry point for the Spack command."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.main:3
msgid "command line arguments, NOT including the executable name. If None, parses from sys.argv."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.make_argument_parser:1
msgid "Create an basic argument parser without any subcommands added."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.options_by_level:1
msgid "control top-level spack options shown in basic vs. advanced help"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.print_setup_info:1
msgid "Print basic information needed by setup-env.[c]sh."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.print_setup_info:3
msgid "list of things to print: comma-separated list of 'csh', 'sh', or 'modules'"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.print_setup_info:7
msgid "This is in ``main.py`` to make it fast; the setup scripts need to invoke spack in login scripts, and it needs to be quick."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.required_command_properties:1
msgid "Properties that commands are required to set."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.section_descriptions:1
msgid "Longer text for each section, to show in help"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.section_order:1
msgid "preferential command order for some sections (e.g., build pipeline is in execution order, not alphabetical)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.set_working_dir:1
msgid "Change the working directory to getcwd, or spack prefix if no cwd."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.setup_main_options:1
msgid "Configure spack globals based on the basic options."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.spack_working_dir:1
msgid "Recorded directory where spack command was originally invoked"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/main.py:docstring of spack.main.stat_names:1
msgid "names of profile statistics"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:177
msgid "spack.mirror module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror:1
msgid "This file contains code for creating spack mirror directories.  A mirror is an organized hierarchy containing specially named archive files.  This enabled spack to know where to find files in a mirror if the main server for a particular package is down.  Or, if the computer where spack is run is not connected to the internet, it allows spack to download packages directly from a mirror (e.g., on an intranet)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.MirrorError:1
msgid "Superclass of all mirror-creation related errors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.create:1
msgid "Create a directory to be used as a spack mirror, and fill it with package archives."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.create:4
msgid "Path to create a mirror directory hierarchy in."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.create:5
msgid "Any package versions matching these specs will be added             to the mirror."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.create:7
msgid "Max number of versions to fetch per spec,             (default is 1 each spec)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.create:14
msgid "Return Value:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.create:10
msgid "Returns a tuple of lists: (present, mirrored, error)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.create:12
msgid "present:  Package specs that were already present."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.create:13
msgid "mirrored: Package specs that were successfully mirrored."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.create:14
msgid "error:    Package specs that failed to mirror due to some error."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.create:16
msgid "This routine iterates through all known package versions, and it creates specs for those versions.  If the version satisfies any spec in the specs list, it is downloaded and added to the mirror."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.get_matching_versions:1
msgid "Get a spec for EACH known version matching any spec in the list. For concrete specs, this retrieves the concrete version and, if more than one version per spec is requested, retrieves the latest versions of the package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.mirror_archive_filename:1
msgid "Get the name of the spec's archive in the mirror."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.mirror_archive_path:1
msgid "Get the relative path to the spec's archive within a mirror."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.suggest_archive_basename:1
msgid "Return a tentative basename for an archive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mirror.py:docstring of spack.mirror.suggest_archive_basename:3
msgid "if the name is not an allowed archive type."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:185
msgid "spack.mixins module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of spack.mixins:1
msgid "This module contains additional behavior that can be attached to any given package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:1
msgid "Substitutes any path referring to a Spack compiler wrapper with the path of the underlying compiler that has been used."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:4
msgid "If this isn't done, the files will have CC, CXX, F77, and FC set to Spack's generic cc, c++, f77, and f90. We want them to be bound to whatever compiler they were built with."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:8
msgid "files to be filtered relative to the search root (which is, by default, the installation prefix)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:10
msgid "allowed keyword arguments  after     specifies after which phase the files should be     filtered (defaults to 'install')  relative_root     path relative to prefix where to start searching for     the files to be filtered. If not set the install prefix     wil be used as the search root. **It is highly recommended     to set this, as searching from the installation prefix may     affect performance severely in some cases**.  ignore_absent, backup     these two keyword arguments, if present, will be forwarded     to ``filter_file`` (see its documentation for more information     on their behavior)  recursive     this keyword argument, if present, will be forwarded to     ``find`` (see its documentation for more information on the     behavior)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:10
msgid "allowed keyword arguments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:14
msgid "after"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:13
msgid "specifies after which phase the files should be filtered (defaults to 'install')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:21
msgid "relative_root"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:17
msgid "path relative to prefix where to start searching for the files to be filtered. If not set the install prefix wil be used as the search root. **It is highly recommended to set this, as searching from the installation prefix may affect performance severely in some cases**."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:26
msgid "ignore_absent, backup"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:24
msgid "these two keyword arguments, if present, will be forwarded to ``filter_file`` (see its documentation for more information on their behavior)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:30
msgid "recursive"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/mixins.py:docstring of spack.mixins.filter_compiler_wrappers:29
msgid "this keyword argument, if present, will be forwarded to ``find`` (see its documentation for more information on the behavior)"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:193
msgid "spack.multimethod module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod:1
msgid "This module contains utilities for using multi-methods in spack. You can think of multi-methods like overloaded methods -- they're methods with the same name, and we need to select a version of the method based on some criteria.  e.g., for overloaded methods, you would select a version of the method to call based on the types of its arguments."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod:8
msgid "In spack, multi-methods are used to ease the life of package authors.  They allow methods like install() (or other methods called by install()) to declare multiple versions to be called when the package is instantiated with different specs.  e.g., if the package is built with OpenMPI on x86_64,, you might want to call a different install method than if it was built for mpich2 on BlueGene/Q.  Likewise, you might want to do a different type of install for different versions of the package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod:17
msgid "Multi-methods provide a simple decorator-based syntax for this that avoids overly complicated rat nests of if statements.  Obviously, depending on the scenario, regular old conditionals might be clearer, so package authors should use their judgement."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.MultiMethodError:1
msgid "Superclass for multimethod dispatch errors"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.NoSuchMethodError:1
msgid "Raised when we can't find a version of a multi-method."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:1
msgid "This implements a multi-method for Spack specs.  Packages are instantiated with a particular spec, and you may want to execute different versions of methods based on what the spec looks like.  For example, you might want to call a different version of install() for one platform than you call on another."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:7
msgid "The SpecMultiMethod class implements a callable object that handles method dispatch.  When it is called, it looks through registered methods and their associated specs, and it tries to find one that matches the package's spec.  If it finds one (and only one), it will call that method."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:13
msgid "This is intended for use with decorators (see below).  The decorator (see docs below) creates SpecMultiMethods and registers method versions with them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:19
msgid "To register a method, you can do something like this:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:18
msgid "mm = SpecMultiMethod() mm.register(\"^chaos_5_x86_64_ib\", some_method)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:21
msgid "The object registered needs to be a Spec or some string that will parse to be a valid spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:24
msgid "When the mm is actually called, it selects a version of the method to call based on the sys_type of the object it is called on."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod:28
msgid "See the docs for decorators below for more details."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.SpecMultiMethod.register:1
msgid "Register a version of a method for a particular spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.when:1
msgid "This annotation lets packages declare multiple versions of methods like install() that depend on the package's spec. For example:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.when:22
msgid "This allows each package to have a default version of install() AND specialized versions for particular platforms.  The version that is called depends on the architecutre of the instantiated package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.when:26
msgid "Note that this works for methods other than install, as well.  So, if you only have part of the install that is platform specific, you could do this:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/multimethod.py:docstring of spack.multimethod.when:53
msgid "Note that the default version of decorated methods must *always* come first.  Otherwise it will override all of the platform-specific versions.  There's not much we can do to get around this because of the way decorators work."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:201
msgid "spack.package module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package:1
msgid "This is where most of the action happens in Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package:3
msgid "The spack package class structure is based strongly on Homebrew (http://brew.sh/), mainly because Homebrew makes it very easy to create packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.ActivationError:1
msgid "Bases: :class:`spack.package.ExtensionError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.ActivationError:1
msgid "Raised when there are problems activating an extension."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.DependencyConflictError:1
msgid "Raised when the dependencies cannot be flattened as asked for."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.ExtensionError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.NoURLError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageVersionError:1
msgid "Bases: :class:`spack.package.PackageError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.ExtensionError:1
msgid "Superclass for all errors having to do with extension packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.ExternalPackageError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageStillNeededError:1
msgid "Bases: :class:`spack.package.InstallError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.ExternalPackageError:1
msgid "Raised by install() when a package is only for external use."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.FetchError:1
msgid "Raised when something goes wrong during fetch."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.InstallError:1
msgid "Raised when something goes wrong during install or uninstall."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.InstallPhase:1
msgid "Manages a single phase of the installation."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.InstallPhase:3
msgid "This descriptor stores at creation time the name of the method it should search for execution. The method is retrieved at __get__ time, so that it can be overridden by subclasses of whatever class declared the phases."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.InstallPhase:7
msgid "It also provides hooks to execute arbitrary callbacks before and after the phase."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.NoURLError:1
msgid "Raised when someone tries to build a URL for a package with no URLs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.Package:1
msgid "Bases: :class:`spack.package.PackageBase`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.Package:1
msgid "General purpose class with a single ``install`` phase that needs to be coded by packagers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.Package.build_system_class:1
msgid "This attribute is used in UI queries that require to know which build-system class we are using"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.Package.phases:1
msgid "The one and only phase"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:1
msgid "Bases: :class:`spack.package.PackageViewMixin`, :class:`object`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:1
msgid "This is the superclass for all spack packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:3
msgid "***The Package class***"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:5
msgid "A package defines how to fetch, verify (via, e.g., sha256), build, and install a piece of software.  A Package also defines what other packages it depends on, so that dependencies can be installed along with the package itself.  Packages are written in pure python by users of Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:11
msgid "There are two main parts of a Spack package:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:13
msgid "**The package class**.  Classes contain ``directives``, which are special functions, that add metadata (versions, patches, dependencies, and other information) to packages (see ``directives.py``). Directives provide the constraints that are used as input to the concretizer."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:19
msgid "**Package instances**. Once instantiated, a package is essentially an installer for a particular piece of software. Spack calls methods like ``do_install()`` on the ``Package`` object, and it uses those to drive user-implemented methods like ``patch()``, ``install()``, and other build steps. To install software, An instantiated package needs a *concrete* spec, which guides the behavior of the various install methods."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:27
msgid "Packages are imported from repos (see ``repo.py``)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:29
msgid "**Package DSL**"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:31
msgid "Look in ``lib/spack/docs`` or check https://spack.readthedocs.io for the full documentation of the package domain-specific language.  That used to be partially documented here, but as it grew, the docs here became increasingly out of date."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:36
msgid "**Package Lifecycle**"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:38
msgid "A package's lifecycle over a run of Spack looks something like this:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:50
msgid "There are also some other commands that clean the build area:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:58
msgid "The convention used here is that a ``do_*`` function is intended to be called internally by Spack commands (in spack.cmd).  These aren't for package writers to override, and doing so may break the functionality of the Package class."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:63
msgid "Package creators have a lot of freedom, and they could technically override anything in this class.  That is not usually required."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase:66
msgid "For most use cases.  Package creators typically just add attributes like ``url`` and ``homepage``, or functions like ``install()``. There are many custom ``Package`` subclasses in the ``spack.build_systems`` package that make things even easier for specific build systems."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.activate:1
msgid "Add the extension to the specified view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.activate:3
msgid "Package authors can override this function to maintain some centralized state related to the set of activated extensions for a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.activate:7
msgid "Spack internals (commands, hooks, etc.) should call do_activate() method so that proper checks are always executed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.all_urls:1
msgid "A list of all URLs in a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.all_urls:3
msgid "Check both class-level and version-specific URLs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.all_urls:5
msgid "a list of URLs"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.architecture:1
msgid "Get the spack.architecture.Arch object that represents the environment in which this package will be built."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.archive_files:1
msgid "List of glob expressions. Each expression must either be absolute or relative to the package source path. Matching artifacts found at the end of the build process will be copied in the same directory tree as build.env and build.out."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.bootstrap_compiler:1
msgid "Called by do_install to setup ensure Spack has the right compiler."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.bootstrap_compiler:3
msgid "Checks Spack's compiler configuration for a compiler that matches the package spec. If none are configured, installs and adds to the compiler configuration the compiler matching the CompilerSpec object."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.build_system_flags:1
msgid "flag_handler that passes flags to the build system arguments.  Any package using `build_system_flags` must also implement `flags_to_build_system_args`, or derive from a class that implements it.  Currently, AutotoolsPackage and CMakePackage implement it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.check_for_unfinished_installation:1
msgid "Check for leftover files from partially-completed prior install to prepare for a new install attempt."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.check_for_unfinished_installation:4
msgid "Options control whether these files are reused (vs. destroyed)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.check_for_unfinished_installation:6
msgid "True if the installation prefix needs to be kept, False otherwise"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.check_for_unfinished_installation:9
msgid "False if the stage has to be kept, True otherwise"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.check_for_unfinished_installation:12
msgid "True if the prefix exists but the install is not complete, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.compiler:1
msgid "Get the spack.compiler.Compiler object used to build this package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.content_hash:1
msgid "Create a hash based on the sources and logic used to build the package. This includes the contents of all applied patches and the contents of applicable functions in the package subclass."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.deactivate:1
msgid "Remove all extension files from the specified view."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.deactivate:3
msgid "Package authors can override this method to support other extension mechanisms.  Spack internals (commands, hooks, etc.) should call do_deactivate() method so that proper checks are always executed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.dependencies_of_type:1
msgid "Get dependencies that can possibly have these deptypes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.dependencies_of_type:3
msgid "This analyzes the package and determines which dependencies *can* be a certain kind of dependency. Note that they may not *always* be this kind of dependency, since dependencies can be optional, so something may be a build dependency in one configuration and a run dependency in another."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_activate:1
msgid "Called on an extension to invoke the extendee's activate method."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_activate:3
msgid "Commands should call this routine, and should not call activate() directly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_clean:1
msgid "Removes the package's build stage and source tarball."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_deactivate:1
msgid "Remove this extension package from the specified view. Called on the extension to invoke extendee's deactivate() method."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_deactivate:4
msgid "`remove_dependents=True` deactivates extensions depending on this package instead of raising an error."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_fake_install:1
msgid "Make a fake install directory containing fake executables, headers, and libraries."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_fetch:1
msgid "Creates a stage directory and downloads the tarball for this package. Working directory will be set to the stage directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:1
msgid "Called by commands to install a package and its dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:3
msgid "Package implementations should override install() to describe their build process."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:6
msgid "Keep install prefix on failure. By default, destroys it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:9
msgid "By default, stage is destroyed only if there are no exceptions during build. Set to True to keep the stage even with exceptions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:13
msgid "By default, source is not installed, but for debugging it might be useful to keep it around."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:16
msgid "Install dependencies before installing this package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:19
msgid "Skip patch stage of build if True."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:21
msgid "Display verbose build output (by default, suppresses it)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:24
msgid "Don't really build; install fake stub files instead."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:26
msgid "True if package was explicitly installed, False if package was implicitly installed (as a dependency)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:29
msgid "False to run no tests, True to test all packages, or a list of package names to run tests for some"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:32
msgid "Don't clean the build environment before installing."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:34
msgid "Force spack to restage the package source."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:36
msgid "Install again, even if already installed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:38
msgid "Install from binary package, if available."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_install:40
msgid "last installation phase to be executed (or None)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_patch:1
msgid "Applies patches if they haven't been applied already."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_restage:1
msgid "Reverts expanded/checked out source to a pristine state."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_stage:1
msgid "Unpacks and expands the fetched tarball."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.do_uninstall:1
msgid "Uninstall this package by spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.env_flags:1
msgid "flag_handler that adds all flags to canonical environment variables."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.extendable:1
msgid "Most packages are NOT extendable. Set to True if you want extensions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.extendee_args:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.extendee_spec:1
msgid "Spec of the extendee of this package, or None if it is not an extension"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.extends:1
msgid "Returns True if this package extends the given spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.extends:3
msgid "If ``self.spec`` is concrete, this returns whether this package extends the given spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.extends:6
msgid "If ``self.spec`` is not concrete, this returns whether this package may extend the given spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fetch_remote_versions:1
msgid "Find remote versions of this package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fetch_remote_versions:3
msgid "Uses ``list_url`` and any other URLs listed in the package file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fetch_remote_versions:5
msgid "a dictionary mapping versions to URLs"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.flag_handler:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.inject_flags:1
msgid "flag_handler that injects all flags through the compiler wrapper."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.format_doc:1
msgid "Wrap doc string at 72 characters and format nicely"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fullname:1
msgid "namespace.name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.fullname:3
msgid "Name of this package, including namespace"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.global_license_dir:1
msgid "Returns the directory where global license files for all packages are stored."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.global_license_file:1
msgid "Returns the path where a global license file for this particular package should be stored."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.installed:1
msgid "Installation status of a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.installed:3
msgid "True if the package has been installed, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.is_activated:1
msgid "Return True if package is activated."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.license_comment:1
msgid "String. Contains the symbol used by the license manager to denote a comment. Defaults to ``#``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.license_files:1
msgid "List of strings. These are files that the software searches for when looking for a license. All file paths must be relative to the installation directory. More complex packages like Intel may require multiple licenses for individual components. Defaults to the empty list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.license_required:1
msgid "Boolean. If set to ``True``, this software requires a license. If set to ``False``, all of the ``license_*`` attributes will be ignored. Defaults to ``False``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.license_url:1
msgid "String. A URL pointing to license setup instructions for the software. Defaults to the empty string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.license_vars:1
msgid "List of strings. Environment variables that can be set to tell the software where to look for a license if it is not in the usual location. Defaults to the empty list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.maintainers:1
msgid "List of strings which contains GitHub usernames of package maintainers. Do not include @ here in order not to unnecessarily ping the users."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.metadata_attrs:1
msgid "List of attributes which affect do not affect a package's content."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.nearest_url:1
msgid "Finds the URL with the \"closest\" version to ``version``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.nearest_url:3
msgid "This uses the following precedence order:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.nearest_url:5
msgid "Find the next lowest or equal version with a URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.nearest_url:6
msgid "If no lower URL, return the next *higher* URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.nearest_url:7
msgid "If no higher URL, return None."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.parallel:1
msgid "By default we build in parallel.  Subclasses can override this."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.possible_dependencies:1
msgid "Return set of possible dependencies of this package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.possible_dependencies:3
msgid "Note: the set returned *includes* the package itself."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.possible_dependencies:5
msgid "return all transitive dependencies if True, only direct dependencies if False."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.possible_dependencies:8
msgid "expand virtual dependencies into all possible implementations."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.possible_dependencies:11
msgid "set of names of dependencies visited so far."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.prefix:1
msgid "Get the prefix into which this package should be installed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.provides:1
msgid "True if this package provides a virtual package with the specified name"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.remove_prefix:1
msgid "Removes the prefix for a package along with any empty parent directories"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.rpath:1
msgid "Get the rpath this package links with, as a list of paths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.rpath_args:1
msgid "Get the rpath args as a string, with -Wl,-rpath, for each element"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.run_tests:1
msgid "By default do not run tests within package's install()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.sanity_check_is_dir:1
msgid "List of prefix-relative directory paths (or a single path). If these do not exist after install, or if they exist but are not directories, sanity checks will fail."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.sanity_check_is_file:1
msgid "List of prefix-relative file paths (or a single path). If these do not exist after install, or if they exist but are not files, sanity checks fail."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.sanity_check_prefix:1
msgid "This function checks whether install succeeded."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:1
msgid "Set up the environment of packages that depend on this one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:3
msgid "This is similar to ``setup_environment``, but it is used to modify the compile and runtime environments of packages that *depend* on this one. This gives packages like Python and others that follow the extension model a way to implement common environment or compile-time settings for dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:9
msgid "This is useful if there are some common steps to installing all extensions for a certain package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:12
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:16
msgid "Example:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:14
msgid "Installing python modules generally requires ``PYTHONPATH`` to point to the ``lib/pythonX.Y/site-packages`` directory in the module's install prefix. This method could be used to set that variable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:18
msgid "List of environment modifications to be applied when the dependent package is built within Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:22
msgid "List of environment modifications to be applied when the dependent package is run outside of Spack. These are added to the resulting module file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_environment:27
msgid "The spec of the dependent package about to be built. This allows the extendee (self) to query the dependent's state. Note that *this* package's spec is available as ``self.spec``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:1
msgid "Set up Python module-scope variables for dependent packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:3
msgid "Called before the install() method of dependents."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:5
msgid "Default implementation does nothing, but this can be overridden by an extendable package to set up the module of its extensions. This is useful if there are some common steps to installing all extensions for a certain package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:10
msgid "Examples:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:12
msgid "Extensions often need to invoke the ``python`` interpreter from the Python installation being extended. This routine can put a ``python()`` Executable object in the module scope for the extension package to simplify extension installs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:17
msgid "MPI compilers could set some variables in the dependent's scope that point to ``mpicc``, ``mpicxx``, etc., allowing them to be called by common name regardless of which MPI is used."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:21
msgid "BLAS/LAPACK implementations can set some variables indicating the path to their libraries, since these paths differ by BLAS/LAPACK implementation."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:25
msgid "The Python ``module`` object of the dependent package. Packages can use this to set module-scope variables for the dependent to use."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_dependent_package:29
msgid "The spec of the dependent package about to be built. This allows the extendee (self) to query the dependent's state.  Note that *this* package's spec is available as ``self.spec``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:1
msgid "Set up the compile and runtime environments for a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:3
msgid "``spack_env`` and ``run_env`` are ``EnvironmentModifications`` objects. Package authors can call methods on them to alter the environment within Spack and at runtime."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:7
msgid "Both ``spack_env`` and ``run_env`` are applied within the build process, before this package's ``install()`` method is called."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:10
msgid "Modifications in ``run_env`` will *also* be added to the generated environment modules for this package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:13
msgid "Default implementation does nothing, but this can be overridden if the package needs a particular environment."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:18
msgid "Qt extensions need ``QTDIR`` set."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:20
msgid "List of environment modifications to be applied when this package is built within Spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.setup_environment:24
msgid "List of environment modifications to be applied when this package is run outside of Spack. These are added to the resulting module file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.stage:1
msgid "Get the build staging area for this package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.stage:3
msgid "This automatically instantiates a ``Stage`` object if the package doesn't have one yet, but it does not create the Stage directory on the filesystem."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.transitive_rpaths:1
msgid "When True, add RPATHs for the entire DAG. When False, add RPATHs only for immediate dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.unit_test_check:1
msgid "Hook for unit tests to assert things about package internals."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.unit_test_check:3
msgid "Unit tests can override this function to perform checks after ``Package.install`` and all post-install hooks run, but before the database is updated."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.unit_test_check:7
msgid "The overridden function may indicate that the install procedure should terminate early (before updating the database) by returning ``False`` (or any value such that ``bool(result)`` is ``False``)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.unit_test_check:12
msgid "``True`` to continue, ``False`` to skip ``install()``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.url_for_version:1
msgid "Returns a URL from which the specified version of this package may be downloaded."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.url_for_version:5
msgid "version: class Version"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.url_for_version:5
msgid "The version for which a URL is sought."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.url_for_version:7
msgid "See Class Version (version.py)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.url_version:1
msgid "Given a version, this returns a string that should be substituted into the package's URL to download that version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.url_version:4
msgid "By default, this just returns the version string. Subclasses may need to override this, e.g. for boost versions where you need to ensure that there are _'s in the download URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.use_xcode:1
msgid "By default do not setup mockup XCode on macOS with Clang"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.version_urls:1
msgid "OrderedDict of explicitly defined URLs for versions of this package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.version_urls:3
msgid "An OrderedDict (version -> URL) different versions of this package, sorted by version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.version_urls:6
msgid "A version's URL only appears in the result if it has an an explicitly defined ``url`` argument. So, this list may be empty if a package only defines ``url`` at the top level."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageBase.view:1
msgid "Create a view with the prefix of this package as the root. Extensions added to this view will modify the installation prefix of this package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageError:1
msgid "Raised when something is wrong with a package definition."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageMeta:1
msgid "Bases: :class:`spack.directives.DirectiveMeta`, :class:`spack.mixins.PackageMixinsMeta`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageMeta:1
msgid "Conveniently transforms attributes to permit extensible phases"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageMeta:3
msgid "Iterates over the attribute 'phases' and creates / updates private InstallPhase attributes in the class that is being initialized"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageMeta.fullname:1
msgid "Name of this package, including the namespace"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageMeta.module:1
msgid "Module object (not just the name) that this package is defined in."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageMeta.module:3
msgid "We use this to add variables to package modules.  This makes install() methods easier to write (e.g., can call configure())"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageMeta.namespace:1
msgid "Spack namespace for the package, which identifies its repo."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageMeta.package_dir:1
msgid "Directory where the package.py file lives."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageStillNeededError:1
msgid "Raised when package is still needed by another on uninstall."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageVersionError:1
msgid "Raised when a version URL cannot automatically be determined."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageViewMixin:1
msgid "This collects all functionality related to adding installed Spack package to views. Packages can customize how they are added to views by overriding these functions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageViewMixin.add_files_to_view:1
msgid "Given a map of package files to destination paths in the view, add the files to the view. By default this adds all files. Alternative implementations may skip some files, for example if other packages linked into the view already include the file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageViewMixin.remove_files_from_view:1
msgid "Given a map of package files to files currently linked in the view, remove the files from the view. The default implementation removes all files. Alternative implementations may not remove all files. For example if two packages include the same file, it should only be removed when both packages are removed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageViewMixin.view_destination:1
msgid "The target root directory: each file is added relative to this directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageViewMixin.view_file_conflicts:1
msgid "Report any files which prevent adding this package to the view. The default implementation looks for any files which already exist. Alternative implementations may allow some of the files to exist in the view (in this case they would be omitted from the results)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.PackageViewMixin.view_source:1
msgid "The source root directory that will be added to the view: files are added such that their path relative to the view destination matches their path relative to the view source."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.dump_packages:1
msgid "Dump all package information for a spec and its dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.dump_packages:3
msgid "This creates a package repository within path for every namespace in the spec DAG, and fills the repos wtih package files and patch files for every node in the DAG."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.flatten_dependencies:1
msgid "Make each dependency of spec present in dir via symlink."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.install_dependency_symlinks:1
msgid "Execute a dummy install and flatten dependencies"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.on_package_attributes:1
msgid "Decorator: executes instance function only if object has attr valuses."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.on_package_attributes:3
msgid "Executes the decorated method only if at the moment of calling the instance has attributes that are equal to certain values."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.on_package_attributes:6
msgid "dictionary mapping attribute names to their required values"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.print_pkg:1
msgid "Outputs a message with a package icon."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.run_after:1
msgid "Registers a method of a package to be run after a given phase"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.run_before:1
msgid "Registers a method of a package to be run before a given phase"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package.py:docstring of spack.package.use_cray_compiler_names:1
msgid "Compiler names for builds that rely on cray compiler names."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:209
msgid "spack.package\\_prefs module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:1
msgid "Defines the sort order for a set of specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:3
msgid "Spack's package preference implementation uses PackagePrefss to define sort order. The PackagePrefs class looks at Spack's packages.yaml configuration and, when called on a spec, returns a key that can be used to sort that spec in order of the user's preferences."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:9
msgid "You can use it like this:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:11
msgid "# key function sorts CompilerSpecs for `mpich` in order of preference kf = PackagePrefs('mpich', 'compiler') compiler_list.sort(key=kf)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:15
msgid "Or like this:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:17
msgid "# key function to sort VersionLists for OpenMPI in order of preference. kf = PackagePrefs('openmpi', 'version') version_list.sort(key=kf)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:21
msgid "Optionally, you can sort in order of preferred virtual dependency providers.  To do that, provide 'providers' and a third argument denoting the virtual package (e.g., ``mpi``):"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs:25
msgid "kf = PackagePrefs('trilinos', 'providers', 'mpi') provider_spec_list.sort(key=kf)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs.has_preferred_providers:1
msgid "Whether specific package has a preferred vpkg providers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs.order_for_package:1
msgid "Given a package name, sort component (e.g, version, compiler, ...), and an optional vpkg, return the list from the packages config."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.PackagePrefs.preferred_variants:1
msgid "Return a VariantMap of preferred variants/values for a spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.VirtualInPackagesYAMLError:1
msgid "Raised when a disallowed virtual is found in packages.yaml"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.get_package_dir_permissions:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.get_package_permissions:1
msgid "Return the permissions configured for the spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.get_package_dir_permissions:3
msgid "Include the GID bit if group permissions are on. This makes the group attribute sticky for the directory. Package-specific settings take precedent over settings for ``all``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.get_package_group:1
msgid "Return the unix group associated with the spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.get_package_group:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.get_package_permissions:3
msgid "Package-specific settings take precedence over settings for ``all``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.get_packages_config:1
msgid "Wrapper around get_packages_config() to validate semantics."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.is_spec_buildable:1
msgid "Return true if the spec pkgspec is configured as buildable"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_prefs.py:docstring of spack.package_prefs.spec_externals:1
msgid "Return a list of external specs (w/external directory path filled in), one for each known external installation."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:217
msgid "spack.package\\_test module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_test.py:docstring of spack.package_test.compare_output:1
msgid "Compare blessed and current output of executables."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_test.py:docstring of spack.package_test.compare_output_file:1
msgid "Same as above, but when the blessed output is given as a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/package_test.py:docstring of spack.package_test.compile_c_and_execute:1
msgid "Compile C @p source_file with @p include_flags and @p link_flags, run and return the output."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:225
msgid "spack.parse module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.LexError:1
msgid "Bases: :class:`spack.parse.ParseError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.LexError:1
msgid "Raised when we don't know how to lex something."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.Lexer:1
msgid "Base class for Lexers that keep track of line numbers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.ParseError:1
msgid "Raised when we don't hit an error while parsing."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.Parser:1
msgid "Base class for simple recursive descent parsers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.Parser.accept:1
msgid "Put the next symbol in self.token if accepted, then call gettok()"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.Parser.expect:1
msgid "Like accept(), but fails if we don't like the next token."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.Parser.gettok:1
msgid "Puts the next token in the input stream into self.next."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.Parser.last_token_error:1
msgid "Raise an error about the previous token in the stream."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.Parser.next_token_error:1
msgid "Raise an error about the next token in the stream."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.Parser.push_tokens:1
msgid "Adds all tokens in some iterable to the token stream."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/parse.py:docstring of spack.parse.Token:1
msgid "Represents tokens; generated from input by lexer and fed to parse()."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:233
msgid "spack.patch module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch:1
msgid "Bases: :class:`spack.patch.Patch`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch:1
msgid "Describes a patch that is retrieved from a file in the repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch:3
msgid "the class object for the package that owns the patch"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch:5
msgid "path to patch, relative to the repository directory for a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch:8
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch:7
msgid "level to pass to patch command"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch:10
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch:9
msgid "path within the source directory where patch should be applied"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.FilePatch.to_dict:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.Patch.to_dict:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch.to_dict:1
msgid "Partial dictionary -- subclases should add to this."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.NoSuchPatchError:1
msgid "Raised when a patch file doesn't exist."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.Patch:1
msgid "Base class for patches."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.Patch:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch:3
msgid "the package that owns the patch"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.Patch:6
msgid "The owning package is not necessarily the package to apply the patch to -- in the case where a dependent package patches its dependency, it is the dependent's fullname."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.Patch.apply:1
msgid "Apply a patch to source in a stage."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.Patch.apply:3
msgid "stage where source code lives"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.Patch.clean:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch.clean:1
msgid "Clean up the patch stage in case of a UrlPatch"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.Patch.fetch:1
msgid "Fetch the patch in case of a UrlPatch"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.Patch.fetch:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch.fetch:3
msgid "stage for the package that needs to be patched"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache:1
msgid "Index of patches used in a repository, by sha256 hash."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache:3
msgid "This allows us to look up patches without loading all packages.  It's also needed to properly implement dependency patching, as need a way to look up patches that come from packages not in the Spec sub-DAG."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache:7
msgid "The patch index is structured like this in a file (this is YAML, but we write JSON)::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache.patch_for_package:1
msgid "Look up a patch in the index and build a patch object for it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache.patch_for_package:3
msgid "sha256 hash to look up"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache.patch_for_package:5
msgid "Package object to get patch for."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache.patch_for_package:8
msgid "We build patch objects lazily because building them requires that we have information about the package's location in its repo."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.PatchCache.update:1
msgid "Update this cache with the contents of another."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.PatchDirectiveError:1
msgid "Raised when the wrong arguments are suppled to the patch directive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch:1
msgid "Describes a patch that is retrieved from a URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch:5
msgid "URL where the patch can be fetched"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.UrlPatch.fetch:1
msgid "Retrieve the patch in a temporary stage and compute self.path"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.apply_patch:1
msgid "Apply the patch at patch_path to code in the stage."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.apply_patch:3
msgid "stage with code that will be patched"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.apply_patch:5
msgid "filesystem location for the patch to apply"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.apply_patch:7
msgid "patch level (default 1)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.apply_patch:9
msgid "relative path *within* the stage to change to (default '.')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/patch.py:docstring of spack.patch.from_dict:1
msgid "Create a patch from json dictionary."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:241
msgid "spack.paths module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/paths.py:docstring of spack.paths:1
msgid "Defines paths that are part of Spack's directory structure."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/paths.py:docstring of spack.paths:3
msgid "Do not import other ``spack`` modules here. This module is used throughout Spack and should bring in a minimal number of external dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/paths.py:docstring of spack.paths.bin_path:1
msgid "bin directory in the spack prefix"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/paths.py:docstring of spack.paths.prefix:1
msgid "This file lives in $prefix/lib/spack/spack/__file__"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/paths.py:docstring of spack.paths.spack_root:1
msgid "synonym for prefix"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/paths.py:docstring of spack.paths.spack_script:1
msgid "The spack script itself"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/paths.py:docstring of spack.paths.user_config_path:1
msgid "User configuration location"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:249
msgid "spack.pkgkit module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/pkgkit.py:docstring of spack.pkgkit:1
msgid "pkgkit is a set of useful build tools and directives for packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/pkgkit.py:docstring of spack.pkgkit:3
msgid "Everything in this module is automatically imported into Spack package files."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:257
msgid "spack.provider\\_index module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index:1
msgid "The ``virtual`` module contains utility classes for virtual dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:1
msgid "This is a dict of dicts used for finding providers of particular virtual dependencies. The dict of dicts looks like:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:5
msgid "{ vpkg name :"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:5
msgid "{ full vpkg spec : set(packages providing spec) } }"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:7
msgid "Callers can use this to first find which packages provide a vpkg, then find a matching full spec.  e.g., in this scenario:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:12
msgid "{ 'mpi' :"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:12
msgid "{ mpi@:1.1"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:12
msgid "mpi@:2.3 : set([mpich2@1.9:]) } }"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex:14
msgid "Calling providers_for(spec) will find specs that provide a matching implementation of MPI."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex.copy:1
msgid "Deep copy of this ProviderIndex."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex.merge:1
msgid "Merge `other` ProviderIndex into this one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex.providers_for:1
msgid "Gives specs of all packages that provide virtual packages with the supplied specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex.remove_provider:1
msgid "Remove a provider from the ProviderIndex."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndex.satisfies:1
msgid "Check that providers of virtual specs are compatible."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/provider_index.py:docstring of spack.provider_index.ProviderIndexError:1
msgid "Raised when there is a problem with a ProviderIndex."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:265
msgid "spack.relocate module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.InstallRootStringException:1
msgid "Raised when the relocated binary still has the install root string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.file_is_relocatable:1
msgid "Returns True if the file passed as argument is relocatable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.file_is_relocatable:3
msgid "absolute path of the file to be analyzed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.file_is_relocatable:5
msgid "True or false"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.file_is_relocatable:7
msgid "if the file does not exist or the path is not absolute"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.get_existing_elf_rpaths:1
msgid "Return the RPATHS returned by patchelf --print-rpath path_name as a list of strings."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.get_patchelf:1
msgid "Builds and installs spack patchelf package on linux platforms using the first concretized spec. Returns the full patchelf binary path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.get_placeholder_rpaths:1
msgid "Replaces original layout root dir with a placeholder string in all rpaths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.get_relative_rpaths:1
msgid "Replaces orig_dir with relative path from dirname(path_name) if an rpath in orig_rpaths contains orig_path. Prefixes $ORIGIN to relative paths and returns replacement rpaths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.is_binary:1
msgid "Returns true if a file is binary, False otherwise"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.is_binary:3
msgid "file to be tested"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.is_binary:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.compatible:8
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.constrain:7
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.satisfies:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant.satisfies:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.compatible:8
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.constrain:7
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.satisfies:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.concrete:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.constrain:8
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.satisfies:11
msgid "True or False"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.is_relocatable:1
msgid "Returns True if an installed spec is relocatable."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.is_relocatable:3
msgid "spec to be analyzed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.is_relocatable:6
msgid "True if the binaries of an installed spec are relocatable and False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.is_relocatable:9
msgid "if the spec is not installed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.macho_get_paths:1
msgid "Examines the output of otool -l path_name for these three fields: LC_ID_DYLIB, LC_LOAD_DYLIB, LC_RPATH and parses out the rpaths, dependiencies and library id. Returns these values."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.macho_make_paths_placeholder:1
msgid "Replace old_dir with a placeholder of the same length in rpaths and deps and idpaths is needed. replacement are returned."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.macho_make_paths_relative:1
msgid "Replace old_dir with relative path from dirname(path_name) in rpaths and deps; idpaths are replaced with @rpath/libname as needed; replacement are returned."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.macho_replace_paths:1
msgid "Replace old_dir with new_dir in rpaths, deps and idpath and return replacements"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.make_binary_placeholder:1
msgid "Replace old install root in RPATHs with placeholder in binary files"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.make_binary_relative:1
msgid "Replace old RPATHs with paths relative to old_dir in binary files"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.make_link_placeholder:1
msgid "Replace old install path with placeholder in absolute links."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.make_link_placeholder:3
msgid "Links in ``cur_path_names`` must link to absolute paths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.make_link_relative:1
msgid "Change absolute links to be relative."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.mime_type:1
msgid "Returns the mime type and subtype of a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.mime_type:3
msgid "file to be analyzed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.mime_type:5
msgid "Tuple containing the MIME type and subtype"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.modify_elf_object:1
msgid "Replace orig_rpath with new_rpath in RPATH of elf object path_name"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.modify_macho_object:1
msgid "Modify MachO binary path_name by replacing old_dir with new_dir or the relative path to spack install root. The old install dir in LC_ID_DYLIB is replaced with the new install dir using install_name_tool -id newid binary The old install dir in LC_LOAD_DYLIB is replaced with the new install dir using install_name_tool -change old new binary The old install dir in LC_RPATH is replaced with the new install dir using install_name_tool  -rpath old new binary"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.needs_binary_relocation:1
msgid "Check whether the given filetype is a binary that may need relocation."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.needs_text_relocation:1
msgid "Check whether the given filetype is text that may need relocation."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.relocate_binary:1
msgid "Change old_dir to new_dir in RPATHs of elf or mach-o files Account for the case where old_dir is now a placeholder"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.relocate_links:1
msgid "Replace old path with new path in link sources."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.relocate_links:3
msgid "Links in ``path_names`` must link to absolute paths or placeholders."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.relocate_text:1
msgid "Replace old path with new path in text file path_name"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.set_placeholder:1
msgid "return string of @'s with same length"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.strings_contains_installroot:1
msgid "Check if the file contain the install root string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/relocate.py:docstring of spack.relocate.substitute_rpath:1
msgid "Replace topdir with new_root_path RPATH list orig_rpath"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:273
msgid "spack.repo module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.BadRepoError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.FailedConstructorError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.IndexError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.InvalidNamespaceError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.NoRepoConfiguredError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.UnknownEntityError:1
msgid "Bases: :class:`spack.repo.RepoError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.BadRepoError:1
msgid "Raised when repo layout is invalid."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.FailedConstructorError:1
msgid "Raised when a package's class constructor fails."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.FastPackageChecker:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.TagIndex:1
msgid "Bases: :class:`collections.abc.Mapping`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.FastPackageChecker:1
msgid "Cache that maps package names to the stats obtained on the 'package.py' files associated with them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.FastPackageChecker:4
msgid "For each repository a cache is maintained at class level, and shared among all instances referring to it. Update of the global cache is done lazily during instance initialization."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.IndexError:1
msgid "Raised when there's an error with an index."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Indexer:1
msgid "Adaptor for indexes that need to be generated when repos are updated."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.needs_update:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.needs_update:1
msgid "Whether an update is needed when the package file hasn't changed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.needs_update:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.needs_update:3
msgid "``True`` if this package needs its index     updated, ``False`` otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.needs_update:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.needs_update:5
msgid "``True`` if this package needs its index"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.needs_update:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.needs_update:6
msgid "updated, ``False`` otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.needs_update:9
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.needs_update:9
msgid "We already automatically update indexes when package files change, but other files (like patches) may change underneath the package file. This method can be used to check additional package-specific files whenever they're loaded, to tell the RepoIndex to update the index *just* for that package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.read:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.read:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.ProviderIndexer.read:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.TagIndexer.read:1
msgid "Read this index from a provided file object."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.update:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.update:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.ProviderIndexer.update:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.TagIndexer.update:1
msgid "Update the index in memory with information about a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Indexer.write:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer.write:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.ProviderIndexer.write:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.TagIndexer.write:1
msgid "Write the index to a file object."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.InvalidNamespaceError:1
msgid "Raised when an invalid namespace is encountered."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.NOT_PROVIDED:1
msgid "Guaranteed unused default value for some functions."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.NoRepoConfiguredError:1
msgid "Raised when there are no repositories configured."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.ProviderIndexer:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.TagIndexer:1
msgid "Bases: :class:`spack.repo.Indexer`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.PatchIndexer:1
msgid "Lifecycle methods for patch cache."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.ProviderIndexer:1
msgid "Lifecycle methods for virtual package providers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo:1
msgid "Class representing a package repository in the filesystem."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo:3
msgid "Each package repository must have a top-level configuration file called `repo.yaml`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo:6
msgid "Currently, `repo.yaml` this must define:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo:11
msgid "`namespace`:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo:9
msgid "A Python namespace where the repository's packages should live."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.all_package_names:1
msgid "Returns a sorted list of all package names in the Repo."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.all_packages:1
msgid "Iterator over all packages in the repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.all_packages:3
msgid "Use this with care, because loading packages is slow."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.dirname_for_package_name:1
msgid "Get the directory name for a particular package.  This is the directory that contains its package.py file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.dump_provenance:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.dump_provenance:1
msgid "Dump provenance information for a spec to a particular path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.dump_provenance:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.dump_provenance:3
msgid "This dumps the package file and any associated patch files. Raises UnknownPackageError if not found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.exists:1
msgid "Whether a package with the supplied name exists."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.filename_for_package_name:1
msgid "Get the filename for the module we should load for a particular package.  Packages for a Repo live in ``$root/<package_name>/package.py``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.filename_for_package_name:5
msgid "This will return a proper package.py path even if the package doesn't exist yet, so callers will need to ensure the package exists before importing."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.find_module:1
msgid "Python find_module import hook."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.find_module:3
msgid "Returns this Repo if it can load the module; None if not."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.get:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get:1
msgid "Returns the package associated with the supplied spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.get_pkg_class:1
msgid "Get the class for the package out of its module."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.get_pkg_class:3
msgid "First loads (or fetches from cache) a module for the package. Then extracts the package class from the module according to Spack's naming convention."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.index:1
msgid "Construct the index for this repo lazily."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.is_prefix:1
msgid "True if fullname is a prefix of this Repo's namespace."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.is_virtual:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.is_virtual:1
msgid "True if the package with this name is virtual, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.last_mtime:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.last_mtime:1
msgid "Time a package file in this repo was last updated."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.load_module:1
msgid "Python importer load hook."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.load_module:3
msgid "Tries to load the module; raises an ImportError if it can't."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.patch_index:1
msgid "Index of patches and packages they're defined on."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.provider_index:1
msgid "A provider index with names *specific* to this repo."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.purge:1
msgid "Clear entire package instance cache."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:1
msgid "Allow users to import Spack packages using Python identifiers."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:3
msgid "A python identifier might map to many different Spack package names due to hyphen/underscore ambiguity."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:7
msgid "Easy example:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:7
msgid "num3proxy   -> 3proxy"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:10
msgid "Ambiguous:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:10
msgid "foo_bar -> foo_bar, foo-bar"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:12
msgid "More ambiguous:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.real_name:13
msgid "foo_bar_baz -> foo_bar_baz, foo-bar-baz, foo_bar-baz, foo-bar_baz"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.Repo.tag_index:1
msgid "Index of tags and which packages they're defined on."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoError:1
msgid "Superclass for repository-related errors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex:1
msgid "Container class that manages a set of Indexers for a Repo."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex:3
msgid "This class is responsible for checking packages in a repository for updates (using ``FastPackageChecker``) and for regenerating indexes when they're needed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex:7
msgid "``Indexers`` should be added to the ``RepoIndex`` using ``add_index(name, indexer)``, and they should support the interface defined by ``Indexer``, so that the ``RepoIndex`` can read, generate, and update stored indices."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex:12
msgid "Generated indexes are accessed by name via ``__getitem__()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex.add_indexer:1
msgid "Add an indexer to the repo index."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex.add_indexer:3
msgid "name of this indexer"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoIndex.add_indexer:5
msgid "an object that supports create(), read(), write(), and get_index() operations"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath:1
msgid "A RepoPath is a list of repos that function as one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath:3
msgid "It functions exactly like a Repo, but it operates on the combined results of the Repos in its list instead of on a single package repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath:7
msgid "list Repo objects or paths to put in this RepoPath"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.all_package_names:1
msgid "Return all unique package names in all repositories."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.exists:1
msgid "Whether package with the give name exists in the path's repos."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.exists:3
msgid "Note that virtual packages do not \"exist\"."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.find_module:1
msgid "Implements precedence for overlaid namespaces."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.find_module:3
msgid "Loop checks each namespace in self.repos for packages, and also handles loading empty containing namespaces."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.first_repo:1
msgid "Get the first repo in precedence order."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get_pkg_class:1
msgid "Find a class for the spec's package and return the class object."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get_repo:1
msgid "Get a repository by namespace."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get_repo:3
msgid "Look up this namespace in the RepoPath, and return it if found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get_repo:5
msgid "Optional Arguments:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get_repo:7
msgid "default:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.get_repo:9
msgid "If default is provided, return it when the namespace isn't found.  If not, raise an UnknownNamespaceError."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.load_module:1
msgid "Handles loading container namespaces when necessary."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.load_module:3
msgid "See ``Repo`` for how actual package modules are loaded."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.patch_index:1
msgid "Merged PatchIndex from all Repos in the RepoPath."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.provider_index:1
msgid "Merged ProviderIndex from all Repos in the RepoPath."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.put_first:1
msgid "Add repo first in the search path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.put_last:1
msgid "Add repo last in the search path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.remove:1
msgid "Remove a repo from the search path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.RepoPath.repo_for_pkg:1
msgid "Given a spec, get the repository for its package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.SpackNamespace:1
msgid "Bases: :class:`module`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.SpackNamespace:1
msgid "Allow lazy loading of modules."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.TagIndex:1
msgid "Maps tags to list of packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.TagIndex.update_package:1
msgid "Updates a package in the tag index."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.TagIndex.update_package:3
msgid "name of the package to be removed from the index"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.TagIndexer:1
msgid "Lifecycle methods for a TagIndex on a Repo."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.UnknownEntityError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.UnknownPackageError:1
msgid "Raised when we encounter a package spack doesn't have."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.UnknownNamespaceError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.UnknownPackageError:1
msgid "Bases: :class:`spack.repo.UnknownEntityError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.UnknownNamespaceError:1
msgid "Raised when we encounter an unknown namespace"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.additional_repository:1
msgid "Adds temporarily a repository to the default one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.additional_repository:3
msgid "repository to be added"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.all_package_names:1
msgid "Convenience wrapper around ``spack.repo.all_package_names()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.autospec:1
msgid "Decorator that automatically converts the first argument of a function to a Spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.create_or_construct:1
msgid "Create a repository, or just return a Repo if it already exists."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.create_repo:1
msgid "Create a new repository in root with the specified namespace."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.create_repo:3
msgid "If the namespace is not provided, use basename of root. Return the canonicalized path and namespace of the created repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.get:1
msgid "Convenience wrapper around ``spack.repo.get()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.get_full_namespace:1
msgid "Returns the full namespace of a repository, given its relative one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.path:1
msgid "Singleton repo path instance"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.repo_namespace:1
msgid "Super-namespace for all packages. Package modules are imported as spack.pkg.<namespace>.<pkg-name>."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.set_path:1
msgid "Set the path singleton to a specific value."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.set_path:3
msgid "Overwrite ``path`` and register it as an importer in ``sys.meta_path`` if it is a ``Repo`` or ``RepoPath``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/repo.py:docstring of spack.repo.swap:1
msgid "Temporarily use another RepoPath."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:281
msgid "spack.report module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of spack.report:1
msgid "Tools to produce reports of spec installations"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of spack.report.valid_formats:1
msgid "Allowed report formats"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of spack.report.collect_info:1
msgid "Collects information to build a report while installing and dumps it on exit."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of spack.report.collect_info:4
msgid "If the format name is not ``None``, this context manager decorates PackageBase.do_install when entering the context and unrolls the change when exiting."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of spack.report.collect_info:8
msgid "Within the context, only the specs that are passed to it on initialization will be recorded for the report. Data from other specs will be discarded."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of spack.report.collect_info:13
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:13
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:16
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:59
msgid "Examples"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of spack.report.collect_info:26
msgid "one of the supported formats"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of spack.report.collect_info:28
msgid "args passed to spack install"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/report.py:docstring of spack.report.collect_info:31
msgid "when ``format_name`` is not in ``valid_formats``"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:289
msgid "spack.reporter module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/reporter.py:docstring of spack.reporter.Reporter:1
msgid "Base class for report writers."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:297
msgid "spack.resource module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/resource.py:docstring of spack.resource:1
msgid "Describes an optional resource needed for a build."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/resource.py:docstring of spack.resource:3
msgid "Typically a bunch of sources that can be built in-tree within another package to enable optional features."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/resource.py:docstring of spack.resource.Resource:1
msgid "Represents an optional resource to be fetched by a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/resource.py:docstring of spack.resource.Resource:3
msgid "Aggregates a name, a fetcher, a destination and a placement."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:305
msgid "spack.spec module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec:1
msgid "Spack allows very fine-grained control over how packages are installed and over how they are built and configured.  To make this easy, it has its own syntax for declaring a dependence.  We call a descriptor of a particular package configuration a \"spec\"."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec:6
msgid "The syntax looks like this:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec:13
msgid "The first part of this is the command, 'spack install'.  The rest of the line is a spec for a particular installation of the mpileaks package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec:16
msgid "The package to install"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec:18
msgid "A dependency of the package, prefixed by ^"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec:20
msgid "A version descriptor for the package.  This can either be a specific version, like \"1.2\", or it can be a range of versions, e.g. \"1.2:1.4\". If multiple specific versions or multiple ranges are acceptable, they can be separated by commas, e.g. if a package will only build with versions 1.0, 1.2-1.4, and 1.6-1.8 of mavpich, you could say:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec:26
msgid "depends_on(\"mvapich@1.0,1.2:1.4,1.6:1.8\")"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec:28
msgid "A compile-time variant of the package.  If you need openmpi to be built in debug mode for your package to work, you can require it by adding +debug to the openmpi spec when you depend on it.  If you do NOT want the debug option to be enabled, then replace this with -debug."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec:33
msgid "The name of the compiler to build with."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec:35
msgid "The versions of the compiler to build with.  Note that the identifier for a compiler version is the same '@' that is used for a package version. A version list denoted by '@' is associated with the compiler only if if it comes immediately after the compiler name.  Otherwise it will be associated with the current package spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec:41
msgid "The architecture to build with.  This is needed on machines where cross-compilation is required"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec:44
msgid "Here is the EBNF grammar for a spec::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec:60
msgid "Identifiers using the <name>=<value> command, such as architectures and compiler flags, require a space before the name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec:63
msgid "There is one context-sensitive part: ids in versions may contain '.', while other ids may not."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec:66
msgid "There is one ambiguity: since '-' is allowed in an id, you need to put whitespace space before -variant for it to be tokenized properly.  You can either use whitespace, or you can just use ~variant since it means the same thing.  Spack uses ~variant in directory names and in the canonical form of specs to avoid ambiguity.  Both are provided because ~ can cause shell expansion when it is the first character in an id typed on the command line."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.cformat:1
msgid "Same as format, but color defaults to auto instead of False."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.common_dependencies:1
msgid "Return names of dependencies that self an other have in common."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concrete:1
msgid "A spec is concrete if it describes a single build of a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concrete:3
msgid "More formally, a spec is concrete if concretize() has been called on it and it has been marked `_concrete`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concrete:6
msgid "Concrete specs either can be or have been built. All constraints have been resolved, optional dependencies have been added or removed, a compiler has been chosen, and all variants have values."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concretize:1
msgid "A spec is concrete if it describes one build of a package uniquely. This will ensure that this spec is concrete."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concretize:4
msgid "list of packages that will need test dependencies, or True/False for test all/none"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concretize:8
msgid "If this spec could describe more than one version, variant, or build of a package, this will add constraints to make it concrete."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concretize:11
msgid "Some rigorous validation and checks are also performed on the spec. Concretizing ensures that it is self-consistent and that it's consistent with requirements of its packages. See flatten() and normalize() for more details on this."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.concretized:1
msgid "This is a non-destructive version of concretize().  First clones, then returns a concrete version of this package without modifying this package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.constrain:1
msgid "Merge the constraints of other with self."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.constrain:3
msgid "Returns True if the spec changed as a result, False if not."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.constrained:1
msgid "Return a constrained copy without modifying this spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:1
msgid "Make a copy of this spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:3
msgid "Defaults to True. If boolean, controls whether dependencies are copied (copied if True). If a tuple is provided, *only* dependencies of types matching those in the tuple are copied."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:8
msgid "additional arguments for internal use (passed to ``_dup``)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:10
msgid "A copy of this spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:14
msgid "Deep copy with dependnecies::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:19
msgid "Shallow copy (no dependencies)::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.copy:23
msgid "Only build and run dependencies::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.cshort_spec:1
msgid "Returns an auto-colorized version of ``self.short_spec``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.dag_hash:1
msgid "Return a hash of the entire spec DAG, including connectivity."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.dag_hash_bit_prefix:1
msgid "Get the first <bits> bits of the DAG hash as an integer type."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.dep_difference:1
msgid "Returns dependencies in self that are not in other."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.eq_dag:1
msgid "True if the full dependency DAGs of specs are equal."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.eq_node:1
msgid "Equality with another spec, not including dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.flat_dependencies:1
msgid "Return a DependencyMap containing all of this spec's dependencies with their constraints merged."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.flat_dependencies:4
msgid "If copy is True, returns merged copies of its dependencies without modifying the spec it's called on."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.flat_dependencies:7
msgid "If copy is False, clears this spec's dependencies and returns them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:1
msgid "Prints out particular pieces of a spec, depending on what is in the format string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:4
msgid "Using the ``{attribute}`` syntax, any field of the spec can be selected.  Those attributes can be recursive. For example, ``s.format({compiler.version})`` will print the version of the compiler."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:9
msgid "Commonly used attributes of the Spec for format strings include::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:24
msgid "Some additional special-case properties can be added::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:30
msgid "The ``^`` sigil can be used to access dependencies by name. ``s.format({^mpi.name})`` will print the name of the MPI implementation in the spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:34
msgid "The ``@``, ``%``, ``arch=``, and ``/`` sigils can be used to include the sigil with the printed string. These sigils may only be used with the appropriate attributes, listed below::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:44
msgid "The ``@`` sigil may also be used for any other property named ``version``. Sigils printed with the attribute string are only printed if the attribute string is non-empty, and are colored according to the color of the attribute."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:49
msgid "Sigils are not used for printing variants. Variants listed by name naturally print with their sigil. For example, ``spec.format('{variants.debug}')`` would print either ``+debug`` or ``~debug`` depending on the name of the variant. Non-boolean variants print as ``name=value``. To print variant names or values independently, use ``spec.format('{variants.<name>.name}')`` or ``spec.format('{variants.<name>.value}')``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:58
msgid "Spec format strings use ``\\`` as the escape character. Use ``\\{`` and ``\\}`` for literal braces, and ``\\\\`` for the literal ``\\`` character. Also use ``\\$`` for the literal ``$`` to differentiate from previous, deprecated format string syntax."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:64
msgid "The previous format strings are deprecated. They can still be accessed by the ``old_format`` method. The ``format`` method will call ``old_format`` if the character ``$`` appears unescaped in the format string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:70
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:50
msgid "string containing the format to be expanded"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:73
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:53
msgid "True if returned string is colored"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.format:75
msgid "maps full-string formats to a callable \\ that accepts a string and returns another one"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_dict:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_yaml:1
msgid "Construct a spec from YAML."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_dict:3
msgid "Parameters: data -- a nested dict/list data structure read from YAML or JSON."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_json:1
msgid "Construct a spec from JSON."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_json:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_yaml:3
msgid "Parameters: stream -- string or file object to read from."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:1
msgid "Builds a Spec from a dictionary containing the spec literal."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:3
msgid "The dictionary must have a single top level key, representing the root, and as many secondary level keys as needed in the spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:6
msgid "The keys can be either a string or a Spec or a tuple containing the Spec and the dependency types."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:9
msgid "the dictionary containing the spec literal"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:11
msgid "if True the same key appearing at different levels of the ``spec_dict`` will map to the same object in memory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:17
msgid "A simple spec ``foo`` with no dependencies:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:23
msgid "A spec ``foo`` with a ``(build, link)`` dependency ``bar``:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:30
msgid "A spec with a diamond dependency and various build types:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:43
msgid "The same spec with a double copy of ``dt-diamond-bottom`` and no diamond structure:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.from_literal:57
msgid "Constructing a spec using a Spec object as key:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.index:1
msgid "Return DependencyMap that points to all the dependencies in this spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.install_status:1
msgid "Helper for tree to print DB install status."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.is_virtual:1
msgid "Test if a name is virtual without requiring a Spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.ne_dag:1
msgid "True if the full dependency DAGs of specs are not equal."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.ne_node:1
msgid "Inequality with another spec, not including dependencies."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.normalize:1
msgid "When specs are parsed, any dependencies specified are hanging off the root, and ONLY the ones that were explicitly provided are there. Normalization turns a partial flat spec into a DAG, where:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.normalize:5
msgid "Known dependencies of the root package are in the DAG."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.normalize:6
msgid "Each node's dependencies dict only contains its known direct deps."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.normalize:8
msgid "There is only ONE unique spec for each package in the DAG."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.normalize:10
msgid "This includes virtual packages.  If there a non-virtual package that provides a virtual package that is in the spec, then we replace the virtual package with the non-virtual one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.normalize:14
msgid "TODO: normalize should probably implement some form of cycle detection, to ensure that the spec is actually a DAG."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.normalized:1
msgid "Return a normalized copy of this spec without modifying this spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:1
msgid "The format strings you can provide are::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:16
msgid "You can also use full-string versions, which elide the prefixes::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:41
msgid "Note these are case-insensitive: for example you can specify either ``${PACKAGE}`` or ``${package}``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:44
msgid "Optionally you can provide a width, e.g. ``$20_`` for a 20-wide name. Like printf, you can provide '-' for left justification, e.g. ``$-20_`` for a left-justified name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:48
msgid "Anything else is copied verbatim into the output stream."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:55
msgid "maps full-string formats to a callable                 that accepts a string and returns another one"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:60
msgid "The following line:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:66
msgid "translates to the name, version, and options of the package, but no dependencies, arch, or compiler."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.old_format:69
msgid "TODO: allow, e.g., ``$6#`` to customize short hash length TODO: allow, e.g., ``$//`` for full hash."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.package_class:1
msgid "Internal package call gets only the class object for a package. Use this to just get package metadata."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.patches:1
msgid "Return patch objects for any patch sha256 sums on this Spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.patches:3
msgid "This is for use after concretization to iterate over any patches associated with this spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.patches:6
msgid "TODO: this only checks in the package; it doesn't resurrect old patches from install directories, but it probably should."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.read_yaml_dep_specs:1
msgid "Read the DependencySpec portion of a YAML-formatted Spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.read_yaml_dep_specs:3
msgid "This needs to be backward-compatible with older spack spec formats so that reindex will work on old specs/databases."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.root:1
msgid "Follow dependent links and find the root of this spec's DAG."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.root:3
msgid "Spack specs have a single root (the package being installed)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.satisfies:1
msgid "Determine if this spec satisfies all constraints of another."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.satisfies:3
msgid "There are two senses for satisfies:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.satisfies:5
msgid "`loose` (default): the absence of a constraint in self implies that it *could* be satisfied by other, so we only check that there are no conflicts with other for constraints that this spec actually has."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.satisfies:10
msgid "`strict`: strict means that we *must* meet all the constraints specified on other."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.satisfies_dependencies:1
msgid "This checks constraints on common dependencies against each other."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.short_spec:1
msgid "Returns a version of the spec with the dependencies hashed instead of completely enumerated."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.sorted_deps:1
msgid "Return a list of all dependencies sorted by name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:1
msgid "Generic traversal of the DAG represented by this spec. This will yield each node in the spec.  Options:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:11
msgid "order    [=pre|post]"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:5
msgid "Order to traverse spec nodes. Defaults to preorder traversal. Options are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:8
msgid "'pre':  Pre-order traversal; each node is yielded before its"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:9
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:11
msgid "children in the dependency DAG."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:11
msgid "'post': Post-order  traversal; each node is yielded after its"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:23
msgid "cover    [=nodes|edges|paths]"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:14
msgid "Determines how extensively to cover the dag.  Possible values:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:16
msgid "'nodes': Visit each node in the dag only once.  Every node"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:17
msgid "yielded by this function will be unique."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:19
msgid "'edges': If a node has been visited once but is reached along a"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:19
msgid "new path from the root, yield it but do not descend into it.  This traverses each 'edge' in the DAG once."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:23
msgid "'paths': Explore every unique path reachable from the root."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:22
msgid "This descends into visited subtrees and will yield nodes twice if they're reachable by multiple paths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:28
msgid "depth    [=False]"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:26
msgid "Defaults to False.  When True, yields not just nodes in the spec, but also their depth from the root in a (depth, node) tuple."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:32
msgid "key   [=id]"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:31
msgid "Allow a custom key function to track the identity of nodes in the traversal."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:35
msgid "root     [=True]"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:35
msgid "If False, this won't yield the root node, just its descendents."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:38
msgid "direction [=children|parents]"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.traverse_edges:38
msgid "If 'children', does a traversal of this spec's children.  If 'parents', traverses upwards in the DAG towards the root."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.tree:1
msgid "Prints out this spec and its dependencies, tree-formatted with indentation."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.validate_or_raise:1
msgid "Checks that names and values in this spec are real. If they're not, it will raise an appropriate exception."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.virtual:1
msgid "Right now, a spec is virtual if no package exists with its name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.virtual:3
msgid "TODO: revisit this -- might need to use a separate namespace and be more explicit about this. Possible idea: just use conventin and make virtual deps all caps, e.g., MPI vs mpi."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.Spec.virtual_dependencies:1
msgid "Return list of any virtual deps in this spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.parse:1
msgid "Returns a list of specs from an input string. For creating one spec, see Spec() constructor."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.parse_anonymous_spec:1
msgid "Allow the user to omit the package name part of a spec if they know what it has to be already."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.parse_anonymous_spec:4
msgid "e.g., provides('mpi@2', when='@1.9:') says that this package provides MPI-3 when its version is higher than 1.9."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.SpecParseError:1
msgid "Wrapper for ParseError for when we're parsing specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.DuplicateDependencyError:1
msgid "Raised when the same dependency occurs in a spec twice."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.spec.DuplicateVariantError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.DuplicateVariantError:1
msgid "Raised when the same variant occurs in a spec twice."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.DuplicateCompilerSpecError:1
msgid "Raised when the same compiler occurs in a spec twice."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsupportedCompilerError:1
msgid "Raised when the user asks for a compiler spack doesn't know about."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.spec.UnknownVariantError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.UnknownVariantError:1
msgid "Raised when an unknown variant occurs in a spec."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.DuplicateArchitectureError:1
msgid "Raised when the same architecture occurs in a spec twice."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.InconsistentSpecError:1
msgid "Raised when two nodes in the same spec DAG have inconsistent constraints."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.InvalidDependencyError:1
msgid "Raised when a dependency in a spec is not actually a dependency of the package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.NoProviderError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.MultipleProviderError:1
msgid "Raised when there is no package that provides a particular virtual dependency."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableSpecNameError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableVersionSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableCompilerSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.spec.UnsatisfiableVariantSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableCompilerFlagSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableArchitectureSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableProviderSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableDependencySpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.UnsatisfiableVariantSpecError:1
msgid "Bases: :class:`spack.error.UnsatisfiableSpecError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableSpecNameError:1
msgid "Raised when two specs aren't even for the same package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableVersionSpecError:1
msgid "Raised when a spec version conflicts with package constraints."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableCompilerSpecError:1
msgid "Raised when a spec comiler conflicts with package constraints."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.spec.UnsatisfiableVariantSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableCompilerFlagSpecError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.UnsatisfiableVariantSpecError:1
msgid "Raised when a spec variant conflicts with package constraints."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableArchitectureSpecError:1
msgid "Raised when a spec architecture conflicts with package constraints."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableProviderSpecError:1
msgid "Raised when a provider is supplied but constraints don't match a vpkg requirement"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec.py:docstring of spack.spec.UnsatisfiableDependencySpecError:1
msgid "Raised when some dependency of constrained specs are incompatible"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:313
msgid "spack.spec\\_set module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec_set.py:docstring of spack.spec_set.CombinatorialSpecSet:1
msgid "Set of combinatorial Specs constructed from YAML file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/spec_set.py:docstring of spack.spec_set.CombinatorialSpecSet.all_package_versions:1
msgid "Get package/version combinations for all spack packages."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:321
msgid "spack.stage module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.DIYStage:1
msgid "Simple class that allows any directory to be a spack stage."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.ResourceStage:1
msgid "Bases: :class:`spack.stage.Stage`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.ResourceStage.expand_archive:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage.expand_archive:1
msgid "Changes to the stage directory and attempt to expand the downloaded archive.  Fail if the stage is not set up or if the archive is not yet downloaded."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.ResourceStage.restage:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage.restage:1
msgid "Removes the expanded archive path if it exists, then re-expands the archive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.RestageError:1
msgid "Bases: :class:`spack.stage.StageError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.RestageError:1
msgid "\"Error encountered during restaging."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage:1
msgid "Manages a temporary stage directory for building."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage:3
msgid "A Stage object is a context manager that handles a directory where some source code is downloaded and built before being installed. It handles fetching the source code, either as an archive to be expanded or by checking it out of a repository.  A stage's lifecycle looks like this::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage:16
msgid "When used as a context manager, the stage is automatically destroyed if no exception is raised by the context. If an excpetion is raised, the stage is left in the filesystem and NOT destroyed, for potential reuse later."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage:21
msgid "You can also use the stage's create/destroy functions manually, like this::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage:34
msgid "There are two kinds of stages: named and unnamed.  Named stages can persist between runs of spack, e.g. if you fetched a tarball but didn't finish building it, you won't have to fetch it again."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage:38
msgid "Unnamed stages are created using standard mkdtemp mechanisms or similar, and are intended to persist for only one run of spack."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage.create:1
msgid "Creates the stage directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage.create:3
msgid "If get_tmp_root() is None, the stage directory is created directly under spack.paths.stage_path, otherwise this will attempt to create a stage in a temporary directory and link it into spack.paths.stage_path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage.destroy:1
msgid "Removes this stage directory."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage.expected_archive_files:1
msgid "Possible archive file paths."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage.fetch:1
msgid "Downloads an archive or checks out code from a repository."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage.source_path:1
msgid "Returns the path to the expanded/checked out source code."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage.source_path:3
msgid "To find the source code, this method searches for the first subdirectory of the stage that it can find, and returns it. This assumes nothing besides the archive file will be in the stage path, but it has the advantage that we don't need to know the name of the archive or its contents."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.Stage.source_path:9
msgid "If the fetch strategy is not supposed to expand the downloaded file, it will just return the stage path. If the archive needs to be expanded, it will return None when no archive is found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.StageError:1
msgid "\"Superclass for all errors encountered during staging."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.ensure_access:1
msgid "Ensure we can access a directory and die with an error if we can't."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/stage.py:docstring of spack.stage.purge:1
msgid "Remove all build directories in the top-level stage path."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:329
msgid "spack.store module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store:1
msgid "Components that manage Spack's installation tree."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store:3
msgid "An install tree, or \"build store\" consists of two parts:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store:5
msgid "A package database that tracks what is installed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store:6
msgid "A directory layout that determines how the installations are laid out."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store:9
msgid "The store contains all the install prefixes for packages installed by Spack.  The simplest store could just contain prefixes named by DAG hash, but we use a fancier directory layout to make browsing the store and debugging easier."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store:14
msgid "The directory layout is currently hard-coded to be a YAMLDirectoryLayout, so called because it stores build metadata within each prefix, in `spec.yaml` files. In future versions of Spack we may consider allowing install trees to define their own layouts with some per-tree configuration."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store.Store:1
msgid "A store is a path full of installed Spack packages."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store.Store:3
msgid "Stores consist of packages installed according to a ``DirectoryLayout``, along with an index, or _database_ of their contents.  The directory layout controls what paths look like and how Spack ensures that each uniqe spec gets its own unique directory (or not, though we don't recommend that). The database is a signle file that caches metadata for the entire Spack installation.  It prevents us from having to spider the install tree to figure out what's there."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store.Store:11
msgid "path to the root of the install tree"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store.Store:13
msgid "expression according to guidelines in ``spack.util.path`` that describes how to construct a path to a package prefix in this store"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store.Store:17
msgid "length of the hashes used in the directory layout; spec hash suffixes will be truncated to this length"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store.Store.reindex:1
msgid "Convenience function to reindex the store DB with its own layout."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store.default_root:1
msgid "default installation root, relative to the Spack install path"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/store.py:docstring of spack.store.store:1
msgid "Singleton store instance"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:337
msgid "spack.tengine module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of spack.tengine.Context:1
msgid "Base class for context classes that are used with the template engine."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of spack.tengine.Context.to_dict:1
msgid "Returns a dictionary containing all the context properties."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of spack.tengine.ContextMeta:1
msgid "Meta class for Context. It helps reducing the boilerplate in client code."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of spack.tengine.ContextMeta.context_property:1
msgid "Decorator that adds a function name to the list of new context properties, and then returns a property."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of spack.tengine.context_property:1
msgid "A saner way to use the decorator"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of spack.tengine.make_environment:1
msgid "Returns an configured environment for template rendering."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of spack.tengine.prepend_to_line:1
msgid "Prepends a token to each line in text"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/tengine.py:docstring of spack.tengine.quote:1
msgid "Quotes each line in text"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:345
msgid "spack.url module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url:1
msgid "This module has methods for parsing names and versions of packages from URLs. The idea is to allow package creators to supply nothing more than the download location of the package, and figure out version and name information from there."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url:6
msgid "**Example:** when spack is given the following URL:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url:8
msgid "https://www.hdfgroup.org/ftp/HDF/releases/HDF4.2.12/src/hdf-4.2.12.tar.gz"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url:10
msgid "It can figure out that the package name is ``hdf``, and that it is at version ``4.2.12``. This is useful for making the creation of packages simple: a user just supplies a URL and skeleton code is generated automatically."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url:14
msgid "Spack can also figure out that it can most likely download 4.2.6 at this URL:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url:16
msgid "https://www.hdfgroup.org/ftp/HDF/releases/HDF4.2.6/src/hdf-4.2.6.tar.gz"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url:18
msgid "This is useful if a user asks for a package at a particular version number; spack doesn't need anyone to tell it where to get the tarball even though it's never been told about that version before."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.UndetectableNameError:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.UndetectableVersionError:1
msgid "Bases: :class:`spack.url.UrlParseError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.UndetectableNameError:1
msgid "Raised when we can't parse a package name from a string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.UndetectableVersionError:1
msgid "Raised when we can't parse a version from a string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.UrlParseError:1
msgid "Raised when the URL module can't parse something correctly."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.color_url:1
msgid "Color the parts of the url according to Spack's parsing."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.color_url:8
msgid "Colors are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.color_url:0
msgid "Cyan: The version found by :func:`parse_version_offset`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.color_url:0
msgid "Red:  The name found by :func:`parse_name_offset`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.color_url:0
msgid "Green:   Instances of version string from :func:`substitute_version`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.color_url:0
msgid "Magenta: Instances of the name (protected from substitution)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.color_url:10
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:4
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:18
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:15
msgid "The filename or URL for the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.color_url:12
msgid "Append parse errors at end of string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.color_url:14
msgid "Color substitutions as well as parsed name/version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.cumsum:1
msgid "Return cumulative sum of result of fn on each element in elts."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.determine_url_file_extension:1
msgid "This returns the type of archive a URL refers to.  This is sometimes confusing because of URLs like:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.determine_url_file_extension:4
msgid "https://github.com/petdance/ack/tarball/1.93_02"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.determine_url_file_extension:6
msgid "Where the URL doesn't actually contain the filename.  We need to know what type it is so that we can appropriately name files in mirrors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_all:1
msgid "Returns a list containing the indices of every occurrence of substring in string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:1
msgid "Finds a good list URL for the supplied URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:3
msgid "By default, returns the dirname of the archive path."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:5
msgid "Provides special treatment for the following websites, which have a unique list URL different from the dirname of the download URL:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:9
msgid "GitHub"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:9
msgid "https://github.com/<repo>/<name>/releases"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:10
msgid "GitLab"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:10
msgid "https://gitlab.\\*/<repo>/<name>/tags"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:11
msgid "BitBucket"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:11
msgid "https://bitbucket.org/<repo>/<name>/downloads/?tab=tags"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:12
msgid "CRAN"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:12
msgid "https://\\*.r-project.org/src/contrib/Archive/<name>"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:15
msgid "The download URL for the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.find_list_url:18
msgid "The list URL for the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.insensitize:1
msgid "Change upper and lowercase letters to be case insensitive in the provided string.  e.g., 'a' becomes '[Aa]', 'B' becomes '[bB]', etc.  Use for building regexes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:1
msgid "Try to determine the name of a package from its filename or URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version:6
msgid "The version of the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name:8
msgid "The name of the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name:11
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:11
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:12
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:18
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version:9
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:16
msgid "If the URL does not match any regexes"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:1
msgid "Try to determine the name of a package and extract its version from its filename or URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_and_version:7
msgid "The name of the package The version of the package"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:8
msgid "A tuple containing:     name of the package,     first index of name,     length of name,     the index of the matching regex     the matching regex"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:14
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:12
msgid "A tuple containing:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_name_offset:11
msgid "name of the package, first index of name, length of name, the index of the matching regex the matching regex"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:1
msgid "Try to extract a version string from a filename or URL."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:6
msgid "A tuple containing:     version of the package,     first index of version,     length of version string,     the index of the matching regex     the matching regex"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.parse_version_offset:9
msgid "version of the package, first index of version, length of version string, the index of the matching regex the matching regex"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:1
msgid "Some URLs have a query string, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:3
msgid "https://github.com/losalamos/CLAMR/blob/packages/PowerParser_v2.0.7.tgz?raw=true"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:4
msgid "http://www.apache.org/dyn/closer.cgi?path=/cassandra/1.2.0/apache-cassandra-1.2.0-rc2-bin.tar.gz"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:5
msgid "https://gitlab.kitware.com/vtk/vtk/repository/archive.tar.bz2?ref=v7.0.0"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:7
msgid "In (1), the query string needs to be stripped to get at the extension, but in (2) & (3), the filename is IN a single final query argument."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:11
msgid "This strips the URL into three pieces: ``prefix``, ``ext``, and ``suffix``. The suffix contains anything that was stripped off the URL to get at the file extension.  In (1), it will be ``'?raw=true'``, but in (2), it will be empty. In (3) the suffix is a parameter that follows after the file extension, e.g.:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:17
msgid "``('https://github.com/losalamos/CLAMR/blob/packages/PowerParser_v2.0.7', '.tgz', '?raw=true')``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:18
msgid "``('http://www.apache.org/dyn/closer.cgi?path=/cassandra/1.2.0/apache-cassandra-1.2.0-rc2-bin', '.tar.gz', None)``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.split_url_extension:19
msgid "``('https://gitlab.kitware.com/vtk/vtk/repository/archive', '.tar.bz2', '?ref=v7.0.0')``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:1
msgid "Most tarballs contain a package name followed by a version number. However, some also contain extraneous information in-between the name and version:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:5
msgid "``rgb-1.0.6``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:6
msgid "``converge_install_2.3.16``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:7
msgid "``jpegsrc.v9b``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:9
msgid "These strings are not part of the package name and should be ignored. This function strips the version number and any extraneous suffixes off and returns the remaining string. The goal is that the name is always the last thing in ``path``:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:14
msgid "``rgb``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:15
msgid "``converge``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:16
msgid "``jpeg``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:20
msgid "The version detected for this URL"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_name_suffixes:23
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:18
msgid "The ``path`` with any extraneous suffixes removed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:1
msgid "Some tarballs contain extraneous information after the version:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:3
msgid "``bowtie2-2.2.5-source``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:4
msgid "``libevent-2.0.21-stable``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:5
msgid "``cuda_8.0.44_linux.run``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:7
msgid "These strings are not part of the version number and should be ignored. This function strips those suffixes off and returns the remaining string. The goal is that the version is always the last thing in ``path``:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:11
msgid "``bowtie2-2.2.5``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:12
msgid "``libevent-2.0.21``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.strip_version_suffixes:13
msgid "``cuda_8.0.44``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.substitute_version:1
msgid "Given a URL or archive name, find the version in the path and substitute the new version for it.  Replace all occurrences of the version *if* they don't overlap with the package name."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.substitute_version:5
msgid "Simple example:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.substitute_version:12
msgid "Complex example:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.substitution_offsets:1
msgid "This returns offsets for substituting versions and names in the provided path.  It is a helper for :func:`substitute_version`."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/url.py:docstring of spack.url.wildcard_version:1
msgid "Find the version in the supplied path, and return a regular expression that will match this path with any version in its place."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:353
msgid "spack.variant module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant:1
msgid "The variant module contains data structures that are needed to manage variants both in packages and in specs."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant:1
msgid "A variant that has not yet decided who it wants to be. It behaves like a multi valued variant which **could** do things."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant:4
msgid "This kind of variant is generated during parsing of expressions like ``foo=bar`` and differs from multi valued variants because it will satisfy any other variant with the same name. This is because it **could** do it if it grows up to be a multi valued variant with the right set of values."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.compatible:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.compatible:1
msgid "Returns True if self and other are compatible, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.compatible:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.compatible:3
msgid "As there is no semantic check, two VariantSpec are compatible if either they contain the same value or they are both multi-valued."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.compatible:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.compatible:6
msgid "instance against which we test compatibility"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.constrain:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.constrain:1
msgid "Modify self to match all the constraints for other if both instances are multi-valued. Returns True if self changed, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.constrain:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.constrain:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.constrain:5
msgid "instance against which we constrain self"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.copy:1
msgid "Returns an instance of a variant equivalent to self"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.copy:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.copy:3
msgid "a copy of self"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.from_node_dict:1
msgid "Reconstruct a variant from a node dict."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.satisfies:1
msgid "Returns true if ``other.name == self.name``, because any value that other holds and is not in self yet **could** be added."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.satisfies:4
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant.satisfies:4
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.satisfies:4
msgid "constraint to be met for the method to return True"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.value:1
msgid "Returns a tuple of strings containing the values stored in the variant."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.value:4
msgid "values stored in the variant"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.yaml_entry:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.yaml_entry:1
msgid "Returns a key, value tuple suitable to be an entry in a yaml dict."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.AbstractVariant.yaml_entry:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.yaml_entry:3
msgid "(name, value_representation)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.BoolValuedVariant:1
msgid "Bases: :class:`spack.variant.SingleValuedVariant`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.BoolValuedVariant:1
msgid "A variant that can hold either True or False."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues:1
msgid "Bases: :class:`collections.abc.Sequence`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues:1
msgid "Allows combinations from one of many mutually exclusive sets."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues:3
msgid "The value ``('none',)`` is reserved to denote the empty set and therefore no other set can contain the item ``'none'``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues:6
msgid "mutually exclusive sets of values"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues.allow_empty_set:1
msgid "Adds the empty set to the current list of disjoint sets."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues.feature_values:1
msgid "Attribute used to track values which correspond to features which can be enabled or disabled as understood by the package's build system."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues.prohibit_empty_set:1
msgid "Removes the empty set from the current list of disjoint sets."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues.with_default:1
msgid "Sets the default value and returns self."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues.with_error:1
msgid "Sets the error message format and returns self."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.DisjointSetsOfValues.with_non_feature_values:1
msgid "Marks a few values as not being tied to a feature."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.InconsistentValidationError:1
msgid "Raised if the wrong validator is used to validate a variant."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.InvalidVariantValueError:1
msgid "Raised when a valid variant has at least an invalid value."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant:1
msgid "Bases: :class:`spack.variant.AbstractVariant`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant:1
msgid "A variant that can hold multiple values at once."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.MultiValuedVariant.satisfies:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant.satisfies:1
msgid "Returns true if ``other.name == self.name`` and ``other.value`` is a strict subset of self. Does not try to validate."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.MultipleValuesInExclusiveVariantError:1
msgid "Bases: :class:`spack.error.SpecError`, :class:`ValueError`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.MultipleValuesInExclusiveVariantError:1
msgid "Raised when multiple values are present in a variant that wants only one."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant:1
msgid "Bases: :class:`spack.variant.MultiValuedVariant`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.SingleValuedVariant:1
msgid "A variant that can hold multiple values, but one at a time."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant:1
msgid "Represents a variant in a package, as declared in the variant directive."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.allowed_values:1
msgid "Returns a string representation of the allowed values for printing purposes"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.allowed_values:4
msgid "representation of the allowed values"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_default:1
msgid "Factory that creates a variant holding the default value."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_default:3
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_variant:6
msgid "instance of the proper variant"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_variant:1
msgid "Factory that creates a variant holding the value passed as a parameter."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.make_variant:4
msgid "value that will be hold by the variant"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:1
msgid "Validate a variant spec against this package variant. Raises an exception if any error is found."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:4
msgid "instance to be validated"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:6
msgid "the package that required the validation, if available"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:10
msgid "if ``vspec.name != self.name``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:11
msgid "if ``vspec`` has     multiple values but ``self.multi == False``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.validate_or_raise:12
msgid "if ``vspec.value`` contains     invalid values"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.Variant.variant_cls:1
msgid "Proper variant class to be used for this configuration."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap:1
msgid "Bases: :class:`llnl.util.lang.HashableMap`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap:1
msgid "Map containing variant instances. New values can be added only if the key is not already present."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.concrete:1
msgid "Returns True if the spec is concrete in terms of variants."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.constrain:1
msgid "Add all variants in other that aren't in self to self. Also constrain all multi-valued variants that are already present. Return True if self changed, False otherwise"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.copy:1
msgid "Return an instance of VariantMap equivalent to self."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.satisfies:1
msgid "Returns True if this VariantMap is more constrained than other, False otherwise."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.satisfies:4
msgid "VariantMap instance to satisfy"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.satisfies:6
msgid "if True return False if a key is in other and not in self, otherwise discard that key and proceed with evaluation"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.substitute:1
msgid "Substitutes the entry under ``vspec.name`` with ``vspec``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.VariantMap.substitute:3
msgid "variant spec to be substituted"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.any_combination_of:1
msgid "Multi-valued variant that allows any combination of the specified values, and also allows the user to specify 'none' (as a string) to choose none of them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.any_combination_of:5
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.disjoint_sets:5
msgid "It is up to the package implementation to handle the value 'none' specially, if at all."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.any_combination_of:8
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.auto_or_any_combination_of:4
msgid "allowed variant values"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.any_combination_of:10
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.auto_or_any_combination_of:6
#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.disjoint_sets:10
msgid "a properly initialized instance of DisjointSetsOfValues"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.auto_or_any_combination_of:1
msgid "Multi-valued variant that allows any combination of a set of values (but not the empty set) or 'auto'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.disjoint_sets:1
msgid "Multi-valued variant that allows any combination picking from one of multiple disjoint sets of values, and also allows the user to specify 'none' (as a string) to choose none of them."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.implicit_variant_conversion:1
msgid "Converts other to type(self) and calls method(self, other)"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.implicit_variant_conversion:3
msgid "any predicate method that takes another variant as an argument"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.implicit_variant_conversion:5
msgid "Returns: decorated method"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.substitute_abstract_variants:1
msgid "Uses the information in `spec.package` to turn any variant that needs it into a SingleValuedVariant."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/variant.py:docstring of spack.variant.substitute_abstract_variants:4
msgid "spec on which to operate the substitution"
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:361
msgid "spack.version module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version:1
msgid "This module implements Version and version-ish objects.  These are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version:3
msgid "Version"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version:4
msgid "A single version of a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version:5
msgid "VersionRange"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version:6
msgid "A range of versions of a package."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version:8
msgid "VersionList"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version:8
msgid "A list of Versions and VersionRanges."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version:10
msgid "All of these types support the following operations, which can be called on any of the types::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version:1
msgid "Class to represent versions"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.dashed:1
msgid "The dashed representation of the version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.dashed:3
msgid "Example: >>> version = Version('1.2.3b') >>> version.dashed Version('1-2-3b')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.dashed:8
msgid "The version with separator characters replaced by dashes"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.dotted:1
msgid "The dotted representation of the version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.dotted:3
msgid "Example: >>> version = Version('1-2-3b') >>> version.dotted Version('1.2.3b')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.dotted:8
msgid "The version with separator characters replaced by dots"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.is_predecessor:1
msgid "True if the other version is the immediate predecessor of this one. That is, NO versions v exist such that: (self < v < other and v not in self)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.isdevelop:1
msgid "Triggers on the special case of the `@develop-like` version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.joined:1
msgid "The joined representation of the version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.joined:3
msgid "Example: >>> version = Version('1.2.3b') >>> version.joined Version('123b')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.joined:8
msgid "The version with separator characters removed"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.satisfies:1
msgid "A Version 'satisfies' another if it is at least as specific and has a common prefix.  e.g., we want gcc@4.7.3 to satisfy a request for gcc@4.7 so that when a user asks to build with gcc@4.7, we can find a suitable compiler."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.underscored:1
msgid "The underscored representation of the version."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.underscored:3
msgid "Example: >>> version = Version('1.2.3b') >>> version.underscored Version('1_2_3b')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.underscored:8
msgid "The version with separator characters replaced by     underscores"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.underscored:10
msgid "The version with separator characters replaced by"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.underscored:11
msgid "underscores"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.up_to:1
msgid "The version up to the specified component."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.up_to:3
msgid "Examples: >>> version = Version('1.23-4b') >>> version.up_to(1) Version('1') >>> version.up_to(2) Version('1.23') >>> version.up_to(3) Version('1.23-4') >>> version.up_to(4) Version('1.23-4b') >>> version.up_to(-1) Version('1.23-4') >>> version.up_to(-2) Version('1.23') >>> version.up_to(-3) Version('1')"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.Version.up_to:20
msgid "The first index components of the version"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:1
msgid "A VersionRange satisfies another if some version in this range would satisfy some version in the other range.  To do this it must either:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:5
msgid "Overlap with the other range"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:6
msgid "The start of this range satisfies the end of the other range."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:8
msgid "This is essentially the same as overlaps(), but overlaps assumes that its arguments are specific.  That is, 4.7 is interpreted as 4.7.0.0.0.0... .  This function assumes that 4.7 would be satisfied by 4.7.3.5, etc."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:13
msgid "Rationale:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:15
msgid "If a user asks for gcc@4.5:4.7, and a package is only compatible with gcc@4.7.3:4.8, then that package should be able to build under the constraints.  Just using overlaps() would not work here."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:19
msgid "Note that we don't need to check whether the end of this range would satisfy the start of the other range, because overlaps() already covers that case."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionRange.satisfies:23
msgid "Note further that overlaps() is a symmetric operation, while satisfies() is not."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionList:1
msgid "Sorted, non-redundant list of Versions and VersionRanges."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionList.from_dict:1
msgid "Parse dict from to_dict."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionList.highest:1
msgid "Get the highest version in the list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionList.intersect:1
msgid "Intersect this spec's list with other."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionList.intersect:3
msgid "Return True if the spec changed as a result; False otherwise"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionList.lowest:1
msgid "Get the lowest version in the list."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionList.satisfies:1
msgid "A VersionList satisfies another if some version in the list would satisfy some version in the other list.  This uses essentially the same algorithm as overlaps() does for VersionList, but it calls satisfies() on member Versions and VersionRanges."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionList.satisfies:7
msgid "If strict is specified, this version list must lie entirely *within* the other in order to satisfy it."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.VersionList.to_dict:1
msgid "Generate human-readable dict for YAML."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/version.py:docstring of spack.version.ver:1
msgid "Parses a Version, VersionRange, or VersionList from a string or list of strings."
msgstr ""

#: ../spack/lib/spack/docs/spack.rst:370
msgid "Module contents"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/__init__.py:docstring of spack.spack_version_info:1
msgid "major, minor, patch version for Spack, in a tuple"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/spack/__init__.py:docstring of spack.spack_version:1
msgid "String containing Spack version joined with .'s"
msgstr ""

