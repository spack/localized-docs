# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2019, Lawrence Livermore National Laboratory.
# This file is distributed under the same license as the Spack package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Spack 0.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-17 09:38+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../spack/lib/spack/docs/llnl.util.tty.rst:2
msgid "llnl.util.tty package"
msgstr ""

#: ../spack/lib/spack/docs/llnl.util.tty.rst:5
msgid "Submodules"
msgstr ""

#: ../spack/lib/spack/docs/llnl.util.tty.rst:8
msgid "llnl.util.tty.colify module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify:1
msgid "Routines for printing columnar output.  See ``colify()`` for more information."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.ColumnConfig:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.ColorStream:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.match_to_ansi:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.Unbuffered:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.keyboard_input:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.log_output:1
#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/__init__.py:docstring of llnl.util.tty.SuppressOutput:1
msgid "Bases: :class:`object`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.colified:1
msgid "Invokes the ``colify()`` function but returns the result as a string instead of writing it to an output string."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.colify:1
msgid "Takes a list of elements as input and finds a good columnization of them, similar to how gnu ls does. This supports both uniform-width and variable-width (tighter) columns."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.colify:5
msgid "If elts is not a list of strings, each element is first conveted using ``str()``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.colify:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.colorize:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/__init__.py:docstring of llnl.util.tty.hline:0
msgid "Keyword Arguments"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.colify:8
msgid "A file object to write to. Default is ``sys.stdout``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.colify:10
msgid "Optionally indent all columns by some number of spaces"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.colify:12
msgid "Spaces between columns. Default is 2"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.colify:14
msgid "Width of the output. Default is 80 if tty not detected"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.colify:16
msgid "Force number of columns. Default is to size to terminal, or single-column if no tty"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.colify:19
msgid "Whether to attempt to write to a tty. Default is to autodetect a tty. Set to False to force single-column output"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.colify:23
msgid "Method to use to fit columns. Options are variable or uniform. Variable-width columns are tighter, uniform columns are all the same width and fit less data on the screen"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.colify_table:1
msgid "Version of ``colify()`` for data expressed in rows, (list of lists)."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.colify_table:3
msgid "Same as regular colify but takes a list of lists, where each sub-list must be the same length, and each is interpreted as a row in a table.  Regular colify displays a sequential list of values in columns."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.config_uniform_cols:1
msgid "Uniform-width column fitting algorithm."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.config_uniform_cols:3
msgid "Determines the longest element in the list, and determines how many columns of that width will fit on screen.  Returns a corresponding column config."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.config_variable_cols:1
msgid "Variable-width column fitting algorithm."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.config_variable_cols:3
msgid "This function determines the most columns that can fit in the screen width.  Unlike uniform fitting, where all columns take the width of the longest element in the list, each column takes the width of its own longest element. This packs elements more efficiently on screen."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/colify.py:docstring of llnl.util.tty.colify.config_variable_cols:9
msgid "If cols is nonzero, force"
msgstr ""

#: ../spack/lib/spack/docs/llnl.util.tty.rst:16
msgid "llnl.util.tty.color module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:1
msgid "This file implements an expression syntax, similar to ``printf``, for adding ANSI colors to text."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:4
msgid "See ``colorize()``, ``cwrite()``, and ``cprint()`` for routines that can generate colored output."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:7
msgid "``colorize`` will take a string and replace all color expressions with ANSI control codes.  If the ``isatty`` keyword arg is set to False, then the color expressions will be converted to null strings, and the returned string will have no color."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:12
msgid "``cwrite`` and ``cprint`` are equivalent to ``write()`` and ``print()`` calls in python, but they colorize their output.  If the ``stream`` argument is not supplied, they write to ``sys.stdout``."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:16
msgid "Here are some example color expressions:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:19
msgid "Expression"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:19
msgid "Meaning"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:21
msgid "@r"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:21
msgid "Turn on red coloring"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:22
msgid "@R"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:22
msgid "Turn on bright red coloring"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:23
msgid "@*{foo}"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:23
msgid "Bold foo, but don't change text color"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:24
msgid "@_{bar}"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:24
msgid "Underline bar, but don't change text color"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:25
msgid "@*b"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:25
msgid "Turn on bold, blue text"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:26
msgid "@_B"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:26
msgid "Turn on bright blue text with an underline"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:27
msgid "@."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:27
msgid "Revert to plain formatting"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:28
msgid "@*g{green}"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:28
#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:29
msgid "Print out 'green' in bold, green text, then reset to plain."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:29
msgid "@*ggreen@."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:32
msgid "The syntax consists of:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:35
msgid "color-expr"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:35
msgid "'@' [style] color-code '{' text '}' | '@.' | '@@'"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:36
msgid "style"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:36
msgid "'*' | '_'"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:37
msgid "color-code"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:37
msgid "[krgybmcwKRGYBMCW]"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:38
msgid "text"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:38
msgid ".*"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:41
msgid "'@' indicates the start of a color expression.  It can be followed by an optional * or _ that indicates whether the font should be bold or underlined.  If * or _ is not provided, the text will be plain.  Then an optional color code is supplied.  This can be [krgybmcw] or [KRGYBMCW], where the letters map to  black(k), red(r), green(g), yellow(y), blue(b), magenta(m), cyan(c), and white(w).  Lowercase letters denote normal ANSI colors and capital letters denote bright ANSI colors."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:49
msgid "Finally, the color expression can be followed by text enclosed in {}.  If braces are present, only the text in braces is colored.  If the braces are NOT present, then just the control codes to enable the color will be output. The console can be reset later to plain text with '@.'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color:54
msgid "To output an @, use '@@'.  To output a } inside braces, use '}}'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.ColorParseError:1
msgid "Bases: :class:`Exception`"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.ColorParseError:1
msgid "Raised when a color format fails to parse."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.cescape:1
msgid "Escapes special characters needed for color codes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.cescape:3
msgid "Replaces the following symbols with their equivalent literal forms:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.cescape:6
msgid "``@``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.cescape:6
msgid "``@@``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.cescape:7
msgid "``}``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.cescape:7
msgid "``}}``"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.cescape:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.colorize:0
msgid "Parameters"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.cescape:10
msgid "the string to escape"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.cescape:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.colorize:0
msgid "Returns"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.cescape:13
msgid "the string with color codes escaped"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.cescape:0
#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.colorize:0
msgid "Return type"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.cextra:1
msgid "Length of extra color characters in a string"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.clen:1
msgid "Return the length of a string, excluding ansi color sequences."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.color_when:1
msgid "Context manager to temporarily use a particular color setting."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.colorize:1
msgid "Replace all color expressions in a string with ANSI control codes."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.colorize:3
msgid "The string to replace"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.colorize:6
msgid "The filtered string"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.colorize:9
msgid "If False, output will be plain text without control codes, for output to non-console devices."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.cprint:1
msgid "Same as cwrite, but writes a trailing newline to the stream."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.cwrite:1
msgid "Replace all color expressions in string with ANSI control codes and write the result to the stream.  If color is False, this will write plain text with no color.  If True, then it will always write colored output.  If not supplied, then it will be set based on stream.isatty()."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.get_color_when:1
msgid "Return whether commands should print color or not."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.match_to_ansi.escape:1
msgid "Returns a TTY escape sequence for a color"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.set_color_when:1
msgid "Set when color should be applied.  Options are:"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.set_color_when:3
msgid "True or 'always': always print color"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.set_color_when:4
msgid "False or 'never': never print color"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/color.py:docstring of llnl.util.tty.color.set_color_when:5
msgid "None or 'auto': only print color if sys.stdout is a tty."
msgstr ""

#: ../spack/lib/spack/docs/llnl.util.tty.rst:24
msgid "llnl.util.tty.log module"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log:1
msgid "Utility classes for logging the output of blocks of code."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.Unbuffered:1
msgid "Wrapper for Python streams that forces them to be unbuffered."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.Unbuffered:3
msgid "This is implemented by forcing a flush after each write."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.keyboard_input:1
msgid "Context manager to disable line editing and echoing."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.keyboard_input:3
msgid "Use this with ``sys.stdin`` for keyboard input, e.g.::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.keyboard_input:9
msgid "This disables canonical input so that keypresses are available on the stream immediately. Typically standard input allows line editing, which means keypresses won't be sent until the user hits return."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.keyboard_input:13
msgid "It also disables echoing, so that keys pressed aren't printed to the terminal.  So, the user can hit, e.g., 'v', and it's read on the other end of the pipe immediately but not printed."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.keyboard_input:17
msgid "When the with block completes, prior TTY settings are restored."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.keyboard_input:19
msgid "Note: this depends on termios support.  If termios isn't available, or if the stream isn't a TTY, this context manager has no effect."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.log_output:1
msgid "Context manager that logs its output to a file."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.log_output:3
msgid "In the simplest case, the usage looks like this::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.log_output:8
msgid "Any output from the with block will be redirected to ``logfile.txt``. If you also want the output to be echoed to ``stdout``, use the ``echo`` parameter::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.log_output:15
msgid "And, if you just want to echo *some* stuff from the parent, use ``force_echo``::"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.log_output:24
msgid "Under the hood, we spawn a daemon and set up a pipe between this process and the daemon.  The daemon writes our output to both the file and to stdout (if echoing).  The parent process can communicate with the daemon to tell it when and when not to echo; this is what force_echo does.  You can also enable/disable echoing by typing 'v'."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.log_output:30
msgid "We try to use OS-level file descriptors to do the redirection, but if stdout or stderr has been set to some Python-level file object, we use Python-level redirection instead.  This allows the redirection to work within test frameworks like nose and pytest."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/log.py:docstring of llnl.util.tty.log.log_output.force_echo:1
msgid "Context manager to force local echo, even if echo is off."
msgstr ""

#: ../spack/lib/spack/docs/llnl.util.tty.rst:33
msgid "Module contents"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/__init__.py:docstring of llnl.util.tty.SuppressOutput:1
msgid "Class for disabling output in a scope using 'with' keyword"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/__init__.py:docstring of llnl.util.tty.get_timestamp:1
msgid "Get a string timestamp"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/__init__.py:docstring of llnl.util.tty.hline:1
msgid "Draw a labeled horizontal line."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/__init__.py:docstring of llnl.util.tty.hline:3
msgid "Char to draw the line with.  Default '-'"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/__init__.py:docstring of llnl.util.tty.hline:5
msgid "Maximum width of the line.  Default is 64 chars."
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/__init__.py:docstring of llnl.util.tty.process_stacktrace:1
msgid "Gives file and line frame 'countback' frames from the bottom"
msgstr ""

#: ../spack/lib/spack/docs/_spack_root/lib/spack/llnl/util/tty/__init__.py:docstring of llnl.util.tty.terminal_size:1
msgid "Gets the dimensions of the console: (rows, cols)."
msgstr ""

